// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to libgstreamer
class LibGStreamer {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGStreamer(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGStreamer.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('__memcmpeq');
  late final ___memcmpeq = ___memcmpeqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchrnul(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchrnul(
      __s,
      __c,
    );
  }

  late final _strchrnulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchrnul');
  late final _strchrnul = _strchrnulPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strcasestr(
      __haystack,
      __needle,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __haystack,
    int __haystacklen,
    ffi.Pointer<ffi.Void> __needle,
    int __needlelen,
  ) {
    return _memmem(
      __haystack,
      __haystacklen,
      __needle,
      __needlelen,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> __mempcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return ___mempcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___mempcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('__mempcpy');
  late final ___mempcpy = ___mempcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> mempcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _mempcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _mempcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('mempcpy');
  late final _mempcpy = _mempcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strlcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strlcat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GArray> g_array_new(
    int zero_terminated,
    int clear_,
    int element_size,
  ) {
    return _g_array_new(
      zero_terminated,
      clear_,
      element_size,
    );
  }

  late final _g_array_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              gboolean, gboolean, guint)>>('g_array_new');
  late final _g_array_new =
      _g_array_newPtr.asFunction<ffi.Pointer<GArray> Function(int, int, int)>();

  ffi.Pointer<GArray> g_array_new_take(
    ffi.Pointer data,
    int len,
    int clear,
    int element_size,
  ) {
    return _g_array_new_take(
      data,
      len,
      clear,
      element_size,
    );
  }

  late final _g_array_new_takePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer, gsize, gboolean, gsize)>>('g_array_new_take');
  late final _g_array_new_take = _g_array_new_takePtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer, int, int, int)>();

  ffi.Pointer<GArray> g_array_new_take_zero_terminated(
    ffi.Pointer data,
    int clear,
    int element_size,
  ) {
    return _g_array_new_take_zero_terminated(
      data,
      clear,
      element_size,
    );
  }

  late final _g_array_new_take_zero_terminatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer, gboolean,
              gsize)>>('g_array_new_take_zero_terminated');
  late final _g_array_new_take_zero_terminated =
      _g_array_new_take_zero_terminatedPtr
          .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer, int, int)>();

  ffi.Pointer g_array_steal(
    ffi.Pointer<GArray> array,
    ffi.Pointer<gsize> len,
  ) {
    return _g_array_steal(
      array,
      len,
    );
  }

  late final _g_array_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GArray>, ffi.Pointer<gsize>)>>('g_array_steal');
  late final _g_array_steal = _g_array_stealPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GArray>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GArray> g_array_sized_new(
    int zero_terminated,
    int clear_,
    int element_size,
    int reserved_size,
  ) {
    return _g_array_sized_new(
      zero_terminated,
      clear_,
      element_size,
      reserved_size,
    );
  }

  late final _g_array_sized_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              gboolean, gboolean, guint, guint)>>('g_array_sized_new');
  late final _g_array_sized_new = _g_array_sized_newPtr
      .asFunction<ffi.Pointer<GArray> Function(int, int, int, int)>();

  ffi.Pointer<GArray> g_array_copy(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_copy(
      array,
    );
  }

  late final _g_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>>('g_array_copy');
  late final _g_array_copy = _g_array_copyPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>();

  ffi.Pointer<ffi.Char> g_array_free(
    ffi.Pointer<GArray> array,
    int free_segment,
  ) {
    return _g_array_free(
      array,
      free_segment,
    );
  }

  late final _g_array_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GArray>, gboolean)>>('g_array_free');
  late final _g_array_free = _g_array_freePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_ref(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_ref(
      array,
    );
  }

  late final _g_array_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>>('g_array_ref');
  late final _g_array_ref = _g_array_refPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>)>();

  void g_array_unref(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_unref(
      array,
    );
  }

  late final _g_array_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GArray>)>>(
          'g_array_unref');
  late final _g_array_unref =
      _g_array_unrefPtr.asFunction<void Function(ffi.Pointer<GArray>)>();

  int g_array_get_element_size(
    ffi.Pointer<GArray> array,
  ) {
    return _g_array_get_element_size(
      array,
    );
  }

  late final _g_array_get_element_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GArray>)>>(
          'g_array_get_element_size');
  late final _g_array_get_element_size = _g_array_get_element_sizePtr
      .asFunction<int Function(ffi.Pointer<GArray>)>();

  ffi.Pointer<GArray> g_array_append_vals(
    ffi.Pointer<GArray> array,
    gconstpointer data,
    int len,
  ) {
    return _g_array_append_vals(
      array,
      data,
      len,
    );
  }

  late final _g_array_append_valsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer,
              guint)>>('g_array_append_vals');
  late final _g_array_append_vals = _g_array_append_valsPtr.asFunction<
      ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer, int)>();

  ffi.Pointer<GArray> g_array_prepend_vals(
    ffi.Pointer<GArray> array,
    gconstpointer data,
    int len,
  ) {
    return _g_array_prepend_vals(
      array,
      data,
      len,
    );
  }

  late final _g_array_prepend_valsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer,
              guint)>>('g_array_prepend_vals');
  late final _g_array_prepend_vals = _g_array_prepend_valsPtr.asFunction<
      ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, gconstpointer, int)>();

  ffi.Pointer<GArray> g_array_insert_vals(
    ffi.Pointer<GArray> array,
    int index_,
    gconstpointer data,
    int len,
  ) {
    return _g_array_insert_vals(
      array,
      index_,
      data,
      len,
    );
  }

  late final _g_array_insert_valsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, guint,
              gconstpointer, guint)>>('g_array_insert_vals');
  late final _g_array_insert_vals = _g_array_insert_valsPtr.asFunction<
      ffi.Pointer<GArray> Function(
          ffi.Pointer<GArray>, int, gconstpointer, int)>();

  ffi.Pointer<GArray> g_array_set_size(
    ffi.Pointer<GArray> array,
    int length,
  ) {
    return _g_array_set_size(
      array,
      length,
    );
  }

  late final _g_array_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint)>>('g_array_set_size');
  late final _g_array_set_size = _g_array_set_sizePtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_remove_index(
    ffi.Pointer<GArray> array,
    int index_,
  ) {
    return _g_array_remove_index(
      array,
      index_,
    );
  }

  late final _g_array_remove_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint)>>('g_array_remove_index');
  late final _g_array_remove_index = _g_array_remove_indexPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_remove_index_fast(
    ffi.Pointer<GArray> array,
    int index_,
  ) {
    return _g_array_remove_index_fast(
      array,
      index_,
    );
  }

  late final _g_array_remove_index_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint)>>('g_array_remove_index_fast');
  late final _g_array_remove_index_fast = _g_array_remove_index_fastPtr
      .asFunction<ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int)>();

  ffi.Pointer<GArray> g_array_remove_range(
    ffi.Pointer<GArray> array,
    int index_,
    int length,
  ) {
    return _g_array_remove_range(
      array,
      index_,
      length,
    );
  }

  late final _g_array_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GArray> Function(
              ffi.Pointer<GArray>, guint, guint)>>('g_array_remove_range');
  late final _g_array_remove_range = _g_array_remove_rangePtr.asFunction<
      ffi.Pointer<GArray> Function(ffi.Pointer<GArray>, int, int)>();

  void g_array_sort(
    ffi.Pointer<GArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_array_sort(
      array,
      compare_func,
    );
  }

  late final _g_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GArray>, GCompareFunc)>>('g_array_sort');
  late final _g_array_sort = _g_array_sortPtr
      .asFunction<void Function(ffi.Pointer<GArray>, GCompareFunc)>();

  void g_array_sort_with_data(
    ffi.Pointer<GArray> array,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_array_sort_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GArray>, GCompareDataFunc,
              ffi.Pointer)>>('g_array_sort_with_data');
  late final _g_array_sort_with_data = _g_array_sort_with_dataPtr.asFunction<
      void Function(ffi.Pointer<GArray>, GCompareDataFunc, ffi.Pointer)>();

  int g_array_binary_search(
    ffi.Pointer<GArray> array,
    gconstpointer target,
    GCompareFunc compare_func,
    ffi.Pointer<guint> out_match_index,
  ) {
    return _g_array_binary_search(
      array,
      target,
      compare_func,
      out_match_index,
    );
  }

  late final _g_array_binary_searchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GArray>, gconstpointer, GCompareFunc,
              ffi.Pointer<guint>)>>('g_array_binary_search');
  late final _g_array_binary_search = _g_array_binary_searchPtr.asFunction<
      int Function(ffi.Pointer<GArray>, gconstpointer, GCompareFunc,
          ffi.Pointer<guint>)>();

  void g_array_set_clear_func(
    ffi.Pointer<GArray> array,
    GDestroyNotify clear_func,
  ) {
    return _g_array_set_clear_func(
      array,
      clear_func,
    );
  }

  late final _g_array_set_clear_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GArray>, GDestroyNotify)>>('g_array_set_clear_func');
  late final _g_array_set_clear_func = _g_array_set_clear_funcPtr
      .asFunction<void Function(ffi.Pointer<GArray>, GDestroyNotify)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new() {
    return _g_ptr_array_new();
  }

  late final _g_ptr_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPtrArray> Function()>>(
          'g_ptr_array_new');
  late final _g_ptr_array_new =
      _g_ptr_array_newPtr.asFunction<ffi.Pointer<GPtrArray> Function()>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_with_free_func(
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_with_free_func(
      element_free_func,
    );
  }

  late final _g_ptr_array_new_with_free_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GPtrArray> Function(GDestroyNotify)>>(
      'g_ptr_array_new_with_free_func');
  late final _g_ptr_array_new_with_free_func =
      _g_ptr_array_new_with_free_funcPtr
          .asFunction<ffi.Pointer<GPtrArray> Function(GDestroyNotify)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_take(
    ffi.Pointer<ffi.Pointer> data,
    int len,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_take(
      data,
      len,
      element_free_func,
    );
  }

  late final _g_ptr_array_new_takePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<ffi.Pointer>, gsize,
              GDestroyNotify)>>('g_ptr_array_new_take');
  late final _g_ptr_array_new_take = _g_ptr_array_new_takePtr.asFunction<
      ffi.Pointer<GPtrArray> Function(
          ffi.Pointer<ffi.Pointer>, int, GDestroyNotify)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_from_array(
    ffi.Pointer<ffi.Pointer> data,
    int len,
    GCopyFunc copy_func,
    ffi.Pointer copy_func_user_data,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_from_array(
      data,
      len,
      copy_func,
      copy_func_user_data,
      element_free_func,
    );
  }

  late final _g_ptr_array_new_from_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<ffi.Pointer>,
              gsize,
              GCopyFunc,
              ffi.Pointer,
              GDestroyNotify)>>('g_ptr_array_new_from_array');
  late final _g_ptr_array_new_from_array =
      _g_ptr_array_new_from_arrayPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<ffi.Pointer>, int,
              GCopyFunc, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer<ffi.Pointer> g_ptr_array_steal(
    ffi.Pointer<GPtrArray> array,
    ffi.Pointer<gsize> len,
  ) {
    return _g_ptr_array_steal(
      array,
      len,
    );
  }

  late final _g_ptr_array_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer> Function(ffi.Pointer<GPtrArray>,
              ffi.Pointer<gsize>)>>('g_ptr_array_steal');
  late final _g_ptr_array_steal = _g_ptr_array_stealPtr.asFunction<
      ffi.Pointer<ffi.Pointer> Function(
          ffi.Pointer<GPtrArray>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GPtrArray> g_ptr_array_copy(
    ffi.Pointer<GPtrArray> array,
    GCopyFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_ptr_array_copy(
      array,
      func,
      user_data,
    );
  }

  late final _g_ptr_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>, GCopyFunc,
              ffi.Pointer)>>('g_ptr_array_copy');
  late final _g_ptr_array_copy = _g_ptr_array_copyPtr.asFunction<
      ffi.Pointer<GPtrArray> Function(
          ffi.Pointer<GPtrArray>, GCopyFunc, ffi.Pointer)>();

  ffi.Pointer<GPtrArray> g_ptr_array_sized_new(
    int reserved_size,
  ) {
    return _g_ptr_array_sized_new(
      reserved_size,
    );
  }

  late final _g_ptr_array_sized_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPtrArray> Function(guint)>>(
          'g_ptr_array_sized_new');
  late final _g_ptr_array_sized_new = _g_ptr_array_sized_newPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(int)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_full(
    int reserved_size,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_full(
      reserved_size,
      element_free_func,
    );
  }

  late final _g_ptr_array_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              guint, GDestroyNotify)>>('g_ptr_array_new_full');
  late final _g_ptr_array_new_full = _g_ptr_array_new_fullPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(int, GDestroyNotify)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_null_terminated(
    int reserved_size,
    GDestroyNotify element_free_func,
    int null_terminated,
  ) {
    return _g_ptr_array_new_null_terminated(
      reserved_size,
      element_free_func,
      null_terminated,
    );
  }

  late final _g_ptr_array_new_null_terminatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(guint, GDestroyNotify,
              gboolean)>>('g_ptr_array_new_null_terminated');
  late final _g_ptr_array_new_null_terminated =
      _g_ptr_array_new_null_terminatedPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(int, GDestroyNotify, int)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_take_null_terminated(
    ffi.Pointer<ffi.Pointer> data,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_take_null_terminated(
      data,
      element_free_func,
    );
  }

  late final _g_ptr_array_new_take_null_terminatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<ffi.Pointer>,
              GDestroyNotify)>>('g_ptr_array_new_take_null_terminated');
  late final _g_ptr_array_new_take_null_terminated =
      _g_ptr_array_new_take_null_terminatedPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<ffi.Pointer>, GDestroyNotify)>();

  ffi.Pointer<GPtrArray> g_ptr_array_new_from_null_terminated_array(
    ffi.Pointer<ffi.Pointer> data,
    GCopyFunc copy_func,
    ffi.Pointer copy_func_user_data,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_new_from_null_terminated_array(
      data,
      copy_func,
      copy_func_user_data,
      element_free_func,
    );
  }

  late final _g_ptr_array_new_from_null_terminated_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<ffi.Pointer>,
              GCopyFunc,
              ffi.Pointer,
              GDestroyNotify)>>('g_ptr_array_new_from_null_terminated_array');
  late final _g_ptr_array_new_from_null_terminated_array =
      _g_ptr_array_new_from_null_terminated_arrayPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<ffi.Pointer>, GCopyFunc,
              ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer<ffi.Pointer> g_ptr_array_free(
    ffi.Pointer<GPtrArray> array,
    int free_seg,
  ) {
    return _g_ptr_array_free(
      array,
      free_seg,
    );
  }

  late final _g_ptr_array_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer> Function(
              ffi.Pointer<GPtrArray>, gboolean)>>('g_ptr_array_free');
  late final _g_ptr_array_free = _g_ptr_array_freePtr.asFunction<
      ffi.Pointer<ffi.Pointer> Function(ffi.Pointer<GPtrArray>, int)>();

  ffi.Pointer<GPtrArray> g_ptr_array_ref(
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_ref(
      array,
    );
  }

  late final _g_ptr_array_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<GPtrArray>)>>('g_ptr_array_ref');
  late final _g_ptr_array_ref = _g_ptr_array_refPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>)>();

  void g_ptr_array_unref(
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_unref(
      array,
    );
  }

  late final _g_ptr_array_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPtrArray>)>>(
          'g_ptr_array_unref');
  late final _g_ptr_array_unref =
      _g_ptr_array_unrefPtr.asFunction<void Function(ffi.Pointer<GPtrArray>)>();

  void g_ptr_array_set_free_func(
    ffi.Pointer<GPtrArray> array,
    GDestroyNotify element_free_func,
  ) {
    return _g_ptr_array_set_free_func(
      array,
      element_free_func,
    );
  }

  late final _g_ptr_array_set_free_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>,
              GDestroyNotify)>>('g_ptr_array_set_free_func');
  late final _g_ptr_array_set_free_func = _g_ptr_array_set_free_funcPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GDestroyNotify)>();

  void g_ptr_array_set_size(
    ffi.Pointer<GPtrArray> array,
    int length,
  ) {
    return _g_ptr_array_set_size(
      array,
      length,
    );
  }

  late final _g_ptr_array_set_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPtrArray>, gint)>>(
      'g_ptr_array_set_size');
  late final _g_ptr_array_set_size = _g_ptr_array_set_sizePtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, int)>();

  ffi.Pointer g_ptr_array_remove_index(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_remove_index(
      array,
      index_,
    );
  }

  late final _g_ptr_array_remove_indexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_remove_index');
  late final _g_ptr_array_remove_index = _g_ptr_array_remove_indexPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, int)>();

  ffi.Pointer g_ptr_array_remove_index_fast(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_remove_index_fast(
      array,
      index_,
    );
  }

  late final _g_ptr_array_remove_index_fastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_remove_index_fast');
  late final _g_ptr_array_remove_index_fast = _g_ptr_array_remove_index_fastPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, int)>();

  ffi.Pointer g_ptr_array_steal_index(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_steal_index(
      array,
      index_,
    );
  }

  late final _g_ptr_array_steal_indexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_steal_index');
  late final _g_ptr_array_steal_index = _g_ptr_array_steal_indexPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, int)>();

  ffi.Pointer g_ptr_array_steal_index_fast(
    ffi.Pointer<GPtrArray> array,
    int index_,
  ) {
    return _g_ptr_array_steal_index_fast(
      array,
      index_,
    );
  }

  late final _g_ptr_array_steal_index_fastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, guint)>>(
      'g_ptr_array_steal_index_fast');
  late final _g_ptr_array_steal_index_fast = _g_ptr_array_steal_index_fastPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GPtrArray>, int)>();

  int g_ptr_array_remove(
    ffi.Pointer<GPtrArray> array,
    ffi.Pointer data,
  ) {
    return _g_ptr_array_remove(
      array,
      data,
    );
  }

  late final _g_ptr_array_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPtrArray>, ffi.Pointer)>>('g_ptr_array_remove');
  late final _g_ptr_array_remove = _g_ptr_array_removePtr
      .asFunction<int Function(ffi.Pointer<GPtrArray>, ffi.Pointer)>();

  int g_ptr_array_remove_fast(
    ffi.Pointer<GPtrArray> array,
    ffi.Pointer data,
  ) {
    return _g_ptr_array_remove_fast(
      array,
      data,
    );
  }

  late final _g_ptr_array_remove_fastPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPtrArray>, ffi.Pointer)>>('g_ptr_array_remove_fast');
  late final _g_ptr_array_remove_fast = _g_ptr_array_remove_fastPtr
      .asFunction<int Function(ffi.Pointer<GPtrArray>, ffi.Pointer)>();

  ffi.Pointer<GPtrArray> g_ptr_array_remove_range(
    ffi.Pointer<GPtrArray> array,
    int index_,
    int length,
  ) {
    return _g_ptr_array_remove_range(
      array,
      index_,
      length,
    );
  }

  late final _g_ptr_array_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>, guint,
              guint)>>('g_ptr_array_remove_range');
  late final _g_ptr_array_remove_range =
      _g_ptr_array_remove_rangePtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GPtrArray>, int, int)>();

  void g_ptr_array_add(
    ffi.Pointer<GPtrArray> array,
    ffi.Pointer data,
  ) {
    return _g_ptr_array_add(
      array,
      data,
    );
  }

  late final _g_ptr_array_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPtrArray>, ffi.Pointer)>>('g_ptr_array_add');
  late final _g_ptr_array_add = _g_ptr_array_addPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, ffi.Pointer)>();

  void g_ptr_array_extend(
    ffi.Pointer<GPtrArray> array_to_extend,
    ffi.Pointer<GPtrArray> array,
    GCopyFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_ptr_array_extend(
      array_to_extend,
      array,
      func,
      user_data,
    );
  }

  late final _g_ptr_array_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, ffi.Pointer<GPtrArray>,
              GCopyFunc, ffi.Pointer)>>('g_ptr_array_extend');
  late final _g_ptr_array_extend = _g_ptr_array_extendPtr.asFunction<
      void Function(ffi.Pointer<GPtrArray>, ffi.Pointer<GPtrArray>, GCopyFunc,
          ffi.Pointer)>();

  void g_ptr_array_extend_and_steal(
    ffi.Pointer<GPtrArray> array_to_extend,
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_extend_and_steal(
      array_to_extend,
      array,
    );
  }

  late final _g_ptr_array_extend_and_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>,
              ffi.Pointer<GPtrArray>)>>('g_ptr_array_extend_and_steal');
  late final _g_ptr_array_extend_and_steal =
      _g_ptr_array_extend_and_stealPtr.asFunction<
          void Function(ffi.Pointer<GPtrArray>, ffi.Pointer<GPtrArray>)>();

  void g_ptr_array_insert(
    ffi.Pointer<GPtrArray> array,
    int index_,
    ffi.Pointer data,
  ) {
    return _g_ptr_array_insert(
      array,
      index_,
      data,
    );
  }

  late final _g_ptr_array_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, gint,
              ffi.Pointer)>>('g_ptr_array_insert');
  late final _g_ptr_array_insert = _g_ptr_array_insertPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, int, ffi.Pointer)>();

  void g_ptr_array_sort(
    ffi.Pointer<GPtrArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_ptr_array_sort(
      array,
      compare_func,
    );
  }

  late final _g_ptr_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPtrArray>, GCompareFunc)>>('g_ptr_array_sort');
  late final _g_ptr_array_sort = _g_ptr_array_sortPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GCompareFunc)>();

  void g_ptr_array_sort_with_data(
    ffi.Pointer<GPtrArray> array,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_ptr_array_sort_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_ptr_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, GCompareDataFunc,
              ffi.Pointer)>>('g_ptr_array_sort_with_data');
  late final _g_ptr_array_sort_with_data =
      _g_ptr_array_sort_with_dataPtr.asFunction<
          void Function(
              ffi.Pointer<GPtrArray>, GCompareDataFunc, ffi.Pointer)>();

  void g_ptr_array_sort_values(
    ffi.Pointer<GPtrArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_ptr_array_sort_values(
      array,
      compare_func,
    );
  }

  late final _g_ptr_array_sort_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>,
              GCompareFunc)>>('g_ptr_array_sort_values');
  late final _g_ptr_array_sort_values = _g_ptr_array_sort_valuesPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GCompareFunc)>();

  void g_ptr_array_sort_values_with_data(
    ffi.Pointer<GPtrArray> array,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_ptr_array_sort_values_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_ptr_array_sort_values_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, GCompareDataFunc,
              ffi.Pointer)>>('g_ptr_array_sort_values_with_data');
  late final _g_ptr_array_sort_values_with_data =
      _g_ptr_array_sort_values_with_dataPtr.asFunction<
          void Function(
              ffi.Pointer<GPtrArray>, GCompareDataFunc, ffi.Pointer)>();

  void g_ptr_array_foreach(
    ffi.Pointer<GPtrArray> array,
    GFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_ptr_array_foreach(
      array,
      func,
      user_data,
    );
  }

  late final _g_ptr_array_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPtrArray>, GFunc,
              ffi.Pointer)>>('g_ptr_array_foreach');
  late final _g_ptr_array_foreach = _g_ptr_array_foreachPtr
      .asFunction<void Function(ffi.Pointer<GPtrArray>, GFunc, ffi.Pointer)>();

  int g_ptr_array_find(
    ffi.Pointer<GPtrArray> haystack,
    gconstpointer needle,
    ffi.Pointer<guint> index_,
  ) {
    return _g_ptr_array_find(
      haystack,
      needle,
      index_,
    );
  }

  late final _g_ptr_array_findPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPtrArray>, gconstpointer,
              ffi.Pointer<guint>)>>('g_ptr_array_find');
  late final _g_ptr_array_find = _g_ptr_array_findPtr.asFunction<
      int Function(
          ffi.Pointer<GPtrArray>, gconstpointer, ffi.Pointer<guint>)>();

  int g_ptr_array_find_with_equal_func(
    ffi.Pointer<GPtrArray> haystack,
    gconstpointer needle,
    GEqualFunc equal_func,
    ffi.Pointer<guint> index_,
  ) {
    return _g_ptr_array_find_with_equal_func(
      haystack,
      needle,
      equal_func,
      index_,
    );
  }

  late final _g_ptr_array_find_with_equal_funcPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPtrArray>, gconstpointer, GEqualFunc,
              ffi.Pointer<guint>)>>('g_ptr_array_find_with_equal_func');
  late final _g_ptr_array_find_with_equal_func =
      _g_ptr_array_find_with_equal_funcPtr.asFunction<
          int Function(ffi.Pointer<GPtrArray>, gconstpointer, GEqualFunc,
              ffi.Pointer<guint>)>();

  int g_ptr_array_is_null_terminated(
    ffi.Pointer<GPtrArray> array,
  ) {
    return _g_ptr_array_is_null_terminated(
      array,
    );
  }

  late final _g_ptr_array_is_null_terminatedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GPtrArray>)>>(
          'g_ptr_array_is_null_terminated');
  late final _g_ptr_array_is_null_terminated =
      _g_ptr_array_is_null_terminatedPtr
          .asFunction<int Function(ffi.Pointer<GPtrArray>)>();

  ffi.Pointer<GByteArray> g_byte_array_new() {
    return _g_byte_array_new();
  }

  late final _g_byte_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GByteArray> Function()>>(
          'g_byte_array_new');
  late final _g_byte_array_new =
      _g_byte_array_newPtr.asFunction<ffi.Pointer<GByteArray> Function()>();

  ffi.Pointer<GByteArray> g_byte_array_new_take(
    ffi.Pointer<guint8> data,
    int len,
  ) {
    return _g_byte_array_new_take(
      data,
      len,
    );
  }

  late final _g_byte_array_new_takePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<guint8>, gsize)>>('g_byte_array_new_take');
  late final _g_byte_array_new_take = _g_byte_array_new_takePtr
      .asFunction<ffi.Pointer<GByteArray> Function(ffi.Pointer<guint8>, int)>();

  ffi.Pointer<guint8> g_byte_array_steal(
    ffi.Pointer<GByteArray> array,
    ffi.Pointer<gsize> len,
  ) {
    return _g_byte_array_steal(
      array,
      len,
    );
  }

  late final _g_byte_array_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(ffi.Pointer<GByteArray>,
              ffi.Pointer<gsize>)>>('g_byte_array_steal');
  late final _g_byte_array_steal = _g_byte_array_stealPtr.asFunction<
      ffi.Pointer<guint8> Function(
          ffi.Pointer<GByteArray>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GByteArray> g_byte_array_sized_new(
    int reserved_size,
  ) {
    return _g_byte_array_sized_new(
      reserved_size,
    );
  }

  late final _g_byte_array_sized_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GByteArray> Function(guint)>>(
          'g_byte_array_sized_new');
  late final _g_byte_array_sized_new = _g_byte_array_sized_newPtr
      .asFunction<ffi.Pointer<GByteArray> Function(int)>();

  ffi.Pointer<guint8> g_byte_array_free(
    ffi.Pointer<GByteArray> array,
    int free_segment,
  ) {
    return _g_byte_array_free(
      array,
      free_segment,
    );
  }

  late final _g_byte_array_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(
              ffi.Pointer<GByteArray>, gboolean)>>('g_byte_array_free');
  late final _g_byte_array_free = _g_byte_array_freePtr
      .asFunction<ffi.Pointer<guint8> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GBytes> g_byte_array_free_to_bytes(
    ffi.Pointer<GByteArray> array,
  ) {
    return _g_byte_array_free_to_bytes(
      array,
    );
  }

  late final _g_byte_array_free_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GByteArray>)>>('g_byte_array_free_to_bytes');
  late final _g_byte_array_free_to_bytes = _g_byte_array_free_to_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GByteArray>)>();

  ffi.Pointer<GByteArray> g_byte_array_ref(
    ffi.Pointer<GByteArray> array,
  ) {
    return _g_byte_array_ref(
      array,
    );
  }

  late final _g_byte_array_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>)>>('g_byte_array_ref');
  late final _g_byte_array_ref = _g_byte_array_refPtr
      .asFunction<ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>)>();

  void g_byte_array_unref(
    ffi.Pointer<GByteArray> array,
  ) {
    return _g_byte_array_unref(
      array,
    );
  }

  late final _g_byte_array_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GByteArray>)>>(
          'g_byte_array_unref');
  late final _g_byte_array_unref = _g_byte_array_unrefPtr
      .asFunction<void Function(ffi.Pointer<GByteArray>)>();

  ffi.Pointer<GByteArray> g_byte_array_append(
    ffi.Pointer<GByteArray> array,
    ffi.Pointer<guint8> data,
    int len,
  ) {
    return _g_byte_array_append(
      array,
      data,
      len,
    );
  }

  late final _g_byte_array_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>,
              ffi.Pointer<guint8>, guint)>>('g_byte_array_append');
  late final _g_byte_array_append = _g_byte_array_appendPtr.asFunction<
      ffi.Pointer<GByteArray> Function(
          ffi.Pointer<GByteArray>, ffi.Pointer<guint8>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_prepend(
    ffi.Pointer<GByteArray> array,
    ffi.Pointer<guint8> data,
    int len,
  ) {
    return _g_byte_array_prepend(
      array,
      data,
      len,
    );
  }

  late final _g_byte_array_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>,
              ffi.Pointer<guint8>, guint)>>('g_byte_array_prepend');
  late final _g_byte_array_prepend = _g_byte_array_prependPtr.asFunction<
      ffi.Pointer<GByteArray> Function(
          ffi.Pointer<GByteArray>, ffi.Pointer<guint8>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_set_size(
    ffi.Pointer<GByteArray> array,
    int length,
  ) {
    return _g_byte_array_set_size(
      array,
      length,
    );
  }

  late final _g_byte_array_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>, guint)>>('g_byte_array_set_size');
  late final _g_byte_array_set_size = _g_byte_array_set_sizePtr.asFunction<
      ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_remove_index(
    ffi.Pointer<GByteArray> array,
    int index_,
  ) {
    return _g_byte_array_remove_index(
      array,
      index_,
    );
  }

  late final _g_byte_array_remove_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>, guint)>>('g_byte_array_remove_index');
  late final _g_byte_array_remove_index =
      _g_byte_array_remove_indexPtr.asFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_remove_index_fast(
    ffi.Pointer<GByteArray> array,
    int index_,
  ) {
    return _g_byte_array_remove_index_fast(
      array,
      index_,
    );
  }

  late final _g_byte_array_remove_index_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>,
              guint)>>('g_byte_array_remove_index_fast');
  late final _g_byte_array_remove_index_fast =
      _g_byte_array_remove_index_fastPtr.asFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, int)>();

  ffi.Pointer<GByteArray> g_byte_array_remove_range(
    ffi.Pointer<GByteArray> array,
    int index_,
    int length,
  ) {
    return _g_byte_array_remove_range(
      array,
      index_,
      length,
    );
  }

  late final _g_byte_array_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(ffi.Pointer<GByteArray>, guint,
              guint)>>('g_byte_array_remove_range');
  late final _g_byte_array_remove_range =
      _g_byte_array_remove_rangePtr.asFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GByteArray>, int, int)>();

  void g_byte_array_sort(
    ffi.Pointer<GByteArray> array,
    GCompareFunc compare_func,
  ) {
    return _g_byte_array_sort(
      array,
      compare_func,
    );
  }

  late final _g_byte_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GByteArray>, GCompareFunc)>>('g_byte_array_sort');
  late final _g_byte_array_sort = _g_byte_array_sortPtr
      .asFunction<void Function(ffi.Pointer<GByteArray>, GCompareFunc)>();

  void g_byte_array_sort_with_data(
    ffi.Pointer<GByteArray> array,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_byte_array_sort_with_data(
      array,
      compare_func,
      user_data,
    );
  }

  late final _g_byte_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GByteArray>, GCompareDataFunc,
              ffi.Pointer)>>('g_byte_array_sort_with_data');
  late final _g_byte_array_sort_with_data =
      _g_byte_array_sort_with_dataPtr.asFunction<
          void Function(
              ffi.Pointer<GByteArray>, GCompareDataFunc, ffi.Pointer)>();

  int g_atomic_int_get(
    ffi.Pointer<gint> atomic,
  ) {
    return _g_atomic_int_get(
      atomic,
    );
  }

  late final _g_atomic_int_getPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>)>>(
          'g_atomic_int_get');
  late final _g_atomic_int_get =
      _g_atomic_int_getPtr.asFunction<int Function(ffi.Pointer<gint>)>();

  void g_atomic_int_set(
    ffi.Pointer<gint> atomic,
    int newval,
  ) {
    return _g_atomic_int_set(
      atomic,
      newval,
    );
  }

  late final _g_atomic_int_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_set');
  late final _g_atomic_int_set =
      _g_atomic_int_setPtr.asFunction<void Function(ffi.Pointer<gint>, int)>();

  void g_atomic_int_inc(
    ffi.Pointer<gint> atomic,
  ) {
    return _g_atomic_int_inc(
      atomic,
    );
  }

  late final _g_atomic_int_incPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>)>>(
          'g_atomic_int_inc');
  late final _g_atomic_int_inc =
      _g_atomic_int_incPtr.asFunction<void Function(ffi.Pointer<gint>)>();

  int g_atomic_int_dec_and_test(
    ffi.Pointer<gint> atomic,
  ) {
    return _g_atomic_int_dec_and_test(
      atomic,
    );
  }

  late final _g_atomic_int_dec_and_testPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gint>)>>(
          'g_atomic_int_dec_and_test');
  late final _g_atomic_int_dec_and_test = _g_atomic_int_dec_and_testPtr
      .asFunction<int Function(ffi.Pointer<gint>)>();

  int g_atomic_int_compare_and_exchange(
    ffi.Pointer<gint> atomic,
    int oldval,
    int newval,
  ) {
    return _g_atomic_int_compare_and_exchange(
      atomic,
      oldval,
      newval,
    );
  }

  late final _g_atomic_int_compare_and_exchangePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<gint>, gint, gint)>>(
      'g_atomic_int_compare_and_exchange');
  late final _g_atomic_int_compare_and_exchange =
      _g_atomic_int_compare_and_exchangePtr
          .asFunction<int Function(ffi.Pointer<gint>, int, int)>();

  int g_atomic_int_compare_and_exchange_full(
    ffi.Pointer<gint> atomic,
    int oldval,
    int newval,
    ffi.Pointer<gint> preval,
  ) {
    return _g_atomic_int_compare_and_exchange_full(
      atomic,
      oldval,
      newval,
      preval,
    );
  }

  late final _g_atomic_int_compare_and_exchange_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gint>, gint, gint,
              ffi.Pointer<gint>)>>('g_atomic_int_compare_and_exchange_full');
  late final _g_atomic_int_compare_and_exchange_full =
      _g_atomic_int_compare_and_exchange_fullPtr.asFunction<
          int Function(ffi.Pointer<gint>, int, int, ffi.Pointer<gint>)>();

  int g_atomic_int_exchange(
    ffi.Pointer<gint> atomic,
    int newval,
  ) {
    return _g_atomic_int_exchange(
      atomic,
      newval,
    );
  }

  late final _g_atomic_int_exchangePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_exchange');
  late final _g_atomic_int_exchange = _g_atomic_int_exchangePtr
      .asFunction<int Function(ffi.Pointer<gint>, int)>();

  int g_atomic_int_add(
    ffi.Pointer<gint> atomic,
    int val,
  ) {
    return _g_atomic_int_add(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_addPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_add');
  late final _g_atomic_int_add =
      _g_atomic_int_addPtr.asFunction<int Function(ffi.Pointer<gint>, int)>();

  int g_atomic_int_and(
    ffi.Pointer<guint> atomic,
    int val,
  ) {
    return _g_atomic_int_and(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_andPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<guint>, guint)>>(
          'g_atomic_int_and');
  late final _g_atomic_int_and =
      _g_atomic_int_andPtr.asFunction<int Function(ffi.Pointer<guint>, int)>();

  int g_atomic_int_or(
    ffi.Pointer<guint> atomic,
    int val,
  ) {
    return _g_atomic_int_or(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_orPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<guint>, guint)>>(
          'g_atomic_int_or');
  late final _g_atomic_int_or =
      _g_atomic_int_orPtr.asFunction<int Function(ffi.Pointer<guint>, int)>();

  int g_atomic_int_xor(
    ffi.Pointer<guint> atomic,
    int val,
  ) {
    return _g_atomic_int_xor(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_xorPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<guint>, guint)>>(
          'g_atomic_int_xor');
  late final _g_atomic_int_xor =
      _g_atomic_int_xorPtr.asFunction<int Function(ffi.Pointer<guint>, int)>();

  int g_atomic_pointer_compare_and_exchange_full(
    ffi.Pointer<ffi.Void> atomic,
    ffi.Pointer oldval,
    ffi.Pointer newval,
    ffi.Pointer<ffi.Void> preval,
  ) {
    return _g_atomic_pointer_compare_and_exchange_full(
      atomic,
      oldval,
      newval,
      preval,
    );
  }

  late final _g_atomic_pointer_compare_and_exchange_fullPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer, ffi.Pointer,
                  ffi.Pointer<ffi.Void>)>>(
      'g_atomic_pointer_compare_and_exchange_full');
  late final _g_atomic_pointer_compare_and_exchange_full =
      _g_atomic_pointer_compare_and_exchange_fullPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer, ffi.Pointer,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer g_atomic_pointer_exchange(
    ffi.Pointer<ffi.Void> atomic,
    ffi.Pointer newval,
  ) {
    return _g_atomic_pointer_exchange(
      atomic,
      newval,
    );
  }

  late final _g_atomic_pointer_exchangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer)>>('g_atomic_pointer_exchange');
  late final _g_atomic_pointer_exchange = _g_atomic_pointer_exchangePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<ffi.Void>, ffi.Pointer)>();

  int g_atomic_int_exchange_and_add(
    ffi.Pointer<gint> atomic,
    int val,
  ) {
    return _g_atomic_int_exchange_and_add(
      atomic,
      val,
    );
  }

  late final _g_atomic_int_exchange_and_addPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<gint>, gint)>>(
          'g_atomic_int_exchange_and_add');
  late final _g_atomic_int_exchange_and_add = _g_atomic_int_exchange_and_addPtr
      .asFunction<int Function(ffi.Pointer<gint>, int)>();

  int g_quark_try_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_quark_try_string(
      string,
    );
  }

  late final _g_quark_try_stringPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<ffi.Char>)>>(
          'g_quark_try_string');
  late final _g_quark_try_string =
      _g_quark_try_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_quark_from_static_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_quark_from_static_string(
      string,
    );
  }

  late final _g_quark_from_static_stringPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<ffi.Char>)>>(
          'g_quark_from_static_string');
  late final _g_quark_from_static_string = _g_quark_from_static_stringPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_quark_from_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_quark_from_string(
      string,
    );
  }

  late final _g_quark_from_stringPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<ffi.Char>)>>(
          'g_quark_from_string');
  late final _g_quark_from_string =
      _g_quark_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_quark_to_string(
    int quark,
  ) {
    return _g_quark_to_string(
      quark,
    );
  }

  late final _g_quark_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(GQuark)>>(
          'g_quark_to_string');
  late final _g_quark_to_string =
      _g_quark_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> g_intern_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_intern_string(
      string,
    );
  }

  late final _g_intern_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_intern_string');
  late final _g_intern_string = _g_intern_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_intern_static_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_intern_static_string(
      string,
    );
  }

  late final _g_intern_static_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_intern_static_string');
  late final _g_intern_static_string = _g_intern_static_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_error_domain_register_static(
    ffi.Pointer<ffi.Char> error_type_name,
    int error_type_private_size,
    GErrorInitFunc error_type_init,
    GErrorCopyFunc error_type_copy,
    GErrorClearFunc error_type_clear,
  ) {
    return _g_error_domain_register_static(
      error_type_name,
      error_type_private_size,
      error_type_init,
      error_type_copy,
      error_type_clear,
    );
  }

  late final _g_error_domain_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GQuark Function(
              ffi.Pointer<ffi.Char>,
              gsize,
              GErrorInitFunc,
              GErrorCopyFunc,
              GErrorClearFunc)>>('g_error_domain_register_static');
  late final _g_error_domain_register_static =
      _g_error_domain_register_staticPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, GErrorInitFunc,
              GErrorCopyFunc, GErrorClearFunc)>();

  int g_error_domain_register(
    ffi.Pointer<ffi.Char> error_type_name,
    int error_type_private_size,
    GErrorInitFunc error_type_init,
    GErrorCopyFunc error_type_copy,
    GErrorClearFunc error_type_clear,
  ) {
    return _g_error_domain_register(
      error_type_name,
      error_type_private_size,
      error_type_init,
      error_type_copy,
      error_type_clear,
    );
  }

  late final _g_error_domain_registerPtr = _lookup<
      ffi.NativeFunction<
          GQuark Function(ffi.Pointer<ffi.Char>, gsize, GErrorInitFunc,
              GErrorCopyFunc, GErrorClearFunc)>>('g_error_domain_register');
  late final _g_error_domain_register = _g_error_domain_registerPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, GErrorInitFunc, GErrorCopyFunc,
          GErrorClearFunc)>();

  ffi.Pointer<GError> g_error_new(
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_error_new(
      domain,
      code,
      format,
    );
  }

  late final _g_error_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(
              GQuark, gint, ffi.Pointer<ffi.Char>)>>('g_error_new');
  late final _g_error_new = _g_error_newPtr.asFunction<
      ffi.Pointer<GError> Function(int, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GError> g_error_new_literal(
    int domain,
    int code,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _g_error_new_literal(
      domain,
      code,
      message,
    );
  }

  late final _g_error_new_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(
              GQuark, gint, ffi.Pointer<ffi.Char>)>>('g_error_new_literal');
  late final _g_error_new_literal = _g_error_new_literalPtr.asFunction<
      ffi.Pointer<GError> Function(int, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GError> g_error_new_valist(
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_error_new_valist(
      domain,
      code,
      format,
      args,
    );
  }

  late final _g_error_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(GQuark, gint, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_error_new_valist');
  late final _g_error_new_valist = _g_error_new_valistPtr.asFunction<
      ffi.Pointer<GError> Function(
          int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void g_error_free(
    ffi.Pointer<GError> error,
  ) {
    return _g_error_free(
      error,
    );
  }

  late final _g_error_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GError>)>>(
          'g_error_free');
  late final _g_error_free =
      _g_error_freePtr.asFunction<void Function(ffi.Pointer<GError>)>();

  ffi.Pointer<GError> g_error_copy(
    ffi.Pointer<GError> error,
  ) {
    return _g_error_copy(
      error,
    );
  }

  late final _g_error_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GError> Function(ffi.Pointer<GError>)>>('g_error_copy');
  late final _g_error_copy = _g_error_copyPtr
      .asFunction<ffi.Pointer<GError> Function(ffi.Pointer<GError>)>();

  int g_error_matches(
    ffi.Pointer<GError> error,
    int domain,
    int code,
  ) {
    return _g_error_matches(
      error,
      domain,
      code,
    );
  }

  late final _g_error_matchesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GError>, GQuark, gint)>>('g_error_matches');
  late final _g_error_matches = _g_error_matchesPtr
      .asFunction<int Function(ffi.Pointer<GError>, int, int)>();

  void g_set_error(
    ffi.Pointer<ffi.Pointer<GError>> err,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_set_error(
      err,
      domain,
      code,
      format,
    );
  }

  late final _g_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>, GQuark, gint,
              ffi.Pointer<ffi.Char>)>>('g_set_error');
  late final _g_set_error = _g_set_errorPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<GError>>, int, int, ffi.Pointer<ffi.Char>)>();

  void g_set_error_literal(
    ffi.Pointer<ffi.Pointer<GError>> err,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _g_set_error_literal(
      err,
      domain,
      code,
      message,
    );
  }

  late final _g_set_error_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>, GQuark, gint,
              ffi.Pointer<ffi.Char>)>>('g_set_error_literal');
  late final _g_set_error_literal = _g_set_error_literalPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<GError>>, int, int, ffi.Pointer<ffi.Char>)>();

  void g_propagate_error(
    ffi.Pointer<ffi.Pointer<GError>> dest,
    ffi.Pointer<GError> src,
  ) {
    return _g_propagate_error(
      dest,
      src,
    );
  }

  late final _g_propagate_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<GError>)>>('g_propagate_error');
  late final _g_propagate_error = _g_propagate_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<GError>)>();

  void g_clear_error(
    ffi.Pointer<ffi.Pointer<GError>> err,
  ) {
    return _g_clear_error(
      err,
    );
  }

  late final _g_clear_errorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_clear_error');
  late final _g_clear_error = _g_clear_errorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_prefix_error(
    ffi.Pointer<ffi.Pointer<GError>> err,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_prefix_error(
      err,
      format,
    );
  }

  late final _g_prefix_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<ffi.Char>)>>('g_prefix_error');
  late final _g_prefix_error = _g_prefix_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<ffi.Char>)>();

  void g_prefix_error_literal(
    ffi.Pointer<ffi.Pointer<GError>> err,
    ffi.Pointer<ffi.Char> prefix,
  ) {
    return _g_prefix_error_literal(
      err,
      prefix,
    );
  }

  late final _g_prefix_error_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<ffi.Char>)>>('g_prefix_error_literal');
  late final _g_prefix_error_literal = _g_prefix_error_literalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<ffi.Char>)>();

  void g_propagate_prefixed_error(
    ffi.Pointer<ffi.Pointer<GError>> dest,
    ffi.Pointer<GError> src,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_propagate_prefixed_error(
      dest,
      src,
      format,
    );
  }

  late final _g_propagate_prefixed_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>>('g_propagate_prefixed_error');
  late final _g_propagate_prefixed_error =
      _g_propagate_prefixed_errorPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<GError>>, ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_user_name() {
    return _g_get_user_name();
  }

  late final _g_get_user_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_name');
  late final _g_get_user_name =
      _g_get_user_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_real_name() {
    return _g_get_real_name();
  }

  late final _g_get_real_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_real_name');
  late final _g_get_real_name =
      _g_get_real_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_home_dir() {
    return _g_get_home_dir();
  }

  late final _g_get_home_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_home_dir');
  late final _g_get_home_dir =
      _g_get_home_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_tmp_dir() {
    return _g_get_tmp_dir();
  }

  late final _g_get_tmp_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_tmp_dir');
  late final _g_get_tmp_dir =
      _g_get_tmp_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_host_name() {
    return _g_get_host_name();
  }

  late final _g_get_host_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_host_name');
  late final _g_get_host_name =
      _g_get_host_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_prgname() {
    return _g_get_prgname();
  }

  late final _g_get_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_prgname');
  late final _g_get_prgname =
      _g_get_prgnamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_set_prgname(
    ffi.Pointer<ffi.Char> prgname,
  ) {
    return _g_set_prgname(
      prgname,
    );
  }

  late final _g_set_prgnamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_set_prgname');
  late final _g_set_prgname =
      _g_set_prgnamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_application_name() {
    return _g_get_application_name();
  }

  late final _g_get_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_application_name');
  late final _g_get_application_name =
      _g_get_application_namePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_set_application_name(
    ffi.Pointer<ffi.Char> application_name,
  ) {
    return _g_set_application_name(
      application_name,
    );
  }

  late final _g_set_application_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_set_application_name');
  late final _g_set_application_name = _g_set_application_namePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_os_info(
    ffi.Pointer<ffi.Char> key_name,
  ) {
    return _g_get_os_info(
      key_name,
    );
  }

  late final _g_get_os_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_get_os_info');
  late final _g_get_os_info = _g_get_os_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void g_reload_user_special_dirs_cache() {
    return _g_reload_user_special_dirs_cache();
  }

  late final _g_reload_user_special_dirs_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_reload_user_special_dirs_cache');
  late final _g_reload_user_special_dirs_cache =
      _g_reload_user_special_dirs_cachePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> g_get_user_data_dir() {
    return _g_get_user_data_dir();
  }

  late final _g_get_user_data_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_data_dir');
  late final _g_get_user_data_dir =
      _g_get_user_data_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_config_dir() {
    return _g_get_user_config_dir();
  }

  late final _g_get_user_config_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_config_dir');
  late final _g_get_user_config_dir =
      _g_get_user_config_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_cache_dir() {
    return _g_get_user_cache_dir();
  }

  late final _g_get_user_cache_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_cache_dir');
  late final _g_get_user_cache_dir =
      _g_get_user_cache_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_state_dir() {
    return _g_get_user_state_dir();
  }

  late final _g_get_user_state_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_state_dir');
  late final _g_get_user_state_dir =
      _g_get_user_state_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_system_data_dirs() {
    return _g_get_system_data_dirs();
  }

  late final _g_get_system_data_dirsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_system_data_dirs');
  late final _g_get_system_data_dirs = _g_get_system_data_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_system_config_dirs() {
    return _g_get_system_config_dirs();
  }

  late final _g_get_system_config_dirsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_system_config_dirs');
  late final _g_get_system_config_dirs = _g_get_system_config_dirsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_runtime_dir() {
    return _g_get_user_runtime_dir();
  }

  late final _g_get_user_runtime_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_user_runtime_dir');
  late final _g_get_user_runtime_dir =
      _g_get_user_runtime_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_get_user_special_dir(
    int directory,
  ) {
    return _g_get_user_special_dir(
      directory,
    );
  }

  late final _g_get_user_special_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'g_get_user_special_dir');
  late final _g_get_user_special_dir = _g_get_user_special_dirPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int g_parse_debug_string(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<GDebugKey> keys,
    int nkeys,
  ) {
    return _g_parse_debug_string(
      string,
      keys,
      nkeys,
    );
  }

  late final _g_parse_debug_stringPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GDebugKey>,
              guint)>>('g_parse_debug_string');
  late final _g_parse_debug_string = _g_parse_debug_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GDebugKey>, int)>();

  int g_snprintf(
    ffi.Pointer<ffi.Char> string,
    int n,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_snprintf(
      string,
      n,
      format,
    );
  }

  late final _g_snprintfPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<ffi.Char>, gulong,
              ffi.Pointer<ffi.Char>)>>('g_snprintf');
  late final _g_snprintf = _g_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int g_vsnprintf(
    ffi.Pointer<ffi.Char> string,
    int n,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_vsnprintf(
      string,
      n,
      format,
      args,
    );
  }

  late final _g_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<ffi.Char>, gulong, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_vsnprintf');
  late final _g_vsnprintf = _g_vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void g_nullify_pointer(
    ffi.Pointer<ffi.Pointer> nullify_location,
  ) {
    return _g_nullify_pointer(
      nullify_location,
    );
  }

  late final _g_nullify_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer>)>>(
          'g_nullify_pointer');
  late final _g_nullify_pointer = _g_nullify_pointerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer>)>();

  ffi.Pointer<ffi.Char> g_format_size_full(
    int size,
    int flags,
  ) {
    return _g_format_size_full(
      size,
      flags,
    );
  }

  late final _g_format_size_fullPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(guint64, ffi.Int32)>>(
      'g_format_size_full');
  late final _g_format_size_full = _g_format_size_fullPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> g_format_size(
    int size,
  ) {
    return _g_format_size(
      size,
    );
  }

  late final _g_format_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(guint64)>>(
          'g_format_size');
  late final _g_format_size =
      _g_format_sizePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> g_format_size_for_display(
    int size,
  ) {
    return _g_format_size_for_display(
      size,
    );
  }

  late final _g_format_size_for_displayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(goffset)>>(
          'g_format_size_for_display');
  late final _g_format_size_for_display = _g_format_size_for_displayPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void g_atexit(
    GVoidFunc func,
  ) {
    return _g_atexit(
      func,
    );
  }

  late final _g_atexitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GVoidFunc)>>('g_atexit');
  late final _g_atexit = _g_atexitPtr.asFunction<void Function(GVoidFunc)>();

  ffi.Pointer<ffi.Char> g_find_program_in_path(
    ffi.Pointer<ffi.Char> program,
  ) {
    return _g_find_program_in_path(
      program,
    );
  }

  late final _g_find_program_in_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_find_program_in_path');
  late final _g_find_program_in_path = _g_find_program_in_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_bit_nth_lsf(
    int mask,
    int nth_bit,
  ) {
    return _g_bit_nth_lsf(
      mask,
      nth_bit,
    );
  }

  late final _g_bit_nth_lsfPtr =
      _lookup<ffi.NativeFunction<gint Function(gulong, gint)>>('g_bit_nth_lsf');
  late final _g_bit_nth_lsf =
      _g_bit_nth_lsfPtr.asFunction<int Function(int, int)>();

  int g_bit_nth_msf(
    int mask,
    int nth_bit,
  ) {
    return _g_bit_nth_msf(
      mask,
      nth_bit,
    );
  }

  late final _g_bit_nth_msfPtr =
      _lookup<ffi.NativeFunction<gint Function(gulong, gint)>>('g_bit_nth_msf');
  late final _g_bit_nth_msf =
      _g_bit_nth_msfPtr.asFunction<int Function(int, int)>();

  int g_bit_storage(
    int number,
  ) {
    return _g_bit_storage(
      number,
    );
  }

  late final _g_bit_storagePtr =
      _lookup<ffi.NativeFunction<guint Function(gulong)>>('g_bit_storage');
  late final _g_bit_storage = _g_bit_storagePtr.asFunction<int Function(int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf(
      __buf,
      __size,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int g_thread_error_quark() {
    return _g_thread_error_quark();
  }

  late final _g_thread_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_thread_error_quark');
  late final _g_thread_error_quark =
      _g_thread_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GThread> g_thread_ref(
    ffi.Pointer<GThread> thread,
  ) {
    return _g_thread_ref(
      thread,
    );
  }

  late final _g_thread_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(ffi.Pointer<GThread>)>>('g_thread_ref');
  late final _g_thread_ref = _g_thread_refPtr
      .asFunction<ffi.Pointer<GThread> Function(ffi.Pointer<GThread>)>();

  void g_thread_unref(
    ffi.Pointer<GThread> thread,
  ) {
    return _g_thread_unref(
      thread,
    );
  }

  late final _g_thread_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GThread>)>>(
          'g_thread_unref');
  late final _g_thread_unref =
      _g_thread_unrefPtr.asFunction<void Function(ffi.Pointer<GThread>)>();

  ffi.Pointer<GThread> g_thread_new(
    ffi.Pointer<ffi.Char> name,
    GThreadFunc func,
    ffi.Pointer data,
  ) {
    return _g_thread_new(
      name,
      func,
      data,
    );
  }

  late final _g_thread_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(ffi.Pointer<ffi.Char>, GThreadFunc,
              ffi.Pointer)>>('g_thread_new');
  late final _g_thread_new = _g_thread_newPtr.asFunction<
      ffi.Pointer<GThread> Function(
          ffi.Pointer<ffi.Char>, GThreadFunc, ffi.Pointer)>();

  ffi.Pointer<GThread> g_thread_try_new(
    ffi.Pointer<ffi.Char> name,
    GThreadFunc func,
    ffi.Pointer data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_try_new(
      name,
      func,
      data,
      error,
    );
  }

  late final _g_thread_try_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(
              ffi.Pointer<ffi.Char>,
              GThreadFunc,
              ffi.Pointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_try_new');
  late final _g_thread_try_new = _g_thread_try_newPtr.asFunction<
      ffi.Pointer<GThread> Function(ffi.Pointer<ffi.Char>, GThreadFunc,
          ffi.Pointer, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GThread> g_thread_self() {
    return _g_thread_self();
  }

  late final _g_thread_selfPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GThread> Function()>>(
          'g_thread_self');
  late final _g_thread_self =
      _g_thread_selfPtr.asFunction<ffi.Pointer<GThread> Function()>();

  void g_thread_exit(
    ffi.Pointer retval,
  ) {
    return _g_thread_exit(
      retval,
    );
  }

  late final _g_thread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_thread_exit');
  late final _g_thread_exit =
      _g_thread_exitPtr.asFunction<void Function(ffi.Pointer)>();

  ffi.Pointer g_thread_join(
    ffi.Pointer<GThread> thread,
  ) {
    return _g_thread_join(
      thread,
    );
  }

  late final _g_thread_joinPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GThread>)>>(
          'g_thread_join');
  late final _g_thread_join = _g_thread_joinPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GThread>)>();

  void g_thread_yield() {
    return _g_thread_yield();
  }

  late final _g_thread_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_thread_yield');
  late final _g_thread_yield = _g_thread_yieldPtr.asFunction<void Function()>();

  void g_mutex_init(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_init(
      mutex,
    );
  }

  late final _g_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_init');
  late final _g_mutex_init =
      _g_mutex_initPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  void g_mutex_clear(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_clear(
      mutex,
    );
  }

  late final _g_mutex_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_clear');
  late final _g_mutex_clear =
      _g_mutex_clearPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  void g_mutex_lock(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_lock(
      mutex,
    );
  }

  late final _g_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_lock');
  late final _g_mutex_lock =
      _g_mutex_lockPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  int g_mutex_trylock(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_trylock(
      mutex,
    );
  }

  late final _g_mutex_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_trylock');
  late final _g_mutex_trylock =
      _g_mutex_trylockPtr.asFunction<int Function(ffi.Pointer<GMutex>)>();

  void g_mutex_unlock(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_unlock(
      mutex,
    );
  }

  late final _g_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_unlock');
  late final _g_mutex_unlock =
      _g_mutex_unlockPtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  void g_rw_lock_init(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_init(
      rw_lock,
    );
  }

  late final _g_rw_lock_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_init');
  late final _g_rw_lock_init =
      _g_rw_lock_initPtr.asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_clear(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_clear(
      rw_lock,
    );
  }

  late final _g_rw_lock_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_clear');
  late final _g_rw_lock_clear =
      _g_rw_lock_clearPtr.asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_writer_lock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_writer_lock(
      rw_lock,
    );
  }

  late final _g_rw_lock_writer_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_writer_lock');
  late final _g_rw_lock_writer_lock = _g_rw_lock_writer_lockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  int g_rw_lock_writer_trylock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_writer_trylock(
      rw_lock,
    );
  }

  late final _g_rw_lock_writer_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_writer_trylock');
  late final _g_rw_lock_writer_trylock = _g_rw_lock_writer_trylockPtr
      .asFunction<int Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_writer_unlock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_writer_unlock(
      rw_lock,
    );
  }

  late final _g_rw_lock_writer_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_writer_unlock');
  late final _g_rw_lock_writer_unlock = _g_rw_lock_writer_unlockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_reader_lock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_reader_lock(
      rw_lock,
    );
  }

  late final _g_rw_lock_reader_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_reader_lock');
  late final _g_rw_lock_reader_lock = _g_rw_lock_reader_lockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  int g_rw_lock_reader_trylock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_reader_trylock(
      rw_lock,
    );
  }

  late final _g_rw_lock_reader_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_reader_trylock');
  late final _g_rw_lock_reader_trylock = _g_rw_lock_reader_trylockPtr
      .asFunction<int Function(ffi.Pointer<GRWLock>)>();

  void g_rw_lock_reader_unlock(
    ffi.Pointer<GRWLock> rw_lock,
  ) {
    return _g_rw_lock_reader_unlock(
      rw_lock,
    );
  }

  late final _g_rw_lock_reader_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRWLock>)>>(
          'g_rw_lock_reader_unlock');
  late final _g_rw_lock_reader_unlock = _g_rw_lock_reader_unlockPtr
      .asFunction<void Function(ffi.Pointer<GRWLock>)>();

  void g_rec_mutex_init(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_init(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_init');
  late final _g_rec_mutex_init =
      _g_rec_mutex_initPtr.asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  void g_rec_mutex_clear(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_clear(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_clear');
  late final _g_rec_mutex_clear =
      _g_rec_mutex_clearPtr.asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  void g_rec_mutex_lock(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_lock(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_lock');
  late final _g_rec_mutex_lock =
      _g_rec_mutex_lockPtr.asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  int g_rec_mutex_trylock(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_trylock(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_trylock');
  late final _g_rec_mutex_trylock = _g_rec_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<GRecMutex>)>();

  void g_rec_mutex_unlock(
    ffi.Pointer<GRecMutex> rec_mutex,
  ) {
    return _g_rec_mutex_unlock(
      rec_mutex,
    );
  }

  late final _g_rec_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRecMutex>)>>(
          'g_rec_mutex_unlock');
  late final _g_rec_mutex_unlock = _g_rec_mutex_unlockPtr
      .asFunction<void Function(ffi.Pointer<GRecMutex>)>();

  void g_cond_init(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_init(
      cond,
    );
  }

  late final _g_cond_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_init');
  late final _g_cond_init =
      _g_cond_initPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  void g_cond_clear(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_clear(
      cond,
    );
  }

  late final _g_cond_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_clear');
  late final _g_cond_clear =
      _g_cond_clearPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  void g_cond_wait(
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_cond_wait(
      cond,
      mutex,
    );
  }

  late final _g_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCond>, ffi.Pointer<GMutex>)>>('g_cond_wait');
  late final _g_cond_wait = _g_cond_waitPtr
      .asFunction<void Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>)>();

  void g_cond_signal(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_signal(
      cond,
    );
  }

  late final _g_cond_signalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_signal');
  late final _g_cond_signal =
      _g_cond_signalPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  void g_cond_broadcast(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_broadcast(
      cond,
    );
  }

  late final _g_cond_broadcastPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_broadcast');
  late final _g_cond_broadcast =
      _g_cond_broadcastPtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  int g_cond_wait_until(
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
    int end_time,
  ) {
    return _g_cond_wait_until(
      cond,
      mutex,
      end_time,
    );
  }

  late final _g_cond_wait_untilPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>,
              gint64)>>('g_cond_wait_until');
  late final _g_cond_wait_until = _g_cond_wait_untilPtr
      .asFunction<int Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>, int)>();

  ffi.Pointer g_private_get(
    ffi.Pointer<GPrivate> key,
  ) {
    return _g_private_get(
      key,
    );
  }

  late final _g_private_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GPrivate>)>>(
          'g_private_get');
  late final _g_private_get = _g_private_getPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GPrivate>)>();

  void g_private_set(
    ffi.Pointer<GPrivate> key,
    ffi.Pointer value,
  ) {
    return _g_private_set(
      key,
      value,
    );
  }

  late final _g_private_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPrivate>, ffi.Pointer)>>('g_private_set');
  late final _g_private_set = _g_private_setPtr
      .asFunction<void Function(ffi.Pointer<GPrivate>, ffi.Pointer)>();

  void g_private_replace(
    ffi.Pointer<GPrivate> key,
    ffi.Pointer value,
  ) {
    return _g_private_replace(
      key,
      value,
    );
  }

  late final _g_private_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GPrivate>, ffi.Pointer)>>('g_private_replace');
  late final _g_private_replace = _g_private_replacePtr
      .asFunction<void Function(ffi.Pointer<GPrivate>, ffi.Pointer)>();

  ffi.Pointer g_once_impl(
    ffi.Pointer<GOnce> once,
    GThreadFunc func,
    ffi.Pointer arg,
  ) {
    return _g_once_impl(
      once,
      func,
      arg,
    );
  }

  late final _g_once_implPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GOnce>, GThreadFunc, ffi.Pointer)>>('g_once_impl');
  late final _g_once_impl = _g_once_implPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GOnce>, GThreadFunc, ffi.Pointer)>();

  int g_once_init_enter_pointer(
    ffi.Pointer<ffi.Void> location,
  ) {
    return _g_once_init_enter_pointer(
      location,
    );
  }

  late final _g_once_init_enter_pointerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Void>)>>(
          'g_once_init_enter_pointer');
  late final _g_once_init_enter_pointer = _g_once_init_enter_pointerPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void g_once_init_leave_pointer(
    ffi.Pointer<ffi.Void> location,
    ffi.Pointer result,
  ) {
    return _g_once_init_leave_pointer(
      location,
      result,
    );
  }

  late final _g_once_init_leave_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer)>>('g_once_init_leave_pointer');
  late final _g_once_init_leave_pointer = _g_once_init_leave_pointerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer)>();

  int g_get_num_processors() {
    return _g_get_num_processors();
  }

  late final _g_get_num_processorsPtr =
      _lookup<ffi.NativeFunction<guint Function()>>('g_get_num_processors');
  late final _g_get_num_processors =
      _g_get_num_processorsPtr.asFunction<int Function()>();

  ffi.Pointer<GAsyncQueue> g_async_queue_new() {
    return _g_async_queue_new();
  }

  late final _g_async_queue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GAsyncQueue> Function()>>(
          'g_async_queue_new');
  late final _g_async_queue_new =
      _g_async_queue_newPtr.asFunction<ffi.Pointer<GAsyncQueue> Function()>();

  ffi.Pointer<GAsyncQueue> g_async_queue_new_full(
    GDestroyNotify item_free_func,
  ) {
    return _g_async_queue_new_full(
      item_free_func,
    );
  }

  late final _g_async_queue_new_fullPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GAsyncQueue> Function(GDestroyNotify)>>(
      'g_async_queue_new_full');
  late final _g_async_queue_new_full = _g_async_queue_new_fullPtr
      .asFunction<ffi.Pointer<GAsyncQueue> Function(GDestroyNotify)>();

  void g_async_queue_lock(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_lock(
      queue,
    );
  }

  late final _g_async_queue_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_lock');
  late final _g_async_queue_lock = _g_async_queue_lockPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_unlock(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_unlock(
      queue,
    );
  }

  late final _g_async_queue_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_unlock');
  late final _g_async_queue_unlock = _g_async_queue_unlockPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  ffi.Pointer<GAsyncQueue> g_async_queue_ref(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_ref(
      queue,
    );
  }

  late final _g_async_queue_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAsyncQueue> Function(
              ffi.Pointer<GAsyncQueue>)>>('g_async_queue_ref');
  late final _g_async_queue_ref = _g_async_queue_refPtr.asFunction<
      ffi.Pointer<GAsyncQueue> Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_unref(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_unref(
      queue,
    );
  }

  late final _g_async_queue_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_unref');
  late final _g_async_queue_unref = _g_async_queue_unrefPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_ref_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_ref_unlocked(
      queue,
    );
  }

  late final _g_async_queue_ref_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_ref_unlocked');
  late final _g_async_queue_ref_unlocked = _g_async_queue_ref_unlockedPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_unref_and_unlock(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_unref_and_unlock(
      queue,
    );
  }

  late final _g_async_queue_unref_and_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_unref_and_unlock');
  late final _g_async_queue_unref_and_unlock =
      _g_async_queue_unref_and_unlockPtr
          .asFunction<void Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_push(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer data,
  ) {
    return _g_async_queue_push(
      queue,
      data,
    );
  }

  late final _g_async_queue_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncQueue>, ffi.Pointer)>>('g_async_queue_push');
  late final _g_async_queue_push = _g_async_queue_pushPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer)>();

  void g_async_queue_push_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer data,
  ) {
    return _g_async_queue_push_unlocked(
      queue,
      data,
    );
  }

  late final _g_async_queue_push_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer)>>('g_async_queue_push_unlocked');
  late final _g_async_queue_push_unlocked = _g_async_queue_push_unlockedPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer)>();

  void g_async_queue_push_sorted(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer data,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_async_queue_push_sorted(
      queue,
      data,
      func,
      user_data,
    );
  }

  late final _g_async_queue_push_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer,
              GCompareDataFunc, ffi.Pointer)>>('g_async_queue_push_sorted');
  late final _g_async_queue_push_sorted =
      _g_async_queue_push_sortedPtr.asFunction<
          void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer, GCompareDataFunc,
              ffi.Pointer)>();

  void g_async_queue_push_sorted_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer data,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_async_queue_push_sorted_unlocked(
      queue,
      data,
      func,
      user_data,
    );
  }

  late final _g_async_queue_push_sorted_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GAsyncQueue>,
              ffi.Pointer,
              GCompareDataFunc,
              ffi.Pointer)>>('g_async_queue_push_sorted_unlocked');
  late final _g_async_queue_push_sorted_unlocked =
      _g_async_queue_push_sorted_unlockedPtr.asFunction<
          void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer, GCompareDataFunc,
              ffi.Pointer)>();

  ffi.Pointer g_async_queue_pop(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_pop(
      queue,
    );
  }

  late final _g_async_queue_popPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>>(
      'g_async_queue_pop');
  late final _g_async_queue_pop = _g_async_queue_popPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>();

  ffi.Pointer g_async_queue_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_pop_unlocked(
      queue,
    );
  }

  late final _g_async_queue_pop_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>>(
      'g_async_queue_pop_unlocked');
  late final _g_async_queue_pop_unlocked = _g_async_queue_pop_unlockedPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>();

  ffi.Pointer g_async_queue_try_pop(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_try_pop(
      queue,
    );
  }

  late final _g_async_queue_try_popPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>>(
      'g_async_queue_try_pop');
  late final _g_async_queue_try_pop = _g_async_queue_try_popPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>();

  ffi.Pointer g_async_queue_try_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_try_pop_unlocked(
      queue,
    );
  }

  late final _g_async_queue_try_pop_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>>(
      'g_async_queue_try_pop_unlocked');
  late final _g_async_queue_try_pop_unlocked =
      _g_async_queue_try_pop_unlockedPtr
          .asFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>)>();

  ffi.Pointer g_async_queue_timeout_pop(
    ffi.Pointer<GAsyncQueue> queue,
    int timeout,
  ) {
    return _g_async_queue_timeout_pop(
      queue,
      timeout,
    );
  }

  late final _g_async_queue_timeout_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GAsyncQueue>, guint64)>>('g_async_queue_timeout_pop');
  late final _g_async_queue_timeout_pop = _g_async_queue_timeout_popPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>, int)>();

  ffi.Pointer g_async_queue_timeout_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    int timeout,
  ) {
    return _g_async_queue_timeout_pop_unlocked(
      queue,
      timeout,
    );
  }

  late final _g_async_queue_timeout_pop_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GAsyncQueue>,
              guint64)>>('g_async_queue_timeout_pop_unlocked');
  late final _g_async_queue_timeout_pop_unlocked =
      _g_async_queue_timeout_pop_unlockedPtr
          .asFunction<ffi.Pointer Function(ffi.Pointer<GAsyncQueue>, int)>();

  int g_async_queue_length(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_length(
      queue,
    );
  }

  late final _g_async_queue_lengthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_length');
  late final _g_async_queue_length = _g_async_queue_lengthPtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>)>();

  int g_async_queue_length_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
  ) {
    return _g_async_queue_length_unlocked(
      queue,
    );
  }

  late final _g_async_queue_length_unlockedPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GAsyncQueue>)>>(
          'g_async_queue_length_unlocked');
  late final _g_async_queue_length_unlocked = _g_async_queue_length_unlockedPtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>)>();

  void g_async_queue_sort(
    ffi.Pointer<GAsyncQueue> queue,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_async_queue_sort(
      queue,
      func,
      user_data,
    );
  }

  late final _g_async_queue_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>, GCompareDataFunc,
              ffi.Pointer)>>('g_async_queue_sort');
  late final _g_async_queue_sort = _g_async_queue_sortPtr.asFunction<
      void Function(ffi.Pointer<GAsyncQueue>, GCompareDataFunc, ffi.Pointer)>();

  void g_async_queue_sort_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_async_queue_sort_unlocked(
      queue,
      func,
      user_data,
    );
  }

  late final _g_async_queue_sort_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>, GCompareDataFunc,
              ffi.Pointer)>>('g_async_queue_sort_unlocked');
  late final _g_async_queue_sort_unlocked =
      _g_async_queue_sort_unlockedPtr.asFunction<
          void Function(
              ffi.Pointer<GAsyncQueue>, GCompareDataFunc, ffi.Pointer)>();

  int g_async_queue_remove(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer item,
  ) {
    return _g_async_queue_remove(
      queue,
      item,
    );
  }

  late final _g_async_queue_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GAsyncQueue>, ffi.Pointer)>>('g_async_queue_remove');
  late final _g_async_queue_remove = _g_async_queue_removePtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer)>();

  int g_async_queue_remove_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer item,
  ) {
    return _g_async_queue_remove_unlocked(
      queue,
      item,
    );
  }

  late final _g_async_queue_remove_unlockedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer)>>('g_async_queue_remove_unlocked');
  late final _g_async_queue_remove_unlocked = _g_async_queue_remove_unlockedPtr
      .asFunction<int Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer)>();

  void g_async_queue_push_front(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer item,
  ) {
    return _g_async_queue_push_front(
      queue,
      item,
    );
  }

  late final _g_async_queue_push_frontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer)>>('g_async_queue_push_front');
  late final _g_async_queue_push_front = _g_async_queue_push_frontPtr
      .asFunction<void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer)>();

  void g_async_queue_push_front_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer item,
  ) {
    return _g_async_queue_push_front_unlocked(
      queue,
      item,
    );
  }

  late final _g_async_queue_push_front_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer)>>('g_async_queue_push_front_unlocked');
  late final _g_async_queue_push_front_unlocked =
      _g_async_queue_push_front_unlockedPtr
          .asFunction<void Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer)>();

  ffi.Pointer g_async_queue_timed_pop(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer<GTimeVal> end_time,
  ) {
    return _g_async_queue_timed_pop(
      queue,
      end_time,
    );
  }

  late final _g_async_queue_timed_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer<GTimeVal>)>>('g_async_queue_timed_pop');
  late final _g_async_queue_timed_pop = _g_async_queue_timed_popPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GAsyncQueue>, ffi.Pointer<GTimeVal>)>();

  ffi.Pointer g_async_queue_timed_pop_unlocked(
    ffi.Pointer<GAsyncQueue> queue,
    ffi.Pointer<GTimeVal> end_time,
  ) {
    return _g_async_queue_timed_pop_unlocked(
      queue,
      end_time,
    );
  }

  late final _g_async_queue_timed_pop_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GAsyncQueue>,
              ffi.Pointer<GTimeVal>)>>('g_async_queue_timed_pop_unlocked');
  late final _g_async_queue_timed_pop_unlocked =
      _g_async_queue_timed_pop_unlockedPtr.asFunction<
          ffi.Pointer Function(
              ffi.Pointer<GAsyncQueue>, ffi.Pointer<GTimeVal>)>();

  __sighandler_t __sysv_signal(
    int __sig,
    __sighandler_t __handler,
  ) {
    return ___sysv_signal(
      __sig,
      __handler,
    );
  }

  late final ___sysv_signalPtr = _lookup<
          ffi.NativeFunction<__sighandler_t Function(ffi.Int, __sighandler_t)>>(
      '__sysv_signal');
  late final ___sysv_signal = ___sysv_signalPtr
      .asFunction<__sighandler_t Function(int, __sighandler_t)>();

  __sighandler_t signal(
    int __sig,
    __sighandler_t __handler,
  ) {
    return _signal(
      __sig,
      __handler,
    );
  }

  late final _signalPtr = _lookup<
          ffi.NativeFunction<__sighandler_t Function(ffi.Int, __sighandler_t)>>(
      'signal');
  late final _signal =
      _signalPtr.asFunction<__sighandler_t Function(int, __sighandler_t)>();

  int kill(
    int __pid,
    int __sig,
  ) {
    return _kill(
      __pid,
      __sig,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Int)>>('kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int __pgrp,
    int __sig,
  ) {
    return _killpg(
      __pgrp,
      __sig,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Int)>>('killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int raise(
    int __sig,
  ) {
    return _raise(
      __sig,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  __sighandler_t ssignal(
    int __sig,
    __sighandler_t __handler,
  ) {
    return _ssignal(
      __sig,
      __handler,
    );
  }

  late final _ssignalPtr = _lookup<
          ffi.NativeFunction<__sighandler_t Function(ffi.Int, __sighandler_t)>>(
      'ssignal');
  late final _ssignal =
      _ssignalPtr.asFunction<__sighandler_t Function(int, __sighandler_t)>();

  int gsignal(
    int __sig,
  ) {
    return _gsignal(
      __sig,
    );
  }

  late final _gsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('gsignal');
  late final _gsignal = _gsignalPtr.asFunction<int Function(int)>();

  void psignal(
    int __sig,
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _psignal(
      __sig,
      __s,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void psiginfo(
    ffi.Pointer<siginfo_t> __pinfo,
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _psiginfo(
      __pinfo,
      __s,
    );
  }

  late final _psiginfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Char>)>>('psiginfo');
  late final _psiginfo = _psiginfoPtr.asFunction<
      void Function(ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Char>)>();

  int sigblock(
    int __mask,
  ) {
    return _sigblock(
      __mask,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int __mask,
  ) {
    return _sigsetmask(
      __mask,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int siggetmask() {
    return _siggetmask();
  }

  late final _siggetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('siggetmask');
  late final _siggetmask = _siggetmaskPtr.asFunction<int Function()>();

  int sigemptyset(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigemptyset(
      __set,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigfillset(
      __set,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigaddset(
      __set,
      __signo,
    );
  }

  late final _sigaddsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigdelset(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigdelset(
      __set,
      __signo,
    );
  }

  late final _sigdelsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigismember(
      __set,
      __signo,
    );
  }

  late final _sigismemberPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigprocmask(
    int __how,
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<sigset_t> __oset,
  ) {
    return _sigprocmask(
      __how,
      __set,
      __oset,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigsuspend(
      __set,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigaction1(
    int __sig,
    ffi.Pointer<sigaction> __act,
    ffi.Pointer<sigaction> __oact,
  ) {
    return _sigaction1(
      __sig,
      __act,
      __oact,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigpending(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigpending(
      __set,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<ffi.Int> __sig,
  ) {
    return _sigwait(
      __set,
      __sig,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr
      .asFunction<int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>();

  int sigwaitinfo(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<siginfo_t> __info,
  ) {
    return _sigwaitinfo(
      __set,
      __info,
    );
  }

  late final _sigwaitinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>>('sigwaitinfo');
  late final _sigwaitinfo = _sigwaitinfoPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>();

  int sigtimedwait(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<siginfo_t> __info,
    ffi.Pointer<timespec> __timeout,
  ) {
    return _sigtimedwait(
      __set,
      __info,
      __timeout,
    );
  }

  late final _sigtimedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
              ffi.Pointer<timespec>)>>('sigtimedwait');
  late final _sigtimedwait = _sigtimedwaitPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
          ffi.Pointer<timespec>)>();

  int sigqueue(
    int __pid,
    int __sig,
    sigval __val,
  ) {
    return _sigqueue(
      __pid,
      __sig,
      __val,
    );
  }

  late final _sigqueuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Int, sigval)>>(
          'sigqueue');
  late final _sigqueue =
      _sigqueuePtr.asFunction<int Function(int, int, sigval)>();

  int sigreturn(
    ffi.Pointer<sigcontext> __scp,
  ) {
    return _sigreturn(
      __scp,
    );
  }

  late final _sigreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigcontext>)>>(
          'sigreturn');
  late final _sigreturn =
      _sigreturnPtr.asFunction<int Function(ffi.Pointer<sigcontext>)>();

  int siginterrupt(
    int __sig,
    int __interrupt,
  ) {
    return _siginterrupt(
      __sig,
      __interrupt,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> __ss,
    ffi.Pointer<stack_t> __oss,
  ) {
    return _sigaltstack(
      __ss,
      __oss,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigstack1(
    ffi.Pointer<sigstack> __ss,
    ffi.Pointer<sigstack> __oss,
  ) {
    return _sigstack1(
      __ss,
      __oss,
    );
  }

  late final _sigstack1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>>('sigstack');
  late final _sigstack1 = _sigstack1Ptr
      .asFunction<int Function(ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>();

  int pthread_sigmask(
    int __how,
    ffi.Pointer<__sigset_t> __newmask,
    ffi.Pointer<__sigset_t> __oldmask,
  ) {
    return _pthread_sigmask(
      __how,
      __newmask,
      __oldmask,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<__sigset_t>,
              ffi.Pointer<__sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<__sigset_t>, ffi.Pointer<__sigset_t>)>();

  int pthread_kill(
    int __threadid,
    int __signo,
  ) {
    return _pthread_kill(
      __threadid,
      __signo,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(int, int)>();

  int __libc_current_sigrtmin() {
    return ___libc_current_sigrtmin();
  }

  late final ___libc_current_sigrtminPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          '__libc_current_sigrtmin');
  late final ___libc_current_sigrtmin =
      ___libc_current_sigrtminPtr.asFunction<int Function()>();

  int __libc_current_sigrtmax() {
    return ___libc_current_sigrtmax();
  }

  late final ___libc_current_sigrtmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          '__libc_current_sigrtmax');
  late final ___libc_current_sigrtmax =
      ___libc_current_sigrtmaxPtr.asFunction<int Function()>();

  void g_on_error_query(
    ffi.Pointer<ffi.Char> prg_name,
  ) {
    return _g_on_error_query(
      prg_name,
    );
  }

  late final _g_on_error_queryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_on_error_query');
  late final _g_on_error_query =
      _g_on_error_queryPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_on_error_stack_trace(
    ffi.Pointer<ffi.Char> prg_name,
  ) {
    return _g_on_error_stack_trace(
      prg_name,
    );
  }

  late final _g_on_error_stack_tracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_on_error_stack_trace');
  late final _g_on_error_stack_trace = _g_on_error_stack_tracePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int g_base64_encode_step(
    ffi.Pointer<guchar> in1,
    int len,
    int break_lines,
    ffi.Pointer<ffi.Char> out,
    ffi.Pointer<gint> state,
    ffi.Pointer<gint> save,
  ) {
    return _g_base64_encode_step(
      in1,
      len,
      break_lines,
      out,
      state,
      save,
    );
  }

  late final _g_base64_encode_stepPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              ffi.Pointer<guchar>,
              gsize,
              gboolean,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_base64_encode_step');
  late final _g_base64_encode_step = _g_base64_encode_stepPtr.asFunction<
      int Function(ffi.Pointer<guchar>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int g_base64_encode_close(
    int break_lines,
    ffi.Pointer<ffi.Char> out,
    ffi.Pointer<gint> state,
    ffi.Pointer<gint> save,
  ) {
    return _g_base64_encode_close(
      break_lines,
      out,
      state,
      save,
    );
  }

  late final _g_base64_encode_closePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(gboolean, ffi.Pointer<ffi.Char>, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_base64_encode_close');
  late final _g_base64_encode_close = _g_base64_encode_closePtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  ffi.Pointer<ffi.Char> g_base64_encode(
    ffi.Pointer<guchar> data,
    int len,
  ) {
    return _g_base64_encode(
      data,
      len,
    );
  }

  late final _g_base64_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<guchar>, gsize)>>('g_base64_encode');
  late final _g_base64_encode = _g_base64_encodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<guchar>, int)>();

  int g_base64_decode_step(
    ffi.Pointer<ffi.Char> in1,
    int len,
    ffi.Pointer<guchar> out,
    ffi.Pointer<gint> state,
    ffi.Pointer<guint> save,
  ) {
    return _g_base64_decode_step(
      in1,
      len,
      out,
      state,
      save,
    );
  }

  late final _g_base64_decode_stepPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<ffi.Char>, gsize, ffi.Pointer<guchar>,
              ffi.Pointer<gint>, ffi.Pointer<guint>)>>('g_base64_decode_step');
  late final _g_base64_decode_step = _g_base64_decode_stepPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<guchar>,
          ffi.Pointer<gint>, ffi.Pointer<guint>)>();

  ffi.Pointer<guchar> g_base64_decode(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<gsize> out_len,
  ) {
    return _g_base64_decode(
      text,
      out_len,
    );
  }

  late final _g_base64_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<gsize>)>>('g_base64_decode');
  late final _g_base64_decode = _g_base64_decodePtr.asFunction<
      ffi.Pointer<guchar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<gsize>)>();

  ffi.Pointer<guchar> g_base64_decode_inplace(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<gsize> out_len,
  ) {
    return _g_base64_decode_inplace(
      text,
      out_len,
    );
  }

  late final _g_base64_decode_inplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guchar> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>)>>('g_base64_decode_inplace');
  late final _g_base64_decode_inplace = _g_base64_decode_inplacePtr.asFunction<
      ffi.Pointer<guchar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<gsize>)>();

  void g_bit_lock(
    ffi.Pointer<gint> address,
    int lock_bit,
  ) {
    return _g_bit_lock(
      address,
      lock_bit,
    );
  }

  late final _g_bit_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>, gint)>>(
          'g_bit_lock');
  late final _g_bit_lock =
      _g_bit_lockPtr.asFunction<void Function(ffi.Pointer<gint>, int)>();

  int g_bit_trylock(
    ffi.Pointer<gint> address,
    int lock_bit,
  ) {
    return _g_bit_trylock(
      address,
      lock_bit,
    );
  }

  late final _g_bit_trylockPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gint>, gint)>>(
          'g_bit_trylock');
  late final _g_bit_trylock =
      _g_bit_trylockPtr.asFunction<int Function(ffi.Pointer<gint>, int)>();

  void g_bit_unlock(
    ffi.Pointer<gint> address,
    int lock_bit,
  ) {
    return _g_bit_unlock(
      address,
      lock_bit,
    );
  }

  late final _g_bit_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gint>, gint)>>(
          'g_bit_unlock');
  late final _g_bit_unlock =
      _g_bit_unlockPtr.asFunction<void Function(ffi.Pointer<gint>, int)>();

  void g_pointer_bit_lock_and_get(
    ffi.Pointer address,
    int lock_bit,
    ffi.Pointer<guintptr> out_ptr,
  ) {
    return _g_pointer_bit_lock_and_get(
      address,
      lock_bit,
      out_ptr,
    );
  }

  late final _g_pointer_bit_lock_and_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer, guint,
              ffi.Pointer<guintptr>)>>('g_pointer_bit_lock_and_get');
  late final _g_pointer_bit_lock_and_get = _g_pointer_bit_lock_and_getPtr
      .asFunction<void Function(ffi.Pointer, int, ffi.Pointer<guintptr>)>();

  ffi.Pointer g_pointer_bit_lock_mask_ptr(
    ffi.Pointer ptr,
    int lock_bit,
    int set1,
    int preserve_mask,
    ffi.Pointer preserve_ptr,
  ) {
    return _g_pointer_bit_lock_mask_ptr(
      ptr,
      lock_bit,
      set1,
      preserve_mask,
      preserve_ptr,
    );
  }

  late final _g_pointer_bit_lock_mask_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer, guint, gboolean, guintptr,
              ffi.Pointer)>>('g_pointer_bit_lock_mask_ptr');
  late final _g_pointer_bit_lock_mask_ptr =
      _g_pointer_bit_lock_mask_ptrPtr.asFunction<
          ffi.Pointer Function(ffi.Pointer, int, int, int, ffi.Pointer)>();

  void g_pointer_bit_unlock_and_set(
    ffi.Pointer<ffi.Void> address,
    int lock_bit,
    ffi.Pointer ptr,
    int preserve_mask,
  ) {
    return _g_pointer_bit_unlock_and_set(
      address,
      lock_bit,
      ptr,
      preserve_mask,
    );
  }

  late final _g_pointer_bit_unlock_and_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, guint, ffi.Pointer,
              guintptr)>>('g_pointer_bit_unlock_and_set');
  late final _g_pointer_bit_unlock_and_set =
      _g_pointer_bit_unlock_and_setPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer, int)>();

  ffi.Pointer<GTimeZone> g_time_zone_new(
    ffi.Pointer<ffi.Char> identifier,
  ) {
    return _g_time_zone_new(
      identifier,
    );
  }

  late final _g_time_zone_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTimeZone> Function(
              ffi.Pointer<ffi.Char>)>>('g_time_zone_new');
  late final _g_time_zone_new = _g_time_zone_newPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GTimeZone> g_time_zone_new_identifier(
    ffi.Pointer<ffi.Char> identifier,
  ) {
    return _g_time_zone_new_identifier(
      identifier,
    );
  }

  late final _g_time_zone_new_identifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTimeZone> Function(
              ffi.Pointer<ffi.Char>)>>('g_time_zone_new_identifier');
  late final _g_time_zone_new_identifier = _g_time_zone_new_identifierPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GTimeZone> g_time_zone_new_utc() {
    return _g_time_zone_new_utc();
  }

  late final _g_time_zone_new_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimeZone> Function()>>(
          'g_time_zone_new_utc');
  late final _g_time_zone_new_utc =
      _g_time_zone_new_utcPtr.asFunction<ffi.Pointer<GTimeZone> Function()>();

  ffi.Pointer<GTimeZone> g_time_zone_new_local() {
    return _g_time_zone_new_local();
  }

  late final _g_time_zone_new_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimeZone> Function()>>(
          'g_time_zone_new_local');
  late final _g_time_zone_new_local =
      _g_time_zone_new_localPtr.asFunction<ffi.Pointer<GTimeZone> Function()>();

  ffi.Pointer<GTimeZone> g_time_zone_new_offset(
    int seconds,
  ) {
    return _g_time_zone_new_offset(
      seconds,
    );
  }

  late final _g_time_zone_new_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimeZone> Function(gint32)>>(
          'g_time_zone_new_offset');
  late final _g_time_zone_new_offset = _g_time_zone_new_offsetPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(int)>();

  ffi.Pointer<GTimeZone> g_time_zone_ref(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_time_zone_ref(
      tz,
    );
  }

  late final _g_time_zone_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTimeZone> Function(
              ffi.Pointer<GTimeZone>)>>('g_time_zone_ref');
  late final _g_time_zone_ref = _g_time_zone_refPtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<GTimeZone>)>();

  void g_time_zone_unref(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_time_zone_unref(
      tz,
    );
  }

  late final _g_time_zone_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimeZone>)>>(
          'g_time_zone_unref');
  late final _g_time_zone_unref =
      _g_time_zone_unrefPtr.asFunction<void Function(ffi.Pointer<GTimeZone>)>();

  int g_time_zone_find_interval(
    ffi.Pointer<GTimeZone> tz,
    int type,
    int time_,
  ) {
    return _g_time_zone_find_interval(
      tz,
      type,
      time_,
    );
  }

  late final _g_time_zone_find_intervalPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GTimeZone>, ffi.Int32,
              gint64)>>('g_time_zone_find_interval');
  late final _g_time_zone_find_interval = _g_time_zone_find_intervalPtr
      .asFunction<int Function(ffi.Pointer<GTimeZone>, int, int)>();

  int g_time_zone_adjust_time(
    ffi.Pointer<GTimeZone> tz,
    int type,
    ffi.Pointer<gint64> time_,
  ) {
    return _g_time_zone_adjust_time(
      tz,
      type,
      time_,
    );
  }

  late final _g_time_zone_adjust_timePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GTimeZone>, ffi.Int32,
              ffi.Pointer<gint64>)>>('g_time_zone_adjust_time');
  late final _g_time_zone_adjust_time = _g_time_zone_adjust_timePtr.asFunction<
      int Function(ffi.Pointer<GTimeZone>, int, ffi.Pointer<gint64>)>();

  ffi.Pointer<ffi.Char> g_time_zone_get_abbreviation(
    ffi.Pointer<GTimeZone> tz,
    int interval,
  ) {
    return _g_time_zone_get_abbreviation(
      tz,
      interval,
    );
  }

  late final _g_time_zone_get_abbreviationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GTimeZone>, gint)>>('g_time_zone_get_abbreviation');
  late final _g_time_zone_get_abbreviation =
      _g_time_zone_get_abbreviationPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GTimeZone>, int)>();

  int g_time_zone_get_offset(
    ffi.Pointer<GTimeZone> tz,
    int interval,
  ) {
    return _g_time_zone_get_offset(
      tz,
      interval,
    );
  }

  late final _g_time_zone_get_offsetPtr = _lookup<
          ffi.NativeFunction<gint32 Function(ffi.Pointer<GTimeZone>, gint)>>(
      'g_time_zone_get_offset');
  late final _g_time_zone_get_offset = _g_time_zone_get_offsetPtr
      .asFunction<int Function(ffi.Pointer<GTimeZone>, int)>();

  int g_time_zone_is_dst(
    ffi.Pointer<GTimeZone> tz,
    int interval,
  ) {
    return _g_time_zone_is_dst(
      tz,
      interval,
    );
  }

  late final _g_time_zone_is_dstPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTimeZone>, gint)>>(
      'g_time_zone_is_dst');
  late final _g_time_zone_is_dst = _g_time_zone_is_dstPtr
      .asFunction<int Function(ffi.Pointer<GTimeZone>, int)>();

  ffi.Pointer<ffi.Char> g_time_zone_get_identifier(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_time_zone_get_identifier(
      tz,
    );
  }

  late final _g_time_zone_get_identifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GTimeZone>)>>('g_time_zone_get_identifier');
  late final _g_time_zone_get_identifier = _g_time_zone_get_identifierPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GTimeZone>)>();

  void g_date_time_unref(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_unref(
      datetime,
    );
  }

  late final _g_date_time_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_unref');
  late final _g_date_time_unref =
      _g_date_time_unrefPtr.asFunction<void Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_ref(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_ref(
      datetime,
    );
  }

  late final _g_date_time_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_ref');
  late final _g_date_time_ref = _g_date_time_refPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_new_now(
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_date_time_new_now(
      tz,
    );
  }

  late final _g_date_time_new_nowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GTimeZone>)>>('g_date_time_new_now');
  late final _g_date_time_new_now = _g_date_time_new_nowPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeZone>)>();

  ffi.Pointer<GDateTime> g_date_time_new_now_local() {
    return _g_date_time_new_now_local();
  }

  late final _g_date_time_new_now_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function()>>(
          'g_date_time_new_now_local');
  late final _g_date_time_new_now_local = _g_date_time_new_now_localPtr
      .asFunction<ffi.Pointer<GDateTime> Function()>();

  ffi.Pointer<GDateTime> g_date_time_new_now_utc() {
    return _g_date_time_new_now_utc();
  }

  late final _g_date_time_new_now_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function()>>(
          'g_date_time_new_now_utc');
  late final _g_date_time_new_now_utc = _g_date_time_new_now_utcPtr
      .asFunction<ffi.Pointer<GDateTime> Function()>();

  ffi.Pointer<GDateTime> g_date_time_new_from_unix_local(
    int t,
  ) {
    return _g_date_time_new_from_unix_local(
      t,
    );
  }

  late final _g_date_time_new_from_unix_localPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function(gint64)>>(
          'g_date_time_new_from_unix_local');
  late final _g_date_time_new_from_unix_local =
      _g_date_time_new_from_unix_localPtr
          .asFunction<ffi.Pointer<GDateTime> Function(int)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_unix_utc(
    int t,
  ) {
    return _g_date_time_new_from_unix_utc(
      t,
    );
  }

  late final _g_date_time_new_from_unix_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function(gint64)>>(
          'g_date_time_new_from_unix_utc');
  late final _g_date_time_new_from_unix_utc = _g_date_time_new_from_unix_utcPtr
      .asFunction<ffi.Pointer<GDateTime> Function(int)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_unix_local_usec(
    int usecs,
  ) {
    return _g_date_time_new_from_unix_local_usec(
      usecs,
    );
  }

  late final _g_date_time_new_from_unix_local_usecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function(gint64)>>(
          'g_date_time_new_from_unix_local_usec');
  late final _g_date_time_new_from_unix_local_usec =
      _g_date_time_new_from_unix_local_usecPtr
          .asFunction<ffi.Pointer<GDateTime> Function(int)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_unix_utc_usec(
    int usecs,
  ) {
    return _g_date_time_new_from_unix_utc_usec(
      usecs,
    );
  }

  late final _g_date_time_new_from_unix_utc_usecPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDateTime> Function(gint64)>>(
          'g_date_time_new_from_unix_utc_usec');
  late final _g_date_time_new_from_unix_utc_usec =
      _g_date_time_new_from_unix_utc_usecPtr
          .asFunction<ffi.Pointer<GDateTime> Function(int)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_timeval_local(
    ffi.Pointer<GTimeVal> tv,
  ) {
    return _g_date_time_new_from_timeval_local(
      tv,
    );
  }

  late final _g_date_time_new_from_timeval_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GTimeVal>)>>('g_date_time_new_from_timeval_local');
  late final _g_date_time_new_from_timeval_local =
      _g_date_time_new_from_timeval_localPtr
          .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_timeval_utc(
    ffi.Pointer<GTimeVal> tv,
  ) {
    return _g_date_time_new_from_timeval_utc(
      tv,
    );
  }

  late final _g_date_time_new_from_timeval_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GTimeVal>)>>('g_date_time_new_from_timeval_utc');
  late final _g_date_time_new_from_timeval_utc =
      _g_date_time_new_from_timeval_utcPtr
          .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<GDateTime> g_date_time_new_from_iso8601(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<GTimeZone> default_tz,
  ) {
    return _g_date_time_new_from_iso8601(
      text,
      default_tz,
    );
  }

  late final _g_date_time_new_from_iso8601Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GTimeZone>)>>('g_date_time_new_from_iso8601');
  late final _g_date_time_new_from_iso8601 =
      _g_date_time_new_from_iso8601Ptr.asFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<GTimeZone>)>();

  ffi.Pointer<GDateTime> g_date_time_new(
    ffi.Pointer<GTimeZone> tz,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _g_date_time_new(
      tz,
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _g_date_time_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GTimeZone>, gint, gint,
              gint, gint, gint, gdouble)>>('g_date_time_new');
  late final _g_date_time_new = _g_date_time_newPtr.asFunction<
      ffi.Pointer<GDateTime> Function(
          ffi.Pointer<GTimeZone>, int, int, int, int, int, double)>();

  ffi.Pointer<GDateTime> g_date_time_new_local(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _g_date_time_new_local(
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _g_date_time_new_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              gint, gint, gint, gint, gint, gdouble)>>('g_date_time_new_local');
  late final _g_date_time_new_local = _g_date_time_new_localPtr.asFunction<
      ffi.Pointer<GDateTime> Function(int, int, int, int, int, double)>();

  ffi.Pointer<GDateTime> g_date_time_new_utc(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _g_date_time_new_utc(
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _g_date_time_new_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              gint, gint, gint, gint, gint, gdouble)>>('g_date_time_new_utc');
  late final _g_date_time_new_utc = _g_date_time_new_utcPtr.asFunction<
      ffi.Pointer<GDateTime> Function(int, int, int, int, int, double)>();

  ffi.Pointer<GDateTime> g_date_time_add(
    ffi.Pointer<GDateTime> datetime,
    int timespan,
  ) {
    return _g_date_time_add(
      datetime,
      timespan,
    );
  }

  late final _g_date_time_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, GTimeSpan)>>('g_date_time_add');
  late final _g_date_time_add = _g_date_time_addPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_years(
    ffi.Pointer<GDateTime> datetime,
    int years,
  ) {
    return _g_date_time_add_years(
      datetime,
      years,
    );
  }

  late final _g_date_time_add_yearsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_years');
  late final _g_date_time_add_years = _g_date_time_add_yearsPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_months(
    ffi.Pointer<GDateTime> datetime,
    int months,
  ) {
    return _g_date_time_add_months(
      datetime,
      months,
    );
  }

  late final _g_date_time_add_monthsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_months');
  late final _g_date_time_add_months = _g_date_time_add_monthsPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_weeks(
    ffi.Pointer<GDateTime> datetime,
    int weeks,
  ) {
    return _g_date_time_add_weeks(
      datetime,
      weeks,
    );
  }

  late final _g_date_time_add_weeksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_weeks');
  late final _g_date_time_add_weeks = _g_date_time_add_weeksPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_days(
    ffi.Pointer<GDateTime> datetime,
    int days,
  ) {
    return _g_date_time_add_days(
      datetime,
      days,
    );
  }

  late final _g_date_time_add_daysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_days');
  late final _g_date_time_add_days = _g_date_time_add_daysPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_hours(
    ffi.Pointer<GDateTime> datetime,
    int hours,
  ) {
    return _g_date_time_add_hours(
      datetime,
      hours,
    );
  }

  late final _g_date_time_add_hoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_hours');
  late final _g_date_time_add_hours = _g_date_time_add_hoursPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_minutes(
    ffi.Pointer<GDateTime> datetime,
    int minutes,
  ) {
    return _g_date_time_add_minutes(
      datetime,
      minutes,
    );
  }

  late final _g_date_time_add_minutesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gint)>>('g_date_time_add_minutes');
  late final _g_date_time_add_minutes = _g_date_time_add_minutesPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, int)>();

  ffi.Pointer<GDateTime> g_date_time_add_seconds(
    ffi.Pointer<GDateTime> datetime,
    double seconds,
  ) {
    return _g_date_time_add_seconds(
      datetime,
      seconds,
    );
  }

  late final _g_date_time_add_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>, gdouble)>>('g_date_time_add_seconds');
  late final _g_date_time_add_seconds = _g_date_time_add_secondsPtr.asFunction<
      ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, double)>();

  ffi.Pointer<GDateTime> g_date_time_add_full(
    ffi.Pointer<GDateTime> datetime,
    int years,
    int months,
    int days,
    int hours,
    int minutes,
    double seconds,
  ) {
    return _g_date_time_add_full(
      datetime,
      years,
      months,
      days,
      hours,
      minutes,
      seconds,
    );
  }

  late final _g_date_time_add_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>, gint, gint,
              gint, gint, gint, gdouble)>>('g_date_time_add_full');
  late final _g_date_time_add_full = _g_date_time_add_fullPtr.asFunction<
      ffi.Pointer<GDateTime> Function(
          ffi.Pointer<GDateTime>, int, int, int, int, int, double)>();

  int g_date_time_compare(
    gconstpointer dt1,
    gconstpointer dt2,
  ) {
    return _g_date_time_compare(
      dt1,
      dt2,
    );
  }

  late final _g_date_time_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'g_date_time_compare');
  late final _g_date_time_compare = _g_date_time_comparePtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_date_time_difference(
    ffi.Pointer<GDateTime> end,
    ffi.Pointer<GDateTime> begin,
  ) {
    return _g_date_time_difference(
      end,
      begin,
    );
  }

  late final _g_date_time_differencePtr = _lookup<
      ffi.NativeFunction<
          GTimeSpan Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<GDateTime>)>>('g_date_time_difference');
  late final _g_date_time_difference = _g_date_time_differencePtr.asFunction<
      int Function(ffi.Pointer<GDateTime>, ffi.Pointer<GDateTime>)>();

  int g_date_time_hash(
    gconstpointer datetime,
  ) {
    return _g_date_time_hash(
      datetime,
    );
  }

  late final _g_date_time_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_date_time_hash');
  late final _g_date_time_hash =
      _g_date_time_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_date_time_equal(
    gconstpointer dt1,
    gconstpointer dt2,
  ) {
    return _g_date_time_equal(
      dt1,
      dt2,
    );
  }

  late final _g_date_time_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_date_time_equal');
  late final _g_date_time_equal = _g_date_time_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  void g_date_time_get_ymd(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<gint> year,
    ffi.Pointer<gint> month,
    ffi.Pointer<gint> day,
  ) {
    return _g_date_time_get_ymd(
      datetime,
      year,
      month,
      day,
    );
  }

  late final _g_date_time_get_ymdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDateTime>, ffi.Pointer<gint>,
              ffi.Pointer<gint>, ffi.Pointer<gint>)>>('g_date_time_get_ymd');
  late final _g_date_time_get_ymd = _g_date_time_get_ymdPtr.asFunction<
      void Function(ffi.Pointer<GDateTime>, ffi.Pointer<gint>,
          ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int g_date_time_get_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_year(
      datetime,
    );
  }

  late final _g_date_time_get_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_year');
  late final _g_date_time_get_year = _g_date_time_get_yearPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_month(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_month(
      datetime,
    );
  }

  late final _g_date_time_get_monthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_month');
  late final _g_date_time_get_month = _g_date_time_get_monthPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_day_of_month(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_day_of_month(
      datetime,
    );
  }

  late final _g_date_time_get_day_of_monthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_day_of_month');
  late final _g_date_time_get_day_of_month = _g_date_time_get_day_of_monthPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_week_numbering_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_week_numbering_year(
      datetime,
    );
  }

  late final _g_date_time_get_week_numbering_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_week_numbering_year');
  late final _g_date_time_get_week_numbering_year =
      _g_date_time_get_week_numbering_yearPtr
          .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_week_of_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_week_of_year(
      datetime,
    );
  }

  late final _g_date_time_get_week_of_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_week_of_year');
  late final _g_date_time_get_week_of_year = _g_date_time_get_week_of_yearPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_day_of_week(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_day_of_week(
      datetime,
    );
  }

  late final _g_date_time_get_day_of_weekPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_day_of_week');
  late final _g_date_time_get_day_of_week = _g_date_time_get_day_of_weekPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_day_of_year(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_day_of_year(
      datetime,
    );
  }

  late final _g_date_time_get_day_of_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_day_of_year');
  late final _g_date_time_get_day_of_year = _g_date_time_get_day_of_yearPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_hour(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_hour(
      datetime,
    );
  }

  late final _g_date_time_get_hourPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_hour');
  late final _g_date_time_get_hour = _g_date_time_get_hourPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_minute(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_minute(
      datetime,
    );
  }

  late final _g_date_time_get_minutePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_minute');
  late final _g_date_time_get_minute = _g_date_time_get_minutePtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_second(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_second(
      datetime,
    );
  }

  late final _g_date_time_get_secondPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_second');
  late final _g_date_time_get_second = _g_date_time_get_secondPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_get_microsecond(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_microsecond(
      datetime,
    );
  }

  late final _g_date_time_get_microsecondPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_microsecond');
  late final _g_date_time_get_microsecond = _g_date_time_get_microsecondPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  double g_date_time_get_seconds(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_seconds(
      datetime,
    );
  }

  late final _g_date_time_get_secondsPtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_seconds');
  late final _g_date_time_get_seconds = _g_date_time_get_secondsPtr
      .asFunction<double Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_to_unix(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_unix(
      datetime,
    );
  }

  late final _g_date_time_to_unixPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_to_unix');
  late final _g_date_time_to_unix = _g_date_time_to_unixPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_to_unix_usec(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_unix_usec(
      datetime,
    );
  }

  late final _g_date_time_to_unix_usecPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_to_unix_usec');
  late final _g_date_time_to_unix_usec = _g_date_time_to_unix_usecPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_to_timeval(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<GTimeVal> tv,
  ) {
    return _g_date_time_to_timeval(
      datetime,
      tv,
    );
  }

  late final _g_date_time_to_timevalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<GTimeVal>)>>('g_date_time_to_timeval');
  late final _g_date_time_to_timeval = _g_date_time_to_timevalPtr.asFunction<
      int Function(ffi.Pointer<GDateTime>, ffi.Pointer<GTimeVal>)>();

  int g_date_time_get_utc_offset(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_utc_offset(
      datetime,
    );
  }

  late final _g_date_time_get_utc_offsetPtr =
      _lookup<ffi.NativeFunction<GTimeSpan Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_get_utc_offset');
  late final _g_date_time_get_utc_offset = _g_date_time_get_utc_offsetPtr
      .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GTimeZone> g_date_time_get_timezone(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_timezone(
      datetime,
    );
  }

  late final _g_date_time_get_timezonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTimeZone> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_get_timezone');
  late final _g_date_time_get_timezone = _g_date_time_get_timezonePtr
      .asFunction<ffi.Pointer<GTimeZone> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<ffi.Char> g_date_time_get_timezone_abbreviation(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_get_timezone_abbreviation(
      datetime,
    );
  }

  late final _g_date_time_get_timezone_abbreviationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDateTime>)>>(
      'g_date_time_get_timezone_abbreviation');
  late final _g_date_time_get_timezone_abbreviation =
      _g_date_time_get_timezone_abbreviationPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDateTime>)>();

  int g_date_time_is_daylight_savings(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_is_daylight_savings(
      datetime,
    );
  }

  late final _g_date_time_is_daylight_savingsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDateTime>)>>(
          'g_date_time_is_daylight_savings');
  late final _g_date_time_is_daylight_savings =
      _g_date_time_is_daylight_savingsPtr
          .asFunction<int Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_to_timezone(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<GTimeZone> tz,
  ) {
    return _g_date_time_to_timezone(
      datetime,
      tz,
    );
  }

  late final _g_date_time_to_timezonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<GTimeZone>)>>('g_date_time_to_timezone');
  late final _g_date_time_to_timezone = _g_date_time_to_timezonePtr.asFunction<
      ffi.Pointer<GDateTime> Function(
          ffi.Pointer<GDateTime>, ffi.Pointer<GTimeZone>)>();

  ffi.Pointer<GDateTime> g_date_time_to_local(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_local(
      datetime,
    );
  }

  late final _g_date_time_to_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_to_local');
  late final _g_date_time_to_local = _g_date_time_to_localPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GDateTime> g_date_time_to_utc(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_to_utc(
      datetime,
    );
  }

  late final _g_date_time_to_utcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_to_utc');
  late final _g_date_time_to_utc = _g_date_time_to_utcPtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<ffi.Char> g_date_time_format(
    ffi.Pointer<GDateTime> datetime,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_date_time_format(
      datetime,
      format,
    );
  }

  late final _g_date_time_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDateTime>,
              ffi.Pointer<ffi.Char>)>>('g_date_time_format');
  late final _g_date_time_format = _g_date_time_formatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GDateTime>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_date_time_format_iso8601(
    ffi.Pointer<GDateTime> datetime,
  ) {
    return _g_date_time_format_iso8601(
      datetime,
    );
  }

  late final _g_date_time_format_iso8601Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GDateTime>)>>('g_date_time_format_iso8601');
  late final _g_date_time_format_iso8601 = _g_date_time_format_iso8601Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_error_quark() {
    return _g_bookmark_file_error_quark();
  }

  late final _g_bookmark_file_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_bookmark_file_error_quark');
  late final _g_bookmark_file_error_quark =
      _g_bookmark_file_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GBookmarkFile> g_bookmark_file_new() {
    return _g_bookmark_file_new();
  }

  late final _g_bookmark_file_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GBookmarkFile> Function()>>(
          'g_bookmark_file_new');
  late final _g_bookmark_file_new = _g_bookmark_file_newPtr
      .asFunction<ffi.Pointer<GBookmarkFile> Function()>();

  void g_bookmark_file_free(
    ffi.Pointer<GBookmarkFile> bookmark,
  ) {
    return _g_bookmark_file_free(
      bookmark,
    );
  }

  late final _g_bookmark_file_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBookmarkFile>)>>(
      'g_bookmark_file_free');
  late final _g_bookmark_file_free = _g_bookmark_file_freePtr
      .asFunction<void Function(ffi.Pointer<GBookmarkFile>)>();

  ffi.Pointer<GBookmarkFile> g_bookmark_file_copy(
    ffi.Pointer<GBookmarkFile> bookmark,
  ) {
    return _g_bookmark_file_copy(
      bookmark,
    );
  }

  late final _g_bookmark_file_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBookmarkFile> Function(
              ffi.Pointer<GBookmarkFile>)>>('g_bookmark_file_copy');
  late final _g_bookmark_file_copy = _g_bookmark_file_copyPtr.asFunction<
      ffi.Pointer<GBookmarkFile> Function(ffi.Pointer<GBookmarkFile>)>();

  int g_bookmark_file_load_from_file(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_load_from_file(
      bookmark,
      filename,
      error,
    );
  }

  late final _g_bookmark_file_load_from_filePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_load_from_file');
  late final _g_bookmark_file_load_from_file =
      _g_bookmark_file_load_from_filePtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_load_from_data(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> data,
    int length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_load_from_data(
      bookmark,
      data,
      length,
      error,
    );
  }

  late final _g_bookmark_file_load_from_dataPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  gsize,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_load_from_data');
  late final _g_bookmark_file_load_from_data =
      _g_bookmark_file_load_from_dataPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_load_from_data_dirs(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> full_path,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_load_from_data_dirs(
      bookmark,
      file,
      full_path,
      error,
    );
  }

  late final _g_bookmark_file_load_from_data_dirsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_load_from_data_dirs');
  late final _g_bookmark_file_load_from_data_dirs =
      _g_bookmark_file_load_from_data_dirsPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_bookmark_file_to_data(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_to_data(
      bookmark,
      length,
      error,
    );
  }

  late final _g_bookmark_file_to_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_to_data');
  late final _g_bookmark_file_to_data = _g_bookmark_file_to_dataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBookmarkFile>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_to_file(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_to_file(
      bookmark,
      filename,
      error,
    );
  }

  late final _g_bookmark_file_to_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_to_file');
  late final _g_bookmark_file_to_file = _g_bookmark_file_to_filePtr.asFunction<
      int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_title(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _g_bookmark_file_set_title(
      bookmark,
      uri,
      title,
    );
  }

  late final _g_bookmark_file_set_titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_set_title');
  late final _g_bookmark_file_set_title =
      _g_bookmark_file_set_titlePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_bookmark_file_get_title(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_title(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_titlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_title');
  late final _g_bookmark_file_get_title =
      _g_bookmark_file_get_titlePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_description(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _g_bookmark_file_set_description(
      bookmark,
      uri,
      description,
    );
  }

  late final _g_bookmark_file_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_set_description');
  late final _g_bookmark_file_set_description =
      _g_bookmark_file_set_descriptionPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_bookmark_file_get_description(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_description(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_description');
  late final _g_bookmark_file_get_description =
      _g_bookmark_file_get_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_mime_type(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> mime_type,
  ) {
    return _g_bookmark_file_set_mime_type(
      bookmark,
      uri,
      mime_type,
    );
  }

  late final _g_bookmark_file_set_mime_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_set_mime_type');
  late final _g_bookmark_file_set_mime_type =
      _g_bookmark_file_set_mime_typePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_bookmark_file_get_mime_type(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_mime_type(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_mime_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_mime_type');
  late final _g_bookmark_file_get_mime_type =
      _g_bookmark_file_get_mime_typePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_groups(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<ffi.Char>> groups,
    int length,
  ) {
    return _g_bookmark_file_set_groups(
      bookmark,
      uri,
      groups,
      length,
    );
  }

  late final _g_bookmark_file_set_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gsize)>>('g_bookmark_file_set_groups');
  late final _g_bookmark_file_set_groups =
      _g_bookmark_file_set_groupsPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  void g_bookmark_file_add_group(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> group,
  ) {
    return _g_bookmark_file_add_group(
      bookmark,
      uri,
      group,
    );
  }

  late final _g_bookmark_file_add_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_add_group');
  late final _g_bookmark_file_add_group =
      _g_bookmark_file_add_groupPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int g_bookmark_file_has_group(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> group,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_has_group(
      bookmark,
      uri,
      group,
      error,
    );
  }

  late final _g_bookmark_file_has_groupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_has_group');
  late final _g_bookmark_file_has_group =
      _g_bookmark_file_has_groupPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_bookmark_file_get_groups(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_groups(
      bookmark,
      uri,
      length,
      error,
    );
  }

  late final _g_bookmark_file_get_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_groups');
  late final _g_bookmark_file_get_groups =
      _g_bookmark_file_get_groupsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_add_application(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> exec,
  ) {
    return _g_bookmark_file_add_application(
      bookmark,
      uri,
      name,
      exec,
    );
  }

  late final _g_bookmark_file_add_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_add_application');
  late final _g_bookmark_file_add_application =
      _g_bookmark_file_add_applicationPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_bookmark_file_has_application(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_has_application(
      bookmark,
      uri,
      name,
      error,
    );
  }

  late final _g_bookmark_file_has_applicationPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_has_application');
  late final _g_bookmark_file_has_application =
      _g_bookmark_file_has_applicationPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_bookmark_file_get_applications(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_applications(
      bookmark,
      uri,
      length,
      error,
    );
  }

  late final _g_bookmark_file_get_applicationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_applications');
  late final _g_bookmark_file_get_applications =
      _g_bookmark_file_get_applicationsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_set_app_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> exec,
    int count,
    int stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_set_app_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_set_app_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  gint,
                  time_t,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_set_app_info');
  late final _g_bookmark_file_set_app_info =
      _g_bookmark_file_set_app_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_set_application_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> exec,
    int count,
    ffi.Pointer<GDateTime> stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_set_application_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_set_application_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  ffi.Pointer<GDateTime>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_set_application_info');
  late final _g_bookmark_file_set_application_info =
      _g_bookmark_file_set_application_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GDateTime>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_get_app_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> exec,
    ffi.Pointer<guint> count,
    ffi.Pointer<time_t> stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_app_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_get_app_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<guint>,
                  ffi.Pointer<time_t>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_app_info');
  late final _g_bookmark_file_get_app_info =
      _g_bookmark_file_get_app_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<guint>,
              ffi.Pointer<time_t>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_get_application_info(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> exec,
    ffi.Pointer<ffi.UnsignedInt> count,
    ffi.Pointer<ffi.Pointer<GDateTime>> stamp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_application_info(
      bookmark,
      uri,
      name,
      exec,
      count,
      stamp,
      error,
    );
  }

  late final _g_bookmark_file_get_application_infoPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Pointer<GDateTime>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_application_info');
  late final _g_bookmark_file_get_application_info =
      _g_bookmark_file_get_application_infoPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Pointer<GDateTime>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_is_private(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    int is_private,
  ) {
    return _g_bookmark_file_set_is_private(
      bookmark,
      uri,
      is_private,
    );
  }

  late final _g_bookmark_file_set_is_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              gboolean)>>('g_bookmark_file_set_is_private');
  late final _g_bookmark_file_set_is_private =
      _g_bookmark_file_set_is_privatePtr.asFunction<
          void Function(
              ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>, int)>();

  int g_bookmark_file_get_is_private(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_is_private(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_is_privatePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_is_private');
  late final _g_bookmark_file_get_is_private =
      _g_bookmark_file_get_is_privatePtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_icon(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> href,
    ffi.Pointer<ffi.Char> mime_type,
  ) {
    return _g_bookmark_file_set_icon(
      bookmark,
      uri,
      href,
      mime_type,
    );
  }

  late final _g_bookmark_file_set_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_set_icon');
  late final _g_bookmark_file_set_icon =
      _g_bookmark_file_set_iconPtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_bookmark_file_get_icon(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<ffi.Char>> href,
    ffi.Pointer<ffi.Pointer<ffi.Char>> mime_type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_icon(
      bookmark,
      uri,
      href,
      mime_type,
      error,
    );
  }

  late final _g_bookmark_file_get_iconPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_icon');
  late final _g_bookmark_file_get_icon =
      _g_bookmark_file_get_iconPtr.asFunction<
          int Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_added(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    int added,
  ) {
    return _g_bookmark_file_set_added(
      bookmark,
      uri,
      added,
    );
  }

  late final _g_bookmark_file_set_addedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              time_t)>>('g_bookmark_file_set_added');
  late final _g_bookmark_file_set_added =
      _g_bookmark_file_set_addedPtr.asFunction<
          void Function(
              ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>, int)>();

  void g_bookmark_file_set_added_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GDateTime> added,
  ) {
    return _g_bookmark_file_set_added_date_time(
      bookmark,
      uri,
      added,
    );
  }

  late final _g_bookmark_file_set_added_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>>('g_bookmark_file_set_added_date_time');
  late final _g_bookmark_file_set_added_date_time =
      _g_bookmark_file_set_added_date_timePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_get_added(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_added(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_addedPtr = _lookup<
      ffi.NativeFunction<
          time_t Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_get_added');
  late final _g_bookmark_file_get_added =
      _g_bookmark_file_get_addedPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDateTime> g_bookmark_file_get_added_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_added_date_time(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_added_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_added_date_time');
  late final _g_bookmark_file_get_added_date_time =
      _g_bookmark_file_get_added_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_modified(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    int modified,
  ) {
    return _g_bookmark_file_set_modified(
      bookmark,
      uri,
      modified,
    );
  }

  late final _g_bookmark_file_set_modifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              time_t)>>('g_bookmark_file_set_modified');
  late final _g_bookmark_file_set_modified =
      _g_bookmark_file_set_modifiedPtr.asFunction<
          void Function(
              ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>, int)>();

  void g_bookmark_file_set_modified_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GDateTime> modified,
  ) {
    return _g_bookmark_file_set_modified_date_time(
      bookmark,
      uri,
      modified,
    );
  }

  late final _g_bookmark_file_set_modified_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<GDateTime>)>>(
      'g_bookmark_file_set_modified_date_time');
  late final _g_bookmark_file_set_modified_date_time =
      _g_bookmark_file_set_modified_date_timePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_get_modified(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_modified(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_modifiedPtr = _lookup<
          ffi.NativeFunction<
              time_t Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_modified');
  late final _g_bookmark_file_get_modified =
      _g_bookmark_file_get_modifiedPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDateTime> g_bookmark_file_get_modified_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_modified_date_time(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_modified_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_modified_date_time');
  late final _g_bookmark_file_get_modified_date_time =
      _g_bookmark_file_get_modified_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_bookmark_file_set_visited(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    int visited,
  ) {
    return _g_bookmark_file_set_visited(
      bookmark,
      uri,
      visited,
    );
  }

  late final _g_bookmark_file_set_visitedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              time_t)>>('g_bookmark_file_set_visited');
  late final _g_bookmark_file_set_visited =
      _g_bookmark_file_set_visitedPtr.asFunction<
          void Function(
              ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>, int)>();

  void g_bookmark_file_set_visited_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<GDateTime> visited,
  ) {
    return _g_bookmark_file_set_visited_date_time(
      bookmark,
      uri,
      visited,
    );
  }

  late final _g_bookmark_file_set_visited_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<GDateTime>)>>(
      'g_bookmark_file_set_visited_date_time');
  late final _g_bookmark_file_set_visited_date_time =
      _g_bookmark_file_set_visited_date_timePtr.asFunction<
          void Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDateTime>)>();

  int g_bookmark_file_get_visited(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_visited(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_visitedPtr = _lookup<
          ffi.NativeFunction<
              time_t Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_visited');
  late final _g_bookmark_file_get_visited =
      _g_bookmark_file_get_visitedPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GDateTime> g_bookmark_file_get_visited_date_time(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_get_visited_date_time(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_get_visited_date_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_get_visited_date_time');
  late final _g_bookmark_file_get_visited_date_time =
      _g_bookmark_file_get_visited_date_timePtr.asFunction<
          ffi.Pointer<GDateTime> Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_has_item(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_bookmark_file_has_item(
      bookmark,
      uri,
    );
  }

  late final _g_bookmark_file_has_itemPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>)>>('g_bookmark_file_has_item');
  late final _g_bookmark_file_has_item =
      _g_bookmark_file_has_itemPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>)>();

  int g_bookmark_file_get_size(
    ffi.Pointer<GBookmarkFile> bookmark,
  ) {
    return _g_bookmark_file_get_size(
      bookmark,
    );
  }

  late final _g_bookmark_file_get_sizePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GBookmarkFile>)>>(
          'g_bookmark_file_get_size');
  late final _g_bookmark_file_get_size = _g_bookmark_file_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GBookmarkFile>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_bookmark_file_get_uris(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<gsize> length,
  ) {
    return _g_bookmark_file_get_uris(
      bookmark,
      length,
    );
  }

  late final _g_bookmark_file_get_urisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<gsize>)>>('g_bookmark_file_get_uris');
  late final _g_bookmark_file_get_uris =
      _g_bookmark_file_get_urisPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GBookmarkFile>, ffi.Pointer<gsize>)>();

  int g_bookmark_file_remove_group(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> group,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_remove_group(
      bookmark,
      uri,
      group,
      error,
    );
  }

  late final _g_bookmark_file_remove_groupPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_remove_group');
  late final _g_bookmark_file_remove_group =
      _g_bookmark_file_remove_groupPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_remove_application(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_remove_application(
      bookmark,
      uri,
      name,
      error,
    );
  }

  late final _g_bookmark_file_remove_applicationPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_remove_application');
  late final _g_bookmark_file_remove_application =
      _g_bookmark_file_remove_applicationPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_remove_item(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_remove_item(
      bookmark,
      uri,
      error,
    );
  }

  late final _g_bookmark_file_remove_itemPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GBookmarkFile>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_bookmark_file_remove_item');
  late final _g_bookmark_file_remove_item =
      _g_bookmark_file_remove_itemPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_bookmark_file_move_item(
    ffi.Pointer<GBookmarkFile> bookmark,
    ffi.Pointer<ffi.Char> old_uri,
    ffi.Pointer<ffi.Char> new_uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_bookmark_file_move_item(
      bookmark,
      old_uri,
      new_uri,
      error,
    );
  }

  late final _g_bookmark_file_move_itemPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GBookmarkFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_bookmark_file_move_item');
  late final _g_bookmark_file_move_item =
      _g_bookmark_file_move_itemPtr.asFunction<
          int Function(ffi.Pointer<GBookmarkFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GBytes> g_bytes_new(
    gconstpointer data,
    int size,
  ) {
    return _g_bytes_new(
      data,
      size,
    );
  }

  late final _g_bytes_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(gconstpointer, gsize)>>('g_bytes_new');
  late final _g_bytes_new = _g_bytes_newPtr
      .asFunction<ffi.Pointer<GBytes> Function(gconstpointer, int)>();

  ffi.Pointer<GBytes> g_bytes_new_take(
    ffi.Pointer data,
    int size,
  ) {
    return _g_bytes_new_take(
      data,
      size,
    );
  }

  late final _g_bytes_new_takePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GBytes> Function(ffi.Pointer, gsize)>>(
      'g_bytes_new_take');
  late final _g_bytes_new_take = _g_bytes_new_takePtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer, int)>();

  ffi.Pointer<GBytes> g_bytes_new_static(
    gconstpointer data,
    int size,
  ) {
    return _g_bytes_new_static(
      data,
      size,
    );
  }

  late final _g_bytes_new_staticPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GBytes> Function(gconstpointer, gsize)>>(
      'g_bytes_new_static');
  late final _g_bytes_new_static = _g_bytes_new_staticPtr
      .asFunction<ffi.Pointer<GBytes> Function(gconstpointer, int)>();

  ffi.Pointer<GBytes> g_bytes_new_with_free_func(
    gconstpointer data,
    int size,
    GDestroyNotify free_func,
    ffi.Pointer user_data,
  ) {
    return _g_bytes_new_with_free_func(
      data,
      size,
      free_func,
      user_data,
    );
  }

  late final _g_bytes_new_with_free_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(gconstpointer, gsize, GDestroyNotify,
              ffi.Pointer)>>('g_bytes_new_with_free_func');
  late final _g_bytes_new_with_free_func =
      _g_bytes_new_with_free_funcPtr.asFunction<
          ffi.Pointer<GBytes> Function(
              gconstpointer, int, GDestroyNotify, ffi.Pointer)>();

  ffi.Pointer<GBytes> g_bytes_new_from_bytes(
    ffi.Pointer<GBytes> bytes,
    int offset,
    int length,
  ) {
    return _g_bytes_new_from_bytes(
      bytes,
      offset,
      length,
    );
  }

  late final _g_bytes_new_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GBytes>, gsize, gsize)>>('g_bytes_new_from_bytes');
  late final _g_bytes_new_from_bytes = _g_bytes_new_from_bytesPtr.asFunction<
      ffi.Pointer<GBytes> Function(ffi.Pointer<GBytes>, int, int)>();

  gconstpointer g_bytes_get_data(
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<gsize> size,
  ) {
    return _g_bytes_get_data(
      bytes,
      size,
    );
  }

  late final _g_bytes_get_dataPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(
              ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>>('g_bytes_get_data');
  late final _g_bytes_get_data = _g_bytes_get_dataPtr.asFunction<
      gconstpointer Function(ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>();

  int g_bytes_get_size(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_get_size(
      bytes,
    );
  }

  late final _g_bytes_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GBytes>)>>(
          'g_bytes_get_size');
  late final _g_bytes_get_size =
      _g_bytes_get_sizePtr.asFunction<int Function(ffi.Pointer<GBytes>)>();

  ffi.Pointer<GBytes> g_bytes_ref(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_ref(
      bytes,
    );
  }

  late final _g_bytes_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<GBytes>)>>('g_bytes_ref');
  late final _g_bytes_ref = _g_bytes_refPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GBytes>)>();

  void g_bytes_unref(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_unref(
      bytes,
    );
  }

  late final _g_bytes_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBytes>)>>(
          'g_bytes_unref');
  late final _g_bytes_unref =
      _g_bytes_unrefPtr.asFunction<void Function(ffi.Pointer<GBytes>)>();

  ffi.Pointer g_bytes_unref_to_data(
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<gsize> size,
  ) {
    return _g_bytes_unref_to_data(
      bytes,
      size,
    );
  }

  late final _g_bytes_unref_to_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GBytes>,
              ffi.Pointer<gsize>)>>('g_bytes_unref_to_data');
  late final _g_bytes_unref_to_data = _g_bytes_unref_to_dataPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GBytes>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GByteArray> g_bytes_unref_to_array(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _g_bytes_unref_to_array(
      bytes,
    );
  }

  late final _g_bytes_unref_to_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GByteArray> Function(
              ffi.Pointer<GBytes>)>>('g_bytes_unref_to_array');
  late final _g_bytes_unref_to_array = _g_bytes_unref_to_arrayPtr
      .asFunction<ffi.Pointer<GByteArray> Function(ffi.Pointer<GBytes>)>();

  int g_bytes_hash(
    gconstpointer bytes,
  ) {
    return _g_bytes_hash(
      bytes,
    );
  }

  late final _g_bytes_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_bytes_hash');
  late final _g_bytes_hash =
      _g_bytes_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_bytes_equal(
    gconstpointer bytes1,
    gconstpointer bytes2,
  ) {
    return _g_bytes_equal(
      bytes1,
      bytes2,
    );
  }

  late final _g_bytes_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_bytes_equal');
  late final _g_bytes_equal = _g_bytes_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_bytes_compare(
    gconstpointer bytes1,
    gconstpointer bytes2,
  ) {
    return _g_bytes_compare(
      bytes1,
      bytes2,
    );
  }

  late final _g_bytes_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'g_bytes_compare');
  late final _g_bytes_compare = _g_bytes_comparePtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  gconstpointer g_bytes_get_region(
    ffi.Pointer<GBytes> bytes,
    int element_size,
    int offset,
    int n_elements,
  ) {
    return _g_bytes_get_region(
      bytes,
      element_size,
      offset,
      n_elements,
    );
  }

  late final _g_bytes_get_regionPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(
              ffi.Pointer<GBytes>, gsize, gsize, gsize)>>('g_bytes_get_region');
  late final _g_bytes_get_region = _g_bytes_get_regionPtr
      .asFunction<gconstpointer Function(ffi.Pointer<GBytes>, int, int, int)>();

  int g_get_charset(
    ffi.Pointer<ffi.Pointer<ffi.Char>> charset,
  ) {
    return _g_get_charset(
      charset,
    );
  }

  late final _g_get_charsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_get_charset');
  late final _g_get_charset = _g_get_charsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> g_get_codeset() {
    return _g_get_codeset();
  }

  late final _g_get_codesetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_codeset');
  late final _g_get_codeset =
      _g_get_codesetPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int g_get_console_charset(
    ffi.Pointer<ffi.Pointer<ffi.Char>> charset,
  ) {
    return _g_get_console_charset(
      charset,
    );
  }

  late final _g_get_console_charsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_get_console_charset');
  late final _g_get_console_charset = _g_get_console_charsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_language_names() {
    return _g_get_language_names();
  }

  late final _g_get_language_namesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_language_names');
  late final _g_get_language_names = _g_get_language_namesPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_language_names_with_category(
    ffi.Pointer<ffi.Char> category_name,
  ) {
    return _g_get_language_names_with_category(
      category_name,
    );
  }

  late final _g_get_language_names_with_categoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>)>>('g_get_language_names_with_category');
  late final _g_get_language_names_with_category =
      _g_get_language_names_with_categoryPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_locale_variants(
    ffi.Pointer<ffi.Char> locale,
  ) {
    return _g_get_locale_variants(
      locale,
    );
  }

  late final _g_get_locale_variantsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>)>>('g_get_locale_variants');
  late final _g_get_locale_variants = _g_get_locale_variantsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>)>();

  int g_checksum_type_get_length(
    int checksum_type,
  ) {
    return _g_checksum_type_get_length(
      checksum_type,
    );
  }

  late final _g_checksum_type_get_lengthPtr =
      _lookup<ffi.NativeFunction<gssize Function(ffi.Int32)>>(
          'g_checksum_type_get_length');
  late final _g_checksum_type_get_length =
      _g_checksum_type_get_lengthPtr.asFunction<int Function(int)>();

  ffi.Pointer<GChecksum> g_checksum_new(
    int checksum_type,
  ) {
    return _g_checksum_new(
      checksum_type,
    );
  }

  late final _g_checksum_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GChecksum> Function(ffi.Int32)>>(
          'g_checksum_new');
  late final _g_checksum_new =
      _g_checksum_newPtr.asFunction<ffi.Pointer<GChecksum> Function(int)>();

  void g_checksum_reset(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_reset(
      checksum,
    );
  }

  late final _g_checksum_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GChecksum>)>>(
          'g_checksum_reset');
  late final _g_checksum_reset =
      _g_checksum_resetPtr.asFunction<void Function(ffi.Pointer<GChecksum>)>();

  ffi.Pointer<GChecksum> g_checksum_copy(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_copy(
      checksum,
    );
  }

  late final _g_checksum_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GChecksum> Function(
              ffi.Pointer<GChecksum>)>>('g_checksum_copy');
  late final _g_checksum_copy = _g_checksum_copyPtr
      .asFunction<ffi.Pointer<GChecksum> Function(ffi.Pointer<GChecksum>)>();

  void g_checksum_free(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_free(
      checksum,
    );
  }

  late final _g_checksum_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GChecksum>)>>(
          'g_checksum_free');
  late final _g_checksum_free =
      _g_checksum_freePtr.asFunction<void Function(ffi.Pointer<GChecksum>)>();

  void g_checksum_update(
    ffi.Pointer<GChecksum> checksum,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_checksum_update(
      checksum,
      data,
      length,
    );
  }

  late final _g_checksum_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GChecksum>, ffi.Pointer<guchar>,
              gssize)>>('g_checksum_update');
  late final _g_checksum_update = _g_checksum_updatePtr.asFunction<
      void Function(ffi.Pointer<GChecksum>, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<ffi.Char> g_checksum_get_string(
    ffi.Pointer<GChecksum> checksum,
  ) {
    return _g_checksum_get_string(
      checksum,
    );
  }

  late final _g_checksum_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GChecksum>)>>('g_checksum_get_string');
  late final _g_checksum_get_string = _g_checksum_get_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GChecksum>)>();

  void g_checksum_get_digest(
    ffi.Pointer<GChecksum> checksum,
    ffi.Pointer<guint8> buffer,
    ffi.Pointer<gsize> digest_len,
  ) {
    return _g_checksum_get_digest(
      checksum,
      buffer,
      digest_len,
    );
  }

  late final _g_checksum_get_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GChecksum>, ffi.Pointer<guint8>,
              ffi.Pointer<gsize>)>>('g_checksum_get_digest');
  late final _g_checksum_get_digest = _g_checksum_get_digestPtr.asFunction<
      void Function(
          ffi.Pointer<GChecksum>, ffi.Pointer<guint8>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Char> g_compute_checksum_for_data(
    int checksum_type,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_compute_checksum_for_data(
      checksum_type,
      data,
      length,
    );
  }

  late final _g_compute_checksum_for_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<guchar>,
              gsize)>>('g_compute_checksum_for_data');
  late final _g_compute_checksum_for_data =
      _g_compute_checksum_for_dataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<ffi.Char> g_compute_checksum_for_string(
    int checksum_type,
    ffi.Pointer<ffi.Char> str,
    int length,
  ) {
    return _g_compute_checksum_for_string(
      checksum_type,
      str,
      length,
    );
  }

  late final _g_compute_checksum_for_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<ffi.Char>,
              gssize)>>('g_compute_checksum_for_string');
  late final _g_compute_checksum_for_string =
      _g_compute_checksum_for_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_compute_checksum_for_bytes(
    int checksum_type,
    ffi.Pointer<GBytes> data,
  ) {
    return _g_compute_checksum_for_bytes(
      checksum_type,
      data,
    );
  }

  late final _g_compute_checksum_for_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Pointer<GBytes>)>>('g_compute_checksum_for_bytes');
  late final _g_compute_checksum_for_bytes = _g_compute_checksum_for_bytesPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<GBytes>)>();

  int g_convert_error_quark() {
    return _g_convert_error_quark();
  }

  late final _g_convert_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_convert_error_quark');
  late final _g_convert_error_quark =
      _g_convert_error_quarkPtr.asFunction<int Function()>();

  GIConv g_iconv_open(
    ffi.Pointer<ffi.Char> to_codeset,
    ffi.Pointer<ffi.Char> from_codeset,
  ) {
    return _g_iconv_open(
      to_codeset,
      from_codeset,
    );
  }

  late final _g_iconv_openPtr = _lookup<
      ffi.NativeFunction<
          GIConv Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_iconv_open');
  late final _g_iconv_open = _g_iconv_openPtr.asFunction<
      GIConv Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_iconv(
    GIConv converter,
    ffi.Pointer<ffi.Pointer<ffi.Char>> inbuf,
    ffi.Pointer<gsize> inbytes_left,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outbuf,
    ffi.Pointer<gsize> outbytes_left,
  ) {
    return _g_iconv(
      converter,
      inbuf,
      inbytes_left,
      outbuf,
      outbytes_left,
    );
  }

  late final _g_iconvPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              GIConv,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>)>>('g_iconv');
  late final _g_iconv = _g_iconvPtr.asFunction<
      int Function(
          GIConv,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gsize>)>();

  int g_iconv_close(
    GIConv converter,
  ) {
    return _g_iconv_close(
      converter,
    );
  }

  late final _g_iconv_closePtr =
      _lookup<ffi.NativeFunction<gint Function(GIConv)>>('g_iconv_close');
  late final _g_iconv_close =
      _g_iconv_closePtr.asFunction<int Function(GIConv)>();

  ffi.Pointer<ffi.Char> g_convert(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<ffi.Char> to_codeset,
    ffi.Pointer<ffi.Char> from_codeset,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_convert(
      str,
      len,
      to_codeset,
      from_codeset,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_convert');
  late final _g_convert = _g_convertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_convert_with_iconv(
    ffi.Pointer<ffi.Char> str,
    int len,
    GIConv converter,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_convert_with_iconv(
      str,
      len,
      converter,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_convert_with_iconvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              GIConv,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_convert_with_iconv');
  late final _g_convert_with_iconv = _g_convert_with_iconvPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          GIConv,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_convert_with_fallback(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<ffi.Char> to_codeset,
    ffi.Pointer<ffi.Char> from_codeset,
    ffi.Pointer<ffi.Char> fallback,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_convert_with_fallback(
      str,
      len,
      to_codeset,
      from_codeset,
      fallback,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_convert_with_fallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_convert_with_fallback');
  late final _g_convert_with_fallback = _g_convert_with_fallbackPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_locale_to_utf8(
    ffi.Pointer<ffi.Char> opsysstring,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_locale_to_utf8(
      opsysstring,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_locale_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_locale_to_utf8');
  late final _g_locale_to_utf8 = _g_locale_to_utf8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_locale_from_utf8(
    ffi.Pointer<ffi.Char> utf8string,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_locale_from_utf8(
      utf8string,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_locale_from_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_locale_from_utf8');
  late final _g_locale_from_utf8 = _g_locale_from_utf8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_filename_to_utf8(
    ffi.Pointer<ffi.Char> opsysstring,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_to_utf8(
      opsysstring,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_filename_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_to_utf8');
  late final _g_filename_to_utf8 = _g_filename_to_utf8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_filename_from_utf8(
    ffi.Pointer<ffi.Char> utf8string,
    int len,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_from_utf8(
      utf8string,
      len,
      bytes_read,
      bytes_written,
      error,
    );
  }

  late final _g_filename_from_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_from_utf8');
  late final _g_filename_from_utf8 = _g_filename_from_utf8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_filename_from_uri(
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<ffi.Char>> hostname,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_from_uri(
      uri,
      hostname,
      error,
    );
  }

  late final _g_filename_from_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_from_uri');
  late final _g_filename_from_uri = _g_filename_from_uriPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_filename_to_uri(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> hostname,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_filename_to_uri(
      filename,
      hostname,
      error,
    );
  }

  late final _g_filename_to_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_filename_to_uri');
  late final _g_filename_to_uri = _g_filename_to_uriPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_filename_display_name(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _g_filename_display_name(
      filename,
    );
  }

  late final _g_filename_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_filename_display_name');
  late final _g_filename_display_name = _g_filename_display_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_get_filename_charsets(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> filename_charsets,
  ) {
    return _g_get_filename_charsets(
      filename_charsets,
    );
  }

  late final _g_get_filename_charsetsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>(
      'g_get_filename_charsets');
  late final _g_get_filename_charsets = _g_get_filename_charsetsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  ffi.Pointer<ffi.Char> g_filename_display_basename(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _g_filename_display_basename(
      filename,
    );
  }

  late final _g_filename_display_basenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_filename_display_basename');
  late final _g_filename_display_basename = _g_filename_display_basenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_uri_list_extract_uris(
    ffi.Pointer<ffi.Char> uri_list,
  ) {
    return _g_uri_list_extract_uris(
      uri_list,
    );
  }

  late final _g_uri_list_extract_urisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>)>>('g_uri_list_extract_uris');
  late final _g_uri_list_extract_uris = _g_uri_list_extract_urisPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>)>();

  void g_datalist_init(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
  ) {
    return _g_datalist_init(
      datalist,
    );
  }

  late final _g_datalist_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>)>>(
      'g_datalist_init');
  late final _g_datalist_init = _g_datalist_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>)>();

  void g_datalist_clear(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
  ) {
    return _g_datalist_clear(
      datalist,
    );
  }

  late final _g_datalist_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>)>>(
      'g_datalist_clear');
  late final _g_datalist_clear = _g_datalist_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>)>();

  ffi.Pointer g_datalist_id_get_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
  ) {
    return _g_datalist_id_get_data(
      datalist,
      key_id,
    );
  }

  late final _g_datalist_id_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GData>>,
              GQuark)>>('g_datalist_id_get_data');
  late final _g_datalist_id_get_data = _g_datalist_id_get_dataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  void g_datalist_id_set_data_full(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
    ffi.Pointer data,
    GDestroyNotify destroy_func,
  ) {
    return _g_datalist_id_set_data_full(
      datalist,
      key_id,
      data,
      destroy_func,
    );
  }

  late final _g_datalist_id_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>, GQuark,
              ffi.Pointer, GDestroyNotify)>>('g_datalist_id_set_data_full');
  late final _g_datalist_id_set_data_full =
      _g_datalist_id_set_data_fullPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<GData>>, int, ffi.Pointer,
              GDestroyNotify)>();

  void g_datalist_id_remove_multiple(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    ffi.Pointer<GQuark> keys,
    int n_keys,
  ) {
    return _g_datalist_id_remove_multiple(
      datalist,
      keys,
      n_keys,
    );
  }

  late final _g_datalist_id_remove_multiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>,
              ffi.Pointer<GQuark>, gsize)>>('g_datalist_id_remove_multiple');
  late final _g_datalist_id_remove_multiple =
      _g_datalist_id_remove_multiplePtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<GData>>, ffi.Pointer<GQuark>, int)>();

  ffi.Pointer g_datalist_id_dup_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
    GDuplicateFunc dup_func,
    ffi.Pointer user_data,
  ) {
    return _g_datalist_id_dup_data(
      datalist,
      key_id,
      dup_func,
      user_data,
    );
  }

  late final _g_datalist_id_dup_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GData>>, GQuark,
              GDuplicateFunc, ffi.Pointer)>>('g_datalist_id_dup_data');
  late final _g_datalist_id_dup_data = _g_datalist_id_dup_dataPtr.asFunction<
      ffi.Pointer Function(
          ffi.Pointer<ffi.Pointer<GData>>, int, GDuplicateFunc, ffi.Pointer)>();

  int g_datalist_id_replace_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
    ffi.Pointer oldval,
    ffi.Pointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_datalist_id_replace_data(
      datalist,
      key_id,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_datalist_id_replace_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Pointer<GData>>,
              GQuark,
              ffi.Pointer,
              ffi.Pointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_datalist_id_replace_data');
  late final _g_datalist_id_replace_data =
      _g_datalist_id_replace_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<GData>>, int, ffi.Pointer,
              ffi.Pointer, GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  ffi.Pointer g_datalist_id_remove_no_notify(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int key_id,
  ) {
    return _g_datalist_id_remove_no_notify(
      datalist,
      key_id,
    );
  }

  late final _g_datalist_id_remove_no_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GData>>,
              GQuark)>>('g_datalist_id_remove_no_notify');
  late final _g_datalist_id_remove_no_notify =
      _g_datalist_id_remove_no_notifyPtr.asFunction<
          ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  void g_datalist_foreach(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    GDataForeachFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_datalist_foreach(
      datalist,
      func,
      user_data,
    );
  }

  late final _g_datalist_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>, GDataForeachFunc,
              ffi.Pointer)>>('g_datalist_foreach');
  late final _g_datalist_foreach = _g_datalist_foreachPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<GData>>, GDataForeachFunc, ffi.Pointer)>();

  void g_datalist_set_flags(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int flags,
  ) {
    return _g_datalist_set_flags(
      datalist,
      flags,
    );
  }

  late final _g_datalist_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GData>>, guint)>>('g_datalist_set_flags');
  late final _g_datalist_set_flags = _g_datalist_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  void g_datalist_unset_flags(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    int flags,
  ) {
    return _g_datalist_unset_flags(
      datalist,
      flags,
    );
  }

  late final _g_datalist_unset_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GData>>,
              guint)>>('g_datalist_unset_flags');
  late final _g_datalist_unset_flags = _g_datalist_unset_flagsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GData>>, int)>();

  int g_datalist_get_flags(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
  ) {
    return _g_datalist_get_flags(
      datalist,
    );
  }

  late final _g_datalist_get_flagsPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<ffi.Pointer<GData>>)>>(
      'g_datalist_get_flags');
  late final _g_datalist_get_flags = _g_datalist_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<GData>>)>();

  void g_dataset_destroy(
    gconstpointer dataset_location,
  ) {
    return _g_dataset_destroy(
      dataset_location,
    );
  }

  late final _g_dataset_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gconstpointer)>>(
          'g_dataset_destroy');
  late final _g_dataset_destroy =
      _g_dataset_destroyPtr.asFunction<void Function(gconstpointer)>();

  ffi.Pointer g_dataset_id_get_data(
    gconstpointer dataset_location,
    int key_id,
  ) {
    return _g_dataset_id_get_data(
      dataset_location,
      key_id,
    );
  }

  late final _g_dataset_id_get_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gconstpointer, GQuark)>>(
          'g_dataset_id_get_data');
  late final _g_dataset_id_get_data = _g_dataset_id_get_dataPtr
      .asFunction<ffi.Pointer Function(gconstpointer, int)>();

  ffi.Pointer g_datalist_get_data(
    ffi.Pointer<ffi.Pointer<GData>> datalist,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _g_datalist_get_data(
      datalist,
      key,
    );
  }

  late final _g_datalist_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GData>>,
              ffi.Pointer<ffi.Char>)>>('g_datalist_get_data');
  late final _g_datalist_get_data = _g_datalist_get_dataPtr.asFunction<
      ffi.Pointer Function(
          ffi.Pointer<ffi.Pointer<GData>>, ffi.Pointer<ffi.Char>)>();

  void g_dataset_id_set_data_full(
    gconstpointer dataset_location,
    int key_id,
    ffi.Pointer data,
    GDestroyNotify destroy_func,
  ) {
    return _g_dataset_id_set_data_full(
      dataset_location,
      key_id,
      data,
      destroy_func,
    );
  }

  late final _g_dataset_id_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gconstpointer, GQuark, ffi.Pointer,
              GDestroyNotify)>>('g_dataset_id_set_data_full');
  late final _g_dataset_id_set_data_full =
      _g_dataset_id_set_data_fullPtr.asFunction<
          void Function(gconstpointer, int, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer g_dataset_id_remove_no_notify(
    gconstpointer dataset_location,
    int key_id,
  ) {
    return _g_dataset_id_remove_no_notify(
      dataset_location,
      key_id,
    );
  }

  late final _g_dataset_id_remove_no_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gconstpointer, GQuark)>>(
          'g_dataset_id_remove_no_notify');
  late final _g_dataset_id_remove_no_notify = _g_dataset_id_remove_no_notifyPtr
      .asFunction<ffi.Pointer Function(gconstpointer, int)>();

  void g_dataset_foreach(
    gconstpointer dataset_location,
    GDataForeachFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_dataset_foreach(
      dataset_location,
      func,
      user_data,
    );
  }

  late final _g_dataset_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gconstpointer, GDataForeachFunc,
              ffi.Pointer)>>('g_dataset_foreach');
  late final _g_dataset_foreach = _g_dataset_foreachPtr.asFunction<
      void Function(gconstpointer, GDataForeachFunc, ffi.Pointer)>();

  ffi.Pointer<GDate> g_date_new() {
    return _g_date_new();
  }

  late final _g_date_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDate> Function()>>('g_date_new');
  late final _g_date_new =
      _g_date_newPtr.asFunction<ffi.Pointer<GDate> Function()>();

  ffi.Pointer<GDate> g_date_new_dmy(
    int day,
    int month,
    int year,
  ) {
    return _g_date_new_dmy(
      day,
      month,
      year,
    );
  }

  late final _g_date_new_dmyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDate> Function(
              GDateDay, ffi.Int32, GDateYear)>>('g_date_new_dmy');
  late final _g_date_new_dmy = _g_date_new_dmyPtr
      .asFunction<ffi.Pointer<GDate> Function(int, int, int)>();

  ffi.Pointer<GDate> g_date_new_julian(
    int julian_day,
  ) {
    return _g_date_new_julian(
      julian_day,
    );
  }

  late final _g_date_new_julianPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GDate> Function(guint32)>>(
          'g_date_new_julian');
  late final _g_date_new_julian =
      _g_date_new_julianPtr.asFunction<ffi.Pointer<GDate> Function(int)>();

  void g_date_free(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_free(
      date,
    );
  }

  late final _g_date_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>)>>(
          'g_date_free');
  late final _g_date_free =
      _g_date_freePtr.asFunction<void Function(ffi.Pointer<GDate>)>();

  ffi.Pointer<GDate> g_date_copy(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_copy(
      date,
    );
  }

  late final _g_date_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GDate> Function(ffi.Pointer<GDate>)>>(
      'g_date_copy');
  late final _g_date_copy = _g_date_copyPtr
      .asFunction<ffi.Pointer<GDate> Function(ffi.Pointer<GDate>)>();

  int g_date_valid(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_valid(
      date,
    );
  }

  late final _g_date_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDate>)>>(
          'g_date_valid');
  late final _g_date_valid =
      _g_date_validPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_valid_day(
    int day,
  ) {
    return _g_date_valid_day(
      day,
    );
  }

  late final _g_date_valid_dayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GDateDay)>>(
          'g_date_valid_day');
  late final _g_date_valid_day =
      _g_date_valid_dayPtr.asFunction<int Function(int)>();

  int g_date_valid_month(
    int month,
  ) {
    return _g_date_valid_month(
      month,
    );
  }

  late final _g_date_valid_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Int32)>>(
          'g_date_valid_month');
  late final _g_date_valid_month =
      _g_date_valid_monthPtr.asFunction<int Function(int)>();

  int g_date_valid_year(
    int year,
  ) {
    return _g_date_valid_year(
      year,
    );
  }

  late final _g_date_valid_yearPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GDateYear)>>(
          'g_date_valid_year');
  late final _g_date_valid_year =
      _g_date_valid_yearPtr.asFunction<int Function(int)>();

  int g_date_valid_weekday(
    int weekday,
  ) {
    return _g_date_valid_weekday(
      weekday,
    );
  }

  late final _g_date_valid_weekdayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Int32)>>(
          'g_date_valid_weekday');
  late final _g_date_valid_weekday =
      _g_date_valid_weekdayPtr.asFunction<int Function(int)>();

  int g_date_valid_julian(
    int julian_date,
  ) {
    return _g_date_valid_julian(
      julian_date,
    );
  }

  late final _g_date_valid_julianPtr =
      _lookup<ffi.NativeFunction<gboolean Function(guint32)>>(
          'g_date_valid_julian');
  late final _g_date_valid_julian =
      _g_date_valid_julianPtr.asFunction<int Function(int)>();

  int g_date_valid_dmy(
    int day,
    int month,
    int year,
  ) {
    return _g_date_valid_dmy(
      day,
      month,
      year,
    );
  }

  late final _g_date_valid_dmyPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(GDateDay, ffi.Int32, GDateYear)>>(
      'g_date_valid_dmy');
  late final _g_date_valid_dmy =
      _g_date_valid_dmyPtr.asFunction<int Function(int, int, int)>();

  int g_date_get_weekday(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_weekday(
      date,
    );
  }

  late final _g_date_get_weekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDate>)>>(
          'g_date_get_weekday');
  late final _g_date_get_weekday =
      _g_date_get_weekdayPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_month(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_month(
      date,
    );
  }

  late final _g_date_get_monthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GDate>)>>(
          'g_date_get_month');
  late final _g_date_get_month =
      _g_date_get_monthPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_year(
      date,
    );
  }

  late final _g_date_get_yearPtr =
      _lookup<ffi.NativeFunction<GDateYear Function(ffi.Pointer<GDate>)>>(
          'g_date_get_year');
  late final _g_date_get_year =
      _g_date_get_yearPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_day(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_day(
      date,
    );
  }

  late final _g_date_get_dayPtr =
      _lookup<ffi.NativeFunction<GDateDay Function(ffi.Pointer<GDate>)>>(
          'g_date_get_day');
  late final _g_date_get_day =
      _g_date_get_dayPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_julian(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_julian(
      date,
    );
  }

  late final _g_date_get_julianPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GDate>)>>(
          'g_date_get_julian');
  late final _g_date_get_julian =
      _g_date_get_julianPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_day_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_day_of_year(
      date,
    );
  }

  late final _g_date_get_day_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_day_of_year');
  late final _g_date_get_day_of_year =
      _g_date_get_day_of_yearPtr.asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_monday_week_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_monday_week_of_year(
      date,
    );
  }

  late final _g_date_get_monday_week_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_monday_week_of_year');
  late final _g_date_get_monday_week_of_year =
      _g_date_get_monday_week_of_yearPtr
          .asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_sunday_week_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_sunday_week_of_year(
      date,
    );
  }

  late final _g_date_get_sunday_week_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_sunday_week_of_year');
  late final _g_date_get_sunday_week_of_year =
      _g_date_get_sunday_week_of_yearPtr
          .asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_get_iso8601_week_of_year(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_get_iso8601_week_of_year(
      date,
    );
  }

  late final _g_date_get_iso8601_week_of_yearPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GDate>)>>(
          'g_date_get_iso8601_week_of_year');
  late final _g_date_get_iso8601_week_of_year =
      _g_date_get_iso8601_week_of_yearPtr
          .asFunction<int Function(ffi.Pointer<GDate>)>();

  void g_date_clear(
    ffi.Pointer<GDate> date,
    int n_dates,
  ) {
    return _g_date_clear(
      date,
      n_dates,
    );
  }

  late final _g_date_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_clear');
  late final _g_date_clear =
      _g_date_clearPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_parse(
    ffi.Pointer<GDate> date,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_date_set_parse(
      date,
      str,
    );
  }

  late final _g_date_set_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDate>, ffi.Pointer<ffi.Char>)>>('g_date_set_parse');
  late final _g_date_set_parse = _g_date_set_parsePtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<ffi.Char>)>();

  void g_date_set_time_t(
    ffi.Pointer<GDate> date,
    int timet,
  ) {
    return _g_date_set_time_t(
      date,
      timet,
    );
  }

  late final _g_date_set_time_tPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, time_t)>>(
      'g_date_set_time_t');
  late final _g_date_set_time_t = _g_date_set_time_tPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_time_val(
    ffi.Pointer<GDate> date,
    ffi.Pointer<GTimeVal> timeval,
  ) {
    return _g_date_set_time_val(
      date,
      timeval,
    );
  }

  late final _g_date_set_time_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDate>,
              ffi.Pointer<GTimeVal>)>>('g_date_set_time_val');
  late final _g_date_set_time_val = _g_date_set_time_valPtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<GTimeVal>)>();

  void g_date_set_time(
    ffi.Pointer<GDate> date,
    int time_,
  ) {
    return _g_date_set_time(
      date,
      time_,
    );
  }

  late final _g_date_set_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, GTime)>>(
          'g_date_set_time');
  late final _g_date_set_time =
      _g_date_set_timePtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_month(
    ffi.Pointer<GDate> date,
    int month,
  ) {
    return _g_date_set_month(
      date,
      month,
    );
  }

  late final _g_date_set_monthPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, ffi.Int32)>>(
      'g_date_set_month');
  late final _g_date_set_month =
      _g_date_set_monthPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_day(
    ffi.Pointer<GDate> date,
    int day,
  ) {
    return _g_date_set_day(
      date,
      day,
    );
  }

  late final _g_date_set_dayPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, GDateDay)>>(
      'g_date_set_day');
  late final _g_date_set_day =
      _g_date_set_dayPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_year(
    ffi.Pointer<GDate> date,
    int year,
  ) {
    return _g_date_set_year(
      date,
      year,
    );
  }

  late final _g_date_set_yearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, GDateYear)>>(
      'g_date_set_year');
  late final _g_date_set_year =
      _g_date_set_yearPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_set_dmy(
    ffi.Pointer<GDate> date,
    int day,
    int month,
    int y,
  ) {
    return _g_date_set_dmy(
      date,
      day,
      month,
      y,
    );
  }

  late final _g_date_set_dmyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDate>, GDateDay, ffi.Int32,
              GDateYear)>>('g_date_set_dmy');
  late final _g_date_set_dmy = _g_date_set_dmyPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int, int, int)>();

  void g_date_set_julian(
    ffi.Pointer<GDate> date,
    int julian_date,
  ) {
    return _g_date_set_julian(
      date,
      julian_date,
    );
  }

  late final _g_date_set_julianPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint32)>>(
      'g_date_set_julian');
  late final _g_date_set_julian = _g_date_set_julianPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  int g_date_is_first_of_month(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_is_first_of_month(
      date,
    );
  }

  late final _g_date_is_first_of_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDate>)>>(
          'g_date_is_first_of_month');
  late final _g_date_is_first_of_month = _g_date_is_first_of_monthPtr
      .asFunction<int Function(ffi.Pointer<GDate>)>();

  int g_date_is_last_of_month(
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_is_last_of_month(
      date,
    );
  }

  late final _g_date_is_last_of_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GDate>)>>(
          'g_date_is_last_of_month');
  late final _g_date_is_last_of_month = _g_date_is_last_of_monthPtr
      .asFunction<int Function(ffi.Pointer<GDate>)>();

  void g_date_add_days(
    ffi.Pointer<GDate> date,
    int n_days,
  ) {
    return _g_date_add_days(
      date,
      n_days,
    );
  }

  late final _g_date_add_daysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_add_days');
  late final _g_date_add_days =
      _g_date_add_daysPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_subtract_days(
    ffi.Pointer<GDate> date,
    int n_days,
  ) {
    return _g_date_subtract_days(
      date,
      n_days,
    );
  }

  late final _g_date_subtract_daysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_subtract_days');
  late final _g_date_subtract_days = _g_date_subtract_daysPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_add_months(
    ffi.Pointer<GDate> date,
    int n_months,
  ) {
    return _g_date_add_months(
      date,
      n_months,
    );
  }

  late final _g_date_add_monthsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_add_months');
  late final _g_date_add_months = _g_date_add_monthsPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_subtract_months(
    ffi.Pointer<GDate> date,
    int n_months,
  ) {
    return _g_date_subtract_months(
      date,
      n_months,
    );
  }

  late final _g_date_subtract_monthsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_subtract_months');
  late final _g_date_subtract_months = _g_date_subtract_monthsPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_add_years(
    ffi.Pointer<GDate> date,
    int n_years,
  ) {
    return _g_date_add_years(
      date,
      n_years,
    );
  }

  late final _g_date_add_yearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_add_years');
  late final _g_date_add_years =
      _g_date_add_yearsPtr.asFunction<void Function(ffi.Pointer<GDate>, int)>();

  void g_date_subtract_years(
    ffi.Pointer<GDate> date,
    int n_years,
  ) {
    return _g_date_subtract_years(
      date,
      n_years,
    );
  }

  late final _g_date_subtract_yearsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDate>, guint)>>(
          'g_date_subtract_years');
  late final _g_date_subtract_years = _g_date_subtract_yearsPtr
      .asFunction<void Function(ffi.Pointer<GDate>, int)>();

  int g_date_is_leap_year(
    int year,
  ) {
    return _g_date_is_leap_year(
      year,
    );
  }

  late final _g_date_is_leap_yearPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GDateYear)>>(
          'g_date_is_leap_year');
  late final _g_date_is_leap_year =
      _g_date_is_leap_yearPtr.asFunction<int Function(int)>();

  int g_date_get_days_in_month(
    int month,
    int year,
  ) {
    return _g_date_get_days_in_month(
      month,
      year,
    );
  }

  late final _g_date_get_days_in_monthPtr =
      _lookup<ffi.NativeFunction<guint8 Function(ffi.Int32, GDateYear)>>(
          'g_date_get_days_in_month');
  late final _g_date_get_days_in_month =
      _g_date_get_days_in_monthPtr.asFunction<int Function(int, int)>();

  int g_date_get_monday_weeks_in_year(
    int year,
  ) {
    return _g_date_get_monday_weeks_in_year(
      year,
    );
  }

  late final _g_date_get_monday_weeks_in_yearPtr =
      _lookup<ffi.NativeFunction<guint8 Function(GDateYear)>>(
          'g_date_get_monday_weeks_in_year');
  late final _g_date_get_monday_weeks_in_year =
      _g_date_get_monday_weeks_in_yearPtr.asFunction<int Function(int)>();

  int g_date_get_sunday_weeks_in_year(
    int year,
  ) {
    return _g_date_get_sunday_weeks_in_year(
      year,
    );
  }

  late final _g_date_get_sunday_weeks_in_yearPtr =
      _lookup<ffi.NativeFunction<guint8 Function(GDateYear)>>(
          'g_date_get_sunday_weeks_in_year');
  late final _g_date_get_sunday_weeks_in_year =
      _g_date_get_sunday_weeks_in_yearPtr.asFunction<int Function(int)>();

  int g_date_days_between(
    ffi.Pointer<GDate> date1,
    ffi.Pointer<GDate> date2,
  ) {
    return _g_date_days_between(
      date1,
      date2,
    );
  }

  late final _g_date_days_betweenPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GDate>, ffi.Pointer<GDate>)>>('g_date_days_between');
  late final _g_date_days_between = _g_date_days_betweenPtr
      .asFunction<int Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  int g_date_compare(
    ffi.Pointer<GDate> lhs,
    ffi.Pointer<GDate> rhs,
  ) {
    return _g_date_compare(
      lhs,
      rhs,
    );
  }

  late final _g_date_comparePtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GDate>, ffi.Pointer<GDate>)>>('g_date_compare');
  late final _g_date_compare = _g_date_comparePtr
      .asFunction<int Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  void g_date_to_struct_tm(
    ffi.Pointer<GDate> date,
    ffi.Pointer<tm> tm,
  ) {
    return _g_date_to_struct_tm(
      date,
      tm,
    );
  }

  late final _g_date_to_struct_tmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDate>, ffi.Pointer<tm>)>>('g_date_to_struct_tm');
  late final _g_date_to_struct_tm = _g_date_to_struct_tmPtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<tm>)>();

  void g_date_clamp(
    ffi.Pointer<GDate> date,
    ffi.Pointer<GDate> min_date,
    ffi.Pointer<GDate> max_date,
  ) {
    return _g_date_clamp(
      date,
      min_date,
      max_date,
    );
  }

  late final _g_date_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>,
              ffi.Pointer<GDate>)>>('g_date_clamp');
  late final _g_date_clamp = _g_date_clampPtr.asFunction<
      void Function(
          ffi.Pointer<GDate>, ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  void g_date_order(
    ffi.Pointer<GDate> date1,
    ffi.Pointer<GDate> date2,
  ) {
    return _g_date_order(
      date1,
      date2,
    );
  }

  late final _g_date_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GDate>, ffi.Pointer<GDate>)>>('g_date_order');
  late final _g_date_order = _g_date_orderPtr
      .asFunction<void Function(ffi.Pointer<GDate>, ffi.Pointer<GDate>)>();

  int g_date_strftime(
    ffi.Pointer<ffi.Char> s,
    int slen,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<GDate> date,
  ) {
    return _g_date_strftime(
      s,
      slen,
      format,
      date,
    );
  }

  late final _g_date_strftimePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<ffi.Char>, gsize, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GDate>)>>('g_date_strftime');
  late final _g_date_strftime = _g_date_strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GDate>)>();

  int closedir(
    ffi.Pointer<DIR> __dirp,
  ) {
    return _closedir(
      __dirp,
    );
  }

  late final _closedirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DIR>)>>(
          'closedir');
  late final _closedir =
      _closedirPtr.asFunction<int Function(ffi.Pointer<DIR>)>();

  ffi.Pointer<DIR> opendir(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _opendir(
      __name,
    );
  }

  late final _opendirPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<DIR> Function(ffi.Pointer<ffi.Char>)>>(
      'opendir');
  late final _opendir = _opendirPtr
      .asFunction<ffi.Pointer<DIR> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<DIR> fdopendir(
    int __fd,
  ) {
    return _fdopendir(
      __fd,
    );
  }

  late final _fdopendirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DIR> Function(ffi.Int)>>(
          'fdopendir');
  late final _fdopendir =
      _fdopendirPtr.asFunction<ffi.Pointer<DIR> Function(int)>();

  ffi.Pointer<dirent> readdir(
    ffi.Pointer<DIR> __dirp,
  ) {
    return _readdir(
      __dirp,
    );
  }

  late final _readdirPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<dirent> Function(ffi.Pointer<DIR>)>>(
      'readdir');
  late final _readdir =
      _readdirPtr.asFunction<ffi.Pointer<dirent> Function(ffi.Pointer<DIR>)>();

  int readdir_r(
    ffi.Pointer<DIR> __dirp,
    ffi.Pointer<dirent> __entry,
    ffi.Pointer<ffi.Pointer<dirent>> __result,
  ) {
    return _readdir_r(
      __dirp,
      __entry,
      __result,
    );
  }

  late final _readdir_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<DIR>, ffi.Pointer<dirent>,
              ffi.Pointer<ffi.Pointer<dirent>>)>>('readdir_r');
  late final _readdir_r = _readdir_rPtr.asFunction<
      int Function(ffi.Pointer<DIR>, ffi.Pointer<dirent>,
          ffi.Pointer<ffi.Pointer<dirent>>)>();

  void rewinddir(
    ffi.Pointer<DIR> __dirp,
  ) {
    return _rewinddir(
      __dirp,
    );
  }

  late final _rewinddirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DIR>)>>(
          'rewinddir');
  late final _rewinddir =
      _rewinddirPtr.asFunction<void Function(ffi.Pointer<DIR>)>();

  void seekdir(
    ffi.Pointer<DIR> __dirp,
    int __pos,
  ) {
    return _seekdir(
      __dirp,
      __pos,
    );
  }

  late final _seekdirPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DIR>, ffi.Long)>>(
      'seekdir');
  late final _seekdir =
      _seekdirPtr.asFunction<void Function(ffi.Pointer<DIR>, int)>();

  int telldir(
    ffi.Pointer<DIR> __dirp,
  ) {
    return _telldir(
      __dirp,
    );
  }

  late final _telldirPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<DIR>)>>(
          'telldir');
  late final _telldir =
      _telldirPtr.asFunction<int Function(ffi.Pointer<DIR>)>();

  int dirfd(
    ffi.Pointer<DIR> __dirp,
  ) {
    return _dirfd(
      __dirp,
    );
  }

  late final _dirfdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<DIR>)>>('dirfd');
  late final _dirfd = _dirfdPtr.asFunction<int Function(ffi.Pointer<DIR>)>();

  int scandir(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> __namelist,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dirent>)>>
        __selector,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Pointer<dirent>>,
                    ffi.Pointer<ffi.Pointer<dirent>>)>>
        __cmp,
  ) {
    return _scandir(
      __dir,
      __namelist,
      __selector,
      __cmp,
    );
  }

  late final _scandirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dirent>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Pointer<dirent>>,
                          ffi.Pointer<ffi.Pointer<dirent>>)>>)>>('scandir');
  late final _scandir = _scandirPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<dirent>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Pointer<dirent>>,
                      ffi.Pointer<ffi.Pointer<dirent>>)>>)>();

  int alphasort(
    ffi.Pointer<ffi.Pointer<dirent>> __e1,
    ffi.Pointer<ffi.Pointer<dirent>> __e2,
  ) {
    return _alphasort(
      __e1,
      __e2,
    );
  }

  late final _alphasortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<dirent>>,
              ffi.Pointer<ffi.Pointer<dirent>>)>>('alphasort');
  late final _alphasort = _alphasortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<dirent>>,
          ffi.Pointer<ffi.Pointer<dirent>>)>();

  int getdirentries(
    int __fd,
    ffi.Pointer<ffi.Char> __buf,
    int __nbytes,
    ffi.Pointer<__off_t> __basep,
  ) {
    return _getdirentries(
      __fd,
      __buf,
      __nbytes,
      __basep,
    );
  }

  late final _getdirentriesPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<__off_t>)>>('getdirentries');
  late final _getdirentries = _getdirentriesPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<__off_t>)>();

  ffi.Pointer<GDir> g_dir_open(
    ffi.Pointer<ffi.Char> path,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dir_open(
      path,
      flags,
      error,
    );
  }

  late final _g_dir_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDir> Function(ffi.Pointer<ffi.Char>, guint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dir_open');
  late final _g_dir_open = _g_dir_openPtr.asFunction<
      ffi.Pointer<GDir> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_dir_read_name(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_read_name(
      dir,
    );
  }

  late final _g_dir_read_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDir>)>>(
      'g_dir_read_name');
  late final _g_dir_read_name = _g_dir_read_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GDir>)>();

  void g_dir_rewind(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_rewind(
      dir,
    );
  }

  late final _g_dir_rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDir>)>>(
          'g_dir_rewind');
  late final _g_dir_rewind =
      _g_dir_rewindPtr.asFunction<void Function(ffi.Pointer<GDir>)>();

  void g_dir_close(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_close(
      dir,
    );
  }

  late final _g_dir_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDir>)>>(
          'g_dir_close');
  late final _g_dir_close =
      _g_dir_closePtr.asFunction<void Function(ffi.Pointer<GDir>)>();

  ffi.Pointer<GDir> g_dir_ref(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_ref(
      dir,
    );
  }

  late final _g_dir_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GDir> Function(ffi.Pointer<GDir>)>>(
      'g_dir_ref');
  late final _g_dir_ref =
      _g_dir_refPtr.asFunction<ffi.Pointer<GDir> Function(ffi.Pointer<GDir>)>();

  void g_dir_unref(
    ffi.Pointer<GDir> dir,
  ) {
    return _g_dir_unref(
      dir,
    );
  }

  late final _g_dir_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GDir>)>>(
          'g_dir_unref');
  late final _g_dir_unref =
      _g_dir_unrefPtr.asFunction<void Function(ffi.Pointer<GDir>)>();

  ffi.Pointer<ffi.Char> g_getenv(
    ffi.Pointer<ffi.Char> variable,
  ) {
    return _g_getenv(
      variable,
    );
  }

  late final _g_getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_getenv');
  late final _g_getenv = _g_getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_setenv(
    ffi.Pointer<ffi.Char> variable,
    ffi.Pointer<ffi.Char> value,
    int overwrite,
  ) {
    return _g_setenv(
      variable,
      value,
      overwrite,
    );
  }

  late final _g_setenvPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              gboolean)>>('g_setenv');
  late final _g_setenv = _g_setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void g_unsetenv(
    ffi.Pointer<ffi.Char> variable,
  ) {
    return _g_unsetenv(
      variable,
    );
  }

  late final _g_unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_unsetenv');
  late final _g_unsetenv =
      _g_unsetenvPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_listenv() {
    return _g_listenv();
  }

  late final _g_listenvPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_listenv');
  late final _g_listenv =
      _g_listenvPtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_get_environ() {
    return _g_get_environ();
  }

  late final _g_get_environPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'g_get_environ');
  late final _g_get_environ = _g_get_environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Char> g_environ_getenv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    ffi.Pointer<ffi.Char> variable,
  ) {
    return _g_environ_getenv(
      envp,
      variable,
    );
  }

  late final _g_environ_getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('g_environ_getenv');
  late final _g_environ_getenv = _g_environ_getenvPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_environ_setenv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    ffi.Pointer<ffi.Char> variable,
    ffi.Pointer<ffi.Char> value,
    int overwrite,
  ) {
    return _g_environ_setenv(
      envp,
      variable,
      value,
      overwrite,
    );
  }

  late final _g_environ_setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gboolean)>>('g_environ_setenv');
  late final _g_environ_setenv = _g_environ_setenvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_environ_unsetenv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    ffi.Pointer<ffi.Char> variable,
  ) {
    return _g_environ_unsetenv(
      envp,
      variable,
    );
  }

  late final _g_environ_unsetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('g_environ_unsetenv');
  late final _g_environ_unsetenv = _g_environ_unsetenvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int g_file_error_quark() {
    return _g_file_error_quark();
  }

  late final _g_file_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_file_error_quark');
  late final _g_file_error_quark =
      _g_file_error_quarkPtr.asFunction<int Function()>();

  int g_file_error_from_errno(
    int err_no,
  ) {
    return _g_file_error_from_errno(
      err_no,
    );
  }

  late final _g_file_error_from_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gint)>>(
          'g_file_error_from_errno');
  late final _g_file_error_from_errno =
      _g_file_error_from_errnoPtr.asFunction<int Function(int)>();

  int g_file_test(
    ffi.Pointer<ffi.Char> filename,
    int test,
  ) {
    return _g_file_test(
      filename,
      test,
    );
  }

  late final _g_file_testPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, ffi.Int32)>>('g_file_test');
  late final _g_file_test =
      _g_file_testPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int g_file_get_contents(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<ffi.Char>> contents,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_get_contents(
      filename,
      contents,
      length,
      error,
    );
  }

  late final _g_file_get_contentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_get_contents');
  late final _g_file_get_contents = _g_file_get_contentsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_contents(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> contents,
    int length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_contents(
      filename,
      contents,
      length,
      error,
    );
  }

  late final _g_file_set_contentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_contents');
  late final _g_file_set_contents = _g_file_set_contentsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_file_set_contents_full(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> contents,
    int length,
    int flags,
    int mode,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_set_contents_full(
      filename,
      contents,
      length,
      flags,
      mode,
      error,
    );
  }

  late final _g_file_set_contents_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_set_contents_full');
  late final _g_file_set_contents_full =
      _g_file_set_contents_fullPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int,
              int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_file_read_link(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_read_link(
      filename,
      error,
    );
  }

  late final _g_file_read_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_read_link');
  late final _g_file_read_link = _g_file_read_linkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_mkdtemp(
    ffi.Pointer<ffi.Char> tmpl,
  ) {
    return _g_mkdtemp(
      tmpl,
    );
  }

  late final _g_mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_mkdtemp');
  late final _g_mkdtemp = _g_mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_mkdtemp_full(
    ffi.Pointer<ffi.Char> tmpl,
    int mode,
  ) {
    return _g_mkdtemp_full(
      tmpl,
      mode,
    );
  }

  late final _g_mkdtemp_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gint)>>('g_mkdtemp_full');
  late final _g_mkdtemp_full = _g_mkdtemp_fullPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int g_mkstemp(
    ffi.Pointer<ffi.Char> tmpl,
  ) {
    return _g_mkstemp(
      tmpl,
    );
  }

  late final _g_mkstempPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<ffi.Char>)>>(
          'g_mkstemp');
  late final _g_mkstemp =
      _g_mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_mkstemp_full(
    ffi.Pointer<ffi.Char> tmpl,
    int flags,
    int mode,
  ) {
    return _g_mkstemp_full(
      tmpl,
      flags,
      mode,
    );
  }

  late final _g_mkstemp_fullPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<ffi.Char>, gint, gint)>>(
      'g_mkstemp_full');
  late final _g_mkstemp_full = _g_mkstemp_fullPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int g_file_open_tmp(
    ffi.Pointer<ffi.Char> tmpl,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name_used,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_file_open_tmp(
      tmpl,
      name_used,
      error,
    );
  }

  late final _g_file_open_tmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_file_open_tmp');
  late final _g_file_open_tmp = _g_file_open_tmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_dir_make_tmp(
    ffi.Pointer<ffi.Char> tmpl,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_dir_make_tmp(
      tmpl,
      error,
    );
  }

  late final _g_dir_make_tmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_dir_make_tmp');
  late final _g_dir_make_tmp = _g_dir_make_tmpPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_build_path(
    ffi.Pointer<ffi.Char> separator,
    ffi.Pointer<ffi.Char> first_element,
  ) {
    return _g_build_path(
      separator,
      first_element,
    );
  }

  late final _g_build_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_build_path');
  late final _g_build_path = _g_build_pathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_build_pathv(
    ffi.Pointer<ffi.Char> separator,
    ffi.Pointer<ffi.Pointer<ffi.Char>> args,
  ) {
    return _g_build_pathv(
      separator,
      args,
    );
  }

  late final _g_build_pathvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_build_pathv');
  late final _g_build_pathv = _g_build_pathvPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> g_build_filename(
    ffi.Pointer<ffi.Char> first_element,
  ) {
    return _g_build_filename(
      first_element,
    );
  }

  late final _g_build_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_build_filename');
  late final _g_build_filename = _g_build_filenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_build_filenamev(
    ffi.Pointer<ffi.Pointer<ffi.Char>> args,
  ) {
    return _g_build_filenamev(
      args,
    );
  }

  late final _g_build_filenamevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_build_filenamev');
  late final _g_build_filenamev = _g_build_filenamevPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> g_build_filename_valist(
    ffi.Pointer<ffi.Char> first_element,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> args,
  ) {
    return _g_build_filename_valist(
      first_element,
      args,
    );
  }

  late final _g_build_filename_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>(
      'g_build_filename_valist');
  late final _g_build_filename_valist = _g_build_filename_valistPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  int g_mkdir_with_parents(
    ffi.Pointer<ffi.Char> pathname,
    int mode,
  ) {
    return _g_mkdir_with_parents(
      pathname,
      mode,
    );
  }

  late final _g_mkdir_with_parentsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<ffi.Char>, gint)>>(
          'g_mkdir_with_parents');
  late final _g_mkdir_with_parents = _g_mkdir_with_parentsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int g_path_is_absolute(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _g_path_is_absolute(
      file_name,
    );
  }

  late final _g_path_is_absolutePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_path_is_absolute');
  late final _g_path_is_absolute =
      _g_path_is_absolutePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_path_skip_root(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _g_path_skip_root(
      file_name,
    );
  }

  late final _g_path_skip_rootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_path_skip_root');
  late final _g_path_skip_root = _g_path_skip_rootPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_basename(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _g_basename(
      file_name,
    );
  }

  late final _g_basenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_basename');
  late final _g_basename = _g_basenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_get_current_dir() {
    return _g_get_current_dir();
  }

  late final _g_get_current_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_get_current_dir');
  late final _g_get_current_dir =
      _g_get_current_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> g_path_get_basename(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _g_path_get_basename(
      file_name,
    );
  }

  late final _g_path_get_basenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_path_get_basename');
  late final _g_path_get_basename = _g_path_get_basenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_path_get_dirname(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _g_path_get_dirname(
      file_name,
    );
  }

  late final _g_path_get_dirnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_path_get_dirname');
  late final _g_path_get_dirname = _g_path_get_dirnamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_canonicalize_filename(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> relative_to,
  ) {
    return _g_canonicalize_filename(
      filename,
      relative_to,
    );
  }

  late final _g_canonicalize_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_canonicalize_filename');
  late final _g_canonicalize_filename = _g_canonicalize_filenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strip_context(
    ffi.Pointer<ffi.Char> msgid,
    ffi.Pointer<ffi.Char> msgval,
  ) {
    return _g_strip_context(
      msgid,
      msgval,
    );
  }

  late final _g_strip_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_strip_context');
  late final _g_strip_context = _g_strip_contextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_dgettext(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> msgid,
  ) {
    return _g_dgettext(
      domain,
      msgid,
    );
  }

  late final _g_dgettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_dgettext');
  late final _g_dgettext = _g_dgettextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_dcgettext(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> msgid,
    int category,
  ) {
    return _g_dcgettext(
      domain,
      msgid,
      category,
    );
  }

  late final _g_dcgettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gint)>>('g_dcgettext');
  late final _g_dcgettext = _g_dcgettextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_dngettext(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> msgid,
    ffi.Pointer<ffi.Char> msgid_plural,
    int n,
  ) {
    return _g_dngettext(
      domain,
      msgid,
      msgid_plural,
      n,
    );
  }

  late final _g_dngettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gulong)>>('g_dngettext');
  late final _g_dngettext = _g_dngettextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_dpgettext(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> msgctxtid,
    int msgidoffset,
  ) {
    return _g_dpgettext(
      domain,
      msgctxtid,
      msgidoffset,
    );
  }

  late final _g_dpgettextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gsize)>>('g_dpgettext');
  late final _g_dpgettext = _g_dpgettextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_dpgettext2(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> context,
    ffi.Pointer<ffi.Char> msgid,
  ) {
    return _g_dpgettext2(
      domain,
      context,
      msgid,
    );
  }

  late final _g_dpgettext2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_dpgettext2');
  late final _g_dpgettext2 = _g_dpgettext2Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_free(
    ffi.Pointer mem,
  ) {
    return _g_free(
      mem,
    );
  }

  late final _g_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>('g_free');
  late final _g_free = _g_freePtr.asFunction<void Function(ffi.Pointer)>();

  void g_free_sized(
    ffi.Pointer mem,
    int size,
  ) {
    return _g_free_sized(
      mem,
      size,
    );
  }

  late final _g_free_sizedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer, ffi.Size)>>(
          'g_free_sized');
  late final _g_free_sized =
      _g_free_sizedPtr.asFunction<void Function(ffi.Pointer, int)>();

  void g_clear_pointer(
    ffi.Pointer<ffi.Pointer> pp,
    GDestroyNotify destroy,
  ) {
    return _g_clear_pointer(
      pp,
      destroy,
    );
  }

  late final _g_clear_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer>, GDestroyNotify)>>('g_clear_pointer');
  late final _g_clear_pointer = _g_clear_pointerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer>, GDestroyNotify)>();

  ffi.Pointer g_malloc(
    int n_bytes,
  ) {
    return _g_malloc(
      n_bytes,
    );
  }

  late final _g_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>('g_malloc');
  late final _g_malloc = _g_mallocPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_malloc0(
    int n_bytes,
  ) {
    return _g_malloc0(
      n_bytes,
    );
  }

  late final _g_malloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>('g_malloc0');
  late final _g_malloc0 = _g_malloc0Ptr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_realloc(
    ffi.Pointer mem,
    int n_bytes,
  ) {
    return _g_realloc(
      mem,
      n_bytes,
    );
  }

  late final _g_reallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer, gsize)>>(
          'g_realloc');
  late final _g_realloc =
      _g_reallocPtr.asFunction<ffi.Pointer Function(ffi.Pointer, int)>();

  ffi.Pointer g_try_malloc(
    int n_bytes,
  ) {
    return _g_try_malloc(
      n_bytes,
    );
  }

  late final _g_try_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>('g_try_malloc');
  late final _g_try_malloc =
      _g_try_mallocPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_try_malloc0(
    int n_bytes,
  ) {
    return _g_try_malloc0(
      n_bytes,
    );
  }

  late final _g_try_malloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>('g_try_malloc0');
  late final _g_try_malloc0 =
      _g_try_malloc0Ptr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_try_realloc(
    ffi.Pointer mem,
    int n_bytes,
  ) {
    return _g_try_realloc(
      mem,
      n_bytes,
    );
  }

  late final _g_try_reallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer, gsize)>>(
          'g_try_realloc');
  late final _g_try_realloc =
      _g_try_reallocPtr.asFunction<ffi.Pointer Function(ffi.Pointer, int)>();

  ffi.Pointer g_malloc_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_malloc_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_malloc_nPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gsize)>>(
          'g_malloc_n');
  late final _g_malloc_n =
      _g_malloc_nPtr.asFunction<ffi.Pointer Function(int, int)>();

  ffi.Pointer g_malloc0_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_malloc0_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_malloc0_nPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gsize)>>(
          'g_malloc0_n');
  late final _g_malloc0_n =
      _g_malloc0_nPtr.asFunction<ffi.Pointer Function(int, int)>();

  ffi.Pointer g_realloc_n(
    ffi.Pointer mem,
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_realloc_n(
      mem,
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_realloc_nPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer, gsize, gsize)>>(
      'g_realloc_n');
  late final _g_realloc_n =
      _g_realloc_nPtr.asFunction<ffi.Pointer Function(ffi.Pointer, int, int)>();

  ffi.Pointer g_try_malloc_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_try_malloc_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_try_malloc_nPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gsize)>>(
          'g_try_malloc_n');
  late final _g_try_malloc_n =
      _g_try_malloc_nPtr.asFunction<ffi.Pointer Function(int, int)>();

  ffi.Pointer g_try_malloc0_n(
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_try_malloc0_n(
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_try_malloc0_nPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gsize)>>(
          'g_try_malloc0_n');
  late final _g_try_malloc0_n =
      _g_try_malloc0_nPtr.asFunction<ffi.Pointer Function(int, int)>();

  ffi.Pointer g_try_realloc_n(
    ffi.Pointer mem,
    int n_blocks,
    int n_block_bytes,
  ) {
    return _g_try_realloc_n(
      mem,
      n_blocks,
      n_block_bytes,
    );
  }

  late final _g_try_realloc_nPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer, gsize, gsize)>>(
      'g_try_realloc_n');
  late final _g_try_realloc_n = _g_try_realloc_nPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer, int, int)>();

  ffi.Pointer g_aligned_alloc(
    int n_blocks,
    int n_block_bytes,
    int alignment,
  ) {
    return _g_aligned_alloc(
      n_blocks,
      n_block_bytes,
      alignment,
    );
  }

  late final _g_aligned_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gsize, gsize)>>(
          'g_aligned_alloc');
  late final _g_aligned_alloc =
      _g_aligned_allocPtr.asFunction<ffi.Pointer Function(int, int, int)>();

  ffi.Pointer g_aligned_alloc0(
    int n_blocks,
    int n_block_bytes,
    int alignment,
  ) {
    return _g_aligned_alloc0(
      n_blocks,
      n_block_bytes,
      alignment,
    );
  }

  late final _g_aligned_alloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gsize, gsize)>>(
          'g_aligned_alloc0');
  late final _g_aligned_alloc0 =
      _g_aligned_alloc0Ptr.asFunction<ffi.Pointer Function(int, int, int)>();

  void g_aligned_free(
    ffi.Pointer mem,
  ) {
    return _g_aligned_free(
      mem,
    );
  }

  late final _g_aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_aligned_free');
  late final _g_aligned_free =
      _g_aligned_freePtr.asFunction<void Function(ffi.Pointer)>();

  void g_aligned_free_sized(
    ffi.Pointer mem,
    int alignment,
    int size,
  ) {
    return _g_aligned_free_sized(
      mem,
      alignment,
      size,
    );
  }

  late final _g_aligned_free_sizedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer, ffi.Size, ffi.Size)>>(
      'g_aligned_free_sized');
  late final _g_aligned_free_sized = _g_aligned_free_sizedPtr
      .asFunction<void Function(ffi.Pointer, int, int)>();

  void g_mem_set_vtable(
    ffi.Pointer<GMemVTable> vtable,
  ) {
    return _g_mem_set_vtable(
      vtable,
    );
  }

  late final _g_mem_set_vtablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemVTable>)>>(
          'g_mem_set_vtable');
  late final _g_mem_set_vtable =
      _g_mem_set_vtablePtr.asFunction<void Function(ffi.Pointer<GMemVTable>)>();

  int g_mem_is_system_malloc() {
    return _g_mem_is_system_malloc();
  }

  late final _g_mem_is_system_mallocPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_mem_is_system_malloc');
  late final _g_mem_is_system_malloc =
      _g_mem_is_system_mallocPtr.asFunction<int Function()>();

  late final ffi.Pointer<gboolean> _g_mem_gc_friendly =
      _lookup<gboolean>('g_mem_gc_friendly');

  int get g_mem_gc_friendly => _g_mem_gc_friendly.value;

  set g_mem_gc_friendly(int value) => _g_mem_gc_friendly.value = value;

  late final ffi.Pointer<ffi.Pointer<GMemVTable>> _glib_mem_profiler_table =
      _lookup<ffi.Pointer<GMemVTable>>('glib_mem_profiler_table');

  ffi.Pointer<GMemVTable> get glib_mem_profiler_table =>
      _glib_mem_profiler_table.value;

  set glib_mem_profiler_table(ffi.Pointer<GMemVTable> value) =>
      _glib_mem_profiler_table.value = value;

  void g_mem_profile() {
    return _g_mem_profile();
  }

  late final _g_mem_profilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_mem_profile');
  late final _g_mem_profile = _g_mem_profilePtr.asFunction<void Function()>();

  ffi.Pointer<GNode> g_node_new(
    ffi.Pointer data,
  ) {
    return _g_node_new(
      data,
    );
  }

  late final _g_node_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer)>>(
          'g_node_new');
  late final _g_node_new =
      _g_node_newPtr.asFunction<ffi.Pointer<GNode> Function(ffi.Pointer)>();

  void g_node_destroy(
    ffi.Pointer<GNode> root,
  ) {
    return _g_node_destroy(
      root,
    );
  }

  late final _g_node_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GNode>)>>(
          'g_node_destroy');
  late final _g_node_destroy =
      _g_node_destroyPtr.asFunction<void Function(ffi.Pointer<GNode>)>();

  void g_node_unlink(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_unlink(
      node,
    );
  }

  late final _g_node_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GNode>)>>(
          'g_node_unlink');
  late final _g_node_unlink =
      _g_node_unlinkPtr.asFunction<void Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_copy_deep(
    ffi.Pointer<GNode> node,
    GCopyFunc copy_func,
    ffi.Pointer data,
  ) {
    return _g_node_copy_deep(
      node,
      copy_func,
      data,
    );
  }

  late final _g_node_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, GCopyFunc, ffi.Pointer)>>('g_node_copy_deep');
  late final _g_node_copy_deep = _g_node_copy_deepPtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, GCopyFunc, ffi.Pointer)>();

  ffi.Pointer<GNode> g_node_copy(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_copy(
      node,
    );
  }

  late final _g_node_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_copy');
  late final _g_node_copy = _g_node_copyPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_insert(
    ffi.Pointer<GNode> parent,
    int position,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_insert(
      parent,
      position,
      node,
    );
  }

  late final _g_node_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, gint, ffi.Pointer<GNode>)>>('g_node_insert');
  late final _g_node_insert = _g_node_insertPtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, int, ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_insert_before(
    ffi.Pointer<GNode> parent,
    ffi.Pointer<GNode> sibling,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_insert_before(
      parent,
      sibling,
      node,
    );
  }

  late final _g_node_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>,
              ffi.Pointer<GNode>)>>('g_node_insert_before');
  late final _g_node_insert_before = _g_node_insert_beforePtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_insert_after(
    ffi.Pointer<GNode> parent,
    ffi.Pointer<GNode> sibling,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_insert_after(
      parent,
      sibling,
      node,
    );
  }

  late final _g_node_insert_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>,
              ffi.Pointer<GNode>)>>('g_node_insert_after');
  late final _g_node_insert_after = _g_node_insert_afterPtr.asFunction<
      ffi.Pointer<GNode> Function(
          ffi.Pointer<GNode>, ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_prepend(
    ffi.Pointer<GNode> parent,
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_prepend(
      parent,
      node,
    );
  }

  late final _g_node_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, ffi.Pointer<GNode>)>>('g_node_prepend');
  late final _g_node_prepend = _g_node_prependPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  int g_node_n_nodes(
    ffi.Pointer<GNode> root,
    int flags,
  ) {
    return _g_node_n_nodes(
      root,
      flags,
    );
  }

  late final _g_node_n_nodesPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GNode>, ffi.Int32)>>(
      'g_node_n_nodes');
  late final _g_node_n_nodes =
      _g_node_n_nodesPtr.asFunction<int Function(ffi.Pointer<GNode>, int)>();

  ffi.Pointer<GNode> g_node_get_root(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_get_root(
      node,
    );
  }

  late final _g_node_get_rootPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_get_root');
  late final _g_node_get_root = _g_node_get_rootPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  int g_node_is_ancestor(
    ffi.Pointer<GNode> node,
    ffi.Pointer<GNode> descendant,
  ) {
    return _g_node_is_ancestor(
      node,
      descendant,
    );
  }

  late final _g_node_is_ancestorPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GNode>, ffi.Pointer<GNode>)>>('g_node_is_ancestor');
  late final _g_node_is_ancestor = _g_node_is_ancestorPtr
      .asFunction<int Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  int g_node_depth(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_depth(
      node,
    );
  }

  late final _g_node_depthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GNode>)>>(
          'g_node_depth');
  late final _g_node_depth =
      _g_node_depthPtr.asFunction<int Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_find(
    ffi.Pointer<GNode> root,
    int order,
    int flags,
    ffi.Pointer data,
  ) {
    return _g_node_find(
      root,
      order,
      flags,
      data,
    );
  }

  late final _g_node_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Int32, ffi.Int32,
              ffi.Pointer)>>('g_node_find');
  late final _g_node_find = _g_node_findPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, int, int, ffi.Pointer)>();

  void g_node_traverse(
    ffi.Pointer<GNode> root,
    int order,
    int flags,
    int max_depth,
    GNodeTraverseFunc func,
    ffi.Pointer data,
  ) {
    return _g_node_traverse(
      root,
      order,
      flags,
      max_depth,
      func,
      data,
    );
  }

  late final _g_node_traversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNode>, ffi.Int32, ffi.Int32, gint,
              GNodeTraverseFunc, ffi.Pointer)>>('g_node_traverse');
  late final _g_node_traverse = _g_node_traversePtr.asFunction<
      void Function(
          ffi.Pointer<GNode>, int, int, int, GNodeTraverseFunc, ffi.Pointer)>();

  int g_node_max_height(
    ffi.Pointer<GNode> root,
  ) {
    return _g_node_max_height(
      root,
    );
  }

  late final _g_node_max_heightPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GNode>)>>(
          'g_node_max_height');
  late final _g_node_max_height =
      _g_node_max_heightPtr.asFunction<int Function(ffi.Pointer<GNode>)>();

  void g_node_children_foreach(
    ffi.Pointer<GNode> node,
    int flags,
    GNodeForeachFunc func,
    ffi.Pointer data,
  ) {
    return _g_node_children_foreach(
      node,
      flags,
      func,
      data,
    );
  }

  late final _g_node_children_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GNode>, ffi.Int32, GNodeForeachFunc,
              ffi.Pointer)>>('g_node_children_foreach');
  late final _g_node_children_foreach = _g_node_children_foreachPtr.asFunction<
      void Function(ffi.Pointer<GNode>, int, GNodeForeachFunc, ffi.Pointer)>();

  void g_node_reverse_children(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_reverse_children(
      node,
    );
  }

  late final _g_node_reverse_childrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GNode>)>>(
          'g_node_reverse_children');
  late final _g_node_reverse_children = _g_node_reverse_childrenPtr
      .asFunction<void Function(ffi.Pointer<GNode>)>();

  int g_node_n_children(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_n_children(
      node,
    );
  }

  late final _g_node_n_childrenPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GNode>)>>(
          'g_node_n_children');
  late final _g_node_n_children =
      _g_node_n_childrenPtr.asFunction<int Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_nth_child(
    ffi.Pointer<GNode> node,
    int n,
  ) {
    return _g_node_nth_child(
      node,
      n,
    );
  }

  late final _g_node_nth_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(
              ffi.Pointer<GNode>, guint)>>('g_node_nth_child');
  late final _g_node_nth_child = _g_node_nth_childPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, int)>();

  ffi.Pointer<GNode> g_node_last_child(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_last_child(
      node,
    );
  }

  late final _g_node_last_childPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_last_child');
  late final _g_node_last_child = _g_node_last_childPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_find_child(
    ffi.Pointer<GNode> node,
    int flags,
    ffi.Pointer data,
  ) {
    return _g_node_find_child(
      node,
      flags,
      data,
    );
  }

  late final _g_node_find_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, ffi.Int32,
              ffi.Pointer)>>('g_node_find_child');
  late final _g_node_find_child = _g_node_find_childPtr.asFunction<
      ffi.Pointer<GNode> Function(ffi.Pointer<GNode>, int, ffi.Pointer)>();

  int g_node_child_position(
    ffi.Pointer<GNode> node,
    ffi.Pointer<GNode> child,
  ) {
    return _g_node_child_position(
      node,
      child,
    );
  }

  late final _g_node_child_positionPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GNode>,
              ffi.Pointer<GNode>)>>('g_node_child_position');
  late final _g_node_child_position = _g_node_child_positionPtr
      .asFunction<int Function(ffi.Pointer<GNode>, ffi.Pointer<GNode>)>();

  int g_node_child_index(
    ffi.Pointer<GNode> node,
    ffi.Pointer data,
  ) {
    return _g_node_child_index(
      node,
      data,
    );
  }

  late final _g_node_child_indexPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<GNode>, ffi.Pointer)>>(
      'g_node_child_index');
  late final _g_node_child_index = _g_node_child_indexPtr
      .asFunction<int Function(ffi.Pointer<GNode>, ffi.Pointer)>();

  ffi.Pointer<GNode> g_node_first_sibling(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_first_sibling(
      node,
    );
  }

  late final _g_node_first_siblingPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_first_sibling');
  late final _g_node_first_sibling = _g_node_first_siblingPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GNode> g_node_last_sibling(
    ffi.Pointer<GNode> node,
  ) {
    return _g_node_last_sibling(
      node,
    );
  }

  late final _g_node_last_siblingPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>>(
      'g_node_last_sibling');
  late final _g_node_last_sibling = _g_node_last_siblingPtr
      .asFunction<ffi.Pointer<GNode> Function(ffi.Pointer<GNode>)>();

  ffi.Pointer<GList> g_list_alloc() {
    return _g_list_alloc();
  }

  late final _g_list_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'g_list_alloc');
  late final _g_list_alloc =
      _g_list_allocPtr.asFunction<ffi.Pointer<GList> Function()>();

  void g_list_free(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_free(
      list,
    );
  }

  late final _g_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_list_free');
  late final _g_list_free =
      _g_list_freePtr.asFunction<void Function(ffi.Pointer<GList>)>();

  void g_list_free_1(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_free_1(
      list,
    );
  }

  late final _g_list_free_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'g_list_free_1');
  late final _g_list_free_1 =
      _g_list_free_1Ptr.asFunction<void Function(ffi.Pointer<GList>)>();

  void g_list_free_full(
    ffi.Pointer<GList> list,
    GDestroyNotify free_func,
  ) {
    return _g_list_free_full(
      list,
      free_func,
    );
  }

  late final _g_list_free_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GList>, GDestroyNotify)>>('g_list_free_full');
  late final _g_list_free_full = _g_list_free_fullPtr
      .asFunction<void Function(ffi.Pointer<GList>, GDestroyNotify)>();

  ffi.Pointer<GList> g_list_append(
    ffi.Pointer<GList> list,
    ffi.Pointer data,
  ) {
    return _g_list_append(
      list,
      data,
    );
  }

  late final _g_list_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer)>>('g_list_append');
  late final _g_list_append = _g_list_appendPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer)>();

  ffi.Pointer<GList> g_list_prepend(
    ffi.Pointer<GList> list,
    ffi.Pointer data,
  ) {
    return _g_list_prepend(
      list,
      data,
    );
  }

  late final _g_list_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer)>>('g_list_prepend');
  late final _g_list_prepend = _g_list_prependPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer)>();

  ffi.Pointer<GList> g_list_insert(
    ffi.Pointer<GList> list,
    ffi.Pointer data,
    int position,
  ) {
    return _g_list_insert(
      list,
      data,
      position,
    );
  }

  late final _g_list_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer, gint)>>('g_list_insert');
  late final _g_list_insert = _g_list_insertPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer, int)>();

  ffi.Pointer<GList> g_list_insert_sorted(
    ffi.Pointer<GList> list,
    ffi.Pointer data,
    GCompareFunc func,
  ) {
    return _g_list_insert_sorted(
      list,
      data,
      func,
    );
  }

  late final _g_list_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer,
              GCompareFunc)>>('g_list_insert_sorted');
  late final _g_list_insert_sorted = _g_list_insert_sortedPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, ffi.Pointer, GCompareFunc)>();

  ffi.Pointer<GList> g_list_insert_sorted_with_data(
    ffi.Pointer<GList> list,
    ffi.Pointer data,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_list_insert_sorted_with_data(
      list,
      data,
      func,
      user_data,
    );
  }

  late final _g_list_insert_sorted_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>,
              ffi.Pointer,
              GCompareDataFunc,
              ffi.Pointer)>>('g_list_insert_sorted_with_data');
  late final _g_list_insert_sorted_with_data =
      _g_list_insert_sorted_with_dataPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer,
              GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GList> g_list_insert_before(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> sibling,
    ffi.Pointer data,
  ) {
    return _g_list_insert_before(
      list,
      sibling,
      data,
    );
  }

  late final _g_list_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>,
              ffi.Pointer)>>('g_list_insert_before');
  late final _g_list_insert_before = _g_list_insert_beforePtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, ffi.Pointer<GList>, ffi.Pointer)>();

  ffi.Pointer<GList> g_list_insert_before_link(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> sibling,
    ffi.Pointer<GList> link_,
  ) {
    return _g_list_insert_before_link(
      list,
      sibling,
      link_,
    );
  }

  late final _g_list_insert_before_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>,
              ffi.Pointer<GList>)>>('g_list_insert_before_link');
  late final _g_list_insert_before_link =
      _g_list_insert_before_linkPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_concat(
    ffi.Pointer<GList> list1,
    ffi.Pointer<GList> list2,
  ) {
    return _g_list_concat(
      list1,
      list2,
    );
  }

  late final _g_list_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_concat');
  late final _g_list_concat = _g_list_concatPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_remove(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_remove(
      list,
      data,
    );
  }

  late final _g_list_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gconstpointer)>>('g_list_remove');
  late final _g_list_remove = _g_list_removePtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_remove_all(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_remove_all(
      list,
      data,
    );
  }

  late final _g_list_remove_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gconstpointer)>>('g_list_remove_all');
  late final _g_list_remove_all = _g_list_remove_allPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_remove_link(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> llink,
  ) {
    return _g_list_remove_link(
      list,
      llink,
    );
  }

  late final _g_list_remove_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_remove_link');
  late final _g_list_remove_link = _g_list_remove_linkPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_delete_link(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> link_,
  ) {
    return _g_list_delete_link(
      list,
      link_,
    );
  }

  late final _g_list_delete_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_delete_link');
  late final _g_list_delete_link = _g_list_delete_linkPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_reverse(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_reverse(
      list,
    );
  }

  late final _g_list_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_reverse');
  late final _g_list_reverse = _g_list_reversePtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_copy(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_copy(
      list,
    );
  }

  late final _g_list_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_copy');
  late final _g_list_copy = _g_list_copyPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_copy_deep(
    ffi.Pointer<GList> list,
    GCopyFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_list_copy_deep(
      list,
      func,
      user_data,
    );
  }

  late final _g_list_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, GCopyFunc, ffi.Pointer)>>('g_list_copy_deep');
  late final _g_list_copy_deep = _g_list_copy_deepPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, GCopyFunc, ffi.Pointer)>();

  ffi.Pointer<GList> g_list_nth(
    ffi.Pointer<GList> list,
    int n,
  ) {
    return _g_list_nth(
      list,
      n,
    );
  }

  late final _g_list_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, guint)>>('g_list_nth');
  late final _g_list_nth = _g_list_nthPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>, int)>();

  ffi.Pointer<GList> g_list_nth_prev(
    ffi.Pointer<GList> list,
    int n,
  ) {
    return _g_list_nth_prev(
      list,
      n,
    );
  }

  late final _g_list_nth_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, guint)>>('g_list_nth_prev');
  late final _g_list_nth_prev = _g_list_nth_prevPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>, int)>();

  ffi.Pointer<GList> g_list_find(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_find(
      list,
      data,
    );
  }

  late final _g_list_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, gconstpointer)>>('g_list_find');
  late final _g_list_find = _g_list_findPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_find_custom(
    ffi.Pointer<GList> list,
    gconstpointer data,
    GCompareFunc func,
  ) {
    return _g_list_find_custom(
      list,
      data,
      func,
    );
  }

  late final _g_list_find_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, gconstpointer,
              GCompareFunc)>>('g_list_find_custom');
  late final _g_list_find_custom = _g_list_find_customPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, gconstpointer, GCompareFunc)>();

  int g_list_position(
    ffi.Pointer<GList> list,
    ffi.Pointer<GList> llink,
  ) {
    return _g_list_position(
      list,
      llink,
    );
  }

  late final _g_list_positionPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GList>, ffi.Pointer<GList>)>>('g_list_position');
  late final _g_list_position = _g_list_positionPtr
      .asFunction<int Function(ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  int g_list_index(
    ffi.Pointer<GList> list,
    gconstpointer data,
  ) {
    return _g_list_index(
      list,
      data,
    );
  }

  late final _g_list_indexPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<GList>, gconstpointer)>>(
      'g_list_index');
  late final _g_list_index = _g_list_indexPtr
      .asFunction<int Function(ffi.Pointer<GList>, gconstpointer)>();

  ffi.Pointer<GList> g_list_last(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_last(
      list,
    );
  }

  late final _g_list_lastPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_last');
  late final _g_list_last = _g_list_lastPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_list_first(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_first(
      list,
    );
  }

  late final _g_list_firstPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'g_list_first');
  late final _g_list_first = _g_list_firstPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  int g_list_length(
    ffi.Pointer<GList> list,
  ) {
    return _g_list_length(
      list,
    );
  }

  late final _g_list_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GList>)>>(
          'g_list_length');
  late final _g_list_length =
      _g_list_lengthPtr.asFunction<int Function(ffi.Pointer<GList>)>();

  void g_list_foreach(
    ffi.Pointer<GList> list,
    GFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_list_foreach(
      list,
      func,
      user_data,
    );
  }

  late final _g_list_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GList>, GFunc, ffi.Pointer)>>('g_list_foreach');
  late final _g_list_foreach = _g_list_foreachPtr
      .asFunction<void Function(ffi.Pointer<GList>, GFunc, ffi.Pointer)>();

  ffi.Pointer<GList> g_list_sort(
    ffi.Pointer<GList> list,
    GCompareFunc compare_func,
  ) {
    return _g_list_sort(
      list,
      compare_func,
    );
  }

  late final _g_list_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, GCompareFunc)>>('g_list_sort');
  late final _g_list_sort = _g_list_sortPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GList>, GCompareFunc)>();

  ffi.Pointer<GList> g_list_sort_with_data(
    ffi.Pointer<GList> list,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_list_sort_with_data(
      list,
      compare_func,
      user_data,
    );
  }

  late final _g_list_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, GCompareDataFunc,
              ffi.Pointer)>>('g_list_sort_with_data');
  late final _g_list_sort_with_data = _g_list_sort_with_dataPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GList>, GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer g_list_nth_data(
    ffi.Pointer<GList> list,
    int n,
  ) {
    return _g_list_nth_data(
      list,
      n,
    );
  }

  late final _g_list_nth_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GList>, guint)>>(
      'g_list_nth_data');
  late final _g_list_nth_data = _g_list_nth_dataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GList>, int)>();

  void g_clear_list(
    ffi.Pointer<ffi.Pointer<GList>> list_ptr,
    GDestroyNotify destroy,
  ) {
    return _g_clear_list(
      list_ptr,
      destroy,
    );
  }

  late final _g_clear_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GList>>,
              GDestroyNotify)>>('g_clear_list');
  late final _g_clear_list = _g_clear_listPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GList>>, GDestroyNotify)>();

  ffi.Pointer<GHashTable> g_hash_table_new(
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_hash_table_new(
      hash_func,
      key_equal_func,
    );
  }

  late final _g_hash_table_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              GHashFunc, GEqualFunc)>>('g_hash_table_new');
  late final _g_hash_table_new = _g_hash_table_newPtr
      .asFunction<ffi.Pointer<GHashTable> Function(GHashFunc, GEqualFunc)>();

  ffi.Pointer<GHashTable> g_hash_table_new_full(
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
    GDestroyNotify key_destroy_func,
    GDestroyNotify value_destroy_func,
  ) {
    return _g_hash_table_new_full(
      hash_func,
      key_equal_func,
      key_destroy_func,
      value_destroy_func,
    );
  }

  late final _g_hash_table_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(GHashFunc, GEqualFunc,
              GDestroyNotify, GDestroyNotify)>>('g_hash_table_new_full');
  late final _g_hash_table_new_full = _g_hash_table_new_fullPtr.asFunction<
      ffi.Pointer<GHashTable> Function(
          GHashFunc, GEqualFunc, GDestroyNotify, GDestroyNotify)>();

  ffi.Pointer<GHashTable> g_hash_table_new_similar(
    ffi.Pointer<GHashTable> other_hash_table,
  ) {
    return _g_hash_table_new_similar(
      other_hash_table,
    );
  }

  late final _g_hash_table_new_similarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_new_similar');
  late final _g_hash_table_new_similar = _g_hash_table_new_similarPtr
      .asFunction<ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTable>)>();

  void g_hash_table_destroy(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_destroy(
      hash_table,
    );
  }

  late final _g_hash_table_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_destroy');
  late final _g_hash_table_destroy = _g_hash_table_destroyPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_hash_table_insert(
    ffi.Pointer<GHashTable> hash_table,
    ffi.Pointer key,
    ffi.Pointer value,
  ) {
    return _g_hash_table_insert(
      hash_table,
      key,
      value,
    );
  }

  late final _g_hash_table_insertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>, ffi.Pointer,
              ffi.Pointer)>>('g_hash_table_insert');
  late final _g_hash_table_insert = _g_hash_table_insertPtr.asFunction<
      int Function(ffi.Pointer<GHashTable>, ffi.Pointer, ffi.Pointer)>();

  int g_hash_table_replace(
    ffi.Pointer<GHashTable> hash_table,
    ffi.Pointer key,
    ffi.Pointer value,
  ) {
    return _g_hash_table_replace(
      hash_table,
      key,
      value,
    );
  }

  late final _g_hash_table_replacePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>, ffi.Pointer,
              ffi.Pointer)>>('g_hash_table_replace');
  late final _g_hash_table_replace = _g_hash_table_replacePtr.asFunction<
      int Function(ffi.Pointer<GHashTable>, ffi.Pointer, ffi.Pointer)>();

  int g_hash_table_add(
    ffi.Pointer<GHashTable> hash_table,
    ffi.Pointer key,
  ) {
    return _g_hash_table_add(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_addPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>, ffi.Pointer)>>('g_hash_table_add');
  late final _g_hash_table_add = _g_hash_table_addPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, ffi.Pointer)>();

  int g_hash_table_remove(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_remove(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>, gconstpointer)>>('g_hash_table_remove');
  late final _g_hash_table_remove = _g_hash_table_removePtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  void g_hash_table_remove_all(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_remove_all(
      hash_table,
    );
  }

  late final _g_hash_table_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_remove_all');
  late final _g_hash_table_remove_all = _g_hash_table_remove_allPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_hash_table_steal(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_steal(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_stealPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>, gconstpointer)>>('g_hash_table_steal');
  late final _g_hash_table_steal = _g_hash_table_stealPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  int g_hash_table_steal_extended(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer lookup_key,
    ffi.Pointer<ffi.Pointer> stolen_key,
    ffi.Pointer<ffi.Pointer> stolen_value,
  ) {
    return _g_hash_table_steal_extended(
      hash_table,
      lookup_key,
      stolen_key,
      stolen_value,
    );
  }

  late final _g_hash_table_steal_extendedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>,
              gconstpointer,
              ffi.Pointer<ffi.Pointer>,
              ffi.Pointer<ffi.Pointer>)>>('g_hash_table_steal_extended');
  late final _g_hash_table_steal_extended =
      _g_hash_table_steal_extendedPtr.asFunction<
          int Function(ffi.Pointer<GHashTable>, gconstpointer,
              ffi.Pointer<ffi.Pointer>, ffi.Pointer<ffi.Pointer>)>();

  void g_hash_table_steal_all(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_steal_all(
      hash_table,
    );
  }

  late final _g_hash_table_steal_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_steal_all');
  late final _g_hash_table_steal_all = _g_hash_table_steal_allPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GPtrArray> g_hash_table_steal_all_keys(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_steal_all_keys(
      hash_table,
    );
  }

  late final _g_hash_table_steal_all_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_steal_all_keys');
  late final _g_hash_table_steal_all_keys = _g_hash_table_steal_all_keysPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GPtrArray> g_hash_table_steal_all_values(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_steal_all_values(
      hash_table,
    );
  }

  late final _g_hash_table_steal_all_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_steal_all_values');
  late final _g_hash_table_steal_all_values = _g_hash_table_steal_all_valuesPtr
      .asFunction<ffi.Pointer<GPtrArray> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer g_hash_table_lookup(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_lookup(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GHashTable>, gconstpointer)>>('g_hash_table_lookup');
  late final _g_hash_table_lookup = _g_hash_table_lookupPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  int g_hash_table_contains(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer key,
  ) {
    return _g_hash_table_contains(
      hash_table,
      key,
    );
  }

  late final _g_hash_table_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>,
              gconstpointer)>>('g_hash_table_contains');
  late final _g_hash_table_contains = _g_hash_table_containsPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gconstpointer)>();

  int g_hash_table_lookup_extended(
    ffi.Pointer<GHashTable> hash_table,
    gconstpointer lookup_key,
    ffi.Pointer<ffi.Pointer> orig_key,
    ffi.Pointer<ffi.Pointer> value,
  ) {
    return _g_hash_table_lookup_extended(
      hash_table,
      lookup_key,
      orig_key,
      value,
    );
  }

  late final _g_hash_table_lookup_extendedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTable>,
              gconstpointer,
              ffi.Pointer<ffi.Pointer>,
              ffi.Pointer<ffi.Pointer>)>>('g_hash_table_lookup_extended');
  late final _g_hash_table_lookup_extended =
      _g_hash_table_lookup_extendedPtr.asFunction<
          int Function(ffi.Pointer<GHashTable>, gconstpointer,
              ffi.Pointer<ffi.Pointer>, ffi.Pointer<ffi.Pointer>)>();

  void g_hash_table_foreach(
    ffi.Pointer<GHashTable> hash_table,
    GHFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_hash_table_foreach(
      hash_table,
      func,
      user_data,
    );
  }

  late final _g_hash_table_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHashTable>, GHFunc,
              ffi.Pointer)>>('g_hash_table_foreach');
  late final _g_hash_table_foreach = _g_hash_table_foreachPtr.asFunction<
      void Function(ffi.Pointer<GHashTable>, GHFunc, ffi.Pointer)>();

  ffi.Pointer g_hash_table_find(
    ffi.Pointer<GHashTable> hash_table,
    GHRFunc predicate,
    ffi.Pointer user_data,
  ) {
    return _g_hash_table_find(
      hash_table,
      predicate,
      user_data,
    );
  }

  late final _g_hash_table_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GHashTable>, GHRFunc,
              ffi.Pointer)>>('g_hash_table_find');
  late final _g_hash_table_find = _g_hash_table_findPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GHashTable>, GHRFunc, ffi.Pointer)>();

  int g_hash_table_foreach_remove(
    ffi.Pointer<GHashTable> hash_table,
    GHRFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_hash_table_foreach_remove(
      hash_table,
      func,
      user_data,
    );
  }

  late final _g_hash_table_foreach_removePtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GHashTable>, GHRFunc,
              ffi.Pointer)>>('g_hash_table_foreach_remove');
  late final _g_hash_table_foreach_remove =
      _g_hash_table_foreach_removePtr.asFunction<
          int Function(ffi.Pointer<GHashTable>, GHRFunc, ffi.Pointer)>();

  int g_hash_table_foreach_steal(
    ffi.Pointer<GHashTable> hash_table,
    GHRFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_hash_table_foreach_steal(
      hash_table,
      func,
      user_data,
    );
  }

  late final _g_hash_table_foreach_stealPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GHashTable>, GHRFunc,
              ffi.Pointer)>>('g_hash_table_foreach_steal');
  late final _g_hash_table_foreach_steal =
      _g_hash_table_foreach_stealPtr.asFunction<
          int Function(ffi.Pointer<GHashTable>, GHRFunc, ffi.Pointer)>();

  int g_hash_table_size(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_size(
      hash_table,
    );
  }

  late final _g_hash_table_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_size');
  late final _g_hash_table_size =
      _g_hash_table_sizePtr.asFunction<int Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GList> g_hash_table_get_keys(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_get_keys(
      hash_table,
    );
  }

  late final _g_hash_table_get_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_get_keys');
  late final _g_hash_table_get_keys = _g_hash_table_get_keysPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GList> g_hash_table_get_values(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_get_values(
      hash_table,
    );
  }

  late final _g_hash_table_get_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_get_values');
  late final _g_hash_table_get_values = _g_hash_table_get_valuesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<ffi.Pointer> g_hash_table_get_keys_as_array(
    ffi.Pointer<GHashTable> hash_table,
    ffi.Pointer<guint> length,
  ) {
    return _g_hash_table_get_keys_as_array(
      hash_table,
      length,
    );
  }

  late final _g_hash_table_get_keys_as_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer> Function(ffi.Pointer<GHashTable>,
              ffi.Pointer<guint>)>>('g_hash_table_get_keys_as_array');
  late final _g_hash_table_get_keys_as_array =
      _g_hash_table_get_keys_as_arrayPtr.asFunction<
          ffi.Pointer<ffi.Pointer> Function(
              ffi.Pointer<GHashTable>, ffi.Pointer<guint>)>();

  ffi.Pointer<GPtrArray> g_hash_table_get_keys_as_ptr_array(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_get_keys_as_ptr_array(
      hash_table,
    );
  }

  late final _g_hash_table_get_keys_as_ptr_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPtrArray> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_get_keys_as_ptr_array');
  late final _g_hash_table_get_keys_as_ptr_array =
      _g_hash_table_get_keys_as_ptr_arrayPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GHashTable>)>();

  ffi.Pointer<GPtrArray> g_hash_table_get_values_as_ptr_array(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_get_values_as_ptr_array(
      hash_table,
    );
  }

  late final _g_hash_table_get_values_as_ptr_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GPtrArray> Function(ffi.Pointer<GHashTable>)>>(
      'g_hash_table_get_values_as_ptr_array');
  late final _g_hash_table_get_values_as_ptr_array =
      _g_hash_table_get_values_as_ptr_arrayPtr.asFunction<
          ffi.Pointer<GPtrArray> Function(ffi.Pointer<GHashTable>)>();

  void g_hash_table_iter_init(
    ffi.Pointer<GHashTableIter> iter,
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_iter_init(
      iter,
      hash_table,
    );
  }

  late final _g_hash_table_iter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHashTableIter>,
              ffi.Pointer<GHashTable>)>>('g_hash_table_iter_init');
  late final _g_hash_table_iter_init = _g_hash_table_iter_initPtr.asFunction<
      void Function(ffi.Pointer<GHashTableIter>, ffi.Pointer<GHashTable>)>();

  int g_hash_table_iter_next(
    ffi.Pointer<GHashTableIter> iter,
    ffi.Pointer<ffi.Pointer> key,
    ffi.Pointer<ffi.Pointer> value,
  ) {
    return _g_hash_table_iter_next(
      iter,
      key,
      value,
    );
  }

  late final _g_hash_table_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GHashTableIter>,
              ffi.Pointer<ffi.Pointer>,
              ffi.Pointer<ffi.Pointer>)>>('g_hash_table_iter_next');
  late final _g_hash_table_iter_next = _g_hash_table_iter_nextPtr.asFunction<
      int Function(ffi.Pointer<GHashTableIter>, ffi.Pointer<ffi.Pointer>,
          ffi.Pointer<ffi.Pointer>)>();

  ffi.Pointer<GHashTable> g_hash_table_iter_get_hash_table(
    ffi.Pointer<GHashTableIter> iter,
  ) {
    return _g_hash_table_iter_get_hash_table(
      iter,
    );
  }

  late final _g_hash_table_iter_get_hash_tablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTableIter>)>>(
      'g_hash_table_iter_get_hash_table');
  late final _g_hash_table_iter_get_hash_table =
      _g_hash_table_iter_get_hash_tablePtr.asFunction<
          ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTableIter>)>();

  void g_hash_table_iter_remove(
    ffi.Pointer<GHashTableIter> iter,
  ) {
    return _g_hash_table_iter_remove(
      iter,
    );
  }

  late final _g_hash_table_iter_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTableIter>)>>(
      'g_hash_table_iter_remove');
  late final _g_hash_table_iter_remove = _g_hash_table_iter_removePtr
      .asFunction<void Function(ffi.Pointer<GHashTableIter>)>();

  void g_hash_table_iter_replace(
    ffi.Pointer<GHashTableIter> iter,
    ffi.Pointer value,
  ) {
    return _g_hash_table_iter_replace(
      iter,
      value,
    );
  }

  late final _g_hash_table_iter_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHashTableIter>,
              ffi.Pointer)>>('g_hash_table_iter_replace');
  late final _g_hash_table_iter_replace = _g_hash_table_iter_replacePtr
      .asFunction<void Function(ffi.Pointer<GHashTableIter>, ffi.Pointer)>();

  void g_hash_table_iter_steal(
    ffi.Pointer<GHashTableIter> iter,
  ) {
    return _g_hash_table_iter_steal(
      iter,
    );
  }

  late final _g_hash_table_iter_stealPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTableIter>)>>(
      'g_hash_table_iter_steal');
  late final _g_hash_table_iter_steal = _g_hash_table_iter_stealPtr
      .asFunction<void Function(ffi.Pointer<GHashTableIter>)>();

  ffi.Pointer<GHashTable> g_hash_table_ref(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_ref(
      hash_table,
    );
  }

  late final _g_hash_table_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<GHashTable>)>>('g_hash_table_ref');
  late final _g_hash_table_ref = _g_hash_table_refPtr
      .asFunction<ffi.Pointer<GHashTable> Function(ffi.Pointer<GHashTable>)>();

  void g_hash_table_unref(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_unref(
      hash_table,
    );
  }

  late final _g_hash_table_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_unref');
  late final _g_hash_table_unref = _g_hash_table_unrefPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_str_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_str_equal(
      v1,
      v2,
    );
  }

  late final _g_str_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_str_equal');
  late final _g_str_equal =
      _g_str_equalPtr.asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_str_hash(
    gconstpointer v,
  ) {
    return _g_str_hash(
      v,
    );
  }

  late final _g_str_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>('g_str_hash');
  late final _g_str_hash =
      _g_str_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_int_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_int_equal(
      v1,
      v2,
    );
  }

  late final _g_int_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_int_equal');
  late final _g_int_equal =
      _g_int_equalPtr.asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_int_hash(
    gconstpointer v,
  ) {
    return _g_int_hash(
      v,
    );
  }

  late final _g_int_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>('g_int_hash');
  late final _g_int_hash =
      _g_int_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_int64_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_int64_equal(
      v1,
      v2,
    );
  }

  late final _g_int64_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_int64_equal');
  late final _g_int64_equal = _g_int64_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_int64_hash(
    gconstpointer v,
  ) {
    return _g_int64_hash(
      v,
    );
  }

  late final _g_int64_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_int64_hash');
  late final _g_int64_hash =
      _g_int64_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_double_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_double_equal(
      v1,
      v2,
    );
  }

  late final _g_double_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_double_equal');
  late final _g_double_equal = _g_double_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_double_hash(
    gconstpointer v,
  ) {
    return _g_double_hash(
      v,
    );
  }

  late final _g_double_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_double_hash');
  late final _g_double_hash =
      _g_double_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_direct_hash(
    gconstpointer v,
  ) {
    return _g_direct_hash(
      v,
    );
  }

  late final _g_direct_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_direct_hash');
  late final _g_direct_hash =
      _g_direct_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_direct_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_direct_equal(
      v1,
      v2,
    );
  }

  late final _g_direct_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_direct_equal');
  late final _g_direct_equal = _g_direct_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GHmac> g_hmac_new(
    int digest_type,
    ffi.Pointer<guchar> key,
    int key_len,
  ) {
    return _g_hmac_new(
      digest_type,
      key,
      key_len,
    );
  }

  late final _g_hmac_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHmac> Function(
              ffi.Int32, ffi.Pointer<guchar>, gsize)>>('g_hmac_new');
  late final _g_hmac_new = _g_hmac_newPtr
      .asFunction<ffi.Pointer<GHmac> Function(int, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<GHmac> g_hmac_copy(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_copy(
      hmac,
    );
  }

  late final _g_hmac_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>>(
      'g_hmac_copy');
  late final _g_hmac_copy = _g_hmac_copyPtr
      .asFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>();

  ffi.Pointer<GHmac> g_hmac_ref(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_ref(
      hmac,
    );
  }

  late final _g_hmac_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>>(
      'g_hmac_ref');
  late final _g_hmac_ref = _g_hmac_refPtr
      .asFunction<ffi.Pointer<GHmac> Function(ffi.Pointer<GHmac>)>();

  void g_hmac_unref(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_unref(
      hmac,
    );
  }

  late final _g_hmac_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHmac>)>>(
          'g_hmac_unref');
  late final _g_hmac_unref =
      _g_hmac_unrefPtr.asFunction<void Function(ffi.Pointer<GHmac>)>();

  void g_hmac_update(
    ffi.Pointer<GHmac> hmac,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_hmac_update(
      hmac,
      data,
      length,
    );
  }

  late final _g_hmac_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHmac>, ffi.Pointer<guchar>,
              gssize)>>('g_hmac_update');
  late final _g_hmac_update = _g_hmac_updatePtr.asFunction<
      void Function(ffi.Pointer<GHmac>, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<ffi.Char> g_hmac_get_string(
    ffi.Pointer<GHmac> hmac,
  ) {
    return _g_hmac_get_string(
      hmac,
    );
  }

  late final _g_hmac_get_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GHmac>)>>(
      'g_hmac_get_string');
  late final _g_hmac_get_string = _g_hmac_get_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GHmac>)>();

  void g_hmac_get_digest(
    ffi.Pointer<GHmac> hmac,
    ffi.Pointer<guint8> buffer,
    ffi.Pointer<gsize> digest_len,
  ) {
    return _g_hmac_get_digest(
      hmac,
      buffer,
      digest_len,
    );
  }

  late final _g_hmac_get_digestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHmac>, ffi.Pointer<guint8>,
              ffi.Pointer<gsize>)>>('g_hmac_get_digest');
  late final _g_hmac_get_digest = _g_hmac_get_digestPtr.asFunction<
      void Function(
          ffi.Pointer<GHmac>, ffi.Pointer<guint8>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Char> g_compute_hmac_for_data(
    int digest_type,
    ffi.Pointer<guchar> key,
    int key_len,
    ffi.Pointer<guchar> data,
    int length,
  ) {
    return _g_compute_hmac_for_data(
      digest_type,
      key,
      key_len,
      data,
      length,
    );
  }

  late final _g_compute_hmac_for_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<guchar>, gsize,
              ffi.Pointer<guchar>, gsize)>>('g_compute_hmac_for_data');
  late final _g_compute_hmac_for_data = _g_compute_hmac_for_dataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int, ffi.Pointer<guchar>, int, ffi.Pointer<guchar>, int)>();

  ffi.Pointer<ffi.Char> g_compute_hmac_for_string(
    int digest_type,
    ffi.Pointer<guchar> key,
    int key_len,
    ffi.Pointer<ffi.Char> str,
    int length,
  ) {
    return _g_compute_hmac_for_string(
      digest_type,
      key,
      key_len,
      str,
      length,
    );
  }

  late final _g_compute_hmac_for_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<guchar>, gsize,
              ffi.Pointer<ffi.Char>, gssize)>>('g_compute_hmac_for_string');
  late final _g_compute_hmac_for_string =
      _g_compute_hmac_for_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              int, ffi.Pointer<guchar>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_compute_hmac_for_bytes(
    int digest_type,
    ffi.Pointer<GBytes> key,
    ffi.Pointer<GBytes> data,
  ) {
    return _g_compute_hmac_for_bytes(
      digest_type,
      key,
      data,
    );
  }

  late final _g_compute_hmac_for_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<GBytes>,
              ffi.Pointer<GBytes>)>>('g_compute_hmac_for_bytes');
  late final _g_compute_hmac_for_bytes =
      _g_compute_hmac_for_bytesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              int, ffi.Pointer<GBytes>, ffi.Pointer<GBytes>)>();

  void g_hook_list_init(
    ffi.Pointer<GHookList> hook_list,
    int hook_size,
  ) {
    return _g_hook_list_init(
      hook_list,
      hook_size,
    );
  }

  late final _g_hook_list_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>, guint)>>(
      'g_hook_list_init');
  late final _g_hook_list_init = _g_hook_list_initPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_list_clear(
    ffi.Pointer<GHookList> hook_list,
  ) {
    return _g_hook_list_clear(
      hook_list,
    );
  }

  late final _g_hook_list_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>)>>(
          'g_hook_list_clear');
  late final _g_hook_list_clear =
      _g_hook_list_clearPtr.asFunction<void Function(ffi.Pointer<GHookList>)>();

  ffi.Pointer<GHook> g_hook_alloc(
    ffi.Pointer<GHookList> hook_list,
  ) {
    return _g_hook_alloc(
      hook_list,
    );
  }

  late final _g_hook_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>)>>('g_hook_alloc');
  late final _g_hook_alloc = _g_hook_allocPtr
      .asFunction<ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>)>();

  void g_hook_free(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_free(
      hook_list,
      hook,
    );
  }

  late final _g_hook_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_free');
  late final _g_hook_free = _g_hook_freePtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  ffi.Pointer<GHook> g_hook_ref(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_ref(
      hook_list,
      hook,
    );
  }

  late final _g_hook_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_ref');
  late final _g_hook_ref = _g_hook_refPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  void g_hook_unref(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_unref(
      hook_list,
      hook,
    );
  }

  late final _g_hook_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_unref');
  late final _g_hook_unref = _g_hook_unrefPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  int g_hook_destroy(
    ffi.Pointer<GHookList> hook_list,
    int hook_id,
  ) {
    return _g_hook_destroy(
      hook_list,
      hook_id,
    );
  }

  late final _g_hook_destroyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHookList>, gulong)>>('g_hook_destroy');
  late final _g_hook_destroy = _g_hook_destroyPtr
      .asFunction<int Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_destroy_link(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_destroy_link(
      hook_list,
      hook,
    );
  }

  late final _g_hook_destroy_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>,
              ffi.Pointer<GHook>)>>('g_hook_destroy_link');
  late final _g_hook_destroy_link = _g_hook_destroy_linkPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  void g_hook_prepend(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_prepend(
      hook_list,
      hook,
    );
  }

  late final _g_hook_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>>('g_hook_prepend');
  late final _g_hook_prepend = _g_hook_prependPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>)>();

  void g_hook_insert_before(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> sibling,
    ffi.Pointer<GHook> hook,
  ) {
    return _g_hook_insert_before(
      hook_list,
      sibling,
      hook,
    );
  }

  late final _g_hook_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>,
              ffi.Pointer<GHook>)>>('g_hook_insert_before');
  late final _g_hook_insert_before = _g_hook_insert_beforePtr.asFunction<
      void Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>, ffi.Pointer<GHook>)>();

  void g_hook_insert_sorted(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
    GHookCompareFunc func,
  ) {
    return _g_hook_insert_sorted(
      hook_list,
      hook,
      func,
    );
  }

  late final _g_hook_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, ffi.Pointer<GHook>,
              GHookCompareFunc)>>('g_hook_insert_sorted');
  late final _g_hook_insert_sorted = _g_hook_insert_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>, GHookCompareFunc)>();

  ffi.Pointer<GHook> g_hook_get(
    ffi.Pointer<GHookList> hook_list,
    int hook_id,
  ) {
    return _g_hook_get(
      hook_list,
      hook_id,
    );
  }

  late final _g_hook_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, gulong)>>('g_hook_get');
  late final _g_hook_get = _g_hook_getPtr
      .asFunction<ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int)>();

  ffi.Pointer<GHook> g_hook_find(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    GHookFindFunc func,
    ffi.Pointer data,
  ) {
    return _g_hook_find(
      hook_list,
      need_valids,
      func,
      data,
    );
  }

  late final _g_hook_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, gboolean,
              GHookFindFunc, ffi.Pointer)>>('g_hook_find');
  late final _g_hook_find = _g_hook_findPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, int, GHookFindFunc, ffi.Pointer)>();

  ffi.Pointer<GHook> g_hook_find_data(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    ffi.Pointer data,
  ) {
    return _g_hook_find_data(
      hook_list,
      need_valids,
      data,
    );
  }

  late final _g_hook_find_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, gboolean,
              ffi.Pointer)>>('g_hook_find_data');
  late final _g_hook_find_data = _g_hook_find_dataPtr.asFunction<
      ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int, ffi.Pointer)>();

  ffi.Pointer<GHook> g_hook_find_func(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    ffi.Pointer func,
  ) {
    return _g_hook_find_func(
      hook_list,
      need_valids,
      func,
    );
  }

  late final _g_hook_find_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, gboolean,
              ffi.Pointer)>>('g_hook_find_func');
  late final _g_hook_find_func = _g_hook_find_funcPtr.asFunction<
      ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int, ffi.Pointer)>();

  ffi.Pointer<GHook> g_hook_find_func_data(
    ffi.Pointer<GHookList> hook_list,
    int need_valids,
    ffi.Pointer func,
    ffi.Pointer data,
  ) {
    return _g_hook_find_func_data(
      hook_list,
      need_valids,
      func,
      data,
    );
  }

  late final _g_hook_find_func_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, gboolean,
              ffi.Pointer, ffi.Pointer)>>('g_hook_find_func_data');
  late final _g_hook_find_func_data = _g_hook_find_func_dataPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, int, ffi.Pointer, ffi.Pointer)>();

  ffi.Pointer<GHook> g_hook_first_valid(
    ffi.Pointer<GHookList> hook_list,
    int may_be_in_call,
  ) {
    return _g_hook_first_valid(
      hook_list,
      may_be_in_call,
    );
  }

  late final _g_hook_first_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(
              ffi.Pointer<GHookList>, gboolean)>>('g_hook_first_valid');
  late final _g_hook_first_valid = _g_hook_first_validPtr
      .asFunction<ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>, int)>();

  ffi.Pointer<GHook> g_hook_next_valid(
    ffi.Pointer<GHookList> hook_list,
    ffi.Pointer<GHook> hook,
    int may_be_in_call,
  ) {
    return _g_hook_next_valid(
      hook_list,
      hook,
      may_be_in_call,
    );
  }

  late final _g_hook_next_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHook> Function(ffi.Pointer<GHookList>,
              ffi.Pointer<GHook>, gboolean)>>('g_hook_next_valid');
  late final _g_hook_next_valid = _g_hook_next_validPtr.asFunction<
      ffi.Pointer<GHook> Function(
          ffi.Pointer<GHookList>, ffi.Pointer<GHook>, int)>();

  int g_hook_compare_ids(
    ffi.Pointer<GHook> new_hook,
    ffi.Pointer<GHook> sibling,
  ) {
    return _g_hook_compare_ids(
      new_hook,
      sibling,
    );
  }

  late final _g_hook_compare_idsPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GHook>, ffi.Pointer<GHook>)>>('g_hook_compare_ids');
  late final _g_hook_compare_ids = _g_hook_compare_idsPtr
      .asFunction<int Function(ffi.Pointer<GHook>, ffi.Pointer<GHook>)>();

  void g_hook_list_invoke(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
  ) {
    return _g_hook_list_invoke(
      hook_list,
      may_recurse,
    );
  }

  late final _g_hook_list_invokePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>, gboolean)>>(
      'g_hook_list_invoke');
  late final _g_hook_list_invoke = _g_hook_list_invokePtr
      .asFunction<void Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_list_invoke_check(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
  ) {
    return _g_hook_list_invoke_check(
      hook_list,
      may_recurse,
    );
  }

  late final _g_hook_list_invoke_checkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GHookList>, gboolean)>>(
      'g_hook_list_invoke_check');
  late final _g_hook_list_invoke_check = _g_hook_list_invoke_checkPtr
      .asFunction<void Function(ffi.Pointer<GHookList>, int)>();

  void g_hook_list_marshal(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
    GHookMarshaller marshaller,
    ffi.Pointer marshal_data,
  ) {
    return _g_hook_list_marshal(
      hook_list,
      may_recurse,
      marshaller,
      marshal_data,
    );
  }

  late final _g_hook_list_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, gboolean, GHookMarshaller,
              ffi.Pointer)>>('g_hook_list_marshal');
  late final _g_hook_list_marshal = _g_hook_list_marshalPtr.asFunction<
      void Function(
          ffi.Pointer<GHookList>, int, GHookMarshaller, ffi.Pointer)>();

  void g_hook_list_marshal_check(
    ffi.Pointer<GHookList> hook_list,
    int may_recurse,
    GHookCheckMarshaller marshaller,
    ffi.Pointer marshal_data,
  ) {
    return _g_hook_list_marshal_check(
      hook_list,
      may_recurse,
      marshaller,
      marshal_data,
    );
  }

  late final _g_hook_list_marshal_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GHookList>, gboolean,
              GHookCheckMarshaller, ffi.Pointer)>>('g_hook_list_marshal_check');
  late final _g_hook_list_marshal_check =
      _g_hook_list_marshal_checkPtr.asFunction<
          void Function(ffi.Pointer<GHookList>, int, GHookCheckMarshaller,
              ffi.Pointer)>();

  int g_hostname_is_non_ascii(
    ffi.Pointer<ffi.Char> hostname,
  ) {
    return _g_hostname_is_non_ascii(
      hostname,
    );
  }

  late final _g_hostname_is_non_asciiPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_hostname_is_non_ascii');
  late final _g_hostname_is_non_ascii = _g_hostname_is_non_asciiPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_hostname_is_ascii_encoded(
    ffi.Pointer<ffi.Char> hostname,
  ) {
    return _g_hostname_is_ascii_encoded(
      hostname,
    );
  }

  late final _g_hostname_is_ascii_encodedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_hostname_is_ascii_encoded');
  late final _g_hostname_is_ascii_encoded = _g_hostname_is_ascii_encodedPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_hostname_is_ip_address(
    ffi.Pointer<ffi.Char> hostname,
  ) {
    return _g_hostname_is_ip_address(
      hostname,
    );
  }

  late final _g_hostname_is_ip_addressPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_hostname_is_ip_address');
  late final _g_hostname_is_ip_address = _g_hostname_is_ip_addressPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_hostname_to_ascii(
    ffi.Pointer<ffi.Char> hostname,
  ) {
    return _g_hostname_to_ascii(
      hostname,
    );
  }

  late final _g_hostname_to_asciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_hostname_to_ascii');
  late final _g_hostname_to_ascii = _g_hostname_to_asciiPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_hostname_to_unicode(
    ffi.Pointer<ffi.Char> hostname,
  ) {
    return _g_hostname_to_unicode(
      hostname,
    );
  }

  late final _g_hostname_to_unicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_hostname_to_unicode');
  late final _g_hostname_to_unicode = _g_hostname_to_unicodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// G_POLLFD_FORMAT:
  ///
  /// A format specifier that can be used in printf()-style format strings
  /// when printing the @fd member of a #GPollFD.
  int g_poll(
    ffi.Pointer<GPollFD> fds,
    int nfds,
    int timeout,
  ) {
    return _g_poll(
      fds,
      nfds,
      timeout,
    );
  }

  late final _g_pollPtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<GPollFD>, guint, gint)>>(
      'g_poll');
  late final _g_poll =
      _g_pollPtr.asFunction<int Function(ffi.Pointer<GPollFD>, int, int)>();

  ffi.Pointer<GSList> g_slist_alloc() {
    return _g_slist_alloc();
  }

  late final _g_slist_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSList> Function()>>(
          'g_slist_alloc');
  late final _g_slist_alloc =
      _g_slist_allocPtr.asFunction<ffi.Pointer<GSList> Function()>();

  void g_slist_free(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_free(
      list,
    );
  }

  late final _g_slist_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSList>)>>(
          'g_slist_free');
  late final _g_slist_free =
      _g_slist_freePtr.asFunction<void Function(ffi.Pointer<GSList>)>();

  void g_slist_free_1(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_free_1(
      list,
    );
  }

  late final _g_slist_free_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSList>)>>(
          'g_slist_free_1');
  late final _g_slist_free_1 =
      _g_slist_free_1Ptr.asFunction<void Function(ffi.Pointer<GSList>)>();

  void g_slist_free_full(
    ffi.Pointer<GSList> list,
    GDestroyNotify free_func,
  ) {
    return _g_slist_free_full(
      list,
      free_func,
    );
  }

  late final _g_slist_free_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSList>, GDestroyNotify)>>('g_slist_free_full');
  late final _g_slist_free_full = _g_slist_free_fullPtr
      .asFunction<void Function(ffi.Pointer<GSList>, GDestroyNotify)>();

  ffi.Pointer<GSList> g_slist_append(
    ffi.Pointer<GSList> list,
    ffi.Pointer data,
  ) {
    return _g_slist_append(
      list,
      data,
    );
  }

  late final _g_slist_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, ffi.Pointer)>>('g_slist_append');
  late final _g_slist_append = _g_slist_appendPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer)>();

  ffi.Pointer<GSList> g_slist_prepend(
    ffi.Pointer<GSList> list,
    ffi.Pointer data,
  ) {
    return _g_slist_prepend(
      list,
      data,
    );
  }

  late final _g_slist_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, ffi.Pointer)>>('g_slist_prepend');
  late final _g_slist_prepend = _g_slist_prependPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer)>();

  ffi.Pointer<GSList> g_slist_insert(
    ffi.Pointer<GSList> list,
    ffi.Pointer data,
    int position,
  ) {
    return _g_slist_insert(
      list,
      data,
      position,
    );
  }

  late final _g_slist_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, ffi.Pointer, gint)>>('g_slist_insert');
  late final _g_slist_insert = _g_slist_insertPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer, int)>();

  ffi.Pointer<GSList> g_slist_insert_sorted(
    ffi.Pointer<GSList> list,
    ffi.Pointer data,
    GCompareFunc func,
  ) {
    return _g_slist_insert_sorted(
      list,
      data,
      func,
    );
  }

  late final _g_slist_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer,
              GCompareFunc)>>('g_slist_insert_sorted');
  late final _g_slist_insert_sorted = _g_slist_insert_sortedPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, ffi.Pointer, GCompareFunc)>();

  ffi.Pointer<GSList> g_slist_insert_sorted_with_data(
    ffi.Pointer<GSList> list,
    ffi.Pointer data,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_slist_insert_sorted_with_data(
      list,
      data,
      func,
      user_data,
    );
  }

  late final _g_slist_insert_sorted_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>,
              ffi.Pointer,
              GCompareDataFunc,
              ffi.Pointer)>>('g_slist_insert_sorted_with_data');
  late final _g_slist_insert_sorted_with_data =
      _g_slist_insert_sorted_with_dataPtr.asFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer,
              GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GSList> g_slist_insert_before(
    ffi.Pointer<GSList> slist,
    ffi.Pointer<GSList> sibling,
    ffi.Pointer data,
  ) {
    return _g_slist_insert_before(
      slist,
      sibling,
      data,
    );
  }

  late final _g_slist_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>,
              ffi.Pointer)>>('g_slist_insert_before');
  late final _g_slist_insert_before = _g_slist_insert_beforePtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, ffi.Pointer<GSList>, ffi.Pointer)>();

  ffi.Pointer<GSList> g_slist_concat(
    ffi.Pointer<GSList> list1,
    ffi.Pointer<GSList> list2,
  ) {
    return _g_slist_concat(
      list1,
      list2,
    );
  }

  late final _g_slist_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, ffi.Pointer<GSList>)>>('g_slist_concat');
  late final _g_slist_concat = _g_slist_concatPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_remove(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_remove(
      list,
      data,
    );
  }

  late final _g_slist_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gconstpointer)>>('g_slist_remove');
  late final _g_slist_remove = _g_slist_removePtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_remove_all(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_remove_all(
      list,
      data,
    );
  }

  late final _g_slist_remove_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gconstpointer)>>('g_slist_remove_all');
  late final _g_slist_remove_all = _g_slist_remove_allPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_remove_link(
    ffi.Pointer<GSList> list,
    ffi.Pointer<GSList> link_,
  ) {
    return _g_slist_remove_link(
      list,
      link_,
    );
  }

  late final _g_slist_remove_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>,
              ffi.Pointer<GSList>)>>('g_slist_remove_link');
  late final _g_slist_remove_link = _g_slist_remove_linkPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_delete_link(
    ffi.Pointer<GSList> list,
    ffi.Pointer<GSList> link_,
  ) {
    return _g_slist_delete_link(
      list,
      link_,
    );
  }

  late final _g_slist_delete_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>,
              ffi.Pointer<GSList>)>>('g_slist_delete_link');
  late final _g_slist_delete_link = _g_slist_delete_linkPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_reverse(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_reverse(
      list,
    );
  }

  late final _g_slist_reversePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>>(
      'g_slist_reverse');
  late final _g_slist_reverse = _g_slist_reversePtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_copy(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_copy(
      list,
    );
  }

  late final _g_slist_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>>('g_slist_copy');
  late final _g_slist_copy = _g_slist_copyPtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>();

  ffi.Pointer<GSList> g_slist_copy_deep(
    ffi.Pointer<GSList> list,
    GCopyFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_slist_copy_deep(
      list,
      func,
      user_data,
    );
  }

  late final _g_slist_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, GCopyFunc,
              ffi.Pointer)>>('g_slist_copy_deep');
  late final _g_slist_copy_deep = _g_slist_copy_deepPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, GCopyFunc, ffi.Pointer)>();

  ffi.Pointer<GSList> g_slist_nth(
    ffi.Pointer<GSList> list,
    int n,
  ) {
    return _g_slist_nth(
      list,
      n,
    );
  }

  late final _g_slist_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, guint)>>('g_slist_nth');
  late final _g_slist_nth = _g_slist_nthPtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, int)>();

  ffi.Pointer<GSList> g_slist_find(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_find(
      list,
      data,
    );
  }

  late final _g_slist_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, gconstpointer)>>('g_slist_find');
  late final _g_slist_find = _g_slist_findPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_find_custom(
    ffi.Pointer<GSList> list,
    gconstpointer data,
    GCompareFunc func,
  ) {
    return _g_slist_find_custom(
      list,
      data,
      func,
    );
  }

  late final _g_slist_find_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, gconstpointer,
              GCompareFunc)>>('g_slist_find_custom');
  late final _g_slist_find_custom = _g_slist_find_customPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, gconstpointer, GCompareFunc)>();

  int g_slist_position(
    ffi.Pointer<GSList> list,
    ffi.Pointer<GSList> llink,
  ) {
    return _g_slist_position(
      list,
      llink,
    );
  }

  late final _g_slist_positionPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GSList>, ffi.Pointer<GSList>)>>('g_slist_position');
  late final _g_slist_position = _g_slist_positionPtr
      .asFunction<int Function(ffi.Pointer<GSList>, ffi.Pointer<GSList>)>();

  int g_slist_index(
    ffi.Pointer<GSList> list,
    gconstpointer data,
  ) {
    return _g_slist_index(
      list,
      data,
    );
  }

  late final _g_slist_indexPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GSList>, gconstpointer)>>('g_slist_index');
  late final _g_slist_index = _g_slist_indexPtr
      .asFunction<int Function(ffi.Pointer<GSList>, gconstpointer)>();

  ffi.Pointer<GSList> g_slist_last(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_last(
      list,
    );
  }

  late final _g_slist_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>>('g_slist_last');
  late final _g_slist_last = _g_slist_lastPtr
      .asFunction<ffi.Pointer<GSList> Function(ffi.Pointer<GSList>)>();

  int g_slist_length(
    ffi.Pointer<GSList> list,
  ) {
    return _g_slist_length(
      list,
    );
  }

  late final _g_slist_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSList>)>>(
          'g_slist_length');
  late final _g_slist_length =
      _g_slist_lengthPtr.asFunction<int Function(ffi.Pointer<GSList>)>();

  void g_slist_foreach(
    ffi.Pointer<GSList> list,
    GFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_slist_foreach(
      list,
      func,
      user_data,
    );
  }

  late final _g_slist_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSList>, GFunc, ffi.Pointer)>>('g_slist_foreach');
  late final _g_slist_foreach = _g_slist_foreachPtr
      .asFunction<void Function(ffi.Pointer<GSList>, GFunc, ffi.Pointer)>();

  ffi.Pointer<GSList> g_slist_sort(
    ffi.Pointer<GSList> list,
    GCompareFunc compare_func,
  ) {
    return _g_slist_sort(
      list,
      compare_func,
    );
  }

  late final _g_slist_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(
              ffi.Pointer<GSList>, GCompareFunc)>>('g_slist_sort');
  late final _g_slist_sort = _g_slist_sortPtr.asFunction<
      ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, GCompareFunc)>();

  ffi.Pointer<GSList> g_slist_sort_with_data(
    ffi.Pointer<GSList> list,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_slist_sort_with_data(
      list,
      compare_func,
      user_data,
    );
  }

  late final _g_slist_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GSList>, GCompareDataFunc,
              ffi.Pointer)>>('g_slist_sort_with_data');
  late final _g_slist_sort_with_data = _g_slist_sort_with_dataPtr.asFunction<
      ffi.Pointer<GSList> Function(
          ffi.Pointer<GSList>, GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer g_slist_nth_data(
    ffi.Pointer<GSList> list,
    int n,
  ) {
    return _g_slist_nth_data(
      list,
      n,
    );
  }

  late final _g_slist_nth_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GSList>, guint)>>(
      'g_slist_nth_data');
  late final _g_slist_nth_data = _g_slist_nth_dataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GSList>, int)>();

  void g_clear_slist(
    ffi.Pointer<ffi.Pointer<GSList>> slist_ptr,
    GDestroyNotify destroy,
  ) {
    return _g_clear_slist(
      slist_ptr,
      destroy,
    );
  }

  late final _g_clear_slistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GSList>>,
              GDestroyNotify)>>('g_clear_slist');
  late final _g_clear_slist = _g_clear_slistPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GSList>>, GDestroyNotify)>();

  ffi.Pointer<GMainContext> g_main_context_new() {
    return _g_main_context_new();
  }

  late final _g_main_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_new');
  late final _g_main_context_new =
      _g_main_context_newPtr.asFunction<ffi.Pointer<GMainContext> Function()>();

  ffi.Pointer<GMainContext> g_main_context_new_with_flags(
    int flags,
  ) {
    return _g_main_context_new_with_flags(
      flags,
    );
  }

  late final _g_main_context_new_with_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GMainContext> Function(ffi.Int32)>>(
      'g_main_context_new_with_flags');
  late final _g_main_context_new_with_flags = _g_main_context_new_with_flagsPtr
      .asFunction<ffi.Pointer<GMainContext> Function(int)>();

  ffi.Pointer<GMainContext> g_main_context_ref(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_ref(
      context,
    );
  }

  late final _g_main_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GMainContext>)>>('g_main_context_ref');
  late final _g_main_context_ref = _g_main_context_refPtr.asFunction<
      ffi.Pointer<GMainContext> Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_unref(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_unref(
      context,
    );
  }

  late final _g_main_context_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_unref');
  late final _g_main_context_unref = _g_main_context_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  ffi.Pointer<GMainContext> g_main_context_default() {
    return _g_main_context_default();
  }

  late final _g_main_context_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_default');
  late final _g_main_context_default = _g_main_context_defaultPtr
      .asFunction<ffi.Pointer<GMainContext> Function()>();

  int g_main_context_iteration(
    ffi.Pointer<GMainContext> context,
    int may_block,
  ) {
    return _g_main_context_iteration(
      context,
      may_block,
    );
  }

  late final _g_main_context_iterationPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>,
              gboolean)>>('g_main_context_iteration');
  late final _g_main_context_iteration = _g_main_context_iterationPtr
      .asFunction<int Function(ffi.Pointer<GMainContext>, int)>();

  int g_main_context_pending(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_pending(
      context,
    );
  }

  late final _g_main_context_pendingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_pending');
  late final _g_main_context_pending = _g_main_context_pendingPtr
      .asFunction<int Function(ffi.Pointer<GMainContext>)>();

  ffi.Pointer<GSource> g_main_context_find_source_by_id(
    ffi.Pointer<GMainContext> context,
    int source_id,
  ) {
    return _g_main_context_find_source_by_id(
      context,
      source_id,
    );
  }

  late final _g_main_context_find_source_by_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>,
              guint)>>('g_main_context_find_source_by_id');
  late final _g_main_context_find_source_by_id =
      _g_main_context_find_source_by_idPtr.asFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>, int)>();

  ffi.Pointer<GSource> g_main_context_find_source_by_user_data(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer user_data,
  ) {
    return _g_main_context_find_source_by_user_data(
      context,
      user_data,
    );
  }

  late final _g_main_context_find_source_by_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>,
              ffi.Pointer)>>('g_main_context_find_source_by_user_data');
  late final _g_main_context_find_source_by_user_data =
      _g_main_context_find_source_by_user_dataPtr.asFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GMainContext>, ffi.Pointer)>();

  ffi.Pointer<GSource> g_main_context_find_source_by_funcs_user_data(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GSourceFuncs> funcs,
    ffi.Pointer user_data,
  ) {
    return _g_main_context_find_source_by_funcs_user_data(
      context,
      funcs,
      user_data,
    );
  }

  late final _g_main_context_find_source_by_funcs_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GMainContext>,
              ffi.Pointer<GSourceFuncs>,
              ffi.Pointer)>>('g_main_context_find_source_by_funcs_user_data');
  late final _g_main_context_find_source_by_funcs_user_data =
      _g_main_context_find_source_by_funcs_user_dataPtr.asFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GMainContext>,
              ffi.Pointer<GSourceFuncs>, ffi.Pointer)>();

  void g_main_context_wakeup(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_wakeup(
      context,
    );
  }

  late final _g_main_context_wakeupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_wakeup');
  late final _g_main_context_wakeup = _g_main_context_wakeupPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  int g_main_context_acquire(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_acquire(
      context,
    );
  }

  late final _g_main_context_acquirePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_acquire');
  late final _g_main_context_acquire = _g_main_context_acquirePtr
      .asFunction<int Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_release(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_release(
      context,
    );
  }

  late final _g_main_context_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_release');
  late final _g_main_context_release = _g_main_context_releasePtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  int g_main_context_is_owner(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_is_owner(
      context,
    );
  }

  late final _g_main_context_is_ownerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_is_owner');
  late final _g_main_context_is_owner = _g_main_context_is_ownerPtr
      .asFunction<int Function(ffi.Pointer<GMainContext>)>();

  int g_main_context_wait(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_main_context_wait(
      context,
      cond,
      mutex,
    );
  }

  late final _g_main_context_waitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>, ffi.Pointer<GCond>,
              ffi.Pointer<GMutex>)>>('g_main_context_wait');
  late final _g_main_context_wait = _g_main_context_waitPtr.asFunction<
      int Function(ffi.Pointer<GMainContext>, ffi.Pointer<GCond>,
          ffi.Pointer<GMutex>)>();

  int g_main_context_prepare(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<gint> priority,
  ) {
    return _g_main_context_prepare(
      context,
      priority,
    );
  }

  late final _g_main_context_preparePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>,
              ffi.Pointer<gint>)>>('g_main_context_prepare');
  late final _g_main_context_prepare = _g_main_context_preparePtr
      .asFunction<int Function(ffi.Pointer<GMainContext>, ffi.Pointer<gint>)>();

  int g_main_context_query(
    ffi.Pointer<GMainContext> context,
    int max_priority,
    ffi.Pointer<gint> timeout_,
    ffi.Pointer<GPollFD> fds,
    int n_fds,
  ) {
    return _g_main_context_query(
      context,
      max_priority,
      timeout_,
      fds,
      n_fds,
    );
  }

  late final _g_main_context_queryPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GMainContext>, gint, ffi.Pointer<gint>,
              ffi.Pointer<GPollFD>, gint)>>('g_main_context_query');
  late final _g_main_context_query = _g_main_context_queryPtr.asFunction<
      int Function(ffi.Pointer<GMainContext>, int, ffi.Pointer<gint>,
          ffi.Pointer<GPollFD>, int)>();

  int g_main_context_check(
    ffi.Pointer<GMainContext> context,
    int max_priority,
    ffi.Pointer<GPollFD> fds,
    int n_fds,
  ) {
    return _g_main_context_check(
      context,
      max_priority,
      fds,
      n_fds,
    );
  }

  late final _g_main_context_checkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMainContext>, gint,
              ffi.Pointer<GPollFD>, gint)>>('g_main_context_check');
  late final _g_main_context_check = _g_main_context_checkPtr.asFunction<
      int Function(
          ffi.Pointer<GMainContext>, int, ffi.Pointer<GPollFD>, int)>();

  void g_main_context_dispatch(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_dispatch(
      context,
    );
  }

  late final _g_main_context_dispatchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_dispatch');
  late final _g_main_context_dispatch = _g_main_context_dispatchPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_set_poll_func(
    ffi.Pointer<GMainContext> context,
    GPollFunc func,
  ) {
    return _g_main_context_set_poll_func(
      context,
      func,
    );
  }

  late final _g_main_context_set_poll_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>,
              GPollFunc)>>('g_main_context_set_poll_func');
  late final _g_main_context_set_poll_func = _g_main_context_set_poll_funcPtr
      .asFunction<void Function(ffi.Pointer<GMainContext>, GPollFunc)>();

  GPollFunc g_main_context_get_poll_func(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_get_poll_func(
      context,
    );
  }

  late final _g_main_context_get_poll_funcPtr = _lookup<
          ffi.NativeFunction<GPollFunc Function(ffi.Pointer<GMainContext>)>>(
      'g_main_context_get_poll_func');
  late final _g_main_context_get_poll_func = _g_main_context_get_poll_funcPtr
      .asFunction<GPollFunc Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_add_poll(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GPollFD> fd,
    int priority,
  ) {
    return _g_main_context_add_poll(
      context,
      fd,
      priority,
    );
  }

  late final _g_main_context_add_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>, ffi.Pointer<GPollFD>,
              gint)>>('g_main_context_add_poll');
  late final _g_main_context_add_poll = _g_main_context_add_pollPtr.asFunction<
      void Function(ffi.Pointer<GMainContext>, ffi.Pointer<GPollFD>, int)>();

  void g_main_context_remove_poll(
    ffi.Pointer<GMainContext> context,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _g_main_context_remove_poll(
      context,
      fd,
    );
  }

  late final _g_main_context_remove_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>,
              ffi.Pointer<GPollFD>)>>('g_main_context_remove_poll');
  late final _g_main_context_remove_poll =
      _g_main_context_remove_pollPtr.asFunction<
          void Function(ffi.Pointer<GMainContext>, ffi.Pointer<GPollFD>)>();

  int g_main_depth() {
    return _g_main_depth();
  }

  late final _g_main_depthPtr =
      _lookup<ffi.NativeFunction<gint Function()>>('g_main_depth');
  late final _g_main_depth = _g_main_depthPtr.asFunction<int Function()>();

  ffi.Pointer<GSource> g_main_current_source() {
    return _g_main_current_source();
  }

  late final _g_main_current_sourcePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function()>>(
          'g_main_current_source');
  late final _g_main_current_source =
      _g_main_current_sourcePtr.asFunction<ffi.Pointer<GSource> Function()>();

  void g_main_context_push_thread_default(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_push_thread_default(
      context,
    );
  }

  late final _g_main_context_push_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_push_thread_default');
  late final _g_main_context_push_thread_default =
      _g_main_context_push_thread_defaultPtr
          .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  void g_main_context_pop_thread_default(
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_main_context_pop_thread_default(
      context,
    );
  }

  late final _g_main_context_pop_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainContext>)>>(
          'g_main_context_pop_thread_default');
  late final _g_main_context_pop_thread_default =
      _g_main_context_pop_thread_defaultPtr
          .asFunction<void Function(ffi.Pointer<GMainContext>)>();

  ffi.Pointer<GMainContext> g_main_context_get_thread_default() {
    return _g_main_context_get_thread_default();
  }

  late final _g_main_context_get_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_get_thread_default');
  late final _g_main_context_get_thread_default =
      _g_main_context_get_thread_defaultPtr
          .asFunction<ffi.Pointer<GMainContext> Function()>();

  ffi.Pointer<GMainContext> g_main_context_ref_thread_default() {
    return _g_main_context_ref_thread_default();
  }

  late final _g_main_context_ref_thread_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMainContext> Function()>>(
          'g_main_context_ref_thread_default');
  late final _g_main_context_ref_thread_default =
      _g_main_context_ref_thread_defaultPtr
          .asFunction<ffi.Pointer<GMainContext> Function()>();

  ffi.Pointer<GMainLoop> g_main_loop_new(
    ffi.Pointer<GMainContext> context,
    int is_running,
  ) {
    return _g_main_loop_new(
      context,
      is_running,
    );
  }

  late final _g_main_loop_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainLoop> Function(
              ffi.Pointer<GMainContext>, gboolean)>>('g_main_loop_new');
  late final _g_main_loop_new = _g_main_loop_newPtr.asFunction<
      ffi.Pointer<GMainLoop> Function(ffi.Pointer<GMainContext>, int)>();

  void g_main_loop_run(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_run(
      loop,
    );
  }

  late final _g_main_loop_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_run');
  late final _g_main_loop_run =
      _g_main_loop_runPtr.asFunction<void Function(ffi.Pointer<GMainLoop>)>();

  void g_main_loop_quit(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_quit(
      loop,
    );
  }

  late final _g_main_loop_quitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_quit');
  late final _g_main_loop_quit =
      _g_main_loop_quitPtr.asFunction<void Function(ffi.Pointer<GMainLoop>)>();

  ffi.Pointer<GMainLoop> g_main_loop_ref(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_ref(
      loop,
    );
  }

  late final _g_main_loop_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainLoop> Function(
              ffi.Pointer<GMainLoop>)>>('g_main_loop_ref');
  late final _g_main_loop_ref = _g_main_loop_refPtr
      .asFunction<ffi.Pointer<GMainLoop> Function(ffi.Pointer<GMainLoop>)>();

  void g_main_loop_unref(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_unref(
      loop,
    );
  }

  late final _g_main_loop_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_unref');
  late final _g_main_loop_unref =
      _g_main_loop_unrefPtr.asFunction<void Function(ffi.Pointer<GMainLoop>)>();

  int g_main_loop_is_running(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_is_running(
      loop,
    );
  }

  late final _g_main_loop_is_runningPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMainLoop>)>>(
          'g_main_loop_is_running');
  late final _g_main_loop_is_running = _g_main_loop_is_runningPtr
      .asFunction<int Function(ffi.Pointer<GMainLoop>)>();

  ffi.Pointer<GMainContext> g_main_loop_get_context(
    ffi.Pointer<GMainLoop> loop,
  ) {
    return _g_main_loop_get_context(
      loop,
    );
  }

  late final _g_main_loop_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GMainLoop>)>>('g_main_loop_get_context');
  late final _g_main_loop_get_context = _g_main_loop_get_contextPtr
      .asFunction<ffi.Pointer<GMainContext> Function(ffi.Pointer<GMainLoop>)>();

  ffi.Pointer<GSource> g_source_new(
    ffi.Pointer<GSourceFuncs> source_funcs,
    int struct_size,
  ) {
    return _g_source_new(
      source_funcs,
      struct_size,
    );
  }

  late final _g_source_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GSourceFuncs>, guint)>>('g_source_new');
  late final _g_source_new = _g_source_newPtr.asFunction<
      ffi.Pointer<GSource> Function(ffi.Pointer<GSourceFuncs>, int)>();

  void g_source_set_dispose_function(
    ffi.Pointer<GSource> source,
    GSourceDisposeFunc dispose,
  ) {
    return _g_source_set_dispose_function(
      source,
      dispose,
    );
  }

  late final _g_source_set_dispose_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              GSourceDisposeFunc)>>('g_source_set_dispose_function');
  late final _g_source_set_dispose_function = _g_source_set_dispose_functionPtr
      .asFunction<void Function(ffi.Pointer<GSource>, GSourceDisposeFunc)>();

  ffi.Pointer<GSource> g_source_ref(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_ref(
      source,
    );
  }

  late final _g_source_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(ffi.Pointer<GSource>)>>('g_source_ref');
  late final _g_source_ref = _g_source_refPtr
      .asFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GSource>)>();

  void g_source_unref(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_unref(
      source,
    );
  }

  late final _g_source_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_unref');
  late final _g_source_unref =
      _g_source_unrefPtr.asFunction<void Function(ffi.Pointer<GSource>)>();

  int g_source_attach(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GMainContext> context,
  ) {
    return _g_source_attach(
      source,
      context,
    );
  }

  late final _g_source_attachPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GSource>,
              ffi.Pointer<GMainContext>)>>('g_source_attach');
  late final _g_source_attach = _g_source_attachPtr.asFunction<
      int Function(ffi.Pointer<GSource>, ffi.Pointer<GMainContext>)>();

  void g_source_destroy(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_destroy(
      source,
    );
  }

  late final _g_source_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_destroy');
  late final _g_source_destroy =
      _g_source_destroyPtr.asFunction<void Function(ffi.Pointer<GSource>)>();

  void g_source_set_priority(
    ffi.Pointer<GSource> source,
    int priority,
  ) {
    return _g_source_set_priority(
      source,
      priority,
    );
  }

  late final _g_source_set_priorityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gint)>>(
      'g_source_set_priority');
  late final _g_source_set_priority = _g_source_set_priorityPtr
      .asFunction<void Function(ffi.Pointer<GSource>, int)>();

  int g_source_get_priority(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_priority(
      source,
    );
  }

  late final _g_source_get_priorityPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSource>)>>(
          'g_source_get_priority');
  late final _g_source_get_priority = _g_source_get_priorityPtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  void g_source_set_can_recurse(
    ffi.Pointer<GSource> source,
    int can_recurse,
  ) {
    return _g_source_set_can_recurse(
      source,
      can_recurse,
    );
  }

  late final _g_source_set_can_recursePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gboolean)>>(
      'g_source_set_can_recurse');
  late final _g_source_set_can_recurse = _g_source_set_can_recursePtr
      .asFunction<void Function(ffi.Pointer<GSource>, int)>();

  int g_source_get_can_recurse(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_can_recurse(
      source,
    );
  }

  late final _g_source_get_can_recursePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource>)>>(
          'g_source_get_can_recurse');
  late final _g_source_get_can_recurse = _g_source_get_can_recursePtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  int g_source_get_id(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_id(
      source,
    );
  }

  late final _g_source_get_idPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GSource>)>>(
          'g_source_get_id');
  late final _g_source_get_id =
      _g_source_get_idPtr.asFunction<int Function(ffi.Pointer<GSource>)>();

  ffi.Pointer<GMainContext> g_source_get_context(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_context(
      source,
    );
  }

  late final _g_source_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMainContext> Function(
              ffi.Pointer<GSource>)>>('g_source_get_context');
  late final _g_source_get_context = _g_source_get_contextPtr
      .asFunction<ffi.Pointer<GMainContext> Function(ffi.Pointer<GSource>)>();

  void g_source_set_callback(
    ffi.Pointer<GSource> source,
    GSourceFunc func,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_source_set_callback(
      source,
      func,
      data,
      notify,
    );
  }

  late final _g_source_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>, GSourceFunc, ffi.Pointer,
              GDestroyNotify)>>('g_source_set_callback');
  late final _g_source_set_callback = _g_source_set_callbackPtr.asFunction<
      void Function(
          ffi.Pointer<GSource>, GSourceFunc, ffi.Pointer, GDestroyNotify)>();

  void g_source_set_funcs(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GSourceFuncs> funcs,
  ) {
    return _g_source_set_funcs(
      source,
      funcs,
    );
  }

  late final _g_source_set_funcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GSourceFuncs>)>>('g_source_set_funcs');
  late final _g_source_set_funcs = _g_source_set_funcsPtr.asFunction<
      void Function(ffi.Pointer<GSource>, ffi.Pointer<GSourceFuncs>)>();

  int g_source_is_destroyed(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_is_destroyed(
      source,
    );
  }

  late final _g_source_is_destroyedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource>)>>(
          'g_source_is_destroyed');
  late final _g_source_is_destroyed = _g_source_is_destroyedPtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  void g_source_set_name(
    ffi.Pointer<GSource> source,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_source_set_name(
      source,
      name,
    );
  }

  late final _g_source_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<ffi.Char>)>>('g_source_set_name');
  late final _g_source_set_name = _g_source_set_namePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<ffi.Char>)>();

  void g_source_set_static_name(
    ffi.Pointer<GSource> source,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_source_set_static_name(
      source,
      name,
    );
  }

  late final _g_source_set_static_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<ffi.Char>)>>('g_source_set_static_name');
  late final _g_source_set_static_name = _g_source_set_static_namePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_source_get_name(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_name(
      source,
    );
  }

  late final _g_source_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GSource>)>>('g_source_get_name');
  late final _g_source_get_name = _g_source_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GSource>)>();

  void g_source_set_name_by_id(
    int tag,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_source_set_name_by_id(
      tag,
      name,
    );
  }

  late final _g_source_set_name_by_idPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(guint, ffi.Pointer<ffi.Char>)>>(
      'g_source_set_name_by_id');
  late final _g_source_set_name_by_id = _g_source_set_name_by_idPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void g_source_set_ready_time(
    ffi.Pointer<GSource> source,
    int ready_time,
  ) {
    return _g_source_set_ready_time(
      source,
      ready_time,
    );
  }

  late final _g_source_set_ready_timePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>, gint64)>>(
      'g_source_set_ready_time');
  late final _g_source_set_ready_time = _g_source_set_ready_timePtr
      .asFunction<void Function(ffi.Pointer<GSource>, int)>();

  int g_source_get_ready_time(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_ready_time(
      source,
    );
  }

  late final _g_source_get_ready_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GSource>)>>(
          'g_source_get_ready_time');
  late final _g_source_get_ready_time = _g_source_get_ready_timePtr
      .asFunction<int Function(ffi.Pointer<GSource>)>();

  ffi.Pointer g_source_add_unix_fd(
    ffi.Pointer<GSource> source,
    int fd,
    int events,
  ) {
    return _g_source_add_unix_fd(
      source,
      fd,
      events,
    );
  }

  late final _g_source_add_unix_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GSource>, gint, ffi.Int32)>>('g_source_add_unix_fd');
  late final _g_source_add_unix_fd = _g_source_add_unix_fdPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GSource>, int, int)>();

  void g_source_modify_unix_fd(
    ffi.Pointer<GSource> source,
    ffi.Pointer tag,
    int new_events,
  ) {
    return _g_source_modify_unix_fd(
      source,
      tag,
      new_events,
    );
  }

  late final _g_source_modify_unix_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>, ffi.Pointer,
              ffi.Int32)>>('g_source_modify_unix_fd');
  late final _g_source_modify_unix_fd = _g_source_modify_unix_fdPtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer, int)>();

  void g_source_remove_unix_fd(
    ffi.Pointer<GSource> source,
    ffi.Pointer tag,
  ) {
    return _g_source_remove_unix_fd(
      source,
      tag,
    );
  }

  late final _g_source_remove_unix_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSource>, ffi.Pointer)>>('g_source_remove_unix_fd');
  late final _g_source_remove_unix_fd = _g_source_remove_unix_fdPtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer)>();

  int g_source_query_unix_fd(
    ffi.Pointer<GSource> source,
    ffi.Pointer tag,
  ) {
    return _g_source_query_unix_fd(
      source,
      tag,
    );
  }

  late final _g_source_query_unix_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GSource>, ffi.Pointer)>>('g_source_query_unix_fd');
  late final _g_source_query_unix_fd = _g_source_query_unix_fdPtr
      .asFunction<int Function(ffi.Pointer<GSource>, ffi.Pointer)>();

  void g_source_set_callback_indirect(
    ffi.Pointer<GSource> source,
    ffi.Pointer callback_data,
    ffi.Pointer<GSourceCallbackFuncs> callback_funcs,
  ) {
    return _g_source_set_callback_indirect(
      source,
      callback_data,
      callback_funcs,
    );
  }

  late final _g_source_set_callback_indirectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GSource>, ffi.Pointer,
                  ffi.Pointer<GSourceCallbackFuncs>)>>(
      'g_source_set_callback_indirect');
  late final _g_source_set_callback_indirect =
      _g_source_set_callback_indirectPtr.asFunction<
          void Function(ffi.Pointer<GSource>, ffi.Pointer,
              ffi.Pointer<GSourceCallbackFuncs>)>();

  void g_source_add_poll(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _g_source_add_poll(
      source,
      fd,
    );
  }

  late final _g_source_add_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GPollFD>)>>('g_source_add_poll');
  late final _g_source_add_poll = _g_source_add_pollPtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GPollFD>)>();

  void g_source_remove_poll(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _g_source_remove_poll(
      source,
      fd,
    );
  }

  late final _g_source_remove_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GPollFD>)>>('g_source_remove_poll');
  late final _g_source_remove_poll = _g_source_remove_pollPtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GPollFD>)>();

  void g_source_add_child_source(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GSource> child_source,
  ) {
    return _g_source_add_child_source(
      source,
      child_source,
    );
  }

  late final _g_source_add_child_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GSource>)>>('g_source_add_child_source');
  late final _g_source_add_child_source = _g_source_add_child_sourcePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GSource>)>();

  void g_source_remove_child_source(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GSource> child_source,
  ) {
    return _g_source_remove_child_source(
      source,
      child_source,
    );
  }

  late final _g_source_remove_child_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GSource>)>>('g_source_remove_child_source');
  late final _g_source_remove_child_source = _g_source_remove_child_sourcePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GSource>)>();

  void g_source_get_current_time(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GTimeVal> timeval,
  ) {
    return _g_source_get_current_time(
      source,
      timeval,
    );
  }

  late final _g_source_get_current_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GTimeVal>)>>('g_source_get_current_time');
  late final _g_source_get_current_time = _g_source_get_current_timePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GTimeVal>)>();

  int g_source_get_time(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_get_time(
      source,
    );
  }

  late final _g_source_get_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GSource>)>>(
          'g_source_get_time');
  late final _g_source_get_time =
      _g_source_get_timePtr.asFunction<int Function(ffi.Pointer<GSource>)>();

  ffi.Pointer<GSource> g_idle_source_new() {
    return _g_idle_source_new();
  }

  late final _g_idle_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function()>>(
          'g_idle_source_new');
  late final _g_idle_source_new =
      _g_idle_source_newPtr.asFunction<ffi.Pointer<GSource> Function()>();

  ffi.Pointer<GSource> g_child_watch_source_new(
    int pid,
  ) {
    return _g_child_watch_source_new(
      pid,
    );
  }

  late final _g_child_watch_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function(GPid)>>(
          'g_child_watch_source_new');
  late final _g_child_watch_source_new = _g_child_watch_source_newPtr
      .asFunction<ffi.Pointer<GSource> Function(int)>();

  ffi.Pointer<GSource> g_timeout_source_new(
    int interval,
  ) {
    return _g_timeout_source_new(
      interval,
    );
  }

  late final _g_timeout_source_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function(guint)>>(
          'g_timeout_source_new');
  late final _g_timeout_source_new =
      _g_timeout_source_newPtr.asFunction<ffi.Pointer<GSource> Function(int)>();

  ffi.Pointer<GSource> g_timeout_source_new_seconds(
    int interval,
  ) {
    return _g_timeout_source_new_seconds(
      interval,
    );
  }

  late final _g_timeout_source_new_secondsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSource> Function(guint)>>(
          'g_timeout_source_new_seconds');
  late final _g_timeout_source_new_seconds = _g_timeout_source_new_secondsPtr
      .asFunction<ffi.Pointer<GSource> Function(int)>();

  void g_get_current_time(
    ffi.Pointer<GTimeVal> result,
  ) {
    return _g_get_current_time(
      result,
    );
  }

  late final _g_get_current_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimeVal>)>>(
          'g_get_current_time');
  late final _g_get_current_time =
      _g_get_current_timePtr.asFunction<void Function(ffi.Pointer<GTimeVal>)>();

  int g_get_monotonic_time() {
    return _g_get_monotonic_time();
  }

  late final _g_get_monotonic_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function()>>('g_get_monotonic_time');
  late final _g_get_monotonic_time =
      _g_get_monotonic_timePtr.asFunction<int Function()>();

  int g_get_real_time() {
    return _g_get_real_time();
  }

  late final _g_get_real_timePtr =
      _lookup<ffi.NativeFunction<gint64 Function()>>('g_get_real_time');
  late final _g_get_real_time =
      _g_get_real_timePtr.asFunction<int Function()>();

  int g_source_remove(
    int tag,
  ) {
    return _g_source_remove(
      tag,
    );
  }

  late final _g_source_removePtr =
      _lookup<ffi.NativeFunction<gboolean Function(guint)>>('g_source_remove');
  late final _g_source_remove =
      _g_source_removePtr.asFunction<int Function(int)>();

  int g_source_remove_by_user_data(
    ffi.Pointer user_data,
  ) {
    return _g_source_remove_by_user_data(
      user_data,
    );
  }

  late final _g_source_remove_by_user_dataPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer)>>(
          'g_source_remove_by_user_data');
  late final _g_source_remove_by_user_data =
      _g_source_remove_by_user_dataPtr.asFunction<int Function(ffi.Pointer)>();

  int g_source_remove_by_funcs_user_data(
    ffi.Pointer<GSourceFuncs> funcs,
    ffi.Pointer user_data,
  ) {
    return _g_source_remove_by_funcs_user_data(
      funcs,
      user_data,
    );
  }

  late final _g_source_remove_by_funcs_user_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSourceFuncs>,
              ffi.Pointer)>>('g_source_remove_by_funcs_user_data');
  late final _g_source_remove_by_funcs_user_data =
      _g_source_remove_by_funcs_user_dataPtr
          .asFunction<int Function(ffi.Pointer<GSourceFuncs>, ffi.Pointer)>();

  void g_clear_handle_id(
    ffi.Pointer<guint> tag_ptr,
    GClearHandleFunc clear_func,
  ) {
    return _g_clear_handle_id(
      tag_ptr,
      clear_func,
    );
  }

  late final _g_clear_handle_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<guint>, GClearHandleFunc)>>('g_clear_handle_id');
  late final _g_clear_handle_id = _g_clear_handle_idPtr
      .asFunction<void Function(ffi.Pointer<guint>, GClearHandleFunc)>();

  int g_timeout_add_full(
    int priority,
    int interval,
    GSourceFunc function,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_timeout_add_full(
      priority,
      interval,
      function,
      data,
      notify,
    );
  }

  late final _g_timeout_add_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, guint, GSourceFunc, ffi.Pointer,
              GDestroyNotify)>>('g_timeout_add_full');
  late final _g_timeout_add_full = _g_timeout_add_fullPtr.asFunction<
      int Function(int, int, GSourceFunc, ffi.Pointer, GDestroyNotify)>();

  int g_timeout_add(
    int interval,
    GSourceFunc function,
    ffi.Pointer data,
  ) {
    return _g_timeout_add(
      interval,
      function,
      data,
    );
  }

  late final _g_timeout_addPtr = _lookup<
          ffi.NativeFunction<guint Function(guint, GSourceFunc, ffi.Pointer)>>(
      'g_timeout_add');
  late final _g_timeout_add = _g_timeout_addPtr
      .asFunction<int Function(int, GSourceFunc, ffi.Pointer)>();

  int g_timeout_add_once(
    int interval,
    GSourceOnceFunc function,
    ffi.Pointer data,
  ) {
    return _g_timeout_add_once(
      interval,
      function,
      data,
    );
  }

  late final _g_timeout_add_oncePtr = _lookup<
          ffi
          .NativeFunction<guint Function(guint, GSourceOnceFunc, ffi.Pointer)>>(
      'g_timeout_add_once');
  late final _g_timeout_add_once = _g_timeout_add_oncePtr
      .asFunction<int Function(int, GSourceOnceFunc, ffi.Pointer)>();

  int g_timeout_add_seconds_full(
    int priority,
    int interval,
    GSourceFunc function,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_timeout_add_seconds_full(
      priority,
      interval,
      function,
      data,
      notify,
    );
  }

  late final _g_timeout_add_seconds_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, guint, GSourceFunc, ffi.Pointer,
              GDestroyNotify)>>('g_timeout_add_seconds_full');
  late final _g_timeout_add_seconds_full =
      _g_timeout_add_seconds_fullPtr.asFunction<
          int Function(int, int, GSourceFunc, ffi.Pointer, GDestroyNotify)>();

  int g_timeout_add_seconds(
    int interval,
    GSourceFunc function,
    ffi.Pointer data,
  ) {
    return _g_timeout_add_seconds(
      interval,
      function,
      data,
    );
  }

  late final _g_timeout_add_secondsPtr = _lookup<
          ffi.NativeFunction<guint Function(guint, GSourceFunc, ffi.Pointer)>>(
      'g_timeout_add_seconds');
  late final _g_timeout_add_seconds = _g_timeout_add_secondsPtr
      .asFunction<int Function(int, GSourceFunc, ffi.Pointer)>();

  int g_timeout_add_seconds_once(
    int interval,
    GSourceOnceFunc function,
    ffi.Pointer data,
  ) {
    return _g_timeout_add_seconds_once(
      interval,
      function,
      data,
    );
  }

  late final _g_timeout_add_seconds_oncePtr = _lookup<
          ffi
          .NativeFunction<guint Function(guint, GSourceOnceFunc, ffi.Pointer)>>(
      'g_timeout_add_seconds_once');
  late final _g_timeout_add_seconds_once = _g_timeout_add_seconds_oncePtr
      .asFunction<int Function(int, GSourceOnceFunc, ffi.Pointer)>();

  int g_child_watch_add_full(
    int priority,
    int pid,
    GChildWatchFunc function,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_child_watch_add_full(
      priority,
      pid,
      function,
      data,
      notify,
    );
  }

  late final _g_child_watch_add_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, GPid, GChildWatchFunc, ffi.Pointer,
              GDestroyNotify)>>('g_child_watch_add_full');
  late final _g_child_watch_add_full = _g_child_watch_add_fullPtr.asFunction<
      int Function(int, int, GChildWatchFunc, ffi.Pointer, GDestroyNotify)>();

  int g_child_watch_add(
    int pid,
    GChildWatchFunc function,
    ffi.Pointer data,
  ) {
    return _g_child_watch_add(
      pid,
      function,
      data,
    );
  }

  late final _g_child_watch_addPtr = _lookup<
          ffi
          .NativeFunction<guint Function(GPid, GChildWatchFunc, ffi.Pointer)>>(
      'g_child_watch_add');
  late final _g_child_watch_add = _g_child_watch_addPtr
      .asFunction<int Function(int, GChildWatchFunc, ffi.Pointer)>();

  int g_idle_add(
    GSourceFunc function,
    ffi.Pointer data,
  ) {
    return _g_idle_add(
      function,
      data,
    );
  }

  late final _g_idle_addPtr =
      _lookup<ffi.NativeFunction<guint Function(GSourceFunc, ffi.Pointer)>>(
          'g_idle_add');
  late final _g_idle_add =
      _g_idle_addPtr.asFunction<int Function(GSourceFunc, ffi.Pointer)>();

  int g_idle_add_full(
    int priority,
    GSourceFunc function,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_idle_add_full(
      priority,
      function,
      data,
      notify,
    );
  }

  late final _g_idle_add_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(gint, GSourceFunc, ffi.Pointer,
              GDestroyNotify)>>('g_idle_add_full');
  late final _g_idle_add_full = _g_idle_add_fullPtr.asFunction<
      int Function(int, GSourceFunc, ffi.Pointer, GDestroyNotify)>();

  int g_idle_add_once(
    GSourceOnceFunc function,
    ffi.Pointer data,
  ) {
    return _g_idle_add_once(
      function,
      data,
    );
  }

  late final _g_idle_add_oncePtr =
      _lookup<ffi.NativeFunction<guint Function(GSourceOnceFunc, ffi.Pointer)>>(
          'g_idle_add_once');
  late final _g_idle_add_once = _g_idle_add_oncePtr
      .asFunction<int Function(GSourceOnceFunc, ffi.Pointer)>();

  int g_idle_remove_by_data(
    ffi.Pointer data,
  ) {
    return _g_idle_remove_by_data(
      data,
    );
  }

  late final _g_idle_remove_by_dataPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer)>>(
          'g_idle_remove_by_data');
  late final _g_idle_remove_by_data =
      _g_idle_remove_by_dataPtr.asFunction<int Function(ffi.Pointer)>();

  void g_main_context_invoke_full(
    ffi.Pointer<GMainContext> context,
    int priority,
    GSourceFunc function,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_main_context_invoke_full(
      context,
      priority,
      function,
      data,
      notify,
    );
  }

  late final _g_main_context_invoke_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>, gint, GSourceFunc,
              ffi.Pointer, GDestroyNotify)>>('g_main_context_invoke_full');
  late final _g_main_context_invoke_full =
      _g_main_context_invoke_fullPtr.asFunction<
          void Function(ffi.Pointer<GMainContext>, int, GSourceFunc,
              ffi.Pointer, GDestroyNotify)>();

  void g_main_context_invoke(
    ffi.Pointer<GMainContext> context,
    GSourceFunc function,
    ffi.Pointer data,
  ) {
    return _g_main_context_invoke(
      context,
      function,
      data,
    );
  }

  late final _g_main_context_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMainContext>, GSourceFunc,
              ffi.Pointer)>>('g_main_context_invoke');
  late final _g_main_context_invoke = _g_main_context_invokePtr.asFunction<
      void Function(ffi.Pointer<GMainContext>, GSourceFunc, ffi.Pointer)>();

  late final ffi.Pointer<GSourceFuncs> _g_timeout_funcs =
      _lookup<GSourceFuncs>('g_timeout_funcs');

  GSourceFuncs get g_timeout_funcs => _g_timeout_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_child_watch_funcs =
      _lookup<GSourceFuncs>('g_child_watch_funcs');

  GSourceFuncs get g_child_watch_funcs => _g_child_watch_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_idle_funcs =
      _lookup<GSourceFuncs>('g_idle_funcs');

  GSourceFuncs get g_idle_funcs => _g_idle_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_unix_signal_funcs =
      _lookup<GSourceFuncs>('g_unix_signal_funcs');

  GSourceFuncs get g_unix_signal_funcs => _g_unix_signal_funcs.ref;

  late final ffi.Pointer<GSourceFuncs> _g_unix_fd_source_funcs =
      _lookup<GSourceFuncs>('g_unix_fd_source_funcs');

  GSourceFuncs get g_unix_fd_source_funcs => _g_unix_fd_source_funcs.ref;

  int g_unicode_script_to_iso15924(
    int script,
  ) {
    return _g_unicode_script_to_iso15924(
      script,
    );
  }

  late final _g_unicode_script_to_iso15924Ptr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Int32)>>(
          'g_unicode_script_to_iso15924');
  late final _g_unicode_script_to_iso15924 =
      _g_unicode_script_to_iso15924Ptr.asFunction<int Function(int)>();

  int g_unicode_script_from_iso15924(
    int iso15924,
  ) {
    return _g_unicode_script_from_iso15924(
      iso15924,
    );
  }

  late final _g_unicode_script_from_iso15924Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(guint32)>>(
          'g_unicode_script_from_iso15924');
  late final _g_unicode_script_from_iso15924 =
      _g_unicode_script_from_iso15924Ptr.asFunction<int Function(int)>();

  int g_unichar_isalnum(
    int c,
  ) {
    return _g_unichar_isalnum(
      c,
    );
  }

  late final _g_unichar_isalnumPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isalnum');
  late final _g_unichar_isalnum =
      _g_unichar_isalnumPtr.asFunction<int Function(int)>();

  int g_unichar_isalpha(
    int c,
  ) {
    return _g_unichar_isalpha(
      c,
    );
  }

  late final _g_unichar_isalphaPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isalpha');
  late final _g_unichar_isalpha =
      _g_unichar_isalphaPtr.asFunction<int Function(int)>();

  int g_unichar_iscntrl(
    int c,
  ) {
    return _g_unichar_iscntrl(
      c,
    );
  }

  late final _g_unichar_iscntrlPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iscntrl');
  late final _g_unichar_iscntrl =
      _g_unichar_iscntrlPtr.asFunction<int Function(int)>();

  int g_unichar_isdigit(
    int c,
  ) {
    return _g_unichar_isdigit(
      c,
    );
  }

  late final _g_unichar_isdigitPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isdigit');
  late final _g_unichar_isdigit =
      _g_unichar_isdigitPtr.asFunction<int Function(int)>();

  int g_unichar_isgraph(
    int c,
  ) {
    return _g_unichar_isgraph(
      c,
    );
  }

  late final _g_unichar_isgraphPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isgraph');
  late final _g_unichar_isgraph =
      _g_unichar_isgraphPtr.asFunction<int Function(int)>();

  int g_unichar_islower(
    int c,
  ) {
    return _g_unichar_islower(
      c,
    );
  }

  late final _g_unichar_islowerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_islower');
  late final _g_unichar_islower =
      _g_unichar_islowerPtr.asFunction<int Function(int)>();

  int g_unichar_isprint(
    int c,
  ) {
    return _g_unichar_isprint(
      c,
    );
  }

  late final _g_unichar_isprintPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isprint');
  late final _g_unichar_isprint =
      _g_unichar_isprintPtr.asFunction<int Function(int)>();

  int g_unichar_ispunct(
    int c,
  ) {
    return _g_unichar_ispunct(
      c,
    );
  }

  late final _g_unichar_ispunctPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_ispunct');
  late final _g_unichar_ispunct =
      _g_unichar_ispunctPtr.asFunction<int Function(int)>();

  int g_unichar_isspace(
    int c,
  ) {
    return _g_unichar_isspace(
      c,
    );
  }

  late final _g_unichar_isspacePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isspace');
  late final _g_unichar_isspace =
      _g_unichar_isspacePtr.asFunction<int Function(int)>();

  int g_unichar_isupper(
    int c,
  ) {
    return _g_unichar_isupper(
      c,
    );
  }

  late final _g_unichar_isupperPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isupper');
  late final _g_unichar_isupper =
      _g_unichar_isupperPtr.asFunction<int Function(int)>();

  int g_unichar_isxdigit(
    int c,
  ) {
    return _g_unichar_isxdigit(
      c,
    );
  }

  late final _g_unichar_isxdigitPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isxdigit');
  late final _g_unichar_isxdigit =
      _g_unichar_isxdigitPtr.asFunction<int Function(int)>();

  int g_unichar_istitle(
    int c,
  ) {
    return _g_unichar_istitle(
      c,
    );
  }

  late final _g_unichar_istitlePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_istitle');
  late final _g_unichar_istitle =
      _g_unichar_istitlePtr.asFunction<int Function(int)>();

  int g_unichar_isdefined(
    int c,
  ) {
    return _g_unichar_isdefined(
      c,
    );
  }

  late final _g_unichar_isdefinedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_isdefined');
  late final _g_unichar_isdefined =
      _g_unichar_isdefinedPtr.asFunction<int Function(int)>();

  int g_unichar_iswide(
    int c,
  ) {
    return _g_unichar_iswide(
      c,
    );
  }

  late final _g_unichar_iswidePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iswide');
  late final _g_unichar_iswide =
      _g_unichar_iswidePtr.asFunction<int Function(int)>();

  int g_unichar_iswide_cjk(
    int c,
  ) {
    return _g_unichar_iswide_cjk(
      c,
    );
  }

  late final _g_unichar_iswide_cjkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iswide_cjk');
  late final _g_unichar_iswide_cjk =
      _g_unichar_iswide_cjkPtr.asFunction<int Function(int)>();

  int g_unichar_iszerowidth(
    int c,
  ) {
    return _g_unichar_iszerowidth(
      c,
    );
  }

  late final _g_unichar_iszerowidthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_iszerowidth');
  late final _g_unichar_iszerowidth =
      _g_unichar_iszerowidthPtr.asFunction<int Function(int)>();

  int g_unichar_ismark(
    int c,
  ) {
    return _g_unichar_ismark(
      c,
    );
  }

  late final _g_unichar_ismarkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_ismark');
  late final _g_unichar_ismark =
      _g_unichar_ismarkPtr.asFunction<int Function(int)>();

  int g_unichar_toupper(
    int c,
  ) {
    return _g_unichar_toupper(
      c,
    );
  }

  late final _g_unichar_toupperPtr =
      _lookup<ffi.NativeFunction<gunichar Function(gunichar)>>(
          'g_unichar_toupper');
  late final _g_unichar_toupper =
      _g_unichar_toupperPtr.asFunction<int Function(int)>();

  int g_unichar_tolower(
    int c,
  ) {
    return _g_unichar_tolower(
      c,
    );
  }

  late final _g_unichar_tolowerPtr =
      _lookup<ffi.NativeFunction<gunichar Function(gunichar)>>(
          'g_unichar_tolower');
  late final _g_unichar_tolower =
      _g_unichar_tolowerPtr.asFunction<int Function(int)>();

  int g_unichar_totitle(
    int c,
  ) {
    return _g_unichar_totitle(
      c,
    );
  }

  late final _g_unichar_totitlePtr =
      _lookup<ffi.NativeFunction<gunichar Function(gunichar)>>(
          'g_unichar_totitle');
  late final _g_unichar_totitle =
      _g_unichar_totitlePtr.asFunction<int Function(int)>();

  int g_unichar_digit_value(
    int c,
  ) {
    return _g_unichar_digit_value(
      c,
    );
  }

  late final _g_unichar_digit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(gunichar)>>(
          'g_unichar_digit_value');
  late final _g_unichar_digit_value =
      _g_unichar_digit_valuePtr.asFunction<int Function(int)>();

  int g_unichar_xdigit_value(
    int c,
  ) {
    return _g_unichar_xdigit_value(
      c,
    );
  }

  late final _g_unichar_xdigit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(gunichar)>>(
          'g_unichar_xdigit_value');
  late final _g_unichar_xdigit_value =
      _g_unichar_xdigit_valuePtr.asFunction<int Function(int)>();

  int g_unichar_type(
    int c,
  ) {
    return _g_unichar_type(
      c,
    );
  }

  late final _g_unichar_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gunichar)>>(
          'g_unichar_type');
  late final _g_unichar_type =
      _g_unichar_typePtr.asFunction<int Function(int)>();

  int g_unichar_break_type(
    int c,
  ) {
    return _g_unichar_break_type(
      c,
    );
  }

  late final _g_unichar_break_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gunichar)>>(
          'g_unichar_break_type');
  late final _g_unichar_break_type =
      _g_unichar_break_typePtr.asFunction<int Function(int)>();

  int g_unichar_combining_class(
    int uc,
  ) {
    return _g_unichar_combining_class(
      uc,
    );
  }

  late final _g_unichar_combining_classPtr =
      _lookup<ffi.NativeFunction<gint Function(gunichar)>>(
          'g_unichar_combining_class');
  late final _g_unichar_combining_class =
      _g_unichar_combining_classPtr.asFunction<int Function(int)>();

  int g_unichar_get_mirror_char(
    int ch,
    ffi.Pointer<gunichar> mirrored_ch,
  ) {
    return _g_unichar_get_mirror_char(
      ch,
      mirrored_ch,
    );
  }

  late final _g_unichar_get_mirror_charPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(gunichar, ffi.Pointer<gunichar>)>>(
      'g_unichar_get_mirror_char');
  late final _g_unichar_get_mirror_char = _g_unichar_get_mirror_charPtr
      .asFunction<int Function(int, ffi.Pointer<gunichar>)>();

  int g_unichar_get_script(
    int ch,
  ) {
    return _g_unichar_get_script(
      ch,
    );
  }

  late final _g_unichar_get_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gunichar)>>(
          'g_unichar_get_script');
  late final _g_unichar_get_script =
      _g_unichar_get_scriptPtr.asFunction<int Function(int)>();

  int g_unichar_validate(
    int ch,
  ) {
    return _g_unichar_validate(
      ch,
    );
  }

  late final _g_unichar_validatePtr =
      _lookup<ffi.NativeFunction<gboolean Function(gunichar)>>(
          'g_unichar_validate');
  late final _g_unichar_validate =
      _g_unichar_validatePtr.asFunction<int Function(int)>();

  int g_unichar_compose(
    int a,
    int b,
    ffi.Pointer<gunichar> ch,
  ) {
    return _g_unichar_compose(
      a,
      b,
      ch,
    );
  }

  late final _g_unichar_composePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              gunichar, gunichar, ffi.Pointer<gunichar>)>>('g_unichar_compose');
  late final _g_unichar_compose = _g_unichar_composePtr
      .asFunction<int Function(int, int, ffi.Pointer<gunichar>)>();

  int g_unichar_decompose(
    int ch,
    ffi.Pointer<gunichar> a,
    ffi.Pointer<gunichar> b,
  ) {
    return _g_unichar_decompose(
      ch,
      a,
      b,
    );
  }

  late final _g_unichar_decomposePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gunichar, ffi.Pointer<gunichar>,
              ffi.Pointer<gunichar>)>>('g_unichar_decompose');
  late final _g_unichar_decompose = _g_unichar_decomposePtr.asFunction<
      int Function(int, ffi.Pointer<gunichar>, ffi.Pointer<gunichar>)>();

  int g_unichar_fully_decompose(
    int ch,
    int compat,
    ffi.Pointer<gunichar> result,
    int result_len,
  ) {
    return _g_unichar_fully_decompose(
      ch,
      compat,
      result,
      result_len,
    );
  }

  late final _g_unichar_fully_decomposePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(gunichar, gboolean, ffi.Pointer<gunichar>,
              gsize)>>('g_unichar_fully_decompose');
  late final _g_unichar_fully_decompose = _g_unichar_fully_decomposePtr
      .asFunction<int Function(int, int, ffi.Pointer<gunichar>, int)>();

  void g_unicode_canonical_ordering(
    ffi.Pointer<gunichar> string,
    int len,
  ) {
    return _g_unicode_canonical_ordering(
      string,
      len,
    );
  }

  late final _g_unicode_canonical_orderingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gunichar>, gsize)>>(
      'g_unicode_canonical_ordering');
  late final _g_unicode_canonical_ordering = _g_unicode_canonical_orderingPtr
      .asFunction<void Function(ffi.Pointer<gunichar>, int)>();

  ffi.Pointer<gunichar> g_unicode_canonical_decomposition(
    int ch,
    ffi.Pointer<gsize> result_len,
  ) {
    return _g_unicode_canonical_decomposition(
      ch,
      result_len,
    );
  }

  late final _g_unicode_canonical_decompositionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(gunichar,
              ffi.Pointer<gsize>)>>('g_unicode_canonical_decomposition');
  late final _g_unicode_canonical_decomposition =
      _g_unicode_canonical_decompositionPtr.asFunction<
          ffi.Pointer<gunichar> Function(int, ffi.Pointer<gsize>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _g_utf8_skip =
      _lookup<ffi.Pointer<ffi.Char>>('g_utf8_skip');

  ffi.Pointer<ffi.Char> get g_utf8_skip => _g_utf8_skip.value;

  int g_utf8_get_char(
    ffi.Pointer<ffi.Char> p,
  ) {
    return _g_utf8_get_char(
      p,
    );
  }

  late final _g_utf8_get_charPtr =
      _lookup<ffi.NativeFunction<gunichar Function(ffi.Pointer<ffi.Char>)>>(
          'g_utf8_get_char');
  late final _g_utf8_get_char =
      _g_utf8_get_charPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_utf8_get_char_validated(
    ffi.Pointer<ffi.Char> p,
    int max_len,
  ) {
    return _g_utf8_get_char_validated(
      p,
      max_len,
    );
  }

  late final _g_utf8_get_char_validatedPtr = _lookup<
          ffi.NativeFunction<gunichar Function(ffi.Pointer<ffi.Char>, gssize)>>(
      'g_utf8_get_char_validated');
  late final _g_utf8_get_char_validated = _g_utf8_get_char_validatedPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_offset_to_pointer(
    ffi.Pointer<ffi.Char> str,
    int offset,
  ) {
    return _g_utf8_offset_to_pointer(
      str,
      offset,
    );
  }

  late final _g_utf8_offset_to_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, glong)>>('g_utf8_offset_to_pointer');
  late final _g_utf8_offset_to_pointer = _g_utf8_offset_to_pointerPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int g_utf8_pointer_to_offset(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> pos,
  ) {
    return _g_utf8_pointer_to_offset(
      str,
      pos,
    );
  }

  late final _g_utf8_pointer_to_offsetPtr = _lookup<
      ffi.NativeFunction<
          glong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_utf8_pointer_to_offset');
  late final _g_utf8_pointer_to_offset = _g_utf8_pointer_to_offsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_utf8_prev_char(
    ffi.Pointer<ffi.Char> p,
  ) {
    return _g_utf8_prev_char(
      p,
    );
  }

  late final _g_utf8_prev_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_utf8_prev_char');
  late final _g_utf8_prev_char = _g_utf8_prev_charPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_utf8_find_next_char(
    ffi.Pointer<ffi.Char> p,
    ffi.Pointer<ffi.Char> end,
  ) {
    return _g_utf8_find_next_char(
      p,
      end,
    );
  }

  late final _g_utf8_find_next_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_utf8_find_next_char');
  late final _g_utf8_find_next_char = _g_utf8_find_next_charPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_utf8_find_prev_char(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> p,
  ) {
    return _g_utf8_find_prev_char(
      str,
      p,
    );
  }

  late final _g_utf8_find_prev_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_utf8_find_prev_char');
  late final _g_utf8_find_prev_char = _g_utf8_find_prev_charPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_utf8_strlen(
    ffi.Pointer<ffi.Char> p,
    int max,
  ) {
    return _g_utf8_strlen(
      p,
      max,
    );
  }

  late final _g_utf8_strlenPtr = _lookup<
          ffi.NativeFunction<glong Function(ffi.Pointer<ffi.Char>, gssize)>>(
      'g_utf8_strlen');
  late final _g_utf8_strlen =
      _g_utf8_strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_substring(
    ffi.Pointer<ffi.Char> str,
    int start_pos,
    int end_pos,
  ) {
    return _g_utf8_substring(
      str,
      start_pos,
      end_pos,
    );
  }

  late final _g_utf8_substringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, glong, glong)>>('g_utf8_substring');
  late final _g_utf8_substring = _g_utf8_substringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> g_utf8_strncpy(
    ffi.Pointer<ffi.Char> dest,
    ffi.Pointer<ffi.Char> src,
    int n,
  ) {
    return _g_utf8_strncpy(
      dest,
      src,
      n,
    );
  }

  late final _g_utf8_strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gsize)>>('g_utf8_strncpy');
  late final _g_utf8_strncpy = _g_utf8_strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_truncate_middle(
    ffi.Pointer<ffi.Char> string,
    int truncate_length,
  ) {
    return _g_utf8_truncate_middle(
      string,
      truncate_length,
    );
  }

  late final _g_utf8_truncate_middlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gsize)>>('g_utf8_truncate_middle');
  late final _g_utf8_truncate_middle = _g_utf8_truncate_middlePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_strchr(
    ffi.Pointer<ffi.Char> p,
    int len,
    int c,
  ) {
    return _g_utf8_strchr(
      p,
      len,
      c,
    );
  }

  late final _g_utf8_strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize, gunichar)>>('g_utf8_strchr');
  late final _g_utf8_strchr = _g_utf8_strchrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> g_utf8_strrchr(
    ffi.Pointer<ffi.Char> p,
    int len,
    int c,
  ) {
    return _g_utf8_strrchr(
      p,
      len,
      c,
    );
  }

  late final _g_utf8_strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize, gunichar)>>('g_utf8_strrchr');
  late final _g_utf8_strrchr = _g_utf8_strrchrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> g_utf8_strreverse(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_strreverse(
      str,
      len,
    );
  }

  late final _g_utf8_strreversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_utf8_strreverse');
  late final _g_utf8_strreverse = _g_utf8_strreversePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<gunichar2> g_utf8_to_utf16(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf8_to_utf16(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf8_to_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar2> Function(
              ffi.Pointer<ffi.Char>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf8_to_utf16');
  late final _g_utf8_to_utf16 = _g_utf8_to_utf16Ptr.asFunction<
      ffi.Pointer<gunichar2> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gunichar> g_utf8_to_ucs4(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf8_to_ucs4(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf8_to_ucs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(
              ffi.Pointer<ffi.Char>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf8_to_ucs4');
  late final _g_utf8_to_ucs4 = _g_utf8_to_ucs4Ptr.asFunction<
      ffi.Pointer<gunichar> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gunichar> g_utf8_to_ucs4_fast(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<glong> items_written,
  ) {
    return _g_utf8_to_ucs4_fast(
      str,
      len,
      items_written,
    );
  }

  late final _g_utf8_to_ucs4_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(ffi.Pointer<ffi.Char>, glong,
              ffi.Pointer<glong>)>>('g_utf8_to_ucs4_fast');
  late final _g_utf8_to_ucs4_fast = _g_utf8_to_ucs4_fastPtr.asFunction<
      ffi.Pointer<gunichar> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<glong>)>();

  ffi.Pointer<gunichar> g_utf16_to_ucs4(
    ffi.Pointer<gunichar2> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf16_to_ucs4(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf16_to_ucs4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar> Function(
              ffi.Pointer<gunichar2>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf16_to_ucs4');
  late final _g_utf16_to_ucs4 = _g_utf16_to_ucs4Ptr.asFunction<
      ffi.Pointer<gunichar> Function(
          ffi.Pointer<gunichar2>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_utf16_to_utf8(
    ffi.Pointer<gunichar2> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_utf16_to_utf8(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_utf16_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<gunichar2>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_utf16_to_utf8');
  late final _g_utf16_to_utf8 = _g_utf16_to_utf8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<gunichar2>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<gunichar2> g_ucs4_to_utf16(
    ffi.Pointer<gunichar> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ucs4_to_utf16(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_ucs4_to_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gunichar2> Function(
              ffi.Pointer<gunichar>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ucs4_to_utf16');
  late final _g_ucs4_to_utf16 = _g_ucs4_to_utf16Ptr.asFunction<
      ffi.Pointer<gunichar2> Function(
          ffi.Pointer<gunichar>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_ucs4_to_utf8(
    ffi.Pointer<gunichar> str,
    int len,
    ffi.Pointer<glong> items_read,
    ffi.Pointer<glong> items_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ucs4_to_utf8(
      str,
      len,
      items_read,
      items_written,
      error,
    );
  }

  late final _g_ucs4_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<gunichar>,
              glong,
              ffi.Pointer<glong>,
              ffi.Pointer<glong>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ucs4_to_utf8');
  late final _g_ucs4_to_utf8 = _g_ucs4_to_utf8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<gunichar>,
          int,
          ffi.Pointer<glong>,
          ffi.Pointer<glong>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_unichar_to_utf8(
    int c,
    ffi.Pointer<ffi.Char> outbuf,
  ) {
    return _g_unichar_to_utf8(
      c,
      outbuf,
    );
  }

  late final _g_unichar_to_utf8Ptr = _lookup<
          ffi.NativeFunction<gint Function(gunichar, ffi.Pointer<ffi.Char>)>>(
      'g_unichar_to_utf8');
  late final _g_unichar_to_utf8 = _g_unichar_to_utf8Ptr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int g_utf8_validate(
    ffi.Pointer<ffi.Char> str,
    int max_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end,
  ) {
    return _g_utf8_validate(
      str,
      max_len,
      end,
    );
  }

  late final _g_utf8_validatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, gssize,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_utf8_validate');
  late final _g_utf8_validate = _g_utf8_validatePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int g_utf8_validate_len(
    ffi.Pointer<ffi.Char> str,
    int max_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end,
  ) {
    return _g_utf8_validate_len(
      str,
      max_len,
      end,
    );
  }

  late final _g_utf8_validate_lenPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, gsize,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_utf8_validate_len');
  late final _g_utf8_validate_len = _g_utf8_validate_lenPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> g_utf8_strup(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_strup(
      str,
      len,
    );
  }

  late final _g_utf8_strupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_utf8_strup');
  late final _g_utf8_strup = _g_utf8_strupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_strdown(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_strdown(
      str,
      len,
    );
  }

  late final _g_utf8_strdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_utf8_strdown');
  late final _g_utf8_strdown = _g_utf8_strdownPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_casefold(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_casefold(
      str,
      len,
    );
  }

  late final _g_utf8_casefoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_utf8_casefold');
  late final _g_utf8_casefold = _g_utf8_casefoldPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_normalize(
    ffi.Pointer<ffi.Char> str,
    int len,
    int mode,
  ) {
    return _g_utf8_normalize(
      str,
      len,
      mode,
    );
  }

  late final _g_utf8_normalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize, ffi.Int32)>>('g_utf8_normalize');
  late final _g_utf8_normalize = _g_utf8_normalizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  int g_utf8_collate(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _g_utf8_collate(
      str1,
      str2,
    );
  }

  late final _g_utf8_collatePtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_utf8_collate');
  late final _g_utf8_collate = _g_utf8_collatePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_utf8_collate_key(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_collate_key(
      str,
      len,
    );
  }

  late final _g_utf8_collate_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_utf8_collate_key');
  late final _g_utf8_collate_key = _g_utf8_collate_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_collate_key_for_filename(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_collate_key_for_filename(
      str,
      len,
    );
  }

  late final _g_utf8_collate_key_for_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              gssize)>>('g_utf8_collate_key_for_filename');
  late final _g_utf8_collate_key_for_filename =
      _g_utf8_collate_key_for_filenamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_utf8_make_valid(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_utf8_make_valid(
      str,
      len,
    );
  }

  late final _g_utf8_make_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_utf8_make_valid');
  late final _g_utf8_make_valid = _g_utf8_make_validPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<guint16>> _g_ascii_table =
      _lookup<ffi.Pointer<guint16>>('g_ascii_table');

  ffi.Pointer<guint16> get g_ascii_table => _g_ascii_table.value;

  int g_ascii_tolower(
    int c,
  ) {
    return _g_ascii_tolower(
      c,
    );
  }

  late final _g_ascii_tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Char)>>(
          'g_ascii_tolower');
  late final _g_ascii_tolower =
      _g_ascii_tolowerPtr.asFunction<int Function(int)>();

  int g_ascii_toupper(
    int c,
  ) {
    return _g_ascii_toupper(
      c,
    );
  }

  late final _g_ascii_toupperPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Char)>>(
          'g_ascii_toupper');
  late final _g_ascii_toupper =
      _g_ascii_toupperPtr.asFunction<int Function(int)>();

  int g_ascii_digit_value(
    int c,
  ) {
    return _g_ascii_digit_value(
      c,
    );
  }

  late final _g_ascii_digit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Char)>>(
          'g_ascii_digit_value');
  late final _g_ascii_digit_value =
      _g_ascii_digit_valuePtr.asFunction<int Function(int)>();

  int g_ascii_xdigit_value(
    int c,
  ) {
    return _g_ascii_xdigit_value(
      c,
    );
  }

  late final _g_ascii_xdigit_valuePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Char)>>(
          'g_ascii_xdigit_value');
  late final _g_ascii_xdigit_value =
      _g_ascii_xdigit_valuePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> g_strdelimit(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> delimiters,
    int new_delimiter,
  ) {
    return _g_strdelimit(
      string,
      delimiters,
      new_delimiter,
    );
  }

  late final _g_strdelimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Char)>>('g_strdelimit');
  late final _g_strdelimit = _g_strdelimitPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_strcanon(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> valid_chars,
    int substitutor,
  ) {
    return _g_strcanon(
      string,
      valid_chars,
      substitutor,
    );
  }

  late final _g_strcanonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Char)>>('g_strcanon');
  late final _g_strcanon = _g_strcanonPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_strerror(
    int errnum,
  ) {
    return _g_strerror(
      errnum,
    );
  }

  late final _g_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(gint)>>(
          'g_strerror');
  late final _g_strerror =
      _g_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> g_strsignal(
    int signum,
  ) {
    return _g_strsignal(
      signum,
    );
  }

  late final _g_strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(gint)>>(
          'g_strsignal');
  late final _g_strsignal =
      _g_strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> g_strreverse(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_strreverse(
      string,
    );
  }

  late final _g_strreversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_strreverse');
  late final _g_strreverse = _g_strreversePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_strlcpy(
    ffi.Pointer<ffi.Char> dest,
    ffi.Pointer<ffi.Char> src,
    int dest_size,
  ) {
    return _g_strlcpy(
      dest,
      src,
      dest_size,
    );
  }

  late final _g_strlcpyPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              gsize)>>('g_strlcpy');
  late final _g_strlcpy = _g_strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int g_strlcat(
    ffi.Pointer<ffi.Char> dest,
    ffi.Pointer<ffi.Char> src,
    int dest_size,
  ) {
    return _g_strlcat(
      dest,
      src,
      dest_size,
    );
  }

  late final _g_strlcatPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              gsize)>>('g_strlcat');
  late final _g_strlcat = _g_strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_strstr_len(
    ffi.Pointer<ffi.Char> haystack,
    int haystack_len,
    ffi.Pointer<ffi.Char> needle,
  ) {
    return _g_strstr_len(
      haystack,
      haystack_len,
      needle,
    );
  }

  late final _g_strstr_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, gssize,
              ffi.Pointer<ffi.Char>)>>('g_strstr_len');
  late final _g_strstr_len = _g_strstr_lenPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strrstr(
    ffi.Pointer<ffi.Char> haystack,
    ffi.Pointer<ffi.Char> needle,
  ) {
    return _g_strrstr(
      haystack,
      needle,
    );
  }

  late final _g_strrstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_strrstr');
  late final _g_strrstr = _g_strrstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strrstr_len(
    ffi.Pointer<ffi.Char> haystack,
    int haystack_len,
    ffi.Pointer<ffi.Char> needle,
  ) {
    return _g_strrstr_len(
      haystack,
      haystack_len,
      needle,
    );
  }

  late final _g_strrstr_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, gssize,
              ffi.Pointer<ffi.Char>)>>('g_strrstr_len');
  late final _g_strrstr_len = _g_strrstr_lenPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int g_str_has_suffix(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> suffix,
  ) {
    return _g_str_has_suffix(
      str,
      suffix,
    );
  }

  late final _g_str_has_suffixPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_str_has_suffix');
  late final _g_str_has_suffix = _g_str_has_suffixPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_str_has_prefix(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> prefix,
  ) {
    return _g_str_has_prefix(
      str,
      prefix,
    );
  }

  late final _g_str_has_prefixPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_str_has_prefix');
  late final _g_str_has_prefix = _g_str_has_prefixPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  double g_strtod(
    ffi.Pointer<ffi.Char> nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
  ) {
    return _g_strtod(
      nptr,
      endptr,
    );
  }

  late final _g_strtodPtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strtod');
  late final _g_strtod = _g_strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double g_ascii_strtod(
    ffi.Pointer<ffi.Char> nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
  ) {
    return _g_ascii_strtod(
      nptr,
      endptr,
    );
  }

  late final _g_ascii_strtodPtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_ascii_strtod');
  late final _g_ascii_strtod = _g_ascii_strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int g_ascii_strtoull(
    ffi.Pointer<ffi.Char> nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
    int base,
  ) {
    return _g_ascii_strtoull(
      nptr,
      endptr,
      base,
    );
  }

  late final _g_ascii_strtoullPtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, guint)>>('g_ascii_strtoull');
  late final _g_ascii_strtoull = _g_ascii_strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int g_ascii_strtoll(
    ffi.Pointer<ffi.Char> nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
    int base,
  ) {
    return _g_ascii_strtoll(
      nptr,
      endptr,
      base,
    );
  }

  late final _g_ascii_strtollPtr = _lookup<
      ffi.NativeFunction<
          gint64 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, guint)>>('g_ascii_strtoll');
  late final _g_ascii_strtoll = _g_ascii_strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> g_ascii_dtostr(
    ffi.Pointer<ffi.Char> buffer,
    int buf_len,
    double d,
  ) {
    return _g_ascii_dtostr(
      buffer,
      buf_len,
      d,
    );
  }

  late final _g_ascii_dtostrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gint, gdouble)>>('g_ascii_dtostr');
  late final _g_ascii_dtostr = _g_ascii_dtostrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, double)>();

  ffi.Pointer<ffi.Char> g_ascii_formatd(
    ffi.Pointer<ffi.Char> buffer,
    int buf_len,
    ffi.Pointer<ffi.Char> format,
    double d,
  ) {
    return _g_ascii_formatd(
      buffer,
      buf_len,
      format,
      d,
    );
  }

  late final _g_ascii_formatdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, gint,
              ffi.Pointer<ffi.Char>, gdouble)>>('g_ascii_formatd');
  late final _g_ascii_formatd = _g_ascii_formatdPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, double)>();

  ffi.Pointer<ffi.Char> g_strchug(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_strchug(
      string,
    );
  }

  late final _g_strchugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_strchug');
  late final _g_strchug = _g_strchugPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strchomp(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_strchomp(
      string,
    );
  }

  late final _g_strchompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_strchomp');
  late final _g_strchomp = _g_strchompPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int g_ascii_strcasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _g_ascii_strcasecmp(
      s1,
      s2,
    );
  }

  late final _g_ascii_strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_ascii_strcasecmp');
  late final _g_ascii_strcasecmp = _g_ascii_strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_ascii_strncasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _g_ascii_strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _g_ascii_strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              gsize)>>('g_ascii_strncasecmp');
  late final _g_ascii_strncasecmp = _g_ascii_strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_ascii_strdown(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_ascii_strdown(
      str,
      len,
    );
  }

  late final _g_ascii_strdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_ascii_strdown');
  late final _g_ascii_strdown = _g_ascii_strdownPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_ascii_strup(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_ascii_strup(
      str,
      len,
    );
  }

  late final _g_ascii_strupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_ascii_strup');
  late final _g_ascii_strup = _g_ascii_strupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int g_str_is_ascii(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_str_is_ascii(
      str,
    );
  }

  late final _g_str_is_asciiPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_str_is_ascii');
  late final _g_str_is_ascii =
      _g_str_is_asciiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_strcasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _g_strcasecmp(
      s1,
      s2,
    );
  }

  late final _g_strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_strcasecmp');
  late final _g_strcasecmp = _g_strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_strncasecmp(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _g_strncasecmp(
      s1,
      s2,
      n,
    );
  }

  late final _g_strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              guint)>>('g_strncasecmp');
  late final _g_strncasecmp = _g_strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_strdown(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_strdown(
      string,
    );
  }

  late final _g_strdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_strdown');
  late final _g_strdown = _g_strdownPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strup(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_strup(
      string,
    );
  }

  late final _g_strupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_strup');
  late final _g_strup = _g_strupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strdup(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_strdup(
      str,
    );
  }

  late final _g_strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_strdup');
  late final _g_strdup = _g_strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strdup_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_strdup_printf(
      format,
    );
  }

  late final _g_strdup_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_strdup_printf');
  late final _g_strdup_printf = _g_strdup_printfPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strdup_vprintf(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_strdup_vprintf(
      format,
      args,
    );
  }

  late final _g_strdup_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_strdup_vprintf');
  late final _g_strdup_vprintf = _g_strdup_vprintfPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> g_strndup(
    ffi.Pointer<ffi.Char> str,
    int n,
  ) {
    return _g_strndup(
      str,
      n,
    );
  }

  late final _g_strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gsize)>>('g_strndup');
  late final _g_strndup = _g_strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_strnfill(
    int length,
    int fill_char,
  ) {
    return _g_strnfill(
      length,
      fill_char,
    );
  }

  late final _g_strnfillPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(gsize, ffi.Char)>>(
      'g_strnfill');
  late final _g_strnfill =
      _g_strnfillPtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> g_strconcat(
    ffi.Pointer<ffi.Char> string1,
  ) {
    return _g_strconcat(
      string1,
    );
  }

  late final _g_strconcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_strconcat');
  late final _g_strconcat = _g_strconcatPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strjoin(
    ffi.Pointer<ffi.Char> separator,
  ) {
    return _g_strjoin(
      separator,
    );
  }

  late final _g_strjoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('g_strjoin');
  late final _g_strjoin = _g_strjoinPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strcompress(
    ffi.Pointer<ffi.Char> source,
  ) {
    return _g_strcompress(
      source,
    );
  }

  late final _g_strcompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_strcompress');
  late final _g_strcompress = _g_strcompressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strescape(
    ffi.Pointer<ffi.Char> source,
    ffi.Pointer<ffi.Char> exceptions,
  ) {
    return _g_strescape(
      source,
      exceptions,
    );
  }

  late final _g_strescapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_strescape');
  late final _g_strescape = _g_strescapePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer g_memdup(
    gconstpointer mem,
    int byte_size,
  ) {
    return _g_memdup(
      mem,
      byte_size,
    );
  }

  late final _g_memdupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gconstpointer, guint)>>(
          'g_memdup');
  late final _g_memdup =
      _g_memdupPtr.asFunction<ffi.Pointer Function(gconstpointer, int)>();

  ffi.Pointer g_memdup2(
    gconstpointer mem,
    int byte_size,
  ) {
    return _g_memdup2(
      mem,
      byte_size,
    );
  }

  late final _g_memdup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gconstpointer, gsize)>>(
          'g_memdup2');
  late final _g_memdup2 =
      _g_memdup2Ptr.asFunction<ffi.Pointer Function(gconstpointer, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_strsplit(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> delimiter,
    int max_tokens,
  ) {
    return _g_strsplit(
      string,
      delimiter,
      max_tokens,
    );
  }

  late final _g_strsplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gint)>>('g_strsplit');
  late final _g_strsplit = _g_strsplitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_strsplit_set(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> delimiters,
    int max_tokens,
  ) {
    return _g_strsplit_set(
      string,
      delimiters,
      max_tokens,
    );
  }

  late final _g_strsplit_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gint)>>('g_strsplit_set');
  late final _g_strsplit_set = _g_strsplit_setPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_strjoinv(
    ffi.Pointer<ffi.Char> separator,
    ffi.Pointer<ffi.Pointer<ffi.Char>> str_array,
  ) {
    return _g_strjoinv(
      separator,
      str_array,
    );
  }

  late final _g_strjoinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strjoinv');
  late final _g_strjoinv = _g_strjoinvPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_strfreev(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str_array,
  ) {
    return _g_strfreev(
      str_array,
    );
  }

  late final _g_strfreevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strfreev');
  late final _g_strfreev = _g_strfreevPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_strdupv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str_array,
  ) {
    return _g_strdupv(
      str_array,
    );
  }

  late final _g_strdupvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strdupv');
  late final _g_strdupv = _g_strdupvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int g_strv_length(
    ffi.Pointer<ffi.Pointer<ffi.Char>> str_array,
  ) {
    return _g_strv_length(
      str_array,
    );
  }

  late final _g_strv_lengthPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strv_length');
  late final _g_strv_length = _g_strv_lengthPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> g_stpcpy(
    ffi.Pointer<ffi.Char> dest,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _g_stpcpy(
      dest,
      src,
    );
  }

  late final _g_stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_stpcpy');
  late final _g_stpcpy = _g_stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_str_to_ascii(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> from_locale,
  ) {
    return _g_str_to_ascii(
      str,
      from_locale,
    );
  }

  late final _g_str_to_asciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_str_to_ascii');
  late final _g_str_to_ascii = _g_str_to_asciiPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_str_tokenize_and_fold(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> translit_locale,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ascii_alternates,
  ) {
    return _g_str_tokenize_and_fold(
      string,
      translit_locale,
      ascii_alternates,
    );
  }

  late final _g_str_tokenize_and_foldPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>(
      'g_str_tokenize_and_fold');
  late final _g_str_tokenize_and_fold = _g_str_tokenize_and_foldPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  int g_str_match_string(
    ffi.Pointer<ffi.Char> search_term,
    ffi.Pointer<ffi.Char> potential_hit,
    int accept_alternates,
  ) {
    return _g_str_match_string(
      search_term,
      potential_hit,
      accept_alternates,
    );
  }

  late final _g_str_match_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              gboolean)>>('g_str_match_string');
  late final _g_str_match_string = _g_str_match_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int g_strv_contains(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strv,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_strv_contains(
      strv,
      str,
    );
  }

  late final _g_strv_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('g_strv_contains');
  late final _g_strv_contains = _g_strv_containsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int g_strv_equal(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strv1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> strv2,
  ) {
    return _g_strv_equal(
      strv1,
      strv2,
    );
  }

  late final _g_strv_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strv_equal');
  late final _g_strv_equal = _g_strv_equalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int g_number_parser_error_quark() {
    return _g_number_parser_error_quark();
  }

  late final _g_number_parser_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_number_parser_error_quark');
  late final _g_number_parser_error_quark =
      _g_number_parser_error_quarkPtr.asFunction<int Function()>();

  int g_ascii_string_to_signed(
    ffi.Pointer<ffi.Char> str,
    int base,
    int min,
    int max,
    ffi.Pointer<gint64> out_num,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ascii_string_to_signed(
      str,
      base,
      min,
      max,
      out_num,
      error,
    );
  }

  late final _g_ascii_string_to_signedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              guint,
              gint64,
              gint64,
              ffi.Pointer<gint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ascii_string_to_signed');
  late final _g_ascii_string_to_signed =
      _g_ascii_string_to_signedPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, int, int,
              ffi.Pointer<gint64>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_ascii_string_to_unsigned(
    ffi.Pointer<ffi.Char> str,
    int base,
    int min,
    int max,
    ffi.Pointer<guint64> out_num,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_ascii_string_to_unsigned(
      str,
      base,
      min,
      max,
      out_num,
      error,
    );
  }

  late final _g_ascii_string_to_unsignedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              guint,
              guint64,
              guint64,
              ffi.Pointer<guint64>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_ascii_string_to_unsigned');
  late final _g_ascii_string_to_unsigned =
      _g_ascii_string_to_unsignedPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, int, int,
              ffi.Pointer<guint64>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GString> g_string_new(
    ffi.Pointer<ffi.Char> init,
  ) {
    return _g_string_new(
      init,
    );
  }

  late final _g_string_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<ffi.Char>)>>('g_string_new');
  late final _g_string_new = _g_string_newPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_new_take(
    ffi.Pointer<ffi.Char> init,
  ) {
    return _g_string_new_take(
      init,
    );
  }

  late final _g_string_new_takePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<ffi.Char>)>>('g_string_new_take');
  late final _g_string_new_take = _g_string_new_takePtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_new_len(
    ffi.Pointer<ffi.Char> init,
    int len,
  ) {
    return _g_string_new_len(
      init,
      len,
    );
  }

  late final _g_string_new_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_string_new_len');
  late final _g_string_new_len = _g_string_new_lenPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_sized_new(
    int dfl_size,
  ) {
    return _g_string_sized_new(
      dfl_size,
    );
  }

  late final _g_string_sized_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GString> Function(gsize)>>(
          'g_string_sized_new');
  late final _g_string_sized_new =
      _g_string_sized_newPtr.asFunction<ffi.Pointer<GString> Function(int)>();

  ffi.Pointer<ffi.Char> g_string_free(
    ffi.Pointer<GString> string,
    int free_segment,
  ) {
    return _g_string_free(
      string,
      free_segment,
    );
  }

  late final _g_string_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GString>, gboolean)>>('g_string_free');
  late final _g_string_free = _g_string_freePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<ffi.Char> g_string_free_and_steal(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_free_and_steal(
      string,
    );
  }

  late final _g_string_free_and_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GString>)>>('g_string_free_and_steal');
  late final _g_string_free_and_steal = _g_string_free_and_stealPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GBytes> g_string_free_to_bytes(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_free_to_bytes(
      string,
    );
  }

  late final _g_string_free_to_bytesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GString>)>>(
      'g_string_free_to_bytes');
  late final _g_string_free_to_bytes = _g_string_free_to_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GString>)>();

  int g_string_equal(
    ffi.Pointer<GString> v,
    ffi.Pointer<GString> v2,
  ) {
    return _g_string_equal(
      v,
      v2,
    );
  }

  late final _g_string_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GString>, ffi.Pointer<GString>)>>('g_string_equal');
  late final _g_string_equal = _g_string_equalPtr
      .asFunction<int Function(ffi.Pointer<GString>, ffi.Pointer<GString>)>();

  int g_string_hash(
    ffi.Pointer<GString> str,
  ) {
    return _g_string_hash(
      str,
    );
  }

  late final _g_string_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GString>)>>(
          'g_string_hash');
  late final _g_string_hash =
      _g_string_hashPtr.asFunction<int Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GString> g_string_assign(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> rval,
  ) {
    return _g_string_assign(
      string,
      rval,
    );
  }

  late final _g_string_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>>('g_string_assign');
  late final _g_string_assign = _g_string_assignPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_truncate(
    ffi.Pointer<GString> string,
    int len,
  ) {
    return _g_string_truncate(
      string,
      len,
    );
  }

  late final _g_string_truncatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gsize)>>('g_string_truncate');
  late final _g_string_truncate = _g_string_truncatePtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_set_size(
    ffi.Pointer<GString> string,
    int len,
  ) {
    return _g_string_set_size(
      string,
      len,
    );
  }

  late final _g_string_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gsize)>>('g_string_set_size');
  late final _g_string_set_size = _g_string_set_sizePtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_insert_len(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<ffi.Char> val,
    int len,
  ) {
    return _g_string_insert_len(
      string,
      pos,
      val,
      len,
    );
  }

  late final _g_string_insert_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gssize,
              ffi.Pointer<ffi.Char>, gssize)>>('g_string_insert_len');
  late final _g_string_insert_len = _g_string_insert_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_append(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _g_string_append(
      string,
      val,
    );
  }

  late final _g_string_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>>('g_string_append');
  late final _g_string_append = _g_string_appendPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_append_len(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> val,
    int len,
  ) {
    return _g_string_append_len(
      string,
      val,
      len,
    );
  }

  late final _g_string_append_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<ffi.Char>, gssize)>>('g_string_append_len');
  late final _g_string_append_len = _g_string_append_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_append_c(
    ffi.Pointer<GString> string,
    int c,
  ) {
    return _g_string_append_c(
      string,
      c,
    );
  }

  late final _g_string_append_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Char)>>('g_string_append_c');
  late final _g_string_append_c = _g_string_append_cPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_append_unichar(
    ffi.Pointer<GString> string,
    int wc,
  ) {
    return _g_string_append_unichar(
      string,
      wc,
    );
  }

  late final _g_string_append_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gunichar)>>('g_string_append_unichar');
  late final _g_string_append_unichar = _g_string_append_unicharPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_prepend(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _g_string_prepend(
      string,
      val,
    );
  }

  late final _g_string_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<ffi.Char>)>>('g_string_prepend');
  late final _g_string_prepend = _g_string_prependPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_prepend_c(
    ffi.Pointer<GString> string,
    int c,
  ) {
    return _g_string_prepend_c(
      string,
      c,
    );
  }

  late final _g_string_prepend_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, ffi.Char)>>('g_string_prepend_c');
  late final _g_string_prepend_c = _g_string_prepend_cPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_prepend_unichar(
    ffi.Pointer<GString> string,
    int wc,
  ) {
    return _g_string_prepend_unichar(
      string,
      wc,
    );
  }

  late final _g_string_prepend_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gunichar)>>('g_string_prepend_unichar');
  late final _g_string_prepend_unichar = _g_string_prepend_unicharPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>, int)>();

  ffi.Pointer<GString> g_string_prepend_len(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> val,
    int len,
  ) {
    return _g_string_prepend_len(
      string,
      val,
      len,
    );
  }

  late final _g_string_prepend_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<ffi.Char>, gssize)>>('g_string_prepend_len');
  late final _g_string_prepend_len = _g_string_prepend_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_insert(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _g_string_insert(
      string,
      pos,
      val,
    );
  }

  late final _g_string_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gssize,
              ffi.Pointer<ffi.Char>)>>('g_string_insert');
  late final _g_string_insert = _g_string_insertPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_insert_c(
    ffi.Pointer<GString> string,
    int pos,
    int c,
  ) {
    return _g_string_insert_c(
      string,
      pos,
      c,
    );
  }

  late final _g_string_insert_cPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gssize, ffi.Char)>>('g_string_insert_c');
  late final _g_string_insert_c = _g_string_insert_cPtr.asFunction<
      ffi.Pointer<GString> Function(ffi.Pointer<GString>, int, int)>();

  ffi.Pointer<GString> g_string_insert_unichar(
    ffi.Pointer<GString> string,
    int pos,
    int wc,
  ) {
    return _g_string_insert_unichar(
      string,
      pos,
      wc,
    );
  }

  late final _g_string_insert_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gssize,
              gunichar)>>('g_string_insert_unichar');
  late final _g_string_insert_unichar = _g_string_insert_unicharPtr.asFunction<
      ffi.Pointer<GString> Function(ffi.Pointer<GString>, int, int)>();

  ffi.Pointer<GString> g_string_overwrite(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _g_string_overwrite(
      string,
      pos,
      val,
    );
  }

  late final _g_string_overwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gsize,
              ffi.Pointer<ffi.Char>)>>('g_string_overwrite');
  late final _g_string_overwrite = _g_string_overwritePtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_overwrite_len(
    ffi.Pointer<GString> string,
    int pos,
    ffi.Pointer<ffi.Char> val,
    int len,
  ) {
    return _g_string_overwrite_len(
      string,
      pos,
      val,
      len,
    );
  }

  late final _g_string_overwrite_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>, gsize,
              ffi.Pointer<ffi.Char>, gssize)>>('g_string_overwrite_len');
  late final _g_string_overwrite_len = _g_string_overwrite_lenPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GString>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_erase(
    ffi.Pointer<GString> string,
    int pos,
    int len,
  ) {
    return _g_string_erase(
      string,
      pos,
      len,
    );
  }

  late final _g_string_erasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>, gssize, gssize)>>('g_string_erase');
  late final _g_string_erase = _g_string_erasePtr.asFunction<
      ffi.Pointer<GString> Function(ffi.Pointer<GString>, int, int)>();

  int g_string_replace(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> find,
    ffi.Pointer<ffi.Char> replace,
    int limit,
  ) {
    return _g_string_replace(
      string,
      find,
      replace,
      limit,
    );
  }

  late final _g_string_replacePtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, guint)>>('g_string_replace');
  late final _g_string_replace = _g_string_replacePtr.asFunction<
      int Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_ascii_down(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_ascii_down(
      string,
    );
  }

  late final _g_string_ascii_downPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>(
      'g_string_ascii_down');
  late final _g_string_ascii_down = _g_string_ascii_downPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GString> g_string_ascii_up(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_ascii_up(
      string,
    );
  }

  late final _g_string_ascii_upPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>(
      'g_string_ascii_up');
  late final _g_string_ascii_up = _g_string_ascii_upPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  void g_string_vprintf(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_string_vprintf(
      string,
      format,
      args,
    );
  }

  late final _g_string_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_string_vprintf');
  late final _g_string_vprintf = _g_string_vprintfPtr.asFunction<
      void Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void g_string_printf(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_string_printf(
      string,
      format,
    );
  }

  late final _g_string_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>>('g_string_printf');
  late final _g_string_printf = _g_string_printfPtr
      .asFunction<void Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>();

  void g_string_append_vprintf(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_string_append_vprintf(
      string,
      format,
      args,
    );
  }

  late final _g_string_append_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_string_append_vprintf');
  late final _g_string_append_vprintf = _g_string_append_vprintfPtr.asFunction<
      void Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void g_string_append_printf(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_string_append_printf(
      string,
      format,
    );
  }

  late final _g_string_append_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GString>,
              ffi.Pointer<ffi.Char>)>>('g_string_append_printf');
  late final _g_string_append_printf = _g_string_append_printfPtr
      .asFunction<void Function(ffi.Pointer<GString>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GString> g_string_append_uri_escaped(
    ffi.Pointer<GString> string,
    ffi.Pointer<ffi.Char> unescaped,
    ffi.Pointer<ffi.Char> reserved_chars_allowed,
    int allow_utf8,
  ) {
    return _g_string_append_uri_escaped(
      string,
      unescaped,
      reserved_chars_allowed,
      allow_utf8,
    );
  }

  late final _g_string_append_uri_escapedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(
              ffi.Pointer<GString>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gboolean)>>('g_string_append_uri_escaped');
  late final _g_string_append_uri_escaped =
      _g_string_append_uri_escapedPtr.asFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GString> g_string_down(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_down(
      string,
    );
  }

  late final _g_string_downPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>(
      'g_string_down');
  late final _g_string_down = _g_string_downPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  ffi.Pointer<GString> g_string_up(
    ffi.Pointer<GString> string,
  ) {
    return _g_string_up(
      string,
    );
  }

  late final _g_string_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GString>)>>('g_string_up');
  late final _g_string_up = _g_string_upPtr
      .asFunction<ffi.Pointer<GString> Function(ffi.Pointer<GString>)>();

  void g_io_channel_init(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_init(
      channel,
    );
  }

  late final _g_io_channel_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_init');
  late final _g_io_channel_init = _g_io_channel_initPtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>)>();

  ffi.Pointer<GIOChannel> g_io_channel_ref(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_ref(
      channel,
    );
  }

  late final _g_io_channel_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOChannel> Function(
              ffi.Pointer<GIOChannel>)>>('g_io_channel_ref');
  late final _g_io_channel_ref = _g_io_channel_refPtr
      .asFunction<ffi.Pointer<GIOChannel> Function(ffi.Pointer<GIOChannel>)>();

  void g_io_channel_unref(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_unref(
      channel,
    );
  }

  late final _g_io_channel_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_unref');
  late final _g_io_channel_unref = _g_io_channel_unrefPtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_read(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Char> buf,
    int count,
    ffi.Pointer<gsize> bytes_read,
  ) {
    return _g_io_channel_read(
      channel,
      buf,
      count,
      bytes_read,
    );
  }

  late final _g_io_channel_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>,
              gsize, ffi.Pointer<gsize>)>>('g_io_channel_read');
  late final _g_io_channel_read = _g_io_channel_readPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<gsize>)>();

  int g_io_channel_write(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Char> buf,
    int count,
    ffi.Pointer<gsize> bytes_written,
  ) {
    return _g_io_channel_write(
      channel,
      buf,
      count,
      bytes_written,
    );
  }

  late final _g_io_channel_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>,
              gsize, ffi.Pointer<gsize>)>>('g_io_channel_write');
  late final _g_io_channel_write = _g_io_channel_writePtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<gsize>)>();

  int g_io_channel_seek(
    ffi.Pointer<GIOChannel> channel,
    int offset,
    int type,
  ) {
    return _g_io_channel_seek(
      channel,
      offset,
      type,
    );
  }

  late final _g_io_channel_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gint64,
              ffi.Int32)>>('g_io_channel_seek');
  late final _g_io_channel_seek = _g_io_channel_seekPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>, int, int)>();

  void g_io_channel_close(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_close(
      channel,
    );
  }

  late final _g_io_channel_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_close');
  late final _g_io_channel_close = _g_io_channel_closePtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_shutdown(
    ffi.Pointer<GIOChannel> channel,
    int flush,
    ffi.Pointer<ffi.Pointer<GError>> err,
  ) {
    return _g_io_channel_shutdown(
      channel,
      flush,
      err,
    );
  }

  late final _g_io_channel_shutdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_shutdown');
  late final _g_io_channel_shutdown = _g_io_channel_shutdownPtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_add_watch_full(
    ffi.Pointer<GIOChannel> channel,
    int priority,
    int condition,
    GIOFunc func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_io_add_watch_full(
      channel,
      priority,
      condition,
      func,
      user_data,
      notify,
    );
  }

  late final _g_io_add_watch_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GIOChannel>, gint, ffi.Int32, GIOFunc,
              ffi.Pointer, GDestroyNotify)>>('g_io_add_watch_full');
  late final _g_io_add_watch_full = _g_io_add_watch_fullPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, int, int, GIOFunc, ffi.Pointer,
          GDestroyNotify)>();

  ffi.Pointer<GSource> g_io_create_watch(
    ffi.Pointer<GIOChannel> channel,
    int condition,
  ) {
    return _g_io_create_watch(
      channel,
      condition,
    );
  }

  late final _g_io_create_watchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSource> Function(
              ffi.Pointer<GIOChannel>, ffi.Int32)>>('g_io_create_watch');
  late final _g_io_create_watch = _g_io_create_watchPtr.asFunction<
      ffi.Pointer<GSource> Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_add_watch(
    ffi.Pointer<GIOChannel> channel,
    int condition,
    GIOFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_io_add_watch(
      channel,
      condition,
      func,
      user_data,
    );
  }

  late final _g_io_add_watchPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GIOChannel>, ffi.Int32, GIOFunc,
              ffi.Pointer)>>('g_io_add_watch');
  late final _g_io_add_watch = _g_io_add_watchPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, int, GIOFunc, ffi.Pointer)>();

  void g_io_channel_set_buffer_size(
    ffi.Pointer<GIOChannel> channel,
    int size,
  ) {
    return _g_io_channel_set_buffer_size(
      channel,
      size,
    );
  }

  late final _g_io_channel_set_buffer_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel>, gsize)>>(
      'g_io_channel_set_buffer_size');
  late final _g_io_channel_set_buffer_size = _g_io_channel_set_buffer_sizePtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_channel_get_buffer_size(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_buffer_size(
      channel,
    );
  }

  late final _g_io_channel_get_buffer_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_buffer_size');
  late final _g_io_channel_get_buffer_size = _g_io_channel_get_buffer_sizePtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_get_buffer_condition(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_buffer_condition(
      channel,
    );
  }

  late final _g_io_channel_get_buffer_conditionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_buffer_condition');
  late final _g_io_channel_get_buffer_condition =
      _g_io_channel_get_buffer_conditionPtr
          .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_set_flags(
    ffi.Pointer<GIOChannel> channel,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_set_flags(
      channel,
      flags,
      error,
    );
  }

  late final _g_io_channel_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_set_flags');
  late final _g_io_channel_set_flags = _g_io_channel_set_flagsPtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_get_flags(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_flags(
      channel,
    );
  }

  late final _g_io_channel_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_flags');
  late final _g_io_channel_get_flags = _g_io_channel_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  void g_io_channel_set_line_term(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Char> line_term,
    int length,
  ) {
    return _g_io_channel_set_line_term(
      channel,
      line_term,
      length,
    );
  }

  late final _g_io_channel_set_line_termPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>,
              gint)>>('g_io_channel_set_line_term');
  late final _g_io_channel_set_line_term =
      _g_io_channel_set_line_termPtr.asFunction<
          void Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_io_channel_get_line_term(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gint> length,
  ) {
    return _g_io_channel_get_line_term(
      channel,
      length,
    );
  }

  late final _g_io_channel_get_line_termPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GIOChannel>,
              ffi.Pointer<gint>)>>('g_io_channel_get_line_term');
  late final _g_io_channel_get_line_term =
      _g_io_channel_get_line_termPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GIOChannel>, ffi.Pointer<gint>)>();

  void g_io_channel_set_buffered(
    ffi.Pointer<GIOChannel> channel,
    int buffered,
  ) {
    return _g_io_channel_set_buffered(
      channel,
      buffered,
    );
  }

  late final _g_io_channel_set_bufferedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GIOChannel>, gboolean)>>('g_io_channel_set_buffered');
  late final _g_io_channel_set_buffered = _g_io_channel_set_bufferedPtr
      .asFunction<void Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_channel_get_buffered(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_buffered(
      channel,
    );
  }

  late final _g_io_channel_get_bufferedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_buffered');
  late final _g_io_channel_get_buffered = _g_io_channel_get_bufferedPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_set_encoding(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Char> encoding,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_set_encoding(
      channel,
      encoding,
      error,
    );
  }

  late final _g_io_channel_set_encodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_set_encoding');
  late final _g_io_channel_set_encoding =
      _g_io_channel_set_encodingPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_io_channel_get_encoding(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_encoding(
      channel,
    );
  }

  late final _g_io_channel_get_encodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GIOChannel>)>>('g_io_channel_get_encoding');
  late final _g_io_channel_get_encoding = _g_io_channel_get_encodingPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GIOChannel>)>();

  void g_io_channel_set_close_on_unref(
    ffi.Pointer<GIOChannel> channel,
    int do_close,
  ) {
    return _g_io_channel_set_close_on_unref(
      channel,
      do_close,
    );
  }

  late final _g_io_channel_set_close_on_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GIOChannel>,
              gboolean)>>('g_io_channel_set_close_on_unref');
  late final _g_io_channel_set_close_on_unref =
      _g_io_channel_set_close_on_unrefPtr
          .asFunction<void Function(ffi.Pointer<GIOChannel>, int)>();

  int g_io_channel_get_close_on_unref(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_get_close_on_unref(
      channel,
    );
  }

  late final _g_io_channel_get_close_on_unrefPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_get_close_on_unref');
  late final _g_io_channel_get_close_on_unref =
      _g_io_channel_get_close_on_unrefPtr
          .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  int g_io_channel_flush(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_flush(
      channel,
      error,
    );
  }

  late final _g_io_channel_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_flush');
  late final _g_io_channel_flush = _g_io_channel_flushPtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_line(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Pointer<ffi.Char>> str_return,
    ffi.Pointer<gsize> length,
    ffi.Pointer<gsize> terminator_pos,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_line(
      channel,
      str_return,
      length,
      terminator_pos,
      error,
    );
  }

  late final _g_io_channel_read_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_line');
  late final _g_io_channel_read_line = _g_io_channel_read_linePtr.asFunction<
      int Function(
          ffi.Pointer<GIOChannel>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gsize>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_line_string(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<GString> buffer,
    ffi.Pointer<gsize> terminator_pos,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_line_string(
      channel,
      buffer,
      terminator_pos,
      error,
    );
  }

  late final _g_io_channel_read_line_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<GString>,
                  ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_io_channel_read_line_string');
  late final _g_io_channel_read_line_string =
      _g_io_channel_read_line_stringPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<GString>,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_to_end(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Pointer<ffi.Char>> str_return,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_to_end(
      channel,
      str_return,
      length,
      error,
    );
  }

  late final _g_io_channel_read_to_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_to_end');
  late final _g_io_channel_read_to_end =
      _g_io_channel_read_to_endPtr.asFunction<
          int Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_chars(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Char> buf,
    int count,
    ffi.Pointer<gsize> bytes_read,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_chars(
      channel,
      buf,
      count,
      bytes_read,
      error,
    );
  }

  late final _g_io_channel_read_charsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Char>,
              gsize,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_chars');
  late final _g_io_channel_read_chars = _g_io_channel_read_charsPtr.asFunction<
      int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_read_unichar(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<gunichar> thechar,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_read_unichar(
      channel,
      thechar,
      error,
    );
  }

  late final _g_io_channel_read_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gunichar>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_read_unichar');
  late final _g_io_channel_read_unichar =
      _g_io_channel_read_unicharPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<gunichar>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_write_chars(
    ffi.Pointer<GIOChannel> channel,
    ffi.Pointer<ffi.Char> buf,
    int count,
    ffi.Pointer<gsize> bytes_written,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_write_chars(
      channel,
      buf,
      count,
      bytes_written,
      error,
    );
  }

  late final _g_io_channel_write_charsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel>,
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_write_chars');
  late final _g_io_channel_write_chars =
      _g_io_channel_write_charsPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<gsize>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_write_unichar(
    ffi.Pointer<GIOChannel> channel,
    int thechar,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_write_unichar(
      channel,
      thechar,
      error,
    );
  }

  late final _g_io_channel_write_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gunichar,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_write_unichar');
  late final _g_io_channel_write_unichar =
      _g_io_channel_write_unicharPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_seek_position(
    ffi.Pointer<GIOChannel> channel,
    int offset,
    int type,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_seek_position(
      channel,
      offset,
      type,
      error,
    );
  }

  late final _g_io_channel_seek_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel>, gint64, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_seek_position');
  late final _g_io_channel_seek_position =
      _g_io_channel_seek_positionPtr.asFunction<
          int Function(ffi.Pointer<GIOChannel>, int, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GIOChannel> g_io_channel_new_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_io_channel_new_file(
      filename,
      mode,
      error,
    );
  }

  late final _g_io_channel_new_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GIOChannel> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_io_channel_new_file');
  late final _g_io_channel_new_file = _g_io_channel_new_filePtr.asFunction<
      ffi.Pointer<GIOChannel> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_io_channel_error_quark() {
    return _g_io_channel_error_quark();
  }

  late final _g_io_channel_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_io_channel_error_quark');
  late final _g_io_channel_error_quark =
      _g_io_channel_error_quarkPtr.asFunction<int Function()>();

  int g_io_channel_error_from_errno(
    int en,
  ) {
    return _g_io_channel_error_from_errno(
      en,
    );
  }

  late final _g_io_channel_error_from_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(gint)>>(
          'g_io_channel_error_from_errno');
  late final _g_io_channel_error_from_errno =
      _g_io_channel_error_from_errnoPtr.asFunction<int Function(int)>();

  ffi.Pointer<GIOChannel> g_io_channel_unix_new(
    int fd,
  ) {
    return _g_io_channel_unix_new(
      fd,
    );
  }

  late final _g_io_channel_unix_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GIOChannel> Function(ffi.Int)>>(
          'g_io_channel_unix_new');
  late final _g_io_channel_unix_new = _g_io_channel_unix_newPtr
      .asFunction<ffi.Pointer<GIOChannel> Function(int)>();

  int g_io_channel_unix_get_fd(
    ffi.Pointer<GIOChannel> channel,
  ) {
    return _g_io_channel_unix_get_fd(
      channel,
    );
  }

  late final _g_io_channel_unix_get_fdPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GIOChannel>)>>(
          'g_io_channel_unix_get_fd');
  late final _g_io_channel_unix_get_fd = _g_io_channel_unix_get_fdPtr
      .asFunction<int Function(ffi.Pointer<GIOChannel>)>();

  late final ffi.Pointer<GSourceFuncs> _g_io_watch_funcs =
      _lookup<GSourceFuncs>('g_io_watch_funcs');

  GSourceFuncs get g_io_watch_funcs => _g_io_watch_funcs.ref;

  int g_key_file_error_quark() {
    return _g_key_file_error_quark();
  }

  late final _g_key_file_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_key_file_error_quark');
  late final _g_key_file_error_quark =
      _g_key_file_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GKeyFile> g_key_file_new() {
    return _g_key_file_new();
  }

  late final _g_key_file_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GKeyFile> Function()>>(
          'g_key_file_new');
  late final _g_key_file_new =
      _g_key_file_newPtr.asFunction<ffi.Pointer<GKeyFile> Function()>();

  ffi.Pointer<GKeyFile> g_key_file_ref(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_ref(
      key_file,
    );
  }

  late final _g_key_file_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GKeyFile> Function(
              ffi.Pointer<GKeyFile>)>>('g_key_file_ref');
  late final _g_key_file_ref = _g_key_file_refPtr
      .asFunction<ffi.Pointer<GKeyFile> Function(ffi.Pointer<GKeyFile>)>();

  void g_key_file_unref(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_unref(
      key_file,
    );
  }

  late final _g_key_file_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GKeyFile>)>>(
          'g_key_file_unref');
  late final _g_key_file_unref =
      _g_key_file_unrefPtr.asFunction<void Function(ffi.Pointer<GKeyFile>)>();

  void g_key_file_free(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_free(
      key_file,
    );
  }

  late final _g_key_file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GKeyFile>)>>(
          'g_key_file_free');
  late final _g_key_file_free =
      _g_key_file_freePtr.asFunction<void Function(ffi.Pointer<GKeyFile>)>();

  void g_key_file_set_list_separator(
    ffi.Pointer<GKeyFile> key_file,
    int separator,
  ) {
    return _g_key_file_set_list_separator(
      key_file,
      separator,
    );
  }

  late final _g_key_file_set_list_separatorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Char)>>(
      'g_key_file_set_list_separator');
  late final _g_key_file_set_list_separator = _g_key_file_set_list_separatorPtr
      .asFunction<void Function(ffi.Pointer<GKeyFile>, int)>();

  int g_key_file_load_from_file(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> file,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_file(
      key_file,
      file,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_file');
  late final _g_key_file_load_from_file =
      _g_key_file_load_from_filePtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_data(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> data,
    int length,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_data(
      key_file,
      data,
      length,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              gsize,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_data');
  late final _g_key_file_load_from_data =
      _g_key_file_load_from_dataPtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_bytes(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<GBytes> bytes,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_bytes(
      key_file,
      bytes,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<GBytes>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_bytes');
  late final _g_key_file_load_from_bytes =
      _g_key_file_load_from_bytesPtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<GBytes>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_dirs(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> search_dirs,
    ffi.Pointer<ffi.Pointer<ffi.Char>> full_path,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_dirs(
      key_file,
      file,
      search_dirs,
      full_path,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_dirsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_load_from_dirs');
  late final _g_key_file_load_from_dirs =
      _g_key_file_load_from_dirsPtr.asFunction<
          int Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_load_from_data_dirs(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> full_path,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_load_from_data_dirs(
      key_file,
      file,
      full_path,
      flags,
      error,
    );
  }

  late final _g_key_file_load_from_data_dirsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_load_from_data_dirs');
  late final _g_key_file_load_from_data_dirs =
      _g_key_file_load_from_data_dirsPtr.asFunction<
          int Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_key_file_to_data(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_to_data(
      key_file,
      length,
      error,
    );
  }

  late final _g_key_file_to_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_to_data');
  late final _g_key_file_to_data = _g_key_file_to_dataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<GKeyFile>, ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_save_to_file(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_save_to_file(
      key_file,
      filename,
      error,
    );
  }

  late final _g_key_file_save_to_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_save_to_file');
  late final _g_key_file_save_to_file = _g_key_file_save_to_filePtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_key_file_get_start_group(
    ffi.Pointer<GKeyFile> key_file,
  ) {
    return _g_key_file_get_start_group(
      key_file,
    );
  }

  late final _g_key_file_get_start_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>)>>('g_key_file_get_start_group');
  late final _g_key_file_get_start_group = _g_key_file_get_start_groupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GKeyFile>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_key_file_get_groups(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<gsize> length,
  ) {
    return _g_key_file_get_groups(
      key_file,
      length,
    );
  }

  late final _g_key_file_get_groupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GKeyFile>,
              ffi.Pointer<gsize>)>>('g_key_file_get_groups');
  late final _g_key_file_get_groups = _g_key_file_get_groupsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GKeyFile>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_key_file_get_keys(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_keys(
      key_file,
      group_name,
      length,
      error,
    );
  }

  late final _g_key_file_get_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_keys');
  late final _g_key_file_get_keys = _g_key_file_get_keysPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<gsize>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_has_group(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
  ) {
    return _g_key_file_has_group(
      key_file,
      group_name,
    );
  }

  late final _g_key_file_has_groupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>)>>('g_key_file_has_group');
  late final _g_key_file_has_group = _g_key_file_has_groupPtr
      .asFunction<int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>)>();

  int g_key_file_has_key(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_has_key(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_has_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_has_key');
  late final _g_key_file_has_key = _g_key_file_has_keyPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_key_file_get_value(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_value(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_value');
  late final _g_key_file_get_value = _g_key_file_get_valuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_value(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _g_key_file_set_value(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_key_file_set_value');
  late final _g_key_file_set_value = _g_key_file_set_valuePtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_key_file_get_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_string(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_string');
  late final _g_key_file_get_string = _g_key_file_get_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_key_file_set_string(
      key_file,
      group_name,
      key,
      string,
    );
  }

  late final _g_key_file_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_key_file_set_string');
  late final _g_key_file_set_string = _g_key_file_set_stringPtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_key_file_get_locale_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_locale_string(
      key_file,
      group_name,
      key,
      locale,
      error,
    );
  }

  late final _g_key_file_get_locale_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_locale_string');
  late final _g_key_file_get_locale_string =
      _g_key_file_get_locale_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_key_file_get_locale_for_key(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> locale,
  ) {
    return _g_key_file_get_locale_for_key(
      key_file,
      group_name,
      key,
      locale,
    );
  }

  late final _g_key_file_get_locale_for_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_key_file_get_locale_for_key');
  late final _g_key_file_get_locale_for_key =
      _g_key_file_get_locale_for_keyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_key_file_set_locale_string(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_key_file_set_locale_string(
      key_file,
      group_name,
      key,
      locale,
      string,
    );
  }

  late final _g_key_file_set_locale_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_key_file_set_locale_string');
  late final _g_key_file_set_locale_string =
      _g_key_file_set_locale_stringPtr.asFunction<
          void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int g_key_file_get_boolean(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_boolean(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_boolean');
  late final _g_key_file_get_boolean = _g_key_file_get_booleanPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_boolean(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _g_key_file_set_boolean(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gboolean)>>('g_key_file_set_boolean');
  late final _g_key_file_set_boolean = _g_key_file_set_booleanPtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int g_key_file_get_integer(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_integer(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_integerPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_integer');
  late final _g_key_file_get_integer = _g_key_file_get_integerPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_integer(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _g_key_file_set_integer(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gint)>>('g_key_file_set_integer');
  late final _g_key_file_set_integer = _g_key_file_set_integerPtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int g_key_file_get_int64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_int64(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          gint64 Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_int64');
  late final _g_key_file_get_int64 = _g_key_file_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_int64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _g_key_file_set_int64(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gint64)>>('g_key_file_set_int64');
  late final _g_key_file_set_int64 = _g_key_file_set_int64Ptr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int g_key_file_get_uint64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_uint64(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          guint64 Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_uint64');
  late final _g_key_file_get_uint64 = _g_key_file_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_uint64(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _g_key_file_set_uint64(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, guint64)>>('g_key_file_set_uint64');
  late final _g_key_file_set_uint64 = _g_key_file_set_uint64Ptr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  double g_key_file_get_double(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_double(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_doublePtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_double');
  late final _g_key_file_get_double = _g_key_file_get_doublePtr.asFunction<
      double Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_double(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    double value,
  ) {
    return _g_key_file_set_double(
      key_file,
      group_name,
      key,
      value,
    );
  }

  late final _g_key_file_set_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gdouble)>>('g_key_file_set_double');
  late final _g_key_file_set_double = _g_key_file_set_doublePtr.asFunction<
      void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, double)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_key_file_get_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_string_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_string_list');
  late final _g_key_file_get_string_list =
      _g_key_file_get_string_listPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> list,
    int length,
  ) {
    return _g_key_file_set_string_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gsize)>>('g_key_file_set_string_list');
  late final _g_key_file_set_string_list =
      _g_key_file_set_string_listPtr.asFunction<
          void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_key_file_get_locale_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_locale_string_list(
      key_file,
      group_name,
      key,
      locale,
      length,
      error,
    );
  }

  late final _g_key_file_get_locale_string_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_locale_string_list');
  late final _g_key_file_get_locale_string_list =
      _g_key_file_get_locale_string_listPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_locale_string_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Pointer<ffi.Char>> list,
    int length,
  ) {
    return _g_key_file_set_locale_string_list(
      key_file,
      group_name,
      key,
      locale,
      list,
      length,
    );
  }

  late final _g_key_file_set_locale_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gsize)>>('g_key_file_set_locale_string_list');
  late final _g_key_file_set_locale_string_list =
      _g_key_file_set_locale_string_listPtr.asFunction<
          void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int)>();

  ffi.Pointer<gboolean> g_key_file_get_boolean_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_boolean_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_boolean_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gboolean> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_boolean_list');
  late final _g_key_file_get_boolean_list =
      _g_key_file_get_boolean_listPtr.asFunction<
          ffi.Pointer<gboolean> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_boolean_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gboolean> list,
    int length,
  ) {
    return _g_key_file_set_boolean_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_boolean_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gboolean>,
              gsize)>>('g_key_file_set_boolean_list');
  late final _g_key_file_set_boolean_list =
      _g_key_file_set_boolean_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<gboolean>, int)>();

  ffi.Pointer<gint> g_key_file_get_integer_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_integer_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_integer_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gint> Function(
                  ffi.Pointer<GKeyFile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<gsize>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_key_file_get_integer_list');
  late final _g_key_file_get_integer_list =
      _g_key_file_get_integer_listPtr.asFunction<
          ffi.Pointer<gint> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_double_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gdouble> list,
    int length,
  ) {
    return _g_key_file_set_double_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_double_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gdouble>,
              gsize)>>('g_key_file_set_double_list');
  late final _g_key_file_set_double_list =
      _g_key_file_set_double_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<gdouble>, int)>();

  ffi.Pointer<gdouble> g_key_file_get_double_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gsize> length,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_double_list(
      key_file,
      group_name,
      key,
      length,
      error,
    );
  }

  late final _g_key_file_get_double_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gdouble> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_double_list');
  late final _g_key_file_get_double_list =
      _g_key_file_get_double_listPtr.asFunction<
          ffi.Pointer<gdouble> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gsize>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_key_file_set_integer_list(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<gint> list,
    int length,
  ) {
    return _g_key_file_set_integer_list(
      key_file,
      group_name,
      key,
      list,
      length,
    );
  }

  late final _g_key_file_set_integer_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>,
              gsize)>>('g_key_file_set_integer_list');
  late final _g_key_file_set_integer_list =
      _g_key_file_set_integer_listPtr.asFunction<
          void Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<gint>, int)>();

  int g_key_file_set_comment(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> comment,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_set_comment(
      key_file,
      group_name,
      key,
      comment,
      error,
    );
  }

  late final _g_key_file_set_commentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_set_comment');
  late final _g_key_file_set_comment = _g_key_file_set_commentPtr.asFunction<
      int Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_key_file_get_comment(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_get_comment(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_get_commentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_get_comment');
  late final _g_key_file_get_comment = _g_key_file_get_commentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GKeyFile>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_remove_comment(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_remove_comment(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_remove_commentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_remove_comment');
  late final _g_key_file_remove_comment =
      _g_key_file_remove_commentPtr.asFunction<
          int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_remove_key(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_remove_key(
      key_file,
      group_name,
      key,
      error,
    );
  }

  late final _g_key_file_remove_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GKeyFile>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_remove_key');
  late final _g_key_file_remove_key = _g_key_file_remove_keyPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_key_file_remove_group(
    ffi.Pointer<GKeyFile> key_file,
    ffi.Pointer<ffi.Char> group_name,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_key_file_remove_group(
      key_file,
      group_name,
      error,
    );
  }

  late final _g_key_file_remove_groupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_key_file_remove_group');
  late final _g_key_file_remove_group = _g_key_file_remove_groupPtr.asFunction<
      int Function(ffi.Pointer<GKeyFile>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GMappedFile> g_mapped_file_new(
    ffi.Pointer<ffi.Char> filename,
    int writable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mapped_file_new(
      filename,
      writable,
      error,
    );
  }

  late final _g_mapped_file_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMappedFile> Function(ffi.Pointer<ffi.Char>, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mapped_file_new');
  late final _g_mapped_file_new = _g_mapped_file_newPtr.asFunction<
      ffi.Pointer<GMappedFile> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GMappedFile> g_mapped_file_new_from_fd(
    int fd,
    int writable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_mapped_file_new_from_fd(
      fd,
      writable,
      error,
    );
  }

  late final _g_mapped_file_new_from_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMappedFile> Function(gint, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_mapped_file_new_from_fd');
  late final _g_mapped_file_new_from_fd =
      _g_mapped_file_new_from_fdPtr.asFunction<
          ffi.Pointer<GMappedFile> Function(
              int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_mapped_file_get_length(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_get_length(
      file,
    );
  }

  late final _g_mapped_file_get_lengthPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GMappedFile>)>>(
          'g_mapped_file_get_length');
  late final _g_mapped_file_get_length = _g_mapped_file_get_lengthPtr
      .asFunction<int Function(ffi.Pointer<GMappedFile>)>();

  ffi.Pointer<ffi.Char> g_mapped_file_get_contents(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_get_contents(
      file,
    );
  }

  late final _g_mapped_file_get_contentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMappedFile>)>>('g_mapped_file_get_contents');
  late final _g_mapped_file_get_contents = _g_mapped_file_get_contentsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMappedFile>)>();

  ffi.Pointer<GBytes> g_mapped_file_get_bytes(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_get_bytes(
      file,
    );
  }

  late final _g_mapped_file_get_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<GMappedFile>)>>('g_mapped_file_get_bytes');
  late final _g_mapped_file_get_bytes = _g_mapped_file_get_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GMappedFile>)>();

  ffi.Pointer<GMappedFile> g_mapped_file_ref(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_ref(
      file,
    );
  }

  late final _g_mapped_file_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMappedFile> Function(
              ffi.Pointer<GMappedFile>)>>('g_mapped_file_ref');
  late final _g_mapped_file_ref = _g_mapped_file_refPtr.asFunction<
      ffi.Pointer<GMappedFile> Function(ffi.Pointer<GMappedFile>)>();

  void g_mapped_file_unref(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_unref(
      file,
    );
  }

  late final _g_mapped_file_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMappedFile>)>>(
          'g_mapped_file_unref');
  late final _g_mapped_file_unref = _g_mapped_file_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMappedFile>)>();

  void g_mapped_file_free(
    ffi.Pointer<GMappedFile> file,
  ) {
    return _g_mapped_file_free(
      file,
    );
  }

  late final _g_mapped_file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMappedFile>)>>(
          'g_mapped_file_free');
  late final _g_mapped_file_free = _g_mapped_file_freePtr
      .asFunction<void Function(ffi.Pointer<GMappedFile>)>();

  int g_markup_error_quark() {
    return _g_markup_error_quark();
  }

  late final _g_markup_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_markup_error_quark');
  late final _g_markup_error_quark =
      _g_markup_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GMarkupParseContext> g_markup_parse_context_new(
    ffi.Pointer<GMarkupParser> parser,
    int flags,
    ffi.Pointer user_data,
    GDestroyNotify user_data_dnotify,
  ) {
    return _g_markup_parse_context_new(
      parser,
      flags,
      user_data,
      user_data_dnotify,
    );
  }

  late final _g_markup_parse_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParser>,
              ffi.Int32,
              ffi.Pointer,
              GDestroyNotify)>>('g_markup_parse_context_new');
  late final _g_markup_parse_context_new =
      _g_markup_parse_context_newPtr.asFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParser>, int, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer<GMarkupParseContext> g_markup_parse_context_ref(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_ref(
      context,
    );
  }

  late final _g_markup_parse_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParseContext>)>>('g_markup_parse_context_ref');
  late final _g_markup_parse_context_ref =
      _g_markup_parse_context_refPtr.asFunction<
          ffi.Pointer<GMarkupParseContext> Function(
              ffi.Pointer<GMarkupParseContext>)>();

  void g_markup_parse_context_unref(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_unref(
      context,
    );
  }

  late final _g_markup_parse_context_unrefPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_unref');
  late final _g_markup_parse_context_unref = _g_markup_parse_context_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMarkupParseContext>)>();

  void g_markup_parse_context_free(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_free(
      context,
    );
  }

  late final _g_markup_parse_context_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_free');
  late final _g_markup_parse_context_free = _g_markup_parse_context_freePtr
      .asFunction<void Function(ffi.Pointer<GMarkupParseContext>)>();

  int g_markup_parse_context_parse(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<ffi.Char> text,
    int text_len,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_markup_parse_context_parse(
      context,
      text,
      text_len,
      error,
    );
  }

  late final _g_markup_parse_context_parsePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GMarkupParseContext>,
                  ffi.Pointer<ffi.Char>,
                  gssize,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_markup_parse_context_parse');
  late final _g_markup_parse_context_parse =
      _g_markup_parse_context_parsePtr.asFunction<
          int Function(ffi.Pointer<GMarkupParseContext>, ffi.Pointer<ffi.Char>,
              int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_markup_parse_context_push(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<GMarkupParser> parser,
    ffi.Pointer user_data,
  ) {
    return _g_markup_parse_context_push(
      context,
      parser,
      user_data,
    );
  }

  late final _g_markup_parse_context_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext>,
              ffi.Pointer<GMarkupParser>,
              ffi.Pointer)>>('g_markup_parse_context_push');
  late final _g_markup_parse_context_push =
      _g_markup_parse_context_pushPtr.asFunction<
          void Function(ffi.Pointer<GMarkupParseContext>,
              ffi.Pointer<GMarkupParser>, ffi.Pointer)>();

  ffi.Pointer g_markup_parse_context_pop(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_pop(
      context,
    );
  }

  late final _g_markup_parse_context_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GMarkupParseContext>)>>('g_markup_parse_context_pop');
  late final _g_markup_parse_context_pop = _g_markup_parse_context_popPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GMarkupParseContext>)>();

  int g_markup_parse_context_end_parse(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_markup_parse_context_end_parse(
      context,
      error,
    );
  }

  late final _g_markup_parse_context_end_parsePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GMarkupParseContext>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_markup_parse_context_end_parse');
  late final _g_markup_parse_context_end_parse =
      _g_markup_parse_context_end_parsePtr.asFunction<
          int Function(ffi.Pointer<GMarkupParseContext>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_markup_parse_context_get_element(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_get_element(
      context,
    );
  }

  late final _g_markup_parse_context_get_elementPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_get_element');
  late final _g_markup_parse_context_get_element =
      _g_markup_parse_context_get_elementPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMarkupParseContext>)>();

  ffi.Pointer<GSList> g_markup_parse_context_get_element_stack(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_get_element_stack(
      context,
    );
  }

  late final _g_markup_parse_context_get_element_stackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GSList> Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_get_element_stack');
  late final _g_markup_parse_context_get_element_stack =
      _g_markup_parse_context_get_element_stackPtr.asFunction<
          ffi.Pointer<GSList> Function(ffi.Pointer<GMarkupParseContext>)>();

  void g_markup_parse_context_get_position(
    ffi.Pointer<GMarkupParseContext> context,
    ffi.Pointer<gint> line_number,
    ffi.Pointer<gint> char_number,
  ) {
    return _g_markup_parse_context_get_position(
      context,
      line_number,
      char_number,
    );
  }

  late final _g_markup_parse_context_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMarkupParseContext>, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_markup_parse_context_get_position');
  late final _g_markup_parse_context_get_position =
      _g_markup_parse_context_get_positionPtr.asFunction<
          void Function(ffi.Pointer<GMarkupParseContext>, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>();

  ffi.Pointer g_markup_parse_context_get_user_data(
    ffi.Pointer<GMarkupParseContext> context,
  ) {
    return _g_markup_parse_context_get_user_data(
      context,
    );
  }

  late final _g_markup_parse_context_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer Function(ffi.Pointer<GMarkupParseContext>)>>(
      'g_markup_parse_context_get_user_data');
  late final _g_markup_parse_context_get_user_data =
      _g_markup_parse_context_get_user_dataPtr
          .asFunction<ffi.Pointer Function(ffi.Pointer<GMarkupParseContext>)>();

  ffi.Pointer<ffi.Char> g_markup_escape_text(
    ffi.Pointer<ffi.Char> text,
    int length,
  ) {
    return _g_markup_escape_text(
      text,
      length,
    );
  }

  late final _g_markup_escape_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_markup_escape_text');
  late final _g_markup_escape_text = _g_markup_escape_textPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_markup_printf_escaped(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_markup_printf_escaped(
      format,
    );
  }

  late final _g_markup_printf_escapedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_markup_printf_escaped');
  late final _g_markup_printf_escaped = _g_markup_printf_escapedPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_markup_vprintf_escaped(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_markup_vprintf_escaped(
      format,
      args,
    );
  }

  late final _g_markup_vprintf_escapedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_markup_vprintf_escaped');
  late final _g_markup_vprintf_escaped =
      _g_markup_vprintf_escapedPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int g_markup_collect_attributes(
    ffi.Pointer<ffi.Char> element_name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> attribute_names,
    ffi.Pointer<ffi.Pointer<ffi.Char>> attribute_values,
    ffi.Pointer<ffi.Pointer<GError>> error,
    int first_type,
    ffi.Pointer<ffi.Char> first_attr,
  ) {
    return _g_markup_collect_attributes(
      element_name,
      attribute_names,
      attribute_values,
      error,
      first_type,
      first_attr,
    );
  }

  late final _g_markup_collect_attributesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('g_markup_collect_attributes');
  late final _g_markup_collect_attributes =
      _g_markup_collect_attributesPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>,
              int,
              ffi.Pointer<ffi.Char>)>();

  int g_variant_type_string_is_valid(
    ffi.Pointer<ffi.Char> type_string,
  ) {
    return _g_variant_type_string_is_valid(
      type_string,
    );
  }

  late final _g_variant_type_string_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_variant_type_string_is_valid');
  late final _g_variant_type_string_is_valid =
      _g_variant_type_string_is_validPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_variant_type_string_scan(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> limit,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
  ) {
    return _g_variant_type_string_scan(
      string,
      limit,
      endptr,
    );
  }

  late final _g_variant_type_string_scanPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'g_variant_type_string_scan');
  late final _g_variant_type_string_scan =
      _g_variant_type_string_scanPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_variant_type_free(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_free(
      type,
    );
  }

  late final _g_variant_type_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_free');
  late final _g_variant_type_free = _g_variant_type_freePtr
      .asFunction<void Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_copy(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_copy(
      type,
    );
  }

  late final _g_variant_type_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_copy');
  late final _g_variant_type_copy = _g_variant_type_copyPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new(
    ffi.Pointer<ffi.Char> type_string,
  ) {
    return _g_variant_type_new(
      type_string,
    );
  }

  late final _g_variant_type_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_type_new');
  late final _g_variant_type_new = _g_variant_type_newPtr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<ffi.Char>)>();

  int g_variant_type_get_string_length(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_get_string_length(
      type,
    );
  }

  late final _g_variant_type_get_string_lengthPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_get_string_length');
  late final _g_variant_type_get_string_length =
      _g_variant_type_get_string_lengthPtr
          .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<ffi.Char> g_variant_type_peek_string(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_peek_string(
      type,
    );
  }

  late final _g_variant_type_peek_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_peek_string');
  late final _g_variant_type_peek_string = _g_variant_type_peek_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<ffi.Char> g_variant_type_dup_string(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_dup_string(
      type,
    );
  }

  late final _g_variant_type_dup_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_dup_string');
  late final _g_variant_type_dup_string = _g_variant_type_dup_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_definite(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_definite(
      type,
    );
  }

  late final _g_variant_type_is_definitePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_definite');
  late final _g_variant_type_is_definite = _g_variant_type_is_definitePtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_container(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_container(
      type,
    );
  }

  late final _g_variant_type_is_containerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_container');
  late final _g_variant_type_is_container = _g_variant_type_is_containerPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_basic(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_basic(
      type,
    );
  }

  late final _g_variant_type_is_basicPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_basic');
  late final _g_variant_type_is_basic = _g_variant_type_is_basicPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_maybe(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_maybe(
      type,
    );
  }

  late final _g_variant_type_is_maybePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_maybe');
  late final _g_variant_type_is_maybe = _g_variant_type_is_maybePtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_array(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_array(
      type,
    );
  }

  late final _g_variant_type_is_arrayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_array');
  late final _g_variant_type_is_array = _g_variant_type_is_arrayPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_tuple(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_tuple(
      type,
    );
  }

  late final _g_variant_type_is_tuplePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_tuple');
  late final _g_variant_type_is_tuple = _g_variant_type_is_tuplePtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_dict_entry(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_dict_entry(
      type,
    );
  }

  late final _g_variant_type_is_dict_entryPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_dict_entry');
  late final _g_variant_type_is_dict_entry = _g_variant_type_is_dict_entryPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_is_variant(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_is_variant(
      type,
    );
  }

  late final _g_variant_type_is_variantPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_is_variant');
  late final _g_variant_type_is_variant = _g_variant_type_is_variantPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_hash(
    gconstpointer type,
  ) {
    return _g_variant_type_hash(
      type,
    );
  }

  late final _g_variant_type_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_variant_type_hash');
  late final _g_variant_type_hash =
      _g_variant_type_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_variant_type_equal(
    gconstpointer type1,
    gconstpointer type2,
  ) {
    return _g_variant_type_equal(
      type1,
      type2,
    );
  }

  late final _g_variant_type_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_variant_type_equal');
  late final _g_variant_type_equal = _g_variant_type_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  int g_variant_type_is_subtype_of(
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GVariantType> supertype,
  ) {
    return _g_variant_type_is_subtype_of(
      type,
      supertype,
    );
  }

  late final _g_variant_type_is_subtype_ofPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariantType>)>>('g_variant_type_is_subtype_of');
  late final _g_variant_type_is_subtype_of =
      _g_variant_type_is_subtype_ofPtr.asFunction<
          int Function(ffi.Pointer<GVariantType>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_element(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_element(
      type,
    );
  }

  late final _g_variant_type_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_element');
  late final _g_variant_type_element = _g_variant_type_elementPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_first(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_first(
      type,
    );
  }

  late final _g_variant_type_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_first');
  late final _g_variant_type_first = _g_variant_type_firstPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_next(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_next(
      type,
    );
  }

  late final _g_variant_type_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_next');
  late final _g_variant_type_next = _g_variant_type_nextPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  int g_variant_type_n_items(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_n_items(
      type,
    );
  }

  late final _g_variant_type_n_itemsPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariantType>)>>(
          'g_variant_type_n_items');
  late final _g_variant_type_n_items = _g_variant_type_n_itemsPtr
      .asFunction<int Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_key(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_key(
      type,
    );
  }

  late final _g_variant_type_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_key');
  late final _g_variant_type_key = _g_variant_type_keyPtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_value(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_type_value(
      type,
    );
  }

  late final _g_variant_type_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_value');
  late final _g_variant_type_value = _g_variant_type_valuePtr.asFunction<
      ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new_array(
    ffi.Pointer<GVariantType> element,
  ) {
    return _g_variant_type_new_array(
      element,
    );
  }

  late final _g_variant_type_new_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_new_array');
  late final _g_variant_type_new_array =
      _g_variant_type_new_arrayPtr.asFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new_maybe(
    ffi.Pointer<GVariantType> element,
  ) {
    return _g_variant_type_new_maybe(
      element,
    );
  }

  late final _g_variant_type_new_maybePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_type_new_maybe');
  late final _g_variant_type_new_maybe =
      _g_variant_type_new_maybePtr.asFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_new_tuple(
    ffi.Pointer<ffi.Pointer<GVariantType>> items,
    int length,
  ) {
    return _g_variant_type_new_tuple(
      items,
      length,
    );
  }

  late final _g_variant_type_new_tuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<ffi.Pointer<GVariantType>>,
              gint)>>('g_variant_type_new_tuple');
  late final _g_variant_type_new_tuple =
      _g_variant_type_new_tuplePtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<ffi.Pointer<GVariantType>>, int)>();

  ffi.Pointer<GVariantType> g_variant_type_new_dict_entry(
    ffi.Pointer<GVariantType> key,
    ffi.Pointer<GVariantType> value,
  ) {
    return _g_variant_type_new_dict_entry(
      key,
      value,
    );
  }

  late final _g_variant_type_new_dict_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariantType>)>>('g_variant_type_new_dict_entry');
  late final _g_variant_type_new_dict_entry =
      _g_variant_type_new_dict_entryPtr.asFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariantType>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariantType> g_variant_type_checked_(
    ffi.Pointer<ffi.Char> type_string,
  ) {
    return _g_variant_type_checked_(
      type_string,
    );
  }

  late final _g_variant_type_checked_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_type_checked_');
  late final _g_variant_type_checked_ = _g_variant_type_checked_Ptr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<ffi.Char>)>();

  int g_variant_type_string_get_depth_(
    ffi.Pointer<ffi.Char> type_string,
  ) {
    return _g_variant_type_string_get_depth_(
      type_string,
    );
  }

  late final _g_variant_type_string_get_depth_Ptr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<ffi.Char>)>>(
          'g_variant_type_string_get_depth_');
  late final _g_variant_type_string_get_depth_ =
      _g_variant_type_string_get_depth_Ptr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void g_variant_unref(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_unref(
      value,
    );
  }

  late final _g_variant_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariant>)>>(
          'g_variant_unref');
  late final _g_variant_unref =
      _g_variant_unrefPtr.asFunction<void Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_ref(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_ref(
      value,
    );
  }

  late final _g_variant_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_ref');
  late final _g_variant_ref = _g_variant_refPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_ref_sink(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_ref_sink(
      value,
    );
  }

  late final _g_variant_ref_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_ref_sink');
  late final _g_variant_ref_sink = _g_variant_ref_sinkPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  int g_variant_is_floating(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_is_floating(
      value,
    );
  }

  late final _g_variant_is_floatingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_is_floating');
  late final _g_variant_is_floating = _g_variant_is_floatingPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_take_ref(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_take_ref(
      value,
    );
  }

  late final _g_variant_take_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_take_ref');
  late final _g_variant_take_ref = _g_variant_take_refPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariantType> g_variant_get_type(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_type(
      value,
    );
  }

  late final _g_variant_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantType> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_type');
  late final _g_variant_get_type = _g_variant_get_typePtr
      .asFunction<ffi.Pointer<GVariantType> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<ffi.Char> g_variant_get_type_string(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_type_string(
      value,
    );
  }

  late final _g_variant_get_type_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_type_string');
  late final _g_variant_get_type_string = _g_variant_get_type_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariant>)>();

  int g_variant_is_of_type(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_is_of_type(
      value,
      type,
    );
  }

  late final _g_variant_is_of_typePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GVariantType>)>>('g_variant_is_of_type');
  late final _g_variant_is_of_type = _g_variant_is_of_typePtr.asFunction<
      int Function(ffi.Pointer<GVariant>, ffi.Pointer<GVariantType>)>();

  int g_variant_is_container(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_is_container(
      value,
    );
  }

  late final _g_variant_is_containerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_is_container');
  late final _g_variant_is_container = _g_variant_is_containerPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_classify(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_classify(
      value,
    );
  }

  late final _g_variant_classifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_classify');
  late final _g_variant_classify =
      _g_variant_classifyPtr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_boolean(
    int value,
  ) {
    return _g_variant_new_boolean(
      value,
    );
  }

  late final _g_variant_new_booleanPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gboolean)>>(
          'g_variant_new_boolean');
  late final _g_variant_new_boolean = _g_variant_new_booleanPtr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_byte(
    int value,
  ) {
    return _g_variant_new_byte(
      value,
    );
  }

  late final _g_variant_new_bytePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint8)>>(
          'g_variant_new_byte');
  late final _g_variant_new_byte =
      _g_variant_new_bytePtr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_int16(
    int value,
  ) {
    return _g_variant_new_int16(
      value,
    );
  }

  late final _g_variant_new_int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint16)>>(
          'g_variant_new_int16');
  late final _g_variant_new_int16 =
      _g_variant_new_int16Ptr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_uint16(
    int value,
  ) {
    return _g_variant_new_uint16(
      value,
    );
  }

  late final _g_variant_new_uint16Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint16)>>(
          'g_variant_new_uint16');
  late final _g_variant_new_uint16 = _g_variant_new_uint16Ptr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_int32(
    int value,
  ) {
    return _g_variant_new_int32(
      value,
    );
  }

  late final _g_variant_new_int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint32)>>(
          'g_variant_new_int32');
  late final _g_variant_new_int32 =
      _g_variant_new_int32Ptr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_uint32(
    int value,
  ) {
    return _g_variant_new_uint32(
      value,
    );
  }

  late final _g_variant_new_uint32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint32)>>(
          'g_variant_new_uint32');
  late final _g_variant_new_uint32 = _g_variant_new_uint32Ptr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_int64(
    int value,
  ) {
    return _g_variant_new_int64(
      value,
    );
  }

  late final _g_variant_new_int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint64)>>(
          'g_variant_new_int64');
  late final _g_variant_new_int64 =
      _g_variant_new_int64Ptr.asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_uint64(
    int value,
  ) {
    return _g_variant_new_uint64(
      value,
    );
  }

  late final _g_variant_new_uint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(guint64)>>(
          'g_variant_new_uint64');
  late final _g_variant_new_uint64 = _g_variant_new_uint64Ptr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_handle(
    int value,
  ) {
    return _g_variant_new_handle(
      value,
    );
  }

  late final _g_variant_new_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gint32)>>(
          'g_variant_new_handle');
  late final _g_variant_new_handle = _g_variant_new_handlePtr
      .asFunction<ffi.Pointer<GVariant> Function(int)>();

  ffi.Pointer<GVariant> g_variant_new_double(
    double value,
  ) {
    return _g_variant_new_double(
      value,
    );
  }

  late final _g_variant_new_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GVariant> Function(gdouble)>>(
          'g_variant_new_double');
  late final _g_variant_new_double = _g_variant_new_doublePtr
      .asFunction<ffi.Pointer<GVariant> Function(double)>();

  ffi.Pointer<GVariant> g_variant_new_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_variant_new_string(
      string,
    );
  }

  late final _g_variant_new_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_string');
  late final _g_variant_new_string = _g_variant_new_stringPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_take_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_variant_new_take_string(
      string,
    );
  }

  late final _g_variant_new_take_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_take_string');
  late final _g_variant_new_take_string = _g_variant_new_take_stringPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_printf(
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_new_printf(
      format_string,
    );
  }

  late final _g_variant_new_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_printf');
  late final _g_variant_new_printf = _g_variant_new_printfPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_object_path(
    ffi.Pointer<ffi.Char> object_path,
  ) {
    return _g_variant_new_object_path(
      object_path,
    );
  }

  late final _g_variant_new_object_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_object_path');
  late final _g_variant_new_object_path = _g_variant_new_object_pathPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  int g_variant_is_object_path(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_variant_is_object_path(
      string,
    );
  }

  late final _g_variant_is_object_pathPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_variant_is_object_path');
  late final _g_variant_is_object_path = _g_variant_is_object_pathPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_signature(
    ffi.Pointer<ffi.Char> signature,
  ) {
    return _g_variant_new_signature(
      signature,
    );
  }

  late final _g_variant_new_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_signature');
  late final _g_variant_new_signature = _g_variant_new_signaturePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  int g_variant_is_signature(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_variant_is_signature(
      string,
    );
  }

  late final _g_variant_is_signaturePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_variant_is_signature');
  late final _g_variant_is_signature = _g_variant_is_signaturePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_variant(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_new_variant(
      value,
    );
  }

  late final _g_variant_new_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_new_variant');
  late final _g_variant_new_variant = _g_variant_new_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_strv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strv,
    int length,
  ) {
    return _g_variant_new_strv(
      strv,
      length,
    );
  }

  late final _g_variant_new_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gssize)>>('g_variant_new_strv');
  late final _g_variant_new_strv = _g_variant_new_strvPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_objv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strv,
    int length,
  ) {
    return _g_variant_new_objv(
      strv,
      length,
    );
  }

  late final _g_variant_new_objvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gssize)>>('g_variant_new_objv');
  late final _g_variant_new_objv = _g_variant_new_objvPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_bytestring(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_variant_new_bytestring(
      string,
    );
  }

  late final _g_variant_new_bytestringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_bytestring');
  late final _g_variant_new_bytestring = _g_variant_new_bytestringPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_bytestring_array(
    ffi.Pointer<ffi.Pointer<ffi.Char>> strv,
    int length,
  ) {
    return _g_variant_new_bytestring_array(
      strv,
      length,
    );
  }

  late final _g_variant_new_bytestring_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gssize)>>('g_variant_new_bytestring_array');
  late final _g_variant_new_bytestring_array =
      _g_variant_new_bytestring_arrayPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_fixed_array(
    ffi.Pointer<GVariantType> element_type,
    gconstpointer elements,
    int n_elements,
    int element_size,
  ) {
    return _g_variant_new_fixed_array(
      element_type,
      elements,
      n_elements,
      element_size,
    );
  }

  late final _g_variant_new_fixed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
              gconstpointer, gsize, gsize)>>('g_variant_new_fixed_array');
  late final _g_variant_new_fixed_array =
      _g_variant_new_fixed_arrayPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>, gconstpointer, int, int)>();

  int g_variant_get_boolean(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_boolean(
      value,
    );
  }

  late final _g_variant_get_booleanPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_boolean');
  late final _g_variant_get_boolean = _g_variant_get_booleanPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_byte(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_byte(
      value,
    );
  }

  late final _g_variant_get_bytePtr =
      _lookup<ffi.NativeFunction<guint8 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_byte');
  late final _g_variant_get_byte =
      _g_variant_get_bytePtr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_int16(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_int16(
      value,
    );
  }

  late final _g_variant_get_int16Ptr =
      _lookup<ffi.NativeFunction<gint16 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_int16');
  late final _g_variant_get_int16 =
      _g_variant_get_int16Ptr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_uint16(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_uint16(
      value,
    );
  }

  late final _g_variant_get_uint16Ptr =
      _lookup<ffi.NativeFunction<guint16 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_uint16');
  late final _g_variant_get_uint16 = _g_variant_get_uint16Ptr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_int32(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_int32(
      value,
    );
  }

  late final _g_variant_get_int32Ptr =
      _lookup<ffi.NativeFunction<gint32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_int32');
  late final _g_variant_get_int32 =
      _g_variant_get_int32Ptr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_uint32(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_uint32(
      value,
    );
  }

  late final _g_variant_get_uint32Ptr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_uint32');
  late final _g_variant_get_uint32 = _g_variant_get_uint32Ptr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_int64(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_int64(
      value,
    );
  }

  late final _g_variant_get_int64Ptr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_int64');
  late final _g_variant_get_int64 =
      _g_variant_get_int64Ptr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_uint64(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_uint64(
      value,
    );
  }

  late final _g_variant_get_uint64Ptr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_uint64');
  late final _g_variant_get_uint64 = _g_variant_get_uint64Ptr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  int g_variant_get_handle(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_handle(
      value,
    );
  }

  late final _g_variant_get_handlePtr =
      _lookup<ffi.NativeFunction<gint32 Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_handle');
  late final _g_variant_get_handle = _g_variant_get_handlePtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  double g_variant_get_double(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_double(
      value,
    );
  }

  late final _g_variant_get_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_double');
  late final _g_variant_get_double = _g_variant_get_doublePtr
      .asFunction<double Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_get_variant(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_variant(
      value,
    );
  }

  late final _g_variant_get_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_variant');
  late final _g_variant_get_variant = _g_variant_get_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<ffi.Char> g_variant_get_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_string(
      value,
      length,
    );
  }

  late final _g_variant_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_string');
  late final _g_variant_get_string = _g_variant_get_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Char> g_variant_dup_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_string(
      value,
      length,
    );
  }

  late final _g_variant_dup_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_string');
  late final _g_variant_dup_string = _g_variant_dup_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_variant_get_strv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_strv(
      value,
      length,
    );
  }

  late final _g_variant_get_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_strv');
  late final _g_variant_get_strv = _g_variant_get_strvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_variant_dup_strv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_strv(
      value,
      length,
    );
  }

  late final _g_variant_dup_strvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_strv');
  late final _g_variant_dup_strv = _g_variant_dup_strvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_variant_get_objv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_objv(
      value,
      length,
    );
  }

  late final _g_variant_get_objvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_objv');
  late final _g_variant_get_objv = _g_variant_get_objvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_variant_dup_objv(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_objv(
      value,
      length,
    );
  }

  late final _g_variant_dup_objvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_objv');
  late final _g_variant_dup_objv = _g_variant_dup_objvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Char> g_variant_get_bytestring(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_bytestring(
      value,
    );
  }

  late final _g_variant_get_bytestringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_bytestring');
  late final _g_variant_get_bytestring = _g_variant_get_bytestringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<ffi.Char> g_variant_dup_bytestring(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_bytestring(
      value,
      length,
    );
  }

  late final _g_variant_dup_bytestringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_bytestring');
  late final _g_variant_dup_bytestring =
      _g_variant_dup_bytestringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_variant_get_bytestring_array(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_get_bytestring_array(
      value,
      length,
    );
  }

  late final _g_variant_get_bytestring_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_get_bytestring_array');
  late final _g_variant_get_bytestring_array =
      _g_variant_get_bytestring_arrayPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_variant_dup_bytestring_array(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> length,
  ) {
    return _g_variant_dup_bytestring_array(
      value,
      length,
    );
  }

  late final _g_variant_dup_bytestring_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<gsize>)>>('g_variant_dup_bytestring_array');
  late final _g_variant_dup_bytestring_array =
      _g_variant_dup_bytestring_arrayPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>)>();

  ffi.Pointer<GVariant> g_variant_new_maybe(
    ffi.Pointer<GVariantType> child_type,
    ffi.Pointer<GVariant> child,
  ) {
    return _g_variant_new_maybe(
      child_type,
      child,
    );
  }

  late final _g_variant_new_maybePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariant>)>>('g_variant_new_maybe');
  late final _g_variant_new_maybe = _g_variant_new_maybePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GVariantType>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_array(
    ffi.Pointer<GVariantType> child_type,
    ffi.Pointer<ffi.Pointer<GVariant>> children,
    int n_children,
  ) {
    return _g_variant_new_array(
      child_type,
      children,
      n_children,
    );
  }

  late final _g_variant_new_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>,
              ffi.Pointer<ffi.Pointer<GVariant>>,
              gsize)>>('g_variant_new_array');
  late final _g_variant_new_array = _g_variant_new_arrayPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
          ffi.Pointer<ffi.Pointer<GVariant>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_tuple(
    ffi.Pointer<ffi.Pointer<GVariant>> children,
    int n_children,
  ) {
    return _g_variant_new_tuple(
      children,
      n_children,
    );
  }

  late final _g_variant_new_tuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Pointer<GVariant>>,
              gsize)>>('g_variant_new_tuple');
  late final _g_variant_new_tuple = _g_variant_new_tuplePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<ffi.Pointer<GVariant>>, int)>();

  ffi.Pointer<GVariant> g_variant_new_dict_entry(
    ffi.Pointer<GVariant> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_new_dict_entry(
      key,
      value,
    );
  }

  late final _g_variant_new_dict_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GVariant>)>>('g_variant_new_dict_entry');
  late final _g_variant_new_dict_entry =
      _g_variant_new_dict_entryPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_get_maybe(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_maybe(
      value,
    );
  }

  late final _g_variant_get_maybePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_maybe');
  late final _g_variant_get_maybe = _g_variant_get_maybePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  int g_variant_n_children(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_n_children(
      value,
    );
  }

  late final _g_variant_n_childrenPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariant>)>>(
          'g_variant_n_children');
  late final _g_variant_n_children = _g_variant_n_childrenPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  void g_variant_get_child(
    ffi.Pointer<GVariant> value,
    int index_,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_get_child(
      value,
      index_,
      format_string,
    );
  }

  late final _g_variant_get_childPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariant>, gsize,
              ffi.Pointer<ffi.Char>)>>('g_variant_get_child');
  late final _g_variant_get_child = _g_variant_get_childPtr.asFunction<
      void Function(ffi.Pointer<GVariant>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_get_child_value(
    ffi.Pointer<GVariant> value,
    int index_,
  ) {
    return _g_variant_get_child_value(
      value,
      index_,
    );
  }

  late final _g_variant_get_child_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>, gsize)>>('g_variant_get_child_value');
  late final _g_variant_get_child_value = _g_variant_get_child_valuePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>, int)>();

  int g_variant_lookup(
    ffi.Pointer<GVariant> dictionary,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_lookup(
      dictionary,
      key,
      format_string,
    );
  }

  late final _g_variant_lookupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariant>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_variant_lookup');
  late final _g_variant_lookup = _g_variant_lookupPtr.asFunction<
      int Function(ffi.Pointer<GVariant>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_lookup_value(
    ffi.Pointer<GVariant> dictionary,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<GVariantType> expected_type,
  ) {
    return _g_variant_lookup_value(
      dictionary,
      key,
      expected_type,
    );
  }

  late final _g_variant_lookup_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GVariantType>)>>('g_variant_lookup_value');
  late final _g_variant_lookup_value = _g_variant_lookup_valuePtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<GVariantType>)>();

  gconstpointer g_variant_get_fixed_array(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<gsize> n_elements,
    int element_size,
  ) {
    return _g_variant_get_fixed_array(
      value,
      n_elements,
      element_size,
    );
  }

  late final _g_variant_get_fixed_arrayPtr = _lookup<
      ffi.NativeFunction<
          gconstpointer Function(ffi.Pointer<GVariant>, ffi.Pointer<gsize>,
              gsize)>>('g_variant_get_fixed_array');
  late final _g_variant_get_fixed_array =
      _g_variant_get_fixed_arrayPtr.asFunction<
          gconstpointer Function(
              ffi.Pointer<GVariant>, ffi.Pointer<gsize>, int)>();

  int g_variant_get_size(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_size(
      value,
    );
  }

  late final _g_variant_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariant>)>>(
          'g_variant_get_size');
  late final _g_variant_get_size =
      _g_variant_get_sizePtr.asFunction<int Function(ffi.Pointer<GVariant>)>();

  gconstpointer g_variant_get_data(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_data(
      value,
    );
  }

  late final _g_variant_get_dataPtr = _lookup<
          ffi.NativeFunction<gconstpointer Function(ffi.Pointer<GVariant>)>>(
      'g_variant_get_data');
  late final _g_variant_get_data = _g_variant_get_dataPtr
      .asFunction<gconstpointer Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GBytes> g_variant_get_data_as_bytes(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_data_as_bytes(
      value,
    );
  }

  late final _g_variant_get_data_as_bytesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GVariant>)>>(
      'g_variant_get_data_as_bytes');
  late final _g_variant_get_data_as_bytes = _g_variant_get_data_as_bytesPtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<GVariant>)>();

  void g_variant_store(
    ffi.Pointer<GVariant> value,
    ffi.Pointer data,
  ) {
    return _g_variant_store(
      value,
      data,
    );
  }

  late final _g_variant_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVariant>, ffi.Pointer)>>('g_variant_store');
  late final _g_variant_store = _g_variant_storePtr
      .asFunction<void Function(ffi.Pointer<GVariant>, ffi.Pointer)>();

  ffi.Pointer<ffi.Char> g_variant_print(
    ffi.Pointer<GVariant> value,
    int type_annotate,
  ) {
    return _g_variant_print(
      value,
      type_annotate,
    );
  }

  late final _g_variant_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GVariant>, gboolean)>>('g_variant_print');
  late final _g_variant_print = _g_variant_printPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GVariant>, int)>();

  ffi.Pointer<GString> g_variant_print_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<GString> string,
    int type_annotate,
  ) {
    return _g_variant_print_string(
      value,
      string,
      type_annotate,
    );
  }

  late final _g_variant_print_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GString> Function(ffi.Pointer<GVariant>,
              ffi.Pointer<GString>, gboolean)>>('g_variant_print_string');
  late final _g_variant_print_string = _g_variant_print_stringPtr.asFunction<
      ffi.Pointer<GString> Function(
          ffi.Pointer<GVariant>, ffi.Pointer<GString>, int)>();

  int g_variant_hash(
    gconstpointer value,
  ) {
    return _g_variant_hash(
      value,
    );
  }

  late final _g_variant_hashPtr =
      _lookup<ffi.NativeFunction<guint Function(gconstpointer)>>(
          'g_variant_hash');
  late final _g_variant_hash =
      _g_variant_hashPtr.asFunction<int Function(gconstpointer)>();

  int g_variant_equal(
    gconstpointer one,
    gconstpointer two,
  ) {
    return _g_variant_equal(
      one,
      two,
    );
  }

  late final _g_variant_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_variant_equal');
  late final _g_variant_equal = _g_variant_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GVariant> g_variant_get_normal_form(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_get_normal_form(
      value,
    );
  }

  late final _g_variant_get_normal_formPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_get_normal_form');
  late final _g_variant_get_normal_form = _g_variant_get_normal_formPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  int g_variant_is_normal_form(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_is_normal_form(
      value,
    );
  }

  late final _g_variant_is_normal_formPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GVariant>)>>(
          'g_variant_is_normal_form');
  late final _g_variant_is_normal_form = _g_variant_is_normal_formPtr
      .asFunction<int Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_byteswap(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_byteswap(
      value,
    );
  }

  late final _g_variant_byteswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariant>)>>('g_variant_byteswap');
  late final _g_variant_byteswap = _g_variant_byteswapPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_variant_new_from_bytes(
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GBytes> bytes,
    int trusted,
  ) {
    return _g_variant_new_from_bytes(
      type,
      bytes,
      trusted,
    );
  }

  late final _g_variant_new_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>,
              ffi.Pointer<GBytes>, gboolean)>>('g_variant_new_from_bytes');
  late final _g_variant_new_from_bytes =
      _g_variant_new_from_bytesPtr.asFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>, ffi.Pointer<GBytes>, int)>();

  ffi.Pointer<GVariant> g_variant_new_from_data(
    ffi.Pointer<GVariantType> type,
    gconstpointer data,
    int size,
    int trusted,
    GDestroyNotify notify,
    ffi.Pointer user_data,
  ) {
    return _g_variant_new_from_data(
      type,
      data,
      size,
      trusted,
      notify,
      user_data,
    );
  }

  late final _g_variant_new_from_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>,
              gconstpointer,
              gsize,
              gboolean,
              GDestroyNotify,
              ffi.Pointer)>>('g_variant_new_from_data');
  late final _g_variant_new_from_data = _g_variant_new_from_dataPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantType>, gconstpointer,
          int, int, GDestroyNotify, ffi.Pointer)>();

  ffi.Pointer<GVariantIter> g_variant_iter_new(
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_iter_new(
      value,
    );
  }

  late final _g_variant_iter_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantIter> Function(
              ffi.Pointer<GVariant>)>>('g_variant_iter_new');
  late final _g_variant_iter_new = _g_variant_iter_newPtr
      .asFunction<ffi.Pointer<GVariantIter> Function(ffi.Pointer<GVariant>)>();

  int g_variant_iter_init(
    ffi.Pointer<GVariantIter> iter,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_iter_init(
      iter,
      value,
    );
  }

  late final _g_variant_iter_initPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GVariantIter>,
              ffi.Pointer<GVariant>)>>('g_variant_iter_init');
  late final _g_variant_iter_init = _g_variant_iter_initPtr.asFunction<
      int Function(ffi.Pointer<GVariantIter>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariantIter> g_variant_iter_copy(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_copy(
      iter,
    );
  }

  late final _g_variant_iter_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantIter> Function(
              ffi.Pointer<GVariantIter>)>>('g_variant_iter_copy');
  late final _g_variant_iter_copy = _g_variant_iter_copyPtr.asFunction<
      ffi.Pointer<GVariantIter> Function(ffi.Pointer<GVariantIter>)>();

  int g_variant_iter_n_children(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_n_children(
      iter,
    );
  }

  late final _g_variant_iter_n_childrenPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GVariantIter>)>>(
          'g_variant_iter_n_children');
  late final _g_variant_iter_n_children = _g_variant_iter_n_childrenPtr
      .asFunction<int Function(ffi.Pointer<GVariantIter>)>();

  void g_variant_iter_free(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_free(
      iter,
    );
  }

  late final _g_variant_iter_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantIter>)>>(
          'g_variant_iter_free');
  late final _g_variant_iter_free = _g_variant_iter_freePtr
      .asFunction<void Function(ffi.Pointer<GVariantIter>)>();

  ffi.Pointer<GVariant> g_variant_iter_next_value(
    ffi.Pointer<GVariantIter> iter,
  ) {
    return _g_variant_iter_next_value(
      iter,
    );
  }

  late final _g_variant_iter_next_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantIter>)>>('g_variant_iter_next_value');
  late final _g_variant_iter_next_value = _g_variant_iter_next_valuePtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantIter>)>();

  int g_variant_iter_next(
    ffi.Pointer<GVariantIter> iter,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_iter_next(
      iter,
      format_string,
    );
  }

  late final _g_variant_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantIter>,
              ffi.Pointer<ffi.Char>)>>('g_variant_iter_next');
  late final _g_variant_iter_next = _g_variant_iter_nextPtr.asFunction<
      int Function(ffi.Pointer<GVariantIter>, ffi.Pointer<ffi.Char>)>();

  int g_variant_iter_loop(
    ffi.Pointer<GVariantIter> iter,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_iter_loop(
      iter,
      format_string,
    );
  }

  late final _g_variant_iter_loopPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantIter>,
              ffi.Pointer<ffi.Char>)>>('g_variant_iter_loop');
  late final _g_variant_iter_loop = _g_variant_iter_loopPtr.asFunction<
      int Function(ffi.Pointer<GVariantIter>, ffi.Pointer<ffi.Char>)>();

  int g_variant_parser_get_error_quark() {
    return _g_variant_parser_get_error_quark();
  }

  late final _g_variant_parser_get_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_variant_parser_get_error_quark');
  late final _g_variant_parser_get_error_quark =
      _g_variant_parser_get_error_quarkPtr.asFunction<int Function()>();

  int g_variant_parse_error_quark() {
    return _g_variant_parse_error_quark();
  }

  late final _g_variant_parse_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_variant_parse_error_quark');
  late final _g_variant_parse_error_quark =
      _g_variant_parse_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GVariantBuilder> g_variant_builder_new(
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_builder_new(
      type,
    );
  }

  late final _g_variant_builder_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantBuilder> Function(
              ffi.Pointer<GVariantType>)>>('g_variant_builder_new');
  late final _g_variant_builder_new = _g_variant_builder_newPtr.asFunction<
      ffi.Pointer<GVariantBuilder> Function(ffi.Pointer<GVariantType>)>();

  void g_variant_builder_unref(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_unref(
      builder,
    );
  }

  late final _g_variant_builder_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantBuilder>)>>(
      'g_variant_builder_unref');
  late final _g_variant_builder_unref = _g_variant_builder_unrefPtr
      .asFunction<void Function(ffi.Pointer<GVariantBuilder>)>();

  ffi.Pointer<GVariantBuilder> g_variant_builder_ref(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_ref(
      builder,
    );
  }

  late final _g_variant_builder_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantBuilder> Function(
              ffi.Pointer<GVariantBuilder>)>>('g_variant_builder_ref');
  late final _g_variant_builder_ref = _g_variant_builder_refPtr.asFunction<
      ffi.Pointer<GVariantBuilder> Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_init(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_builder_init(
      builder,
      type,
    );
  }

  late final _g_variant_builder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<GVariantType>)>>('g_variant_builder_init');
  late final _g_variant_builder_init = _g_variant_builder_initPtr.asFunction<
      void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<GVariantType>)>();

  ffi.Pointer<GVariant> g_variant_builder_end(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_end(
      builder,
    );
  }

  late final _g_variant_builder_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantBuilder>)>>('g_variant_builder_end');
  late final _g_variant_builder_end = _g_variant_builder_endPtr.asFunction<
      ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_clear(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_clear(
      builder,
    );
  }

  late final _g_variant_builder_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantBuilder>)>>(
      'g_variant_builder_clear');
  late final _g_variant_builder_clear = _g_variant_builder_clearPtr
      .asFunction<void Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_open(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<GVariantType> type,
  ) {
    return _g_variant_builder_open(
      builder,
      type,
    );
  }

  late final _g_variant_builder_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<GVariantType>)>>('g_variant_builder_open');
  late final _g_variant_builder_open = _g_variant_builder_openPtr.asFunction<
      void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<GVariantType>)>();

  void g_variant_builder_close(
    ffi.Pointer<GVariantBuilder> builder,
  ) {
    return _g_variant_builder_close(
      builder,
    );
  }

  late final _g_variant_builder_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantBuilder>)>>(
      'g_variant_builder_close');
  late final _g_variant_builder_close = _g_variant_builder_closePtr
      .asFunction<void Function(ffi.Pointer<GVariantBuilder>)>();

  void g_variant_builder_add_value(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_builder_add_value(
      builder,
      value,
    );
  }

  late final _g_variant_builder_add_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<GVariant>)>>('g_variant_builder_add_value');
  late final _g_variant_builder_add_value =
      _g_variant_builder_add_valuePtr.asFunction<
          void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<GVariant>)>();

  void g_variant_builder_add(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_builder_add(
      builder,
      format_string,
    );
  }

  late final _g_variant_builder_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<ffi.Char>)>>('g_variant_builder_add');
  late final _g_variant_builder_add = _g_variant_builder_addPtr.asFunction<
      void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<ffi.Char>)>();

  void g_variant_builder_add_parsed(
    ffi.Pointer<GVariantBuilder> builder,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_variant_builder_add_parsed(
      builder,
      format,
    );
  }

  late final _g_variant_builder_add_parsedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantBuilder>,
              ffi.Pointer<ffi.Char>)>>('g_variant_builder_add_parsed');
  late final _g_variant_builder_add_parsed =
      _g_variant_builder_add_parsedPtr.asFunction<
          void Function(ffi.Pointer<GVariantBuilder>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new(
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_new(
      format_string,
    );
  }

  late final _g_variant_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new');
  late final _g_variant_new = _g_variant_newPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  void g_variant_get(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_get(
      value,
      format_string,
    );
  }

  late final _g_variant_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVariant>, ffi.Pointer<ffi.Char>)>>('g_variant_get');
  late final _g_variant_get = _g_variant_getPtr.asFunction<
      void Function(ffi.Pointer<GVariant>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_va(
    ffi.Pointer<ffi.Char> format_string,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> app,
  ) {
    return _g_variant_new_va(
      format_string,
      endptr,
      app,
    );
  }

  late final _g_variant_new_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>('g_variant_new_va');
  late final _g_variant_new_va = _g_variant_new_vaPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  void g_variant_get_va(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<ffi.Char> format_string,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> app,
  ) {
    return _g_variant_get_va(
      value,
      format_string,
      endptr,
      app,
    );
  }

  late final _g_variant_get_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GVariant>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>('g_variant_get_va');
  late final _g_variant_get_va = _g_variant_get_vaPtr.asFunction<
      void Function(
          ffi.Pointer<GVariant>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  int g_variant_check_format_string(
    ffi.Pointer<GVariant> value,
    ffi.Pointer<ffi.Char> format_string,
    int copy_only,
  ) {
    return _g_variant_check_format_string(
      value,
      format_string,
      copy_only,
    );
  }

  late final _g_variant_check_format_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariant>, ffi.Pointer<ffi.Char>,
              gboolean)>>('g_variant_check_format_string');
  late final _g_variant_check_format_string =
      _g_variant_check_format_stringPtr.asFunction<
          int Function(ffi.Pointer<GVariant>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GVariant> g_variant_parse(
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> limit,
    ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_variant_parse(
      type,
      text,
      limit,
      endptr,
      error,
    );
  }

  late final _g_variant_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_variant_parse');
  late final _g_variant_parse = _g_variant_parsePtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<GVariantType>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GVariant> g_variant_new_parsed(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_variant_new_parsed(
      format,
    );
  }

  late final _g_variant_new_parsedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<ffi.Char>)>>('g_variant_new_parsed');
  late final _g_variant_new_parsed = _g_variant_new_parsedPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_new_parsed_va(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<ffi.Pointer<__va_list_tag>> app,
  ) {
    return _g_variant_new_parsed_va(
      format,
      app,
    );
  }

  late final _g_variant_new_parsed_vaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GVariant> Function(ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<__va_list_tag>>)>>(
      'g_variant_new_parsed_va');
  late final _g_variant_new_parsed_va = _g_variant_new_parsed_vaPtr.asFunction<
      ffi.Pointer<GVariant> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<__va_list_tag>>)>();

  ffi.Pointer<ffi.Char> g_variant_parse_error_print_context(
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> source_str,
  ) {
    return _g_variant_parse_error_print_context(
      error,
      source_str,
    );
  }

  late final _g_variant_parse_error_print_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>>('g_variant_parse_error_print_context');
  late final _g_variant_parse_error_print_context =
      _g_variant_parse_error_print_contextPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GError>, ffi.Pointer<ffi.Char>)>();

  int g_variant_compare(
    gconstpointer one,
    gconstpointer two,
  ) {
    return _g_variant_compare(
      one,
      two,
    );
  }

  late final _g_variant_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'g_variant_compare');
  late final _g_variant_compare = _g_variant_comparePtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GVariantDict> g_variant_dict_new(
    ffi.Pointer<GVariant> from_asv,
  ) {
    return _g_variant_dict_new(
      from_asv,
    );
  }

  late final _g_variant_dict_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantDict> Function(
              ffi.Pointer<GVariant>)>>('g_variant_dict_new');
  late final _g_variant_dict_new = _g_variant_dict_newPtr
      .asFunction<ffi.Pointer<GVariantDict> Function(ffi.Pointer<GVariant>)>();

  void g_variant_dict_init(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<GVariant> from_asv,
  ) {
    return _g_variant_dict_init(
      dict,
      from_asv,
    );
  }

  late final _g_variant_dict_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<GVariant>)>>('g_variant_dict_init');
  late final _g_variant_dict_init = _g_variant_dict_initPtr.asFunction<
      void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<GVariant>)>();

  int g_variant_dict_lookup(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_dict_lookup(
      dict,
      key,
      format_string,
    );
  }

  late final _g_variant_dict_lookupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_variant_dict_lookup');
  late final _g_variant_dict_lookup = _g_variant_dict_lookupPtr.asFunction<
      int Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GVariant> g_variant_dict_lookup_value(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<GVariantType> expected_type,
  ) {
    return _g_variant_dict_lookup_value(
      dict,
      key,
      expected_type,
    );
  }

  late final _g_variant_dict_lookup_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantDict>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GVariantType>)>>('g_variant_dict_lookup_value');
  late final _g_variant_dict_lookup_value =
      _g_variant_dict_lookup_valuePtr.asFunction<
          ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<GVariantType>)>();

  int g_variant_dict_contains(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _g_variant_dict_contains(
      dict,
      key,
    );
  }

  late final _g_variant_dict_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<ffi.Char>)>>('g_variant_dict_contains');
  late final _g_variant_dict_contains = _g_variant_dict_containsPtr.asFunction<
      int Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>)>();

  void g_variant_dict_insert(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format_string,
  ) {
    return _g_variant_dict_insert(
      dict,
      key,
      format_string,
    );
  }

  late final _g_variant_dict_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_variant_dict_insert');
  late final _g_variant_dict_insert = _g_variant_dict_insertPtr.asFunction<
      void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void g_variant_dict_insert_value(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<GVariant> value,
  ) {
    return _g_variant_dict_insert_value(
      dict,
      key,
      value,
    );
  }

  late final _g_variant_dict_insert_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GVariant>)>>('g_variant_dict_insert_value');
  late final _g_variant_dict_insert_value =
      _g_variant_dict_insert_valuePtr.asFunction<
          void Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GVariant>)>();

  int g_variant_dict_remove(
    ffi.Pointer<GVariantDict> dict,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _g_variant_dict_remove(
      dict,
      key,
    );
  }

  late final _g_variant_dict_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GVariantDict>,
              ffi.Pointer<ffi.Char>)>>('g_variant_dict_remove');
  late final _g_variant_dict_remove = _g_variant_dict_removePtr.asFunction<
      int Function(ffi.Pointer<GVariantDict>, ffi.Pointer<ffi.Char>)>();

  void g_variant_dict_clear(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_clear(
      dict,
    );
  }

  late final _g_variant_dict_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantDict>)>>(
          'g_variant_dict_clear');
  late final _g_variant_dict_clear = _g_variant_dict_clearPtr
      .asFunction<void Function(ffi.Pointer<GVariantDict>)>();

  ffi.Pointer<GVariant> g_variant_dict_end(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_end(
      dict,
    );
  }

  late final _g_variant_dict_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariant> Function(
              ffi.Pointer<GVariantDict>)>>('g_variant_dict_end');
  late final _g_variant_dict_end = _g_variant_dict_endPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GVariantDict>)>();

  ffi.Pointer<GVariantDict> g_variant_dict_ref(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_ref(
      dict,
    );
  }

  late final _g_variant_dict_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GVariantDict> Function(
              ffi.Pointer<GVariantDict>)>>('g_variant_dict_ref');
  late final _g_variant_dict_ref = _g_variant_dict_refPtr.asFunction<
      ffi.Pointer<GVariantDict> Function(ffi.Pointer<GVariantDict>)>();

  void g_variant_dict_unref(
    ffi.Pointer<GVariantDict> dict,
  ) {
    return _g_variant_dict_unref(
      dict,
    );
  }

  late final _g_variant_dict_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GVariantDict>)>>(
          'g_variant_dict_unref');
  late final _g_variant_dict_unref = _g_variant_dict_unrefPtr
      .asFunction<void Function(ffi.Pointer<GVariantDict>)>();

  int g_printf_string_upper_bound(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_printf_string_upper_bound(
      format,
      args,
    );
  }

  late final _g_printf_string_upper_boundPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_printf_string_upper_bound');
  late final _g_printf_string_upper_bound =
      _g_printf_string_upper_boundPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int g_log_set_handler(
    ffi.Pointer<ffi.Char> log_domain,
    int log_levels,
    GLogFunc log_func,
    ffi.Pointer user_data,
  ) {
    return _g_log_set_handler(
      log_domain,
      log_levels,
      log_func,
      user_data,
    );
  }

  late final _g_log_set_handlerPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<ffi.Char>, ffi.Int32, GLogFunc,
              ffi.Pointer)>>('g_log_set_handler');
  late final _g_log_set_handler = _g_log_set_handlerPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, GLogFunc, ffi.Pointer)>();

  int g_log_set_handler_full(
    ffi.Pointer<ffi.Char> log_domain,
    int log_levels,
    GLogFunc log_func,
    ffi.Pointer user_data,
    GDestroyNotify destroy,
  ) {
    return _g_log_set_handler_full(
      log_domain,
      log_levels,
      log_func,
      user_data,
      destroy,
    );
  }

  late final _g_log_set_handler_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<ffi.Char>, ffi.Int32, GLogFunc,
              ffi.Pointer, GDestroyNotify)>>('g_log_set_handler_full');
  late final _g_log_set_handler_full = _g_log_set_handler_fullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, GLogFunc, ffi.Pointer, GDestroyNotify)>();

  void g_log_remove_handler(
    ffi.Pointer<ffi.Char> log_domain,
    int handler_id,
  ) {
    return _g_log_remove_handler(
      log_domain,
      handler_id,
    );
  }

  late final _g_log_remove_handlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, guint)>>(
      'g_log_remove_handler');
  late final _g_log_remove_handler = _g_log_remove_handlerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void g_log_default_handler(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer unused_data,
  ) {
    return _g_log_default_handler(
      log_domain,
      log_level,
      message,
      unused_data,
    );
  }

  late final _g_log_default_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>, ffi.Pointer)>>('g_log_default_handler');
  late final _g_log_default_handler = _g_log_default_handlerPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, ffi.Pointer)>();

  GLogFunc g_log_set_default_handler(
    GLogFunc log_func,
    ffi.Pointer user_data,
  ) {
    return _g_log_set_default_handler(
      log_func,
      user_data,
    );
  }

  late final _g_log_set_default_handlerPtr =
      _lookup<ffi.NativeFunction<GLogFunc Function(GLogFunc, ffi.Pointer)>>(
          'g_log_set_default_handler');
  late final _g_log_set_default_handler = _g_log_set_default_handlerPtr
      .asFunction<GLogFunc Function(GLogFunc, ffi.Pointer)>();

  void g_log(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_log(
      log_domain,
      log_level,
      format,
    );
  }

  late final _g_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('g_log');
  late final _g_log = _g_logPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void g_logv(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_logv(
      log_domain,
      log_level,
      format,
      args,
    );
  }

  late final _g_logvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('g_logv');
  late final _g_logv = _g_logvPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int g_log_set_fatal_mask(
    ffi.Pointer<ffi.Char> log_domain,
    int fatal_mask,
  ) {
    return _g_log_set_fatal_mask(
      log_domain,
      fatal_mask,
    );
  }

  late final _g_log_set_fatal_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('g_log_set_fatal_mask');
  late final _g_log_set_fatal_mask = _g_log_set_fatal_maskPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int g_log_set_always_fatal(
    int fatal_mask,
  ) {
    return _g_log_set_always_fatal(
      fatal_mask,
    );
  }

  late final _g_log_set_always_fatalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'g_log_set_always_fatal');
  late final _g_log_set_always_fatal =
      _g_log_set_always_fatalPtr.asFunction<int Function(int)>();

  void g_log_structured(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
  ) {
    return _g_log_structured(
      log_domain,
      log_level,
    );
  }

  late final _g_log_structuredPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32)>>(
      'g_log_structured');
  late final _g_log_structured = _g_log_structuredPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void g_log_structured_array(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
  ) {
    return _g_log_structured_array(
      log_level,
      fields,
      n_fields,
    );
  }

  late final _g_log_structured_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<GLogField>,
              gsize)>>('g_log_structured_array');
  late final _g_log_structured_array = _g_log_structured_arrayPtr
      .asFunction<void Function(int, ffi.Pointer<GLogField>, int)>();

  void g_log_variant(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<GVariant> fields,
  ) {
    return _g_log_variant(
      log_domain,
      log_level,
      fields,
    );
  }

  late final _g_log_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<GVariant>)>>('g_log_variant');
  late final _g_log_variant = _g_log_variantPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<GVariant>)>();

  void g_log_set_writer_func(
    GLogWriterFunc func,
    ffi.Pointer user_data,
    GDestroyNotify user_data_free,
  ) {
    return _g_log_set_writer_func(
      func,
      user_data,
      user_data_free,
    );
  }

  late final _g_log_set_writer_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GLogWriterFunc, ffi.Pointer,
              GDestroyNotify)>>('g_log_set_writer_func');
  late final _g_log_set_writer_func = _g_log_set_writer_funcPtr
      .asFunction<void Function(GLogWriterFunc, ffi.Pointer, GDestroyNotify)>();

  int g_log_writer_supports_color(
    int output_fd,
  ) {
    return _g_log_writer_supports_color(
      output_fd,
    );
  }

  late final _g_log_writer_supports_colorPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gint)>>(
          'g_log_writer_supports_color');
  late final _g_log_writer_supports_color =
      _g_log_writer_supports_colorPtr.asFunction<int Function(int)>();

  int g_log_writer_is_journald(
    int output_fd,
  ) {
    return _g_log_writer_is_journald(
      output_fd,
    );
  }

  late final _g_log_writer_is_journaldPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gint)>>(
          'g_log_writer_is_journald');
  late final _g_log_writer_is_journald =
      _g_log_writer_is_journaldPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> g_log_writer_format_fields(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    int use_color,
  ) {
    return _g_log_writer_format_fields(
      log_level,
      fields,
      n_fields,
      use_color,
    );
  }

  late final _g_log_writer_format_fieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int32, ffi.Pointer<GLogField>,
              gsize, gboolean)>>('g_log_writer_format_fields');
  late final _g_log_writer_format_fields =
      _g_log_writer_format_fieldsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              int, ffi.Pointer<GLogField>, int, int)>();

  int g_log_writer_syslog(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    ffi.Pointer user_data,
  ) {
    return _g_log_writer_syslog(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_syslogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              ffi.Pointer)>>('g_log_writer_syslog');
  late final _g_log_writer_syslog = _g_log_writer_syslogPtr.asFunction<
      int Function(int, ffi.Pointer<GLogField>, int, ffi.Pointer)>();

  int g_log_writer_journald(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    ffi.Pointer user_data,
  ) {
    return _g_log_writer_journald(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_journaldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              ffi.Pointer)>>('g_log_writer_journald');
  late final _g_log_writer_journald = _g_log_writer_journaldPtr.asFunction<
      int Function(int, ffi.Pointer<GLogField>, int, ffi.Pointer)>();

  int g_log_writer_standard_streams(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    ffi.Pointer user_data,
  ) {
    return _g_log_writer_standard_streams(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_standard_streamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              ffi.Pointer)>>('g_log_writer_standard_streams');
  late final _g_log_writer_standard_streams =
      _g_log_writer_standard_streamsPtr.asFunction<
          int Function(int, ffi.Pointer<GLogField>, int, ffi.Pointer)>();

  int g_log_writer_default(
    int log_level,
    ffi.Pointer<GLogField> fields,
    int n_fields,
    ffi.Pointer user_data,
  ) {
    return _g_log_writer_default(
      log_level,
      fields,
      n_fields,
      user_data,
    );
  }

  late final _g_log_writer_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<GLogField>, gsize,
              ffi.Pointer)>>('g_log_writer_default');
  late final _g_log_writer_default = _g_log_writer_defaultPtr.asFunction<
      int Function(int, ffi.Pointer<GLogField>, int, ffi.Pointer)>();

  void g_log_writer_default_set_use_stderr(
    int use_stderr,
  ) {
    return _g_log_writer_default_set_use_stderr(
      use_stderr,
    );
  }

  late final _g_log_writer_default_set_use_stderrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'g_log_writer_default_set_use_stderr');
  late final _g_log_writer_default_set_use_stderr =
      _g_log_writer_default_set_use_stderrPtr.asFunction<void Function(int)>();

  int g_log_writer_default_would_drop(
    int log_level,
    ffi.Pointer<ffi.Char> log_domain,
  ) {
    return _g_log_writer_default_would_drop(
      log_level,
      log_domain,
    );
  }

  late final _g_log_writer_default_would_dropPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Int32, ffi.Pointer<ffi.Char>)>>(
      'g_log_writer_default_would_drop');
  late final _g_log_writer_default_would_drop =
      _g_log_writer_default_would_dropPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  void g_log_writer_default_set_debug_domains(
    ffi.Pointer<ffi.Pointer<ffi.Char>> domains,
  ) {
    return _g_log_writer_default_set_debug_domains(
      domains,
    );
  }

  late final _g_log_writer_default_set_debug_domainsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'g_log_writer_default_set_debug_domains');
  late final _g_log_writer_default_set_debug_domains =
      _g_log_writer_default_set_debug_domainsPtr
          .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int g_log_get_debug_enabled() {
    return _g_log_get_debug_enabled();
  }

  late final _g_log_get_debug_enabledPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_log_get_debug_enabled');
  late final _g_log_get_debug_enabled =
      _g_log_get_debug_enabledPtr.asFunction<int Function()>();

  void g_log_set_debug_enabled(
    int enabled,
  ) {
    return _g_log_set_debug_enabled(
      enabled,
    );
  }

  late final _g_log_set_debug_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'g_log_set_debug_enabled');
  late final _g_log_set_debug_enabled =
      _g_log_set_debug_enabledPtr.asFunction<void Function(int)>();

  void _g_log_fallback_handler(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer unused_data,
  ) {
    return __g_log_fallback_handler(
      log_domain,
      log_level,
      message,
      unused_data,
    );
  }

  late final __g_log_fallback_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>, ffi.Pointer)>>('_g_log_fallback_handler');
  late final __g_log_fallback_handler = __g_log_fallback_handlerPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, ffi.Pointer)>();

  void g_return_if_fail_warning(
    ffi.Pointer<ffi.Char> log_domain,
    ffi.Pointer<ffi.Char> pretty_function,
    ffi.Pointer<ffi.Char> expression,
  ) {
    return _g_return_if_fail_warning(
      log_domain,
      pretty_function,
      expression,
    );
  }

  late final _g_return_if_fail_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_return_if_fail_warning');
  late final _g_return_if_fail_warning =
      _g_return_if_fail_warningPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_warn_message(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> warnexpr,
  ) {
    return _g_warn_message(
      domain,
      file,
      line,
      func,
      warnexpr,
    );
  }

  late final _g_warn_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_warn_message');
  late final _g_warn_message = _g_warn_messagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_assert_warning(
    ffi.Pointer<ffi.Char> log_domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> pretty_function,
    ffi.Pointer<ffi.Char> expression,
  ) {
    return _g_assert_warning(
      log_domain,
      file,
      line,
      pretty_function,
      expression,
    );
  }

  late final _g_assert_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assert_warning');
  late final _g_assert_warning = _g_assert_warningPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_log_structured_standard(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> message_format,
  ) {
    return _g_log_structured_standard(
      log_domain,
      log_level,
      file,
      line,
      func,
      message_format,
    );
  }

  late final _g_log_structured_standardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_log_structured_standard');
  late final _g_log_structured_standard =
      _g_log_structured_standardPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_print(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_print(
      format,
    );
  }

  late final _g_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_print');
  late final _g_print =
      _g_printPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  GPrintFunc g_set_print_handler(
    GPrintFunc func,
  ) {
    return _g_set_print_handler(
      func,
    );
  }

  late final _g_set_print_handlerPtr =
      _lookup<ffi.NativeFunction<GPrintFunc Function(GPrintFunc)>>(
          'g_set_print_handler');
  late final _g_set_print_handler =
      _g_set_print_handlerPtr.asFunction<GPrintFunc Function(GPrintFunc)>();

  void g_printerr(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_printerr(
      format,
    );
  }

  late final _g_printerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_printerr');
  late final _g_printerr =
      _g_printerrPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  GPrintFunc g_set_printerr_handler(
    GPrintFunc func,
  ) {
    return _g_set_printerr_handler(
      func,
    );
  }

  late final _g_set_printerr_handlerPtr =
      _lookup<ffi.NativeFunction<GPrintFunc Function(GPrintFunc)>>(
          'g_set_printerr_handler');
  late final _g_set_printerr_handler =
      _g_set_printerr_handlerPtr.asFunction<GPrintFunc Function(GPrintFunc)>();

  int g_option_error_quark() {
    return _g_option_error_quark();
  }

  late final _g_option_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_option_error_quark');
  late final _g_option_error_quark =
      _g_option_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GOptionContext> g_option_context_new(
    ffi.Pointer<ffi.Char> parameter_string,
  ) {
    return _g_option_context_new(
      parameter_string,
    );
  }

  late final _g_option_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionContext> Function(
              ffi.Pointer<ffi.Char>)>>('g_option_context_new');
  late final _g_option_context_new = _g_option_context_newPtr.asFunction<
      ffi.Pointer<GOptionContext> Function(ffi.Pointer<ffi.Char>)>();

  void g_option_context_set_summary(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<ffi.Char> summary,
  ) {
    return _g_option_context_set_summary(
      context,
      summary,
    );
  }

  late final _g_option_context_set_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<ffi.Char>)>>('g_option_context_set_summary');
  late final _g_option_context_set_summary =
      _g_option_context_set_summaryPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_option_context_get_summary(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_summary(
      context,
    );
  }

  late final _g_option_context_get_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GOptionContext>)>>('g_option_context_get_summary');
  late final _g_option_context_get_summary =
      _g_option_context_get_summaryPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_description(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _g_option_context_set_description(
      context,
      description,
    );
  }

  late final _g_option_context_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<ffi.Char>)>>('g_option_context_set_description');
  late final _g_option_context_set_description =
      _g_option_context_set_descriptionPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_option_context_get_description(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_description(
      context,
    );
  }

  late final _g_option_context_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_description');
  late final _g_option_context_get_description =
      _g_option_context_get_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_free(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_free(
      context,
    );
  }

  late final _g_option_context_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_free');
  late final _g_option_context_free = _g_option_context_freePtr
      .asFunction<void Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_help_enabled(
    ffi.Pointer<GOptionContext> context,
    int help_enabled,
  ) {
    return _g_option_context_set_help_enabled(
      context,
      help_enabled,
    );
  }

  late final _g_option_context_set_help_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              gboolean)>>('g_option_context_set_help_enabled');
  late final _g_option_context_set_help_enabled =
      _g_option_context_set_help_enabledPtr
          .asFunction<void Function(ffi.Pointer<GOptionContext>, int)>();

  int g_option_context_get_help_enabled(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_help_enabled(
      context,
    );
  }

  late final _g_option_context_get_help_enabledPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_help_enabled');
  late final _g_option_context_get_help_enabled =
      _g_option_context_get_help_enabledPtr
          .asFunction<int Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_ignore_unknown_options(
    ffi.Pointer<GOptionContext> context,
    int ignore_unknown,
  ) {
    return _g_option_context_set_ignore_unknown_options(
      context,
      ignore_unknown,
    );
  }

  late final _g_option_context_set_ignore_unknown_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              gboolean)>>('g_option_context_set_ignore_unknown_options');
  late final _g_option_context_set_ignore_unknown_options =
      _g_option_context_set_ignore_unknown_optionsPtr
          .asFunction<void Function(ffi.Pointer<GOptionContext>, int)>();

  int g_option_context_get_ignore_unknown_options(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_ignore_unknown_options(
      context,
    );
  }

  late final _g_option_context_get_ignore_unknown_optionsPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_ignore_unknown_options');
  late final _g_option_context_get_ignore_unknown_options =
      _g_option_context_get_ignore_unknown_optionsPtr
          .asFunction<int Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_set_strict_posix(
    ffi.Pointer<GOptionContext> context,
    int strict_posix,
  ) {
    return _g_option_context_set_strict_posix(
      context,
      strict_posix,
    );
  }

  late final _g_option_context_set_strict_posixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              gboolean)>>('g_option_context_set_strict_posix');
  late final _g_option_context_set_strict_posix =
      _g_option_context_set_strict_posixPtr
          .asFunction<void Function(ffi.Pointer<GOptionContext>, int)>();

  int g_option_context_get_strict_posix(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_strict_posix(
      context,
    );
  }

  late final _g_option_context_get_strict_posixPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GOptionContext>)>>(
      'g_option_context_get_strict_posix');
  late final _g_option_context_get_strict_posix =
      _g_option_context_get_strict_posixPtr
          .asFunction<int Function(ffi.Pointer<GOptionContext>)>();

  void g_option_context_add_main_entries(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionEntry> entries,
    ffi.Pointer<ffi.Char> translation_domain,
  ) {
    return _g_option_context_add_main_entries(
      context,
      entries,
      translation_domain,
    );
  }

  late final _g_option_context_add_main_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOptionContext>,
              ffi.Pointer<GOptionEntry>,
              ffi.Pointer<ffi.Char>)>>('g_option_context_add_main_entries');
  late final _g_option_context_add_main_entries =
      _g_option_context_add_main_entriesPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<GOptionEntry>,
              ffi.Pointer<ffi.Char>)>();

  int g_option_context_parse(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<gint> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argv,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_option_context_parse(
      context,
      argc,
      argv,
      error,
    );
  }

  late final _g_option_context_parsePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GOptionContext>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_option_context_parse');
  late final _g_option_context_parse = _g_option_context_parsePtr.asFunction<
      int Function(
          ffi.Pointer<GOptionContext>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_option_context_parse_strv(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> arguments,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_option_context_parse_strv(
      context,
      arguments,
      error,
    );
  }

  late final _g_option_context_parse_strvPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GOptionContext>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_option_context_parse_strv');
  late final _g_option_context_parse_strv =
      _g_option_context_parse_strvPtr.asFunction<
          int Function(
              ffi.Pointer<GOptionContext>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_option_context_set_translate_func(
    ffi.Pointer<GOptionContext> context,
    GTranslateFunc func,
    ffi.Pointer data,
    GDestroyNotify destroy_notify,
  ) {
    return _g_option_context_set_translate_func(
      context,
      func,
      data,
      destroy_notify,
    );
  }

  late final _g_option_context_set_translate_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOptionContext>,
              GTranslateFunc,
              ffi.Pointer,
              GDestroyNotify)>>('g_option_context_set_translate_func');
  late final _g_option_context_set_translate_func =
      _g_option_context_set_translate_funcPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, GTranslateFunc,
              ffi.Pointer, GDestroyNotify)>();

  void g_option_context_set_translation_domain(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<ffi.Char> domain,
  ) {
    return _g_option_context_set_translation_domain(
      context,
      domain,
    );
  }

  late final _g_option_context_set_translation_domainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GOptionContext>, ffi.Pointer<ffi.Char>)>>(
      'g_option_context_set_translation_domain');
  late final _g_option_context_set_translation_domain =
      _g_option_context_set_translation_domainPtr.asFunction<
          void Function(ffi.Pointer<GOptionContext>, ffi.Pointer<ffi.Char>)>();

  void g_option_context_add_group(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_context_add_group(
      context,
      group,
    );
  }

  late final _g_option_context_add_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<GOptionGroup>)>>('g_option_context_add_group');
  late final _g_option_context_add_group =
      _g_option_context_add_groupPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionContext>, ffi.Pointer<GOptionGroup>)>();

  void g_option_context_set_main_group(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_context_set_main_group(
      context,
      group,
    );
  }

  late final _g_option_context_set_main_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionContext>,
              ffi.Pointer<GOptionGroup>)>>('g_option_context_set_main_group');
  late final _g_option_context_set_main_group =
      _g_option_context_set_main_groupPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionContext>, ffi.Pointer<GOptionGroup>)>();

  ffi.Pointer<GOptionGroup> g_option_context_get_main_group(
    ffi.Pointer<GOptionContext> context,
  ) {
    return _g_option_context_get_main_group(
      context,
    );
  }

  late final _g_option_context_get_main_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionGroup> Function(
              ffi.Pointer<GOptionContext>)>>('g_option_context_get_main_group');
  late final _g_option_context_get_main_group =
      _g_option_context_get_main_groupPtr.asFunction<
          ffi.Pointer<GOptionGroup> Function(ffi.Pointer<GOptionContext>)>();

  ffi.Pointer<ffi.Char> g_option_context_get_help(
    ffi.Pointer<GOptionContext> context,
    int main_help,
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_context_get_help(
      context,
      main_help,
      group,
    );
  }

  late final _g_option_context_get_helpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GOptionContext>, gboolean,
              ffi.Pointer<GOptionGroup>)>>('g_option_context_get_help');
  late final _g_option_context_get_help =
      _g_option_context_get_helpPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GOptionContext>, int, ffi.Pointer<GOptionGroup>)>();

  ffi.Pointer<GOptionGroup> g_option_group_new(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> description,
    ffi.Pointer<ffi.Char> help_description,
    ffi.Pointer user_data,
    GDestroyNotify destroy,
  ) {
    return _g_option_group_new(
      name,
      description,
      help_description,
      user_data,
      destroy,
    );
  }

  late final _g_option_group_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionGroup> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              GDestroyNotify)>>('g_option_group_new');
  late final _g_option_group_new = _g_option_group_newPtr.asFunction<
      ffi.Pointer<GOptionGroup> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer,
          GDestroyNotify)>();

  void g_option_group_set_parse_hooks(
    ffi.Pointer<GOptionGroup> group,
    GOptionParseFunc pre_parse_func,
    GOptionParseFunc post_parse_func,
  ) {
    return _g_option_group_set_parse_hooks(
      group,
      pre_parse_func,
      post_parse_func,
    );
  }

  late final _g_option_group_set_parse_hooksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>, GOptionParseFunc,
              GOptionParseFunc)>>('g_option_group_set_parse_hooks');
  late final _g_option_group_set_parse_hooks =
      _g_option_group_set_parse_hooksPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionGroup>, GOptionParseFunc, GOptionParseFunc)>();

  void g_option_group_set_error_hook(
    ffi.Pointer<GOptionGroup> group,
    GOptionErrorFunc error_func,
  ) {
    return _g_option_group_set_error_hook(
      group,
      error_func,
    );
  }

  late final _g_option_group_set_error_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>,
              GOptionErrorFunc)>>('g_option_group_set_error_hook');
  late final _g_option_group_set_error_hook = _g_option_group_set_error_hookPtr
      .asFunction<void Function(ffi.Pointer<GOptionGroup>, GOptionErrorFunc)>();

  void g_option_group_free(
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_group_free(
      group,
    );
  }

  late final _g_option_group_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOptionGroup>)>>(
          'g_option_group_free');
  late final _g_option_group_free = _g_option_group_freePtr
      .asFunction<void Function(ffi.Pointer<GOptionGroup>)>();

  ffi.Pointer<GOptionGroup> g_option_group_ref(
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_group_ref(
      group,
    );
  }

  late final _g_option_group_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GOptionGroup> Function(
              ffi.Pointer<GOptionGroup>)>>('g_option_group_ref');
  late final _g_option_group_ref = _g_option_group_refPtr.asFunction<
      ffi.Pointer<GOptionGroup> Function(ffi.Pointer<GOptionGroup>)>();

  void g_option_group_unref(
    ffi.Pointer<GOptionGroup> group,
  ) {
    return _g_option_group_unref(
      group,
    );
  }

  late final _g_option_group_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GOptionGroup>)>>(
          'g_option_group_unref');
  late final _g_option_group_unref = _g_option_group_unrefPtr
      .asFunction<void Function(ffi.Pointer<GOptionGroup>)>();

  void g_option_group_add_entries(
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer<GOptionEntry> entries,
  ) {
    return _g_option_group_add_entries(
      group,
      entries,
    );
  }

  late final _g_option_group_add_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>,
              ffi.Pointer<GOptionEntry>)>>('g_option_group_add_entries');
  late final _g_option_group_add_entries =
      _g_option_group_add_entriesPtr.asFunction<
          void Function(
              ffi.Pointer<GOptionGroup>, ffi.Pointer<GOptionEntry>)>();

  void g_option_group_set_translate_func(
    ffi.Pointer<GOptionGroup> group,
    GTranslateFunc func,
    ffi.Pointer data,
    GDestroyNotify destroy_notify,
  ) {
    return _g_option_group_set_translate_func(
      group,
      func,
      data,
      destroy_notify,
    );
  }

  late final _g_option_group_set_translate_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GOptionGroup>,
              GTranslateFunc,
              ffi.Pointer,
              GDestroyNotify)>>('g_option_group_set_translate_func');
  late final _g_option_group_set_translate_func =
      _g_option_group_set_translate_funcPtr.asFunction<
          void Function(ffi.Pointer<GOptionGroup>, GTranslateFunc, ffi.Pointer,
              GDestroyNotify)>();

  void g_option_group_set_translation_domain(
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer<ffi.Char> domain,
  ) {
    return _g_option_group_set_translation_domain(
      group,
      domain,
    );
  }

  late final _g_option_group_set_translation_domainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GOptionGroup>,
              ffi.Pointer<ffi.Char>)>>('g_option_group_set_translation_domain');
  late final _g_option_group_set_translation_domain =
      _g_option_group_set_translation_domainPtr.asFunction<
          void Function(ffi.Pointer<GOptionGroup>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GPathBuf> g_path_buf_new() {
    return _g_path_buf_new();
  }

  late final _g_path_buf_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPathBuf> Function()>>(
          'g_path_buf_new');
  late final _g_path_buf_new =
      _g_path_buf_newPtr.asFunction<ffi.Pointer<GPathBuf> Function()>();

  ffi.Pointer<GPathBuf> g_path_buf_new_from_path(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _g_path_buf_new_from_path(
      path,
    );
  }

  late final _g_path_buf_new_from_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPathBuf> Function(
              ffi.Pointer<ffi.Char>)>>('g_path_buf_new_from_path');
  late final _g_path_buf_new_from_path = _g_path_buf_new_from_pathPtr
      .asFunction<ffi.Pointer<GPathBuf> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GPathBuf> g_path_buf_init(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_init(
      buf,
    );
  }

  late final _g_path_buf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPathBuf> Function(
              ffi.Pointer<GPathBuf>)>>('g_path_buf_init');
  late final _g_path_buf_init = _g_path_buf_initPtr
      .asFunction<ffi.Pointer<GPathBuf> Function(ffi.Pointer<GPathBuf>)>();

  ffi.Pointer<GPathBuf> g_path_buf_init_from_path(
    ffi.Pointer<GPathBuf> buf,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _g_path_buf_init_from_path(
      buf,
      path,
    );
  }

  late final _g_path_buf_init_from_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPathBuf> Function(ffi.Pointer<GPathBuf>,
              ffi.Pointer<ffi.Char>)>>('g_path_buf_init_from_path');
  late final _g_path_buf_init_from_path =
      _g_path_buf_init_from_pathPtr.asFunction<
          ffi.Pointer<GPathBuf> Function(
              ffi.Pointer<GPathBuf>, ffi.Pointer<ffi.Char>)>();

  void g_path_buf_clear(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_clear(
      buf,
    );
  }

  late final _g_path_buf_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPathBuf>)>>(
          'g_path_buf_clear');
  late final _g_path_buf_clear =
      _g_path_buf_clearPtr.asFunction<void Function(ffi.Pointer<GPathBuf>)>();

  ffi.Pointer<ffi.Char> g_path_buf_clear_to_path(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_clear_to_path(
      buf,
    );
  }

  late final _g_path_buf_clear_to_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GPathBuf>)>>('g_path_buf_clear_to_path');
  late final _g_path_buf_clear_to_path = _g_path_buf_clear_to_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GPathBuf>)>();

  void g_path_buf_free(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_free(
      buf,
    );
  }

  late final _g_path_buf_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPathBuf>)>>(
          'g_path_buf_free');
  late final _g_path_buf_free =
      _g_path_buf_freePtr.asFunction<void Function(ffi.Pointer<GPathBuf>)>();

  ffi.Pointer<ffi.Char> g_path_buf_free_to_path(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_free_to_path(
      buf,
    );
  }

  late final _g_path_buf_free_to_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GPathBuf>)>>('g_path_buf_free_to_path');
  late final _g_path_buf_free_to_path = _g_path_buf_free_to_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GPathBuf>)>();

  ffi.Pointer<GPathBuf> g_path_buf_copy(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_copy(
      buf,
    );
  }

  late final _g_path_buf_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPathBuf> Function(
              ffi.Pointer<GPathBuf>)>>('g_path_buf_copy');
  late final _g_path_buf_copy = _g_path_buf_copyPtr
      .asFunction<ffi.Pointer<GPathBuf> Function(ffi.Pointer<GPathBuf>)>();

  ffi.Pointer<GPathBuf> g_path_buf_push(
    ffi.Pointer<GPathBuf> buf,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _g_path_buf_push(
      buf,
      path,
    );
  }

  late final _g_path_buf_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPathBuf> Function(ffi.Pointer<GPathBuf>,
              ffi.Pointer<ffi.Char>)>>('g_path_buf_push');
  late final _g_path_buf_push = _g_path_buf_pushPtr.asFunction<
      ffi.Pointer<GPathBuf> Function(
          ffi.Pointer<GPathBuf>, ffi.Pointer<ffi.Char>)>();

  int g_path_buf_pop(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_pop(
      buf,
    );
  }

  late final _g_path_buf_popPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GPathBuf>)>>(
          'g_path_buf_pop');
  late final _g_path_buf_pop =
      _g_path_buf_popPtr.asFunction<int Function(ffi.Pointer<GPathBuf>)>();

  int g_path_buf_set_filename(
    ffi.Pointer<GPathBuf> buf,
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _g_path_buf_set_filename(
      buf,
      file_name,
    );
  }

  late final _g_path_buf_set_filenamePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPathBuf>,
              ffi.Pointer<ffi.Char>)>>('g_path_buf_set_filename');
  late final _g_path_buf_set_filename = _g_path_buf_set_filenamePtr
      .asFunction<int Function(ffi.Pointer<GPathBuf>, ffi.Pointer<ffi.Char>)>();

  int g_path_buf_set_extension(
    ffi.Pointer<GPathBuf> buf,
    ffi.Pointer<ffi.Char> extension1,
  ) {
    return _g_path_buf_set_extension(
      buf,
      extension1,
    );
  }

  late final _g_path_buf_set_extensionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPathBuf>,
              ffi.Pointer<ffi.Char>)>>('g_path_buf_set_extension');
  late final _g_path_buf_set_extension = _g_path_buf_set_extensionPtr
      .asFunction<int Function(ffi.Pointer<GPathBuf>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_path_buf_to_path(
    ffi.Pointer<GPathBuf> buf,
  ) {
    return _g_path_buf_to_path(
      buf,
    );
  }

  late final _g_path_buf_to_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GPathBuf>)>>('g_path_buf_to_path');
  late final _g_path_buf_to_path = _g_path_buf_to_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GPathBuf>)>();

  int g_path_buf_equal(
    gconstpointer v1,
    gconstpointer v2,
  ) {
    return _g_path_buf_equal(
      v1,
      v2,
    );
  }

  late final _g_path_buf_equalPtr = _lookup<
          ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>(
      'g_path_buf_equal');
  late final _g_path_buf_equal = _g_path_buf_equalPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GPatternSpec> g_pattern_spec_new(
    ffi.Pointer<ffi.Char> pattern,
  ) {
    return _g_pattern_spec_new(
      pattern,
    );
  }

  late final _g_pattern_spec_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPatternSpec> Function(
              ffi.Pointer<ffi.Char>)>>('g_pattern_spec_new');
  late final _g_pattern_spec_new = _g_pattern_spec_newPtr
      .asFunction<ffi.Pointer<GPatternSpec> Function(ffi.Pointer<ffi.Char>)>();

  void g_pattern_spec_free(
    ffi.Pointer<GPatternSpec> pspec,
  ) {
    return _g_pattern_spec_free(
      pspec,
    );
  }

  late final _g_pattern_spec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPatternSpec>)>>(
          'g_pattern_spec_free');
  late final _g_pattern_spec_free = _g_pattern_spec_freePtr
      .asFunction<void Function(ffi.Pointer<GPatternSpec>)>();

  ffi.Pointer<GPatternSpec> g_pattern_spec_copy(
    ffi.Pointer<GPatternSpec> pspec,
  ) {
    return _g_pattern_spec_copy(
      pspec,
    );
  }

  late final _g_pattern_spec_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GPatternSpec> Function(
              ffi.Pointer<GPatternSpec>)>>('g_pattern_spec_copy');
  late final _g_pattern_spec_copy = _g_pattern_spec_copyPtr.asFunction<
      ffi.Pointer<GPatternSpec> Function(ffi.Pointer<GPatternSpec>)>();

  int g_pattern_spec_equal(
    ffi.Pointer<GPatternSpec> pspec1,
    ffi.Pointer<GPatternSpec> pspec2,
  ) {
    return _g_pattern_spec_equal(
      pspec1,
      pspec2,
    );
  }

  late final _g_pattern_spec_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>,
              ffi.Pointer<GPatternSpec>)>>('g_pattern_spec_equal');
  late final _g_pattern_spec_equal = _g_pattern_spec_equalPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, ffi.Pointer<GPatternSpec>)>();

  int g_pattern_spec_match(
    ffi.Pointer<GPatternSpec> pspec,
    int string_length,
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> string_reversed,
  ) {
    return _g_pattern_spec_match(
      pspec,
      string_length,
      string,
      string_reversed,
    );
  }

  late final _g_pattern_spec_matchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPatternSpec>,
              gsize,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_pattern_spec_match');
  late final _g_pattern_spec_match = _g_pattern_spec_matchPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int g_pattern_spec_match_string(
    ffi.Pointer<GPatternSpec> pspec,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_pattern_spec_match_string(
      pspec,
      string,
    );
  }

  late final _g_pattern_spec_match_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>,
              ffi.Pointer<ffi.Char>)>>('g_pattern_spec_match_string');
  late final _g_pattern_spec_match_string =
      _g_pattern_spec_match_stringPtr.asFunction<
          int Function(ffi.Pointer<GPatternSpec>, ffi.Pointer<ffi.Char>)>();

  int g_pattern_match(
    ffi.Pointer<GPatternSpec> pspec,
    int string_length,
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Char> string_reversed,
  ) {
    return _g_pattern_match(
      pspec,
      string_length,
      string,
      string_reversed,
    );
  }

  late final _g_pattern_matchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GPatternSpec>,
              guint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_pattern_match');
  late final _g_pattern_match = _g_pattern_matchPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int g_pattern_match_string(
    ffi.Pointer<GPatternSpec> pspec,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_pattern_match_string(
      pspec,
      string,
    );
  }

  late final _g_pattern_match_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GPatternSpec>,
              ffi.Pointer<ffi.Char>)>>('g_pattern_match_string');
  late final _g_pattern_match_string = _g_pattern_match_stringPtr.asFunction<
      int Function(ffi.Pointer<GPatternSpec>, ffi.Pointer<ffi.Char>)>();

  int g_pattern_match_simple(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_pattern_match_simple(
      pattern,
      string,
    );
  }

  late final _g_pattern_match_simplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_pattern_match_simple');
  late final _g_pattern_match_simple = _g_pattern_match_simplePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int g_spaced_primes_closest(
    int num,
  ) {
    return _g_spaced_primes_closest(
      num,
    );
  }

  late final _g_spaced_primes_closestPtr =
      _lookup<ffi.NativeFunction<guint Function(guint)>>(
          'g_spaced_primes_closest');
  late final _g_spaced_primes_closest =
      _g_spaced_primes_closestPtr.asFunction<int Function(int)>();

  void g_qsort_with_data(
    gconstpointer pbase,
    int total_elems,
    int size,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_qsort_with_data(
      pbase,
      total_elems,
      size,
      compare_func,
      user_data,
    );
  }

  late final _g_qsort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gconstpointer, gint, gsize, GCompareDataFunc,
              ffi.Pointer)>>('g_qsort_with_data');
  late final _g_qsort_with_data = _g_qsort_with_dataPtr.asFunction<
      void Function(gconstpointer, int, int, GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GQueue> g_queue_new() {
    return _g_queue_new();
  }

  late final _g_queue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GQueue> Function()>>(
          'g_queue_new');
  late final _g_queue_new =
      _g_queue_newPtr.asFunction<ffi.Pointer<GQueue> Function()>();

  void g_queue_free(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_free(
      queue,
    );
  }

  late final _g_queue_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_free');
  late final _g_queue_free =
      _g_queue_freePtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  void g_queue_free_full(
    ffi.Pointer<GQueue> queue,
    GDestroyNotify free_func,
  ) {
    return _g_queue_free_full(
      queue,
      free_func,
    );
  }

  late final _g_queue_free_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, GDestroyNotify)>>('g_queue_free_full');
  late final _g_queue_free_full = _g_queue_free_fullPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, GDestroyNotify)>();

  void g_queue_init(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_init(
      queue,
    );
  }

  late final _g_queue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_init');
  late final _g_queue_init =
      _g_queue_initPtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  void g_queue_clear(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_clear(
      queue,
    );
  }

  late final _g_queue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_clear');
  late final _g_queue_clear =
      _g_queue_clearPtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  int g_queue_is_empty(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_is_empty(
      queue,
    );
  }

  late final _g_queue_is_emptyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GQueue>)>>(
          'g_queue_is_empty');
  late final _g_queue_is_empty =
      _g_queue_is_emptyPtr.asFunction<int Function(ffi.Pointer<GQueue>)>();

  void g_queue_clear_full(
    ffi.Pointer<GQueue> queue,
    GDestroyNotify free_func,
  ) {
    return _g_queue_clear_full(
      queue,
      free_func,
    );
  }

  late final _g_queue_clear_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, GDestroyNotify)>>('g_queue_clear_full');
  late final _g_queue_clear_full = _g_queue_clear_fullPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, GDestroyNotify)>();

  int g_queue_get_length(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_get_length(
      queue,
    );
  }

  late final _g_queue_get_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GQueue>)>>(
          'g_queue_get_length');
  late final _g_queue_get_length =
      _g_queue_get_lengthPtr.asFunction<int Function(ffi.Pointer<GQueue>)>();

  void g_queue_reverse(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_reverse(
      queue,
    );
  }

  late final _g_queue_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>)>>(
          'g_queue_reverse');
  late final _g_queue_reverse =
      _g_queue_reversePtr.asFunction<void Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GQueue> g_queue_copy(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_copy(
      queue,
    );
  }

  late final _g_queue_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GQueue> Function(ffi.Pointer<GQueue>)>>('g_queue_copy');
  late final _g_queue_copy = _g_queue_copyPtr
      .asFunction<ffi.Pointer<GQueue> Function(ffi.Pointer<GQueue>)>();

  void g_queue_foreach(
    ffi.Pointer<GQueue> queue,
    GFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_queue_foreach(
      queue,
      func,
      user_data,
    );
  }

  late final _g_queue_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, GFunc, ffi.Pointer)>>('g_queue_foreach');
  late final _g_queue_foreach = _g_queue_foreachPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, GFunc, ffi.Pointer)>();

  ffi.Pointer<GList> g_queue_find(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_find(
      queue,
      data,
    );
  }

  late final _g_queue_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GQueue>, gconstpointer)>>('g_queue_find');
  late final _g_queue_find = _g_queue_findPtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, gconstpointer)>();

  ffi.Pointer<GList> g_queue_find_custom(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
    GCompareFunc func,
  ) {
    return _g_queue_find_custom(
      queue,
      data,
      func,
    );
  }

  late final _g_queue_find_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, gconstpointer,
              GCompareFunc)>>('g_queue_find_custom');
  late final _g_queue_find_custom = _g_queue_find_customPtr.asFunction<
      ffi.Pointer<GList> Function(
          ffi.Pointer<GQueue>, gconstpointer, GCompareFunc)>();

  void g_queue_sort(
    ffi.Pointer<GQueue> queue,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_queue_sort(
      queue,
      compare_func,
      user_data,
    );
  }

  late final _g_queue_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, GCompareDataFunc,
              ffi.Pointer)>>('g_queue_sort');
  late final _g_queue_sort = _g_queue_sortPtr.asFunction<
      void Function(ffi.Pointer<GQueue>, GCompareDataFunc, ffi.Pointer)>();

  void g_queue_push_head(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer data,
  ) {
    return _g_queue_push_head(
      queue,
      data,
    );
  }

  late final _g_queue_push_headPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer)>>(
      'g_queue_push_head');
  late final _g_queue_push_head = _g_queue_push_headPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer)>();

  void g_queue_push_tail(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer data,
  ) {
    return _g_queue_push_tail(
      queue,
      data,
    );
  }

  late final _g_queue_push_tailPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer)>>(
      'g_queue_push_tail');
  late final _g_queue_push_tail = _g_queue_push_tailPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer)>();

  void g_queue_push_nth(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer data,
    int n,
  ) {
    return _g_queue_push_nth(
      queue,
      data,
      n,
    );
  }

  late final _g_queue_push_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, ffi.Pointer, gint)>>('g_queue_push_nth');
  late final _g_queue_push_nth = _g_queue_push_nthPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer, int)>();

  ffi.Pointer g_queue_pop_head(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_head(
      queue,
    );
  }

  late final _g_queue_pop_headPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_pop_head');
  late final _g_queue_pop_head = _g_queue_pop_headPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer g_queue_pop_tail(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_tail(
      queue,
    );
  }

  late final _g_queue_pop_tailPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_pop_tail');
  late final _g_queue_pop_tail = _g_queue_pop_tailPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer g_queue_pop_nth(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_pop_nth(
      queue,
      n,
    );
  }

  late final _g_queue_pop_nthPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GQueue>, guint)>>(
      'g_queue_pop_nth');
  late final _g_queue_pop_nth = _g_queue_pop_nthPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GQueue>, int)>();

  ffi.Pointer g_queue_peek_head(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_head(
      queue,
    );
  }

  late final _g_queue_peek_headPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_peek_head');
  late final _g_queue_peek_head = _g_queue_peek_headPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer g_queue_peek_tail(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_tail(
      queue,
    );
  }

  late final _g_queue_peek_tailPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>>(
          'g_queue_peek_tail');
  late final _g_queue_peek_tail = _g_queue_peek_tailPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer g_queue_peek_nth(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_peek_nth(
      queue,
      n,
    );
  }

  late final _g_queue_peek_nthPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GQueue>, guint)>>(
      'g_queue_peek_nth');
  late final _g_queue_peek_nth = _g_queue_peek_nthPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GQueue>, int)>();

  int g_queue_index(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_index(
      queue,
      data,
    );
  }

  late final _g_queue_indexPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GQueue>, gconstpointer)>>('g_queue_index');
  late final _g_queue_index = _g_queue_indexPtr
      .asFunction<int Function(ffi.Pointer<GQueue>, gconstpointer)>();

  int g_queue_remove(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_remove(
      queue,
      data,
    );
  }

  late final _g_queue_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GQueue>, gconstpointer)>>('g_queue_remove');
  late final _g_queue_remove = _g_queue_removePtr
      .asFunction<int Function(ffi.Pointer<GQueue>, gconstpointer)>();

  int g_queue_remove_all(
    ffi.Pointer<GQueue> queue,
    gconstpointer data,
  ) {
    return _g_queue_remove_all(
      queue,
      data,
    );
  }

  late final _g_queue_remove_allPtr = _lookup<
          ffi
          .NativeFunction<guint Function(ffi.Pointer<GQueue>, gconstpointer)>>(
      'g_queue_remove_all');
  late final _g_queue_remove_all = _g_queue_remove_allPtr
      .asFunction<int Function(ffi.Pointer<GQueue>, gconstpointer)>();

  void g_queue_insert_before(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    ffi.Pointer data,
  ) {
    return _g_queue_insert_before(
      queue,
      sibling,
      data,
    );
  }

  late final _g_queue_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              ffi.Pointer)>>('g_queue_insert_before');
  late final _g_queue_insert_before = _g_queue_insert_beforePtr.asFunction<
      void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>, ffi.Pointer)>();

  void g_queue_insert_before_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_insert_before_link(
      queue,
      sibling,
      link_,
    );
  }

  late final _g_queue_insert_before_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              ffi.Pointer<GList>)>>('g_queue_insert_before_link');
  late final _g_queue_insert_before_link =
      _g_queue_insert_before_linkPtr.asFunction<
          void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  void g_queue_insert_after(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    ffi.Pointer data,
  ) {
    return _g_queue_insert_after(
      queue,
      sibling,
      data,
    );
  }

  late final _g_queue_insert_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              ffi.Pointer)>>('g_queue_insert_after');
  late final _g_queue_insert_after = _g_queue_insert_afterPtr.asFunction<
      void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>, ffi.Pointer)>();

  void g_queue_insert_after_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> sibling,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_insert_after_link(
      queue,
      sibling,
      link_,
    );
  }

  late final _g_queue_insert_after_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>,
              ffi.Pointer<GList>)>>('g_queue_insert_after_link');
  late final _g_queue_insert_after_link =
      _g_queue_insert_after_linkPtr.asFunction<
          void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>, ffi.Pointer<GList>)>();

  void g_queue_insert_sorted(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer data,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_queue_insert_sorted(
      queue,
      data,
      func,
      user_data,
    );
  }

  late final _g_queue_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, ffi.Pointer, GCompareDataFunc,
              ffi.Pointer)>>('g_queue_insert_sorted');
  late final _g_queue_insert_sorted = _g_queue_insert_sortedPtr.asFunction<
      void Function(
          ffi.Pointer<GQueue>, ffi.Pointer, GCompareDataFunc, ffi.Pointer)>();

  void g_queue_push_head_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_push_head_link(
      queue,
      link_,
    );
  }

  late final _g_queue_push_head_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>,
              ffi.Pointer<GList>)>>('g_queue_push_head_link');
  late final _g_queue_push_head_link = _g_queue_push_head_linkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_push_tail_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_push_tail_link(
      queue,
      link_,
    );
  }

  late final _g_queue_push_tail_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>,
              ffi.Pointer<GList>)>>('g_queue_push_tail_link');
  late final _g_queue_push_tail_link = _g_queue_push_tail_linkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_push_nth_link(
    ffi.Pointer<GQueue> queue,
    int n,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_push_nth_link(
      queue,
      n,
      link_,
    );
  }

  late final _g_queue_push_nth_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GQueue>, gint,
              ffi.Pointer<GList>)>>('g_queue_push_nth_link');
  late final _g_queue_push_nth_link = _g_queue_push_nth_linkPtr.asFunction<
      void Function(ffi.Pointer<GQueue>, int, ffi.Pointer<GList>)>();

  ffi.Pointer<GList> g_queue_pop_head_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_head_link(
      queue,
    );
  }

  late final _g_queue_pop_head_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_pop_head_link');
  late final _g_queue_pop_head_link = _g_queue_pop_head_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_pop_tail_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_pop_tail_link(
      queue,
    );
  }

  late final _g_queue_pop_tail_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_pop_tail_link');
  late final _g_queue_pop_tail_link = _g_queue_pop_tail_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_pop_nth_link(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_pop_nth_link(
      queue,
      n,
    );
  }

  late final _g_queue_pop_nth_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GQueue>, guint)>>('g_queue_pop_nth_link');
  late final _g_queue_pop_nth_link = _g_queue_pop_nth_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, int)>();

  ffi.Pointer<GList> g_queue_peek_head_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_head_link(
      queue,
    );
  }

  late final _g_queue_peek_head_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_peek_head_link');
  late final _g_queue_peek_head_link = _g_queue_peek_head_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_peek_tail_link(
    ffi.Pointer<GQueue> queue,
  ) {
    return _g_queue_peek_tail_link(
      queue,
    );
  }

  late final _g_queue_peek_tail_linkPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>>(
      'g_queue_peek_tail_link');
  late final _g_queue_peek_tail_link = _g_queue_peek_tail_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>)>();

  ffi.Pointer<GList> g_queue_peek_nth_link(
    ffi.Pointer<GQueue> queue,
    int n,
  ) {
    return _g_queue_peek_nth_link(
      queue,
      n,
    );
  }

  late final _g_queue_peek_nth_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GQueue>, guint)>>('g_queue_peek_nth_link');
  late final _g_queue_peek_nth_link = _g_queue_peek_nth_linkPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GQueue>, int)>();

  int g_queue_link_index(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_link_index(
      queue,
      link_,
    );
  }

  late final _g_queue_link_indexPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>)>>('g_queue_link_index');
  late final _g_queue_link_index = _g_queue_link_indexPtr
      .asFunction<int Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_unlink(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_unlink(
      queue,
      link_,
    );
  }

  late final _g_queue_unlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>)>>('g_queue_unlink');
  late final _g_queue_unlink = _g_queue_unlinkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  void g_queue_delete_link(
    ffi.Pointer<GQueue> queue,
    ffi.Pointer<GList> link_,
  ) {
    return _g_queue_delete_link(
      queue,
      link_,
    );
  }

  late final _g_queue_delete_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GQueue>, ffi.Pointer<GList>)>>('g_queue_delete_link');
  late final _g_queue_delete_link = _g_queue_delete_linkPtr
      .asFunction<void Function(ffi.Pointer<GQueue>, ffi.Pointer<GList>)>();

  ffi.Pointer<GRand> g_rand_new_with_seed(
    int seed,
  ) {
    return _g_rand_new_with_seed(
      seed,
    );
  }

  late final _g_rand_new_with_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GRand> Function(guint32)>>(
          'g_rand_new_with_seed');
  late final _g_rand_new_with_seed =
      _g_rand_new_with_seedPtr.asFunction<ffi.Pointer<GRand> Function(int)>();

  ffi.Pointer<GRand> g_rand_new_with_seed_array(
    ffi.Pointer<guint32> seed,
    int seed_length,
  ) {
    return _g_rand_new_with_seed_array(
      seed,
      seed_length,
    );
  }

  late final _g_rand_new_with_seed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRand> Function(
              ffi.Pointer<guint32>, guint)>>('g_rand_new_with_seed_array');
  late final _g_rand_new_with_seed_array = _g_rand_new_with_seed_arrayPtr
      .asFunction<ffi.Pointer<GRand> Function(ffi.Pointer<guint32>, int)>();

  ffi.Pointer<GRand> g_rand_new() {
    return _g_rand_new();
  }

  late final _g_rand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GRand> Function()>>('g_rand_new');
  late final _g_rand_new =
      _g_rand_newPtr.asFunction<ffi.Pointer<GRand> Function()>();

  void g_rand_free(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_free(
      rand_,
    );
  }

  late final _g_rand_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRand>)>>(
          'g_rand_free');
  late final _g_rand_free =
      _g_rand_freePtr.asFunction<void Function(ffi.Pointer<GRand>)>();

  ffi.Pointer<GRand> g_rand_copy(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_copy(
      rand_,
    );
  }

  late final _g_rand_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GRand> Function(ffi.Pointer<GRand>)>>(
      'g_rand_copy');
  late final _g_rand_copy = _g_rand_copyPtr
      .asFunction<ffi.Pointer<GRand> Function(ffi.Pointer<GRand>)>();

  void g_rand_set_seed(
    ffi.Pointer<GRand> rand_,
    int seed,
  ) {
    return _g_rand_set_seed(
      rand_,
      seed,
    );
  }

  late final _g_rand_set_seedPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRand>, guint32)>>(
      'g_rand_set_seed');
  late final _g_rand_set_seed =
      _g_rand_set_seedPtr.asFunction<void Function(ffi.Pointer<GRand>, int)>();

  void g_rand_set_seed_array(
    ffi.Pointer<GRand> rand_,
    ffi.Pointer<guint32> seed,
    int seed_length,
  ) {
    return _g_rand_set_seed_array(
      rand_,
      seed,
      seed_length,
    );
  }

  late final _g_rand_set_seed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GRand>, ffi.Pointer<guint32>,
              guint)>>('g_rand_set_seed_array');
  late final _g_rand_set_seed_array = _g_rand_set_seed_arrayPtr.asFunction<
      void Function(ffi.Pointer<GRand>, ffi.Pointer<guint32>, int)>();

  int g_rand_int(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_int(
      rand_,
    );
  }

  late final _g_rand_intPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GRand>)>>(
          'g_rand_int');
  late final _g_rand_int =
      _g_rand_intPtr.asFunction<int Function(ffi.Pointer<GRand>)>();

  int g_rand_int_range(
    ffi.Pointer<GRand> rand_,
    int begin,
    int end,
  ) {
    return _g_rand_int_range(
      rand_,
      begin,
      end,
    );
  }

  late final _g_rand_int_rangePtr = _lookup<
          ffi
          .NativeFunction<gint32 Function(ffi.Pointer<GRand>, gint32, gint32)>>(
      'g_rand_int_range');
  late final _g_rand_int_range = _g_rand_int_rangePtr
      .asFunction<int Function(ffi.Pointer<GRand>, int, int)>();

  double g_rand_double(
    ffi.Pointer<GRand> rand_,
  ) {
    return _g_rand_double(
      rand_,
    );
  }

  late final _g_rand_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GRand>)>>(
          'g_rand_double');
  late final _g_rand_double =
      _g_rand_doublePtr.asFunction<double Function(ffi.Pointer<GRand>)>();

  double g_rand_double_range(
    ffi.Pointer<GRand> rand_,
    double begin,
    double end,
  ) {
    return _g_rand_double_range(
      rand_,
      begin,
      end,
    );
  }

  late final _g_rand_double_rangePtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(
              ffi.Pointer<GRand>, gdouble, gdouble)>>('g_rand_double_range');
  late final _g_rand_double_range = _g_rand_double_rangePtr
      .asFunction<double Function(ffi.Pointer<GRand>, double, double)>();

  void g_random_set_seed(
    int seed,
  ) {
    return _g_random_set_seed(
      seed,
    );
  }

  late final _g_random_set_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint32)>>(
          'g_random_set_seed');
  late final _g_random_set_seed =
      _g_random_set_seedPtr.asFunction<void Function(int)>();

  int g_random_int() {
    return _g_random_int();
  }

  late final _g_random_intPtr =
      _lookup<ffi.NativeFunction<guint32 Function()>>('g_random_int');
  late final _g_random_int = _g_random_intPtr.asFunction<int Function()>();

  int g_random_int_range(
    int begin,
    int end,
  ) {
    return _g_random_int_range(
      begin,
      end,
    );
  }

  late final _g_random_int_rangePtr =
      _lookup<ffi.NativeFunction<gint32 Function(gint32, gint32)>>(
          'g_random_int_range');
  late final _g_random_int_range =
      _g_random_int_rangePtr.asFunction<int Function(int, int)>();

  double g_random_double() {
    return _g_random_double();
  }

  late final _g_random_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function()>>('g_random_double');
  late final _g_random_double =
      _g_random_doublePtr.asFunction<double Function()>();

  double g_random_double_range(
    double begin,
    double end,
  ) {
    return _g_random_double_range(
      begin,
      end,
    );
  }

  late final _g_random_double_rangePtr =
      _lookup<ffi.NativeFunction<gdouble Function(gdouble, gdouble)>>(
          'g_random_double_range');
  late final _g_random_double_range =
      _g_random_double_rangePtr.asFunction<double Function(double, double)>();

  ffi.Pointer g_rc_box_alloc(
    int block_size,
  ) {
    return _g_rc_box_alloc(
      block_size,
    );
  }

  late final _g_rc_box_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>(
          'g_rc_box_alloc');
  late final _g_rc_box_alloc =
      _g_rc_box_allocPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_rc_box_alloc0(
    int block_size,
  ) {
    return _g_rc_box_alloc0(
      block_size,
    );
  }

  late final _g_rc_box_alloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>(
          'g_rc_box_alloc0');
  late final _g_rc_box_alloc0 =
      _g_rc_box_alloc0Ptr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_rc_box_dup(
    int block_size,
    gconstpointer mem_block,
  ) {
    return _g_rc_box_dup(
      block_size,
      mem_block,
    );
  }

  late final _g_rc_box_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gconstpointer)>>(
          'g_rc_box_dup');
  late final _g_rc_box_dup =
      _g_rc_box_dupPtr.asFunction<ffi.Pointer Function(int, gconstpointer)>();

  ffi.Pointer g_rc_box_acquire(
    ffi.Pointer mem_block,
  ) {
    return _g_rc_box_acquire(
      mem_block,
    );
  }

  late final _g_rc_box_acquirePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_rc_box_acquire');
  late final _g_rc_box_acquire =
      _g_rc_box_acquirePtr.asFunction<ffi.Pointer Function(ffi.Pointer)>();

  void g_rc_box_release(
    ffi.Pointer mem_block,
  ) {
    return _g_rc_box_release(
      mem_block,
    );
  }

  late final _g_rc_box_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_rc_box_release');
  late final _g_rc_box_release =
      _g_rc_box_releasePtr.asFunction<void Function(ffi.Pointer)>();

  void g_rc_box_release_full(
    ffi.Pointer mem_block,
    GDestroyNotify clear_func,
  ) {
    return _g_rc_box_release_full(
      mem_block,
      clear_func,
    );
  }

  late final _g_rc_box_release_fullPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer, GDestroyNotify)>>(
      'g_rc_box_release_full');
  late final _g_rc_box_release_full = _g_rc_box_release_fullPtr
      .asFunction<void Function(ffi.Pointer, GDestroyNotify)>();

  int g_rc_box_get_size(
    ffi.Pointer mem_block,
  ) {
    return _g_rc_box_get_size(
      mem_block,
    );
  }

  late final _g_rc_box_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer)>>(
          'g_rc_box_get_size');
  late final _g_rc_box_get_size =
      _g_rc_box_get_sizePtr.asFunction<int Function(ffi.Pointer)>();

  ffi.Pointer g_atomic_rc_box_alloc(
    int block_size,
  ) {
    return _g_atomic_rc_box_alloc(
      block_size,
    );
  }

  late final _g_atomic_rc_box_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>(
          'g_atomic_rc_box_alloc');
  late final _g_atomic_rc_box_alloc =
      _g_atomic_rc_box_allocPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_atomic_rc_box_alloc0(
    int block_size,
  ) {
    return _g_atomic_rc_box_alloc0(
      block_size,
    );
  }

  late final _g_atomic_rc_box_alloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>(
          'g_atomic_rc_box_alloc0');
  late final _g_atomic_rc_box_alloc0 =
      _g_atomic_rc_box_alloc0Ptr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_atomic_rc_box_dup(
    int block_size,
    gconstpointer mem_block,
  ) {
    return _g_atomic_rc_box_dup(
      block_size,
      mem_block,
    );
  }

  late final _g_atomic_rc_box_dupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gconstpointer)>>(
          'g_atomic_rc_box_dup');
  late final _g_atomic_rc_box_dup = _g_atomic_rc_box_dupPtr
      .asFunction<ffi.Pointer Function(int, gconstpointer)>();

  ffi.Pointer g_atomic_rc_box_acquire(
    ffi.Pointer mem_block,
  ) {
    return _g_atomic_rc_box_acquire(
      mem_block,
    );
  }

  late final _g_atomic_rc_box_acquirePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_atomic_rc_box_acquire');
  late final _g_atomic_rc_box_acquire = _g_atomic_rc_box_acquirePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer)>();

  void g_atomic_rc_box_release(
    ffi.Pointer mem_block,
  ) {
    return _g_atomic_rc_box_release(
      mem_block,
    );
  }

  late final _g_atomic_rc_box_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_atomic_rc_box_release');
  late final _g_atomic_rc_box_release =
      _g_atomic_rc_box_releasePtr.asFunction<void Function(ffi.Pointer)>();

  void g_atomic_rc_box_release_full(
    ffi.Pointer mem_block,
    GDestroyNotify clear_func,
  ) {
    return _g_atomic_rc_box_release_full(
      mem_block,
      clear_func,
    );
  }

  late final _g_atomic_rc_box_release_fullPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer, GDestroyNotify)>>(
      'g_atomic_rc_box_release_full');
  late final _g_atomic_rc_box_release_full = _g_atomic_rc_box_release_fullPtr
      .asFunction<void Function(ffi.Pointer, GDestroyNotify)>();

  int g_atomic_rc_box_get_size(
    ffi.Pointer mem_block,
  ) {
    return _g_atomic_rc_box_get_size(
      mem_block,
    );
  }

  late final _g_atomic_rc_box_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer)>>(
          'g_atomic_rc_box_get_size');
  late final _g_atomic_rc_box_get_size =
      _g_atomic_rc_box_get_sizePtr.asFunction<int Function(ffi.Pointer)>();

  void g_ref_count_init(
    ffi.Pointer<grefcount> rc,
  ) {
    return _g_ref_count_init(
      rc,
    );
  }

  late final _g_ref_count_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<grefcount>)>>(
          'g_ref_count_init');
  late final _g_ref_count_init =
      _g_ref_count_initPtr.asFunction<void Function(ffi.Pointer<grefcount>)>();

  void g_ref_count_inc(
    ffi.Pointer<grefcount> rc,
  ) {
    return _g_ref_count_inc(
      rc,
    );
  }

  late final _g_ref_count_incPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<grefcount>)>>(
          'g_ref_count_inc');
  late final _g_ref_count_inc =
      _g_ref_count_incPtr.asFunction<void Function(ffi.Pointer<grefcount>)>();

  int g_ref_count_dec(
    ffi.Pointer<grefcount> rc,
  ) {
    return _g_ref_count_dec(
      rc,
    );
  }

  late final _g_ref_count_decPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<grefcount>)>>(
          'g_ref_count_dec');
  late final _g_ref_count_dec =
      _g_ref_count_decPtr.asFunction<int Function(ffi.Pointer<grefcount>)>();

  int g_ref_count_compare(
    ffi.Pointer<grefcount> rc,
    int val,
  ) {
    return _g_ref_count_compare(
      rc,
      val,
    );
  }

  late final _g_ref_count_comparePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<grefcount>, gint)>>(
      'g_ref_count_compare');
  late final _g_ref_count_compare = _g_ref_count_comparePtr
      .asFunction<int Function(ffi.Pointer<grefcount>, int)>();

  void g_atomic_ref_count_init(
    ffi.Pointer<gatomicrefcount> arc,
  ) {
    return _g_atomic_ref_count_init(
      arc,
    );
  }

  late final _g_atomic_ref_count_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gatomicrefcount>)>>(
      'g_atomic_ref_count_init');
  late final _g_atomic_ref_count_init = _g_atomic_ref_count_initPtr
      .asFunction<void Function(ffi.Pointer<gatomicrefcount>)>();

  void g_atomic_ref_count_inc(
    ffi.Pointer<gatomicrefcount> arc,
  ) {
    return _g_atomic_ref_count_inc(
      arc,
    );
  }

  late final _g_atomic_ref_count_incPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gatomicrefcount>)>>(
      'g_atomic_ref_count_inc');
  late final _g_atomic_ref_count_inc = _g_atomic_ref_count_incPtr
      .asFunction<void Function(ffi.Pointer<gatomicrefcount>)>();

  int g_atomic_ref_count_dec(
    ffi.Pointer<gatomicrefcount> arc,
  ) {
    return _g_atomic_ref_count_dec(
      arc,
    );
  }

  late final _g_atomic_ref_count_decPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<gatomicrefcount>)>>(
      'g_atomic_ref_count_dec');
  late final _g_atomic_ref_count_dec = _g_atomic_ref_count_decPtr
      .asFunction<int Function(ffi.Pointer<gatomicrefcount>)>();

  int g_atomic_ref_count_compare(
    ffi.Pointer<gatomicrefcount> arc,
    int val,
  ) {
    return _g_atomic_ref_count_compare(
      arc,
      val,
    );
  }

  late final _g_atomic_ref_count_comparePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<gatomicrefcount>,
              gint)>>('g_atomic_ref_count_compare');
  late final _g_atomic_ref_count_compare = _g_atomic_ref_count_comparePtr
      .asFunction<int Function(ffi.Pointer<gatomicrefcount>, int)>();

  ffi.Pointer<ffi.Char> g_ref_string_new(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_new(
      str,
    );
  }

  late final _g_ref_string_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_ref_string_new');
  late final _g_ref_string_new = _g_ref_string_newPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_ref_string_new_len(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _g_ref_string_new_len(
      str,
      len,
    );
  }

  late final _g_ref_string_new_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gssize)>>('g_ref_string_new_len');
  late final _g_ref_string_new_len = _g_ref_string_new_lenPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_ref_string_new_intern(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_new_intern(
      str,
    );
  }

  late final _g_ref_string_new_internPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_ref_string_new_intern');
  late final _g_ref_string_new_intern = _g_ref_string_new_internPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_ref_string_acquire(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_acquire(
      str,
    );
  }

  late final _g_ref_string_acquirePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_ref_string_acquire');
  late final _g_ref_string_acquire = _g_ref_string_acquirePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void g_ref_string_release(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_release(
      str,
    );
  }

  late final _g_ref_string_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_ref_string_release');
  late final _g_ref_string_release = _g_ref_string_releasePtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int g_ref_string_length(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_ref_string_length(
      str,
    );
  }

  late final _g_ref_string_lengthPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<ffi.Char>)>>(
          'g_ref_string_length');
  late final _g_ref_string_length =
      _g_ref_string_lengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_regex_error_quark() {
    return _g_regex_error_quark();
  }

  late final _g_regex_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_regex_error_quark');
  late final _g_regex_error_quark =
      _g_regex_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<GRegex> g_regex_new(
    ffi.Pointer<ffi.Char> pattern,
    int compile_options,
    int match_options,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_new(
      pattern,
      compile_options,
      match_options,
      error,
    );
  }

  late final _g_regex_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRegex> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Int32, ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_new');
  late final _g_regex_new = _g_regex_newPtr.asFunction<
      ffi.Pointer<GRegex> Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GRegex> g_regex_ref(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_ref(
      regex,
    );
  }

  late final _g_regex_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRegex> Function(ffi.Pointer<GRegex>)>>('g_regex_ref');
  late final _g_regex_ref = _g_regex_refPtr
      .asFunction<ffi.Pointer<GRegex> Function(ffi.Pointer<GRegex>)>();

  void g_regex_unref(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_unref(
      regex,
    );
  }

  late final _g_regex_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRegex>)>>(
          'g_regex_unref');
  late final _g_regex_unref =
      _g_regex_unrefPtr.asFunction<void Function(ffi.Pointer<GRegex>)>();

  ffi.Pointer<ffi.Char> g_regex_get_pattern(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_pattern(
      regex,
    );
  }

  late final _g_regex_get_patternPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GRegex>)>>(
      'g_regex_get_pattern');
  late final _g_regex_get_pattern = _g_regex_get_patternPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_max_backref(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_max_backref(
      regex,
    );
  }

  late final _g_regex_get_max_backrefPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_max_backref');
  late final _g_regex_get_max_backref = _g_regex_get_max_backrefPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_capture_count(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_capture_count(
      regex,
    );
  }

  late final _g_regex_get_capture_countPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_capture_count');
  late final _g_regex_get_capture_count = _g_regex_get_capture_countPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_has_cr_or_lf(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_has_cr_or_lf(
      regex,
    );
  }

  late final _g_regex_get_has_cr_or_lfPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_has_cr_or_lf');
  late final _g_regex_get_has_cr_or_lf = _g_regex_get_has_cr_or_lfPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_max_lookbehind(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_max_lookbehind(
      regex,
    );
  }

  late final _g_regex_get_max_lookbehindPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_max_lookbehind');
  late final _g_regex_get_max_lookbehind = _g_regex_get_max_lookbehindPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_string_number(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_regex_get_string_number(
      regex,
      name,
    );
  }

  late final _g_regex_get_string_numberPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>)>>('g_regex_get_string_number');
  late final _g_regex_get_string_number = _g_regex_get_string_numberPtr
      .asFunction<int Function(ffi.Pointer<GRegex>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_regex_escape_string(
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _g_regex_escape_string(
      string,
      length,
    );
  }

  late final _g_regex_escape_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gint)>>('g_regex_escape_string');
  late final _g_regex_escape_string = _g_regex_escape_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_regex_escape_nul(
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _g_regex_escape_nul(
      string,
      length,
    );
  }

  late final _g_regex_escape_nulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, gint)>>('g_regex_escape_nul');
  late final _g_regex_escape_nul = _g_regex_escape_nulPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int g_regex_get_compile_flags(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_compile_flags(
      regex,
    );
  }

  late final _g_regex_get_compile_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_compile_flags');
  late final _g_regex_get_compile_flags = _g_regex_get_compile_flagsPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_get_match_flags(
    ffi.Pointer<GRegex> regex,
  ) {
    return _g_regex_get_match_flags(
      regex,
    );
  }

  late final _g_regex_get_match_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GRegex>)>>(
          'g_regex_get_match_flags');
  late final _g_regex_get_match_flags = _g_regex_get_match_flagsPtr
      .asFunction<int Function(ffi.Pointer<GRegex>)>();

  int g_regex_match_simple(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Char> string,
    int compile_options,
    int match_options,
  ) {
    return _g_regex_match_simple(
      pattern,
      string,
      compile_options,
      match_options,
    );
  }

  late final _g_regex_match_simplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int32, ffi.Int32)>>('g_regex_match_simple');
  late final _g_regex_match_simple = _g_regex_match_simplePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  int g_regex_match(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
  ) {
    return _g_regex_match(
      regex,
      string,
      match_options,
      match_info,
    );
  }

  late final _g_regex_matchPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>)>>('g_regex_match');
  late final _g_regex_match = _g_regex_matchPtr.asFunction<
      int Function(ffi.Pointer<GRegex>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>)>();

  int g_regex_match_full(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int string_len,
    int start_position,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_match_full(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      match_info,
      error,
    );
  }

  late final _g_regex_match_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              gssize,
              gint,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_match_full');
  late final _g_regex_match_full = _g_regex_match_fullPtr.asFunction<
      int Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_regex_match_all(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
  ) {
    return _g_regex_match_all(
      regex,
      string,
      match_options,
      match_info,
    );
  }

  late final _g_regex_match_allPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>)>>('g_regex_match_all');
  late final _g_regex_match_all = _g_regex_match_allPtr.asFunction<
      int Function(ffi.Pointer<GRegex>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>)>();

  int g_regex_match_all_full(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int string_len,
    int start_position,
    int match_options,
    ffi.Pointer<ffi.Pointer<GMatchInfo>> match_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_match_all_full(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      match_info,
      error,
    );
  }

  late final _g_regex_match_all_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              gssize,
              gint,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GMatchInfo>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_match_all_full');
  late final _g_regex_match_all_full = _g_regex_match_all_fullPtr.asFunction<
      int Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GMatchInfo>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_regex_split_simple(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Char> string,
    int compile_options,
    int match_options,
  ) {
    return _g_regex_split_simple(
      pattern,
      string,
      compile_options,
      match_options,
    );
  }

  late final _g_regex_split_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32)>>('g_regex_split_simple');
  late final _g_regex_split_simple = _g_regex_split_simplePtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_regex_split(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int match_options,
  ) {
    return _g_regex_split(
      regex,
      string,
      match_options,
    );
  }

  late final _g_regex_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('g_regex_split');
  late final _g_regex_split = _g_regex_splitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GRegex>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_regex_split_full(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int string_len,
    int start_position,
    int match_options,
    int max_tokens,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_split_full(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      max_tokens,
      error,
    );
  }

  late final _g_regex_split_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              gssize,
              gint,
              ffi.Int32,
              gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_split_full');
  late final _g_regex_split_full = _g_regex_split_fullPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_regex_replace(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int string_len,
    int start_position,
    ffi.Pointer<ffi.Char> replacement,
    int match_options,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_replace(
      regex,
      string,
      string_len,
      start_position,
      replacement,
      match_options,
      error,
    );
  }

  late final _g_regex_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              gssize,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_replace');
  late final _g_regex_replace = _g_regex_replacePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_regex_replace_literal(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int string_len,
    int start_position,
    ffi.Pointer<ffi.Char> replacement,
    int match_options,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_replace_literal(
      regex,
      string,
      string_len,
      start_position,
      replacement,
      match_options,
      error,
    );
  }

  late final _g_regex_replace_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              gssize,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_replace_literal');
  late final _g_regex_replace_literal = _g_regex_replace_literalPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_regex_replace_eval(
    ffi.Pointer<GRegex> regex,
    ffi.Pointer<ffi.Char> string,
    int string_len,
    int start_position,
    int match_options,
    GRegexEvalCallback eval,
    ffi.Pointer user_data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_replace_eval(
      regex,
      string,
      string_len,
      start_position,
      match_options,
      eval,
      user_data,
      error,
    );
  }

  late final _g_regex_replace_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GRegex>,
              ffi.Pointer<ffi.Char>,
              gssize,
              gint,
              ffi.Int32,
              GRegexEvalCallback,
              ffi.Pointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_replace_eval');
  late final _g_regex_replace_eval = _g_regex_replace_evalPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GRegex>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          GRegexEvalCallback,
          ffi.Pointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_regex_check_replacement(
    ffi.Pointer<ffi.Char> replacement,
    ffi.Pointer<gboolean> has_references,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_regex_check_replacement(
      replacement,
      has_references,
      error,
    );
  }

  late final _g_regex_check_replacementPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_regex_check_replacement');
  late final _g_regex_check_replacement =
      _g_regex_check_replacementPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GRegex> g_match_info_get_regex(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_get_regex(
      match_info,
    );
  }

  late final _g_match_info_get_regexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GRegex> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_get_regex');
  late final _g_match_info_get_regex = _g_match_info_get_regexPtr
      .asFunction<ffi.Pointer<GRegex> Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<ffi.Char> g_match_info_get_string(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_get_string(
      match_info,
    );
  }

  late final _g_match_info_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_get_string');
  late final _g_match_info_get_string = _g_match_info_get_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<GMatchInfo> g_match_info_ref(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_ref(
      match_info,
    );
  }

  late final _g_match_info_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMatchInfo> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_ref');
  late final _g_match_info_ref = _g_match_info_refPtr
      .asFunction<ffi.Pointer<GMatchInfo> Function(ffi.Pointer<GMatchInfo>)>();

  void g_match_info_unref(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_unref(
      match_info,
    );
  }

  late final _g_match_info_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_unref');
  late final _g_match_info_unref = _g_match_info_unrefPtr
      .asFunction<void Function(ffi.Pointer<GMatchInfo>)>();

  void g_match_info_free(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_free(
      match_info,
    );
  }

  late final _g_match_info_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_free');
  late final _g_match_info_free = _g_match_info_freePtr
      .asFunction<void Function(ffi.Pointer<GMatchInfo>)>();

  int g_match_info_next(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_match_info_next(
      match_info,
      error,
    );
  }

  late final _g_match_info_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMatchInfo>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_match_info_next');
  late final _g_match_info_next = _g_match_info_nextPtr.asFunction<
      int Function(
          ffi.Pointer<GMatchInfo>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_match_info_matches(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_matches(
      match_info,
    );
  }

  late final _g_match_info_matchesPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_matches');
  late final _g_match_info_matches = _g_match_info_matchesPtr
      .asFunction<int Function(ffi.Pointer<GMatchInfo>)>();

  int g_match_info_get_match_count(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_get_match_count(
      match_info,
    );
  }

  late final _g_match_info_get_match_countPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_get_match_count');
  late final _g_match_info_get_match_count = _g_match_info_get_match_countPtr
      .asFunction<int Function(ffi.Pointer<GMatchInfo>)>();

  int g_match_info_is_partial_match(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_is_partial_match(
      match_info,
    );
  }

  late final _g_match_info_is_partial_matchPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMatchInfo>)>>(
          'g_match_info_is_partial_match');
  late final _g_match_info_is_partial_match = _g_match_info_is_partial_matchPtr
      .asFunction<int Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<ffi.Char> g_match_info_expand_references(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<ffi.Char> string_to_expand,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_match_info_expand_references(
      match_info,
      string_to_expand,
      error,
    );
  }

  late final _g_match_info_expand_referencesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMatchInfo>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_match_info_expand_references');
  late final _g_match_info_expand_references =
      _g_match_info_expand_referencesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMatchInfo>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_match_info_fetch(
    ffi.Pointer<GMatchInfo> match_info,
    int match_num,
  ) {
    return _g_match_info_fetch(
      match_info,
      match_num,
    );
  }

  late final _g_match_info_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMatchInfo>, gint)>>('g_match_info_fetch');
  late final _g_match_info_fetch = _g_match_info_fetchPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMatchInfo>, int)>();

  int g_match_info_fetch_pos(
    ffi.Pointer<GMatchInfo> match_info,
    int match_num,
    ffi.Pointer<gint> start_pos,
    ffi.Pointer<gint> end_pos,
  ) {
    return _g_match_info_fetch_pos(
      match_info,
      match_num,
      start_pos,
      end_pos,
    );
  }

  late final _g_match_info_fetch_posPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GMatchInfo>, gint, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_match_info_fetch_pos');
  late final _g_match_info_fetch_pos = _g_match_info_fetch_posPtr.asFunction<
      int Function(ffi.Pointer<GMatchInfo>, int, ffi.Pointer<gint>,
          ffi.Pointer<gint>)>();

  ffi.Pointer<ffi.Char> g_match_info_fetch_named(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_match_info_fetch_named(
      match_info,
      name,
    );
  }

  late final _g_match_info_fetch_namedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GMatchInfo>,
              ffi.Pointer<ffi.Char>)>>('g_match_info_fetch_named');
  late final _g_match_info_fetch_named =
      _g_match_info_fetch_namedPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GMatchInfo>, ffi.Pointer<ffi.Char>)>();

  int g_match_info_fetch_named_pos(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<gint> start_pos,
    ffi.Pointer<gint> end_pos,
  ) {
    return _g_match_info_fetch_named_pos(
      match_info,
      name,
      start_pos,
      end_pos,
    );
  }

  late final _g_match_info_fetch_named_posPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GMatchInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('g_match_info_fetch_named_pos');
  late final _g_match_info_fetch_named_pos =
      _g_match_info_fetch_named_posPtr.asFunction<
          int Function(ffi.Pointer<GMatchInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> g_match_info_fetch_all(
    ffi.Pointer<GMatchInfo> match_info,
  ) {
    return _g_match_info_fetch_all(
      match_info,
    );
  }

  late final _g_match_info_fetch_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GMatchInfo>)>>('g_match_info_fetch_all');
  late final _g_match_info_fetch_all = _g_match_info_fetch_allPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<GMatchInfo>)>();

  ffi.Pointer<GScanner> g_scanner_new(
    ffi.Pointer<GScannerConfig> config_templ,
  ) {
    return _g_scanner_new(
      config_templ,
    );
  }

  late final _g_scanner_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GScanner> Function(
              ffi.Pointer<GScannerConfig>)>>('g_scanner_new');
  late final _g_scanner_new = _g_scanner_newPtr.asFunction<
      ffi.Pointer<GScanner> Function(ffi.Pointer<GScannerConfig>)>();

  void g_scanner_destroy(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_destroy(
      scanner,
    );
  }

  late final _g_scanner_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_destroy');
  late final _g_scanner_destroy =
      _g_scanner_destroyPtr.asFunction<void Function(ffi.Pointer<GScanner>)>();

  void g_scanner_input_file(
    ffi.Pointer<GScanner> scanner,
    int input_fd,
  ) {
    return _g_scanner_input_file(
      scanner,
      input_fd,
    );
  }

  late final _g_scanner_input_filePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GScanner>, gint)>>(
      'g_scanner_input_file');
  late final _g_scanner_input_file = _g_scanner_input_filePtr
      .asFunction<void Function(ffi.Pointer<GScanner>, int)>();

  void g_scanner_sync_file_offset(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_sync_file_offset(
      scanner,
    );
  }

  late final _g_scanner_sync_file_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_sync_file_offset');
  late final _g_scanner_sync_file_offset = _g_scanner_sync_file_offsetPtr
      .asFunction<void Function(ffi.Pointer<GScanner>)>();

  void g_scanner_input_text(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<ffi.Char> text,
    int text_len,
  ) {
    return _g_scanner_input_text(
      scanner,
      text,
      text_len,
    );
  }

  late final _g_scanner_input_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, ffi.Pointer<ffi.Char>,
              guint)>>('g_scanner_input_text');
  late final _g_scanner_input_text = _g_scanner_input_textPtr.asFunction<
      void Function(ffi.Pointer<GScanner>, ffi.Pointer<ffi.Char>, int)>();

  int g_scanner_get_next_token(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_get_next_token(
      scanner,
    );
  }

  late final _g_scanner_get_next_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_get_next_token');
  late final _g_scanner_get_next_token = _g_scanner_get_next_tokenPtr
      .asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_peek_next_token(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_peek_next_token(
      scanner,
    );
  }

  late final _g_scanner_peek_next_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_peek_next_token');
  late final _g_scanner_peek_next_token = _g_scanner_peek_next_tokenPtr
      .asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_cur_token(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_token(
      scanner,
    );
  }

  late final _g_scanner_cur_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_token');
  late final _g_scanner_cur_token =
      _g_scanner_cur_tokenPtr.asFunction<int Function(ffi.Pointer<GScanner>)>();

  GTokenValue g_scanner_cur_value(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_value(
      scanner,
    );
  }

  late final _g_scanner_cur_valuePtr =
      _lookup<ffi.NativeFunction<GTokenValue Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_value');
  late final _g_scanner_cur_value = _g_scanner_cur_valuePtr
      .asFunction<GTokenValue Function(ffi.Pointer<GScanner>)>();

  int g_scanner_cur_line(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_line(
      scanner,
    );
  }

  late final _g_scanner_cur_linePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_line');
  late final _g_scanner_cur_line =
      _g_scanner_cur_linePtr.asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_cur_position(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_cur_position(
      scanner,
    );
  }

  late final _g_scanner_cur_positionPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_cur_position');
  late final _g_scanner_cur_position = _g_scanner_cur_positionPtr
      .asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_eof(
    ffi.Pointer<GScanner> scanner,
  ) {
    return _g_scanner_eof(
      scanner,
    );
  }

  late final _g_scanner_eofPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GScanner>)>>(
          'g_scanner_eof');
  late final _g_scanner_eof =
      _g_scanner_eofPtr.asFunction<int Function(ffi.Pointer<GScanner>)>();

  int g_scanner_set_scope(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
  ) {
    return _g_scanner_set_scope(
      scanner,
      scope_id,
    );
  }

  late final _g_scanner_set_scopePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GScanner>, guint)>>(
          'g_scanner_set_scope');
  late final _g_scanner_set_scope = _g_scanner_set_scopePtr
      .asFunction<int Function(ffi.Pointer<GScanner>, int)>();

  void g_scanner_scope_add_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    ffi.Pointer<ffi.Char> symbol,
    ffi.Pointer value,
  ) {
    return _g_scanner_scope_add_symbol(
      scanner,
      scope_id,
      symbol,
      value,
    );
  }

  late final _g_scanner_scope_add_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, guint, ffi.Pointer<ffi.Char>,
              ffi.Pointer)>>('g_scanner_scope_add_symbol');
  late final _g_scanner_scope_add_symbol =
      _g_scanner_scope_add_symbolPtr.asFunction<
          void Function(ffi.Pointer<GScanner>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer)>();

  void g_scanner_scope_remove_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    ffi.Pointer<ffi.Char> symbol,
  ) {
    return _g_scanner_scope_remove_symbol(
      scanner,
      scope_id,
      symbol,
    );
  }

  late final _g_scanner_scope_remove_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, guint,
              ffi.Pointer<ffi.Char>)>>('g_scanner_scope_remove_symbol');
  late final _g_scanner_scope_remove_symbol =
      _g_scanner_scope_remove_symbolPtr.asFunction<
          void Function(ffi.Pointer<GScanner>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer g_scanner_scope_lookup_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    ffi.Pointer<ffi.Char> symbol,
  ) {
    return _g_scanner_scope_lookup_symbol(
      scanner,
      scope_id,
      symbol,
    );
  }

  late final _g_scanner_scope_lookup_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GScanner>, guint,
              ffi.Pointer<ffi.Char>)>>('g_scanner_scope_lookup_symbol');
  late final _g_scanner_scope_lookup_symbol =
      _g_scanner_scope_lookup_symbolPtr.asFunction<
          ffi.Pointer Function(
              ffi.Pointer<GScanner>, int, ffi.Pointer<ffi.Char>)>();

  void g_scanner_scope_foreach_symbol(
    ffi.Pointer<GScanner> scanner,
    int scope_id,
    GHFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_scanner_scope_foreach_symbol(
      scanner,
      scope_id,
      func,
      user_data,
    );
  }

  late final _g_scanner_scope_foreach_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>, guint, GHFunc,
              ffi.Pointer)>>('g_scanner_scope_foreach_symbol');
  late final _g_scanner_scope_foreach_symbol =
      _g_scanner_scope_foreach_symbolPtr.asFunction<
          void Function(ffi.Pointer<GScanner>, int, GHFunc, ffi.Pointer)>();

  ffi.Pointer g_scanner_lookup_symbol(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<ffi.Char> symbol,
  ) {
    return _g_scanner_lookup_symbol(
      scanner,
      symbol,
    );
  }

  late final _g_scanner_lookup_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GScanner>,
              ffi.Pointer<ffi.Char>)>>('g_scanner_lookup_symbol');
  late final _g_scanner_lookup_symbol = _g_scanner_lookup_symbolPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GScanner>, ffi.Pointer<ffi.Char>)>();

  void g_scanner_unexp_token(
    ffi.Pointer<GScanner> scanner,
    int expected_token,
    ffi.Pointer<ffi.Char> identifier_spec,
    ffi.Pointer<ffi.Char> symbol_spec,
    ffi.Pointer<ffi.Char> symbol_name,
    ffi.Pointer<ffi.Char> message,
    int is_error,
  ) {
    return _g_scanner_unexp_token(
      scanner,
      expected_token,
      identifier_spec,
      symbol_spec,
      symbol_name,
      message,
      is_error,
    );
  }

  late final _g_scanner_unexp_tokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GScanner>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint)>>('g_scanner_unexp_token');
  late final _g_scanner_unexp_token = _g_scanner_unexp_tokenPtr.asFunction<
      void Function(
          ffi.Pointer<GScanner>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  void g_scanner_error(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_scanner_error(
      scanner,
      format,
    );
  }

  late final _g_scanner_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GScanner>,
              ffi.Pointer<ffi.Char>)>>('g_scanner_error');
  late final _g_scanner_error = _g_scanner_errorPtr.asFunction<
      void Function(ffi.Pointer<GScanner>, ffi.Pointer<ffi.Char>)>();

  void g_scanner_warn(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_scanner_warn(
      scanner,
      format,
    );
  }

  late final _g_scanner_warnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GScanner>, ffi.Pointer<ffi.Char>)>>('g_scanner_warn');
  late final _g_scanner_warn = _g_scanner_warnPtr.asFunction<
      void Function(ffi.Pointer<GScanner>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GSequence> g_sequence_new(
    GDestroyNotify data_destroy,
  ) {
    return _g_sequence_new(
      data_destroy,
    );
  }

  late final _g_sequence_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GSequence> Function(GDestroyNotify)>>(
      'g_sequence_new');
  late final _g_sequence_new = _g_sequence_newPtr
      .asFunction<ffi.Pointer<GSequence> Function(GDestroyNotify)>();

  void g_sequence_free(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_free(
      seq,
    );
  }

  late final _g_sequence_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSequence>)>>(
          'g_sequence_free');
  late final _g_sequence_free =
      _g_sequence_freePtr.asFunction<void Function(ffi.Pointer<GSequence>)>();

  int g_sequence_get_length(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_get_length(
      seq,
    );
  }

  late final _g_sequence_get_lengthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSequence>)>>(
          'g_sequence_get_length');
  late final _g_sequence_get_length = _g_sequence_get_lengthPtr
      .asFunction<int Function(ffi.Pointer<GSequence>)>();

  void g_sequence_foreach(
    ffi.Pointer<GSequence> seq,
    GFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_sequence_foreach(
      seq,
      func,
      user_data,
    );
  }

  late final _g_sequence_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequence>, GFunc,
              ffi.Pointer)>>('g_sequence_foreach');
  late final _g_sequence_foreach = _g_sequence_foreachPtr
      .asFunction<void Function(ffi.Pointer<GSequence>, GFunc, ffi.Pointer)>();

  void g_sequence_foreach_range(
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
    GFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_sequence_foreach_range(
      begin,
      end,
      func,
      user_data,
    );
  }

  late final _g_sequence_foreach_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>,
              GFunc,
              ffi.Pointer)>>('g_sequence_foreach_range');
  late final _g_sequence_foreach_range =
      _g_sequence_foreach_rangePtr.asFunction<
          void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>,
              GFunc, ffi.Pointer)>();

  void g_sequence_sort(
    ffi.Pointer<GSequence> seq,
    GCompareDataFunc cmp_func,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_sort(
      seq,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequence>, GCompareDataFunc,
              ffi.Pointer)>>('g_sequence_sort');
  late final _g_sequence_sort = _g_sequence_sortPtr.asFunction<
      void Function(ffi.Pointer<GSequence>, GCompareDataFunc, ffi.Pointer)>();

  void g_sequence_sort_iter(
    ffi.Pointer<GSequence> seq,
    GSequenceIterCompareFunc cmp_func,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_sort_iter(
      seq,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_sort_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequence>, GSequenceIterCompareFunc,
              ffi.Pointer)>>('g_sequence_sort_iter');
  late final _g_sequence_sort_iter = _g_sequence_sort_iterPtr.asFunction<
      void Function(
          ffi.Pointer<GSequence>, GSequenceIterCompareFunc, ffi.Pointer)>();

  int g_sequence_is_empty(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_is_empty(
      seq,
    );
  }

  late final _g_sequence_is_emptyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GSequence>)>>(
          'g_sequence_is_empty');
  late final _g_sequence_is_empty = _g_sequence_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<GSequence>)>();

  ffi.Pointer<GSequenceIter> g_sequence_get_begin_iter(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_get_begin_iter(
      seq,
    );
  }

  late final _g_sequence_get_begin_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>)>>('g_sequence_get_begin_iter');
  late final _g_sequence_get_begin_iter =
      _g_sequence_get_begin_iterPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>)>();

  ffi.Pointer<GSequenceIter> g_sequence_get_end_iter(
    ffi.Pointer<GSequence> seq,
  ) {
    return _g_sequence_get_end_iter(
      seq,
    );
  }

  late final _g_sequence_get_end_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>)>>('g_sequence_get_end_iter');
  late final _g_sequence_get_end_iter = _g_sequence_get_end_iterPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>)>();

  ffi.Pointer<GSequenceIter> g_sequence_get_iter_at_pos(
    ffi.Pointer<GSequence> seq,
    int pos,
  ) {
    return _g_sequence_get_iter_at_pos(
      seq,
      pos,
    );
  }

  late final _g_sequence_get_iter_at_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, gint)>>('g_sequence_get_iter_at_pos');
  late final _g_sequence_get_iter_at_pos =
      _g_sequence_get_iter_at_posPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, int)>();

  ffi.Pointer<GSequenceIter> g_sequence_append(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
  ) {
    return _g_sequence_append(
      seq,
      data,
    );
  }

  late final _g_sequence_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, ffi.Pointer)>>('g_sequence_append');
  late final _g_sequence_append = _g_sequence_appendPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(
          ffi.Pointer<GSequence>, ffi.Pointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_prepend(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
  ) {
    return _g_sequence_prepend(
      seq,
      data,
    );
  }

  late final _g_sequence_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>, ffi.Pointer)>>('g_sequence_prepend');
  late final _g_sequence_prepend = _g_sequence_prependPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(
          ffi.Pointer<GSequence>, ffi.Pointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_insert_before(
    ffi.Pointer<GSequenceIter> iter,
    ffi.Pointer data,
  ) {
    return _g_sequence_insert_before(
      iter,
      data,
    );
  }

  late final _g_sequence_insert_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer)>>('g_sequence_insert_before');
  late final _g_sequence_insert_before =
      _g_sequence_insert_beforePtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>, ffi.Pointer)>();

  void g_sequence_move(
    ffi.Pointer<GSequenceIter> src,
    ffi.Pointer<GSequenceIter> dest,
  ) {
    return _g_sequence_move(
      src,
      dest,
    );
  }

  late final _g_sequence_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_move');
  late final _g_sequence_move = _g_sequence_movePtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  void g_sequence_swap(
    ffi.Pointer<GSequenceIter> a,
    ffi.Pointer<GSequenceIter> b,
  ) {
    return _g_sequence_swap(
      a,
      b,
    );
  }

  late final _g_sequence_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_swap');
  late final _g_sequence_swap = _g_sequence_swapPtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_insert_sorted(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
    GCompareDataFunc cmp_func,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_insert_sorted(
      seq,
      data,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_insert_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              ffi.Pointer,
              GCompareDataFunc,
              ffi.Pointer)>>('g_sequence_insert_sorted');
  late final _g_sequence_insert_sorted =
      _g_sequence_insert_sortedPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>,
              ffi.Pointer, GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_insert_sorted_iter(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
    GSequenceIterCompareFunc iter_cmp,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_insert_sorted_iter(
      seq,
      data,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_insert_sorted_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              ffi.Pointer,
              GSequenceIterCompareFunc,
              ffi.Pointer)>>('g_sequence_insert_sorted_iter');
  late final _g_sequence_insert_sorted_iter =
      _g_sequence_insert_sorted_iterPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>,
              ffi.Pointer, GSequenceIterCompareFunc, ffi.Pointer)>();

  void g_sequence_sort_changed(
    ffi.Pointer<GSequenceIter> iter,
    GCompareDataFunc cmp_func,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_sort_changed(
      iter,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_sort_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>, GCompareDataFunc,
              ffi.Pointer)>>('g_sequence_sort_changed');
  late final _g_sequence_sort_changed = _g_sequence_sort_changedPtr.asFunction<
      void Function(
          ffi.Pointer<GSequenceIter>, GCompareDataFunc, ffi.Pointer)>();

  void g_sequence_sort_changed_iter(
    ffi.Pointer<GSequenceIter> iter,
    GSequenceIterCompareFunc iter_cmp,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_sort_changed_iter(
      iter,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_sort_changed_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>,
              GSequenceIterCompareFunc,
              ffi.Pointer)>>('g_sequence_sort_changed_iter');
  late final _g_sequence_sort_changed_iter =
      _g_sequence_sort_changed_iterPtr.asFunction<
          void Function(ffi.Pointer<GSequenceIter>, GSequenceIterCompareFunc,
              ffi.Pointer)>();

  void g_sequence_remove(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_remove(
      iter,
    );
  }

  late final _g_sequence_removePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_remove');
  late final _g_sequence_remove = _g_sequence_removePtr
      .asFunction<void Function(ffi.Pointer<GSequenceIter>)>();

  void g_sequence_remove_range(
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
  ) {
    return _g_sequence_remove_range(
      begin,
      end,
    );
  }

  late final _g_sequence_remove_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_remove_range');
  late final _g_sequence_remove_range = _g_sequence_remove_rangePtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  void g_sequence_move_range(
    ffi.Pointer<GSequenceIter> dest,
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
  ) {
    return _g_sequence_move_range(
      dest,
      begin,
      end,
    );
  }

  late final _g_sequence_move_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_move_range');
  late final _g_sequence_move_range = _g_sequence_move_rangePtr.asFunction<
      void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>,
          ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_search(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
    GCompareDataFunc cmp_func,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_search(
      seq,
      data,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              ffi.Pointer,
              GCompareDataFunc,
              ffi.Pointer)>>('g_sequence_search');
  late final _g_sequence_search = _g_sequence_searchPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, ffi.Pointer,
          GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_search_iter(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
    GSequenceIterCompareFunc iter_cmp,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_search_iter(
      seq,
      data,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_search_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              ffi.Pointer,
              GSequenceIterCompareFunc,
              ffi.Pointer)>>('g_sequence_search_iter');
  late final _g_sequence_search_iter = _g_sequence_search_iterPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, ffi.Pointer,
          GSequenceIterCompareFunc, ffi.Pointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_lookup(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
    GCompareDataFunc cmp_func,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_lookup(
      seq,
      data,
      cmp_func,
      cmp_data,
    );
  }

  late final _g_sequence_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              ffi.Pointer,
              GCompareDataFunc,
              ffi.Pointer)>>('g_sequence_lookup');
  late final _g_sequence_lookup = _g_sequence_lookupPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, ffi.Pointer,
          GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GSequenceIter> g_sequence_lookup_iter(
    ffi.Pointer<GSequence> seq,
    ffi.Pointer data,
    GSequenceIterCompareFunc iter_cmp,
    ffi.Pointer cmp_data,
  ) {
    return _g_sequence_lookup_iter(
      seq,
      data,
      iter_cmp,
      cmp_data,
    );
  }

  late final _g_sequence_lookup_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequence>,
              ffi.Pointer,
              GSequenceIterCompareFunc,
              ffi.Pointer)>>('g_sequence_lookup_iter');
  late final _g_sequence_lookup_iter = _g_sequence_lookup_iterPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequence>, ffi.Pointer,
          GSequenceIterCompareFunc, ffi.Pointer)>();

  ffi.Pointer g_sequence_get(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_get(
      iter,
    );
  }

  late final _g_sequence_getPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_get');
  late final _g_sequence_get = _g_sequence_getPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GSequenceIter>)>();

  void g_sequence_set(
    ffi.Pointer<GSequenceIter> iter,
    ffi.Pointer data,
  ) {
    return _g_sequence_set(
      iter,
      data,
    );
  }

  late final _g_sequence_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSequenceIter>, ffi.Pointer)>>('g_sequence_set');
  late final _g_sequence_set = _g_sequence_setPtr
      .asFunction<void Function(ffi.Pointer<GSequenceIter>, ffi.Pointer)>();

  int g_sequence_iter_is_begin(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_is_begin(
      iter,
    );
  }

  late final _g_sequence_iter_is_beginPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_iter_is_begin');
  late final _g_sequence_iter_is_begin = _g_sequence_iter_is_beginPtr
      .asFunction<int Function(ffi.Pointer<GSequenceIter>)>();

  int g_sequence_iter_is_end(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_is_end(
      iter,
    );
  }

  late final _g_sequence_iter_is_endPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GSequenceIter>)>>(
      'g_sequence_iter_is_end');
  late final _g_sequence_iter_is_end = _g_sequence_iter_is_endPtr
      .asFunction<int Function(ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_iter_next(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_next(
      iter,
    );
  }

  late final _g_sequence_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_next');
  late final _g_sequence_iter_next = _g_sequence_iter_nextPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_iter_prev(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_prev(
      iter,
    );
  }

  late final _g_sequence_iter_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_prev');
  late final _g_sequence_iter_prev = _g_sequence_iter_prevPtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>)>();

  int g_sequence_iter_get_position(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_get_position(
      iter,
    );
  }

  late final _g_sequence_iter_get_positionPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GSequenceIter>)>>(
          'g_sequence_iter_get_position');
  late final _g_sequence_iter_get_position = _g_sequence_iter_get_positionPtr
      .asFunction<int Function(ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_iter_move(
    ffi.Pointer<GSequenceIter> iter,
    int delta,
  ) {
    return _g_sequence_iter_move(
      iter,
      delta,
    );
  }

  late final _g_sequence_iter_movePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>, gint)>>('g_sequence_iter_move');
  late final _g_sequence_iter_move = _g_sequence_iter_movePtr.asFunction<
      ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>, int)>();

  ffi.Pointer<GSequence> g_sequence_iter_get_sequence(
    ffi.Pointer<GSequenceIter> iter,
  ) {
    return _g_sequence_iter_get_sequence(
      iter,
    );
  }

  late final _g_sequence_iter_get_sequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequence> Function(
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_get_sequence');
  late final _g_sequence_iter_get_sequence =
      _g_sequence_iter_get_sequencePtr.asFunction<
          ffi.Pointer<GSequence> Function(ffi.Pointer<GSequenceIter>)>();

  int g_sequence_iter_compare(
    ffi.Pointer<GSequenceIter> a,
    ffi.Pointer<GSequenceIter> b,
  ) {
    return _g_sequence_iter_compare(
      a,
      b,
    );
  }

  late final _g_sequence_iter_comparePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_iter_compare');
  late final _g_sequence_iter_compare = _g_sequence_iter_comparePtr.asFunction<
      int Function(ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  ffi.Pointer<GSequenceIter> g_sequence_range_get_midpoint(
    ffi.Pointer<GSequenceIter> begin,
    ffi.Pointer<GSequenceIter> end,
  ) {
    return _g_sequence_range_get_midpoint(
      begin,
      end,
    );
  }

  late final _g_sequence_range_get_midpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSequenceIter> Function(ffi.Pointer<GSequenceIter>,
              ffi.Pointer<GSequenceIter>)>>('g_sequence_range_get_midpoint');
  late final _g_sequence_range_get_midpoint =
      _g_sequence_range_get_midpointPtr.asFunction<
          ffi.Pointer<GSequenceIter> Function(
              ffi.Pointer<GSequenceIter>, ffi.Pointer<GSequenceIter>)>();

  int g_shell_error_quark() {
    return _g_shell_error_quark();
  }

  late final _g_shell_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_shell_error_quark');
  late final _g_shell_error_quark =
      _g_shell_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> g_shell_quote(
    ffi.Pointer<ffi.Char> unquoted_string,
  ) {
    return _g_shell_quote(
      unquoted_string,
    );
  }

  late final _g_shell_quotePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_shell_quote');
  late final _g_shell_quote = _g_shell_quotePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_shell_unquote(
    ffi.Pointer<ffi.Char> quoted_string,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_shell_unquote(
      quoted_string,
      error,
    );
  }

  late final _g_shell_unquotePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_shell_unquote');
  late final _g_shell_unquote = _g_shell_unquotePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_shell_parse_argv(
    ffi.Pointer<ffi.Char> command_line,
    ffi.Pointer<gint> argcp,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argvp,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_shell_parse_argv(
      command_line,
      argcp,
      argvp,
      error,
    );
  }

  late final _g_shell_parse_argvPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_shell_parse_argv');
  late final _g_shell_parse_argv = _g_shell_parse_argvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer g_slice_alloc(
    int block_size,
  ) {
    return _g_slice_alloc(
      block_size,
    );
  }

  late final _g_slice_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>('g_slice_alloc');
  late final _g_slice_alloc =
      _g_slice_allocPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_slice_alloc0(
    int block_size,
  ) {
    return _g_slice_alloc0(
      block_size,
    );
  }

  late final _g_slice_alloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize)>>(
          'g_slice_alloc0');
  late final _g_slice_alloc0 =
      _g_slice_alloc0Ptr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_slice_copy(
    int block_size,
    gconstpointer mem_block,
  ) {
    return _g_slice_copy(
      block_size,
      mem_block,
    );
  }

  late final _g_slice_copyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(gsize, gconstpointer)>>(
          'g_slice_copy');
  late final _g_slice_copy =
      _g_slice_copyPtr.asFunction<ffi.Pointer Function(int, gconstpointer)>();

  void g_slice_free1(
    int block_size,
    ffi.Pointer mem_block,
  ) {
    return _g_slice_free1(
      block_size,
      mem_block,
    );
  }

  late final _g_slice_free1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gsize, ffi.Pointer)>>(
          'g_slice_free1');
  late final _g_slice_free1 =
      _g_slice_free1Ptr.asFunction<void Function(int, ffi.Pointer)>();

  void g_slice_free_chain_with_offset(
    int block_size,
    ffi.Pointer mem_chain,
    int next_offset,
  ) {
    return _g_slice_free_chain_with_offset(
      block_size,
      mem_chain,
      next_offset,
    );
  }

  late final _g_slice_free_chain_with_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gsize, ffi.Pointer, gsize)>>(
          'g_slice_free_chain_with_offset');
  late final _g_slice_free_chain_with_offset =
      _g_slice_free_chain_with_offsetPtr
          .asFunction<void Function(int, ffi.Pointer, int)>();

  void g_slice_set_config(
    int ckey,
    int value,
  ) {
    return _g_slice_set_config(
      ckey,
      value,
    );
  }

  late final _g_slice_set_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, gint64)>>(
          'g_slice_set_config');
  late final _g_slice_set_config =
      _g_slice_set_configPtr.asFunction<void Function(int, int)>();

  int g_slice_get_config(
    int ckey,
  ) {
    return _g_slice_get_config(
      ckey,
    );
  }

  late final _g_slice_get_configPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Int32)>>(
          'g_slice_get_config');
  late final _g_slice_get_config =
      _g_slice_get_configPtr.asFunction<int Function(int)>();

  ffi.Pointer<gint64> g_slice_get_config_state(
    int ckey,
    int address,
    ffi.Pointer<guint> n_values,
  ) {
    return _g_slice_get_config_state(
      ckey,
      address,
      n_values,
    );
  }

  late final _g_slice_get_config_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gint64> Function(ffi.Int32, gint64,
              ffi.Pointer<guint>)>>('g_slice_get_config_state');
  late final _g_slice_get_config_state = _g_slice_get_config_statePtr
      .asFunction<ffi.Pointer<gint64> Function(int, int, ffi.Pointer<guint>)>();

  int g_spawn_error_quark() {
    return _g_spawn_error_quark();
  }

  late final _g_spawn_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_spawn_error_quark');
  late final _g_spawn_error_quark =
      _g_spawn_error_quarkPtr.asFunction<int Function()>();

  int g_spawn_exit_error_quark() {
    return _g_spawn_exit_error_quark();
  }

  late final _g_spawn_exit_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'g_spawn_exit_error_quark');
  late final _g_spawn_exit_error_quark =
      _g_spawn_exit_error_quarkPtr.asFunction<int Function()>();

  int g_spawn_async(
    ffi.Pointer<ffi.Char> working_directory,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    ffi.Pointer user_data,
    ffi.Pointer<GPid> child_pid,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      child_pid,
      error,
    );
  }

  late final _g_spawn_asyncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              ffi.Pointer,
              ffi.Pointer<GPid>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_async');
  late final _g_spawn_async = _g_spawn_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          GSpawnChildSetupFunc,
          ffi.Pointer,
          ffi.Pointer<GPid>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_async_with_pipes(
    ffi.Pointer<ffi.Char> working_directory,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    ffi.Pointer user_data,
    ffi.Pointer<GPid> child_pid,
    ffi.Pointer<gint> standard_input,
    ffi.Pointer<gint> standard_output,
    ffi.Pointer<gint> standard_error,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async_with_pipes(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      child_pid,
      standard_input,
      standard_output,
      standard_error,
      error,
    );
  }

  late final _g_spawn_async_with_pipesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              ffi.Pointer,
              ffi.Pointer<GPid>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_async_with_pipes');
  late final _g_spawn_async_with_pipes =
      _g_spawn_async_with_pipesPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              GSpawnChildSetupFunc,
              ffi.Pointer,
              ffi.Pointer<GPid>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_async_with_pipes_and_fds(
    ffi.Pointer<ffi.Char> working_directory,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    ffi.Pointer user_data,
    int stdin_fd,
    int stdout_fd,
    int stderr_fd,
    ffi.Pointer<gint> source_fds,
    ffi.Pointer<gint> target_fds,
    int n_fds,
    ffi.Pointer<GPid> child_pid_out,
    ffi.Pointer<gint> stdin_pipe_out,
    ffi.Pointer<gint> stdout_pipe_out,
    ffi.Pointer<gint> stderr_pipe_out,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async_with_pipes_and_fds(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      stdin_fd,
      stdout_fd,
      stderr_fd,
      source_fds,
      target_fds,
      n_fds,
      child_pid_out,
      stdin_pipe_out,
      stdout_pipe_out,
      stderr_pipe_out,
      error,
    );
  }

  late final _g_spawn_async_with_pipes_and_fdsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Int32,
                  GSpawnChildSetupFunc,
                  ffi.Pointer,
                  gint,
                  gint,
                  gint,
                  ffi.Pointer<gint>,
                  ffi.Pointer<gint>,
                  gsize,
                  ffi.Pointer<GPid>,
                  ffi.Pointer<gint>,
                  ffi.Pointer<gint>,
                  ffi.Pointer<gint>,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_spawn_async_with_pipes_and_fds');
  late final _g_spawn_async_with_pipes_and_fds =
      _g_spawn_async_with_pipes_and_fdsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              GSpawnChildSetupFunc,
              ffi.Pointer,
              int,
              int,
              int,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              int,
              ffi.Pointer<GPid>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_async_with_fds(
    ffi.Pointer<ffi.Char> working_directory,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    ffi.Pointer user_data,
    ffi.Pointer<GPid> child_pid,
    int stdin_fd,
    int stdout_fd,
    int stderr_fd,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_async_with_fds(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      child_pid,
      stdin_fd,
      stdout_fd,
      stderr_fd,
      error,
    );
  }

  late final _g_spawn_async_with_fdsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              ffi.Pointer,
              ffi.Pointer<GPid>,
              gint,
              gint,
              gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_async_with_fds');
  late final _g_spawn_async_with_fds = _g_spawn_async_with_fdsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          GSpawnChildSetupFunc,
          ffi.Pointer,
          ffi.Pointer<GPid>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_sync(
    ffi.Pointer<ffi.Char> working_directory,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    int flags,
    GSpawnChildSetupFunc child_setup,
    ffi.Pointer user_data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> standard_output,
    ffi.Pointer<ffi.Pointer<ffi.Char>> standard_error,
    ffi.Pointer<gint> wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_sync(
      working_directory,
      argv,
      envp,
      flags,
      child_setup,
      user_data,
      standard_output,
      standard_error,
      wait_status,
      error,
    );
  }

  late final _g_spawn_syncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32,
              GSpawnChildSetupFunc,
              ffi.Pointer,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_sync');
  late final _g_spawn_sync = _g_spawn_syncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          GSpawnChildSetupFunc,
          ffi.Pointer,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_command_line_sync(
    ffi.Pointer<ffi.Char> command_line,
    ffi.Pointer<ffi.Pointer<ffi.Char>> standard_output,
    ffi.Pointer<ffi.Pointer<ffi.Char>> standard_error,
    ffi.Pointer<gint> wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_command_line_sync(
      command_line,
      standard_output,
      standard_error,
      wait_status,
      error,
    );
  }

  late final _g_spawn_command_line_syncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_command_line_sync');
  late final _g_spawn_command_line_sync =
      _g_spawn_command_line_syncPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_command_line_async(
    ffi.Pointer<ffi.Char> command_line,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_command_line_async(
      command_line,
      error,
    );
  }

  late final _g_spawn_command_line_asyncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_command_line_async');
  late final _g_spawn_command_line_async =
      _g_spawn_command_line_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_check_wait_status(
    int wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_check_wait_status(
      wait_status,
      error,
    );
  }

  late final _g_spawn_check_wait_statusPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_check_wait_status');
  late final _g_spawn_check_wait_status = _g_spawn_check_wait_statusPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_spawn_check_exit_status(
    int wait_status,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_spawn_check_exit_status(
      wait_status,
      error,
    );
  }

  late final _g_spawn_check_exit_statusPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gint,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_spawn_check_exit_status');
  late final _g_spawn_check_exit_status = _g_spawn_check_exit_statusPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_spawn_close_pid(
    int pid,
  ) {
    return _g_spawn_close_pid(
      pid,
    );
  }

  late final _g_spawn_close_pidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GPid)>>('g_spawn_close_pid');
  late final _g_spawn_close_pid =
      _g_spawn_close_pidPtr.asFunction<void Function(int)>();

  ffi.Pointer<GStringChunk> g_string_chunk_new(
    int size,
  ) {
    return _g_string_chunk_new(
      size,
    );
  }

  late final _g_string_chunk_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GStringChunk> Function(gsize)>>(
          'g_string_chunk_new');
  late final _g_string_chunk_new = _g_string_chunk_newPtr
      .asFunction<ffi.Pointer<GStringChunk> Function(int)>();

  void g_string_chunk_free(
    ffi.Pointer<GStringChunk> chunk,
  ) {
    return _g_string_chunk_free(
      chunk,
    );
  }

  late final _g_string_chunk_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStringChunk>)>>(
          'g_string_chunk_free');
  late final _g_string_chunk_free = _g_string_chunk_freePtr
      .asFunction<void Function(ffi.Pointer<GStringChunk>)>();

  void g_string_chunk_clear(
    ffi.Pointer<GStringChunk> chunk,
  ) {
    return _g_string_chunk_clear(
      chunk,
    );
  }

  late final _g_string_chunk_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStringChunk>)>>(
          'g_string_chunk_clear');
  late final _g_string_chunk_clear = _g_string_chunk_clearPtr
      .asFunction<void Function(ffi.Pointer<GStringChunk>)>();

  ffi.Pointer<ffi.Char> g_string_chunk_insert(
    ffi.Pointer<GStringChunk> chunk,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_string_chunk_insert(
      chunk,
      string,
    );
  }

  late final _g_string_chunk_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GStringChunk>,
              ffi.Pointer<ffi.Char>)>>('g_string_chunk_insert');
  late final _g_string_chunk_insert = _g_string_chunk_insertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GStringChunk>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_string_chunk_insert_len(
    ffi.Pointer<GStringChunk> chunk,
    ffi.Pointer<ffi.Char> string,
    int len,
  ) {
    return _g_string_chunk_insert_len(
      chunk,
      string,
      len,
    );
  }

  late final _g_string_chunk_insert_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GStringChunk>,
              ffi.Pointer<ffi.Char>, gssize)>>('g_string_chunk_insert_len');
  late final _g_string_chunk_insert_len =
      _g_string_chunk_insert_lenPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GStringChunk>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_string_chunk_insert_const(
    ffi.Pointer<GStringChunk> chunk,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _g_string_chunk_insert_const(
      chunk,
      string,
    );
  }

  late final _g_string_chunk_insert_constPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GStringChunk>,
              ffi.Pointer<ffi.Char>)>>('g_string_chunk_insert_const');
  late final _g_string_chunk_insert_const =
      _g_string_chunk_insert_constPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GStringChunk>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GStrvBuilder> g_strv_builder_new() {
    return _g_strv_builder_new();
  }

  late final _g_strv_builder_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GStrvBuilder> Function()>>(
          'g_strv_builder_new');
  late final _g_strv_builder_new =
      _g_strv_builder_newPtr.asFunction<ffi.Pointer<GStrvBuilder> Function()>();

  void g_strv_builder_unref(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_unref(
      builder,
    );
  }

  late final _g_strv_builder_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStrvBuilder>)>>(
          'g_strv_builder_unref');
  late final _g_strv_builder_unref = _g_strv_builder_unrefPtr
      .asFunction<void Function(ffi.Pointer<GStrvBuilder>)>();

  ffi.Pointer<GStrvBuilder> g_strv_builder_ref(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_ref(
      builder,
    );
  }

  late final _g_strv_builder_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GStrvBuilder> Function(
              ffi.Pointer<GStrvBuilder>)>>('g_strv_builder_ref');
  late final _g_strv_builder_ref = _g_strv_builder_refPtr.asFunction<
      ffi.Pointer<GStrvBuilder> Function(ffi.Pointer<GStrvBuilder>)>();

  void g_strv_builder_add(
    ffi.Pointer<GStrvBuilder> builder,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _g_strv_builder_add(
      builder,
      value,
    );
  }

  late final _g_strv_builder_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStrvBuilder>,
              ffi.Pointer<ffi.Char>)>>('g_strv_builder_add');
  late final _g_strv_builder_add = _g_strv_builder_addPtr.asFunction<
      void Function(ffi.Pointer<GStrvBuilder>, ffi.Pointer<ffi.Char>)>();

  void g_strv_builder_addv(
    ffi.Pointer<GStrvBuilder> builder,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _g_strv_builder_addv(
      builder,
      value,
    );
  }

  late final _g_strv_builder_addvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStrvBuilder>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_strv_builder_addv');
  late final _g_strv_builder_addv = _g_strv_builder_addvPtr.asFunction<
      void Function(
          ffi.Pointer<GStrvBuilder>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_strv_builder_add_many(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_add_many(
      builder,
    );
  }

  late final _g_strv_builder_add_manyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStrvBuilder>)>>(
          'g_strv_builder_add_many');
  late final _g_strv_builder_add_many = _g_strv_builder_add_manyPtr
      .asFunction<void Function(ffi.Pointer<GStrvBuilder>)>();

  void g_strv_builder_take(
    ffi.Pointer<GStrvBuilder> builder,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _g_strv_builder_take(
      builder,
      value,
    );
  }

  late final _g_strv_builder_takePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStrvBuilder>,
              ffi.Pointer<ffi.Char>)>>('g_strv_builder_take');
  late final _g_strv_builder_take = _g_strv_builder_takePtr.asFunction<
      void Function(ffi.Pointer<GStrvBuilder>, ffi.Pointer<ffi.Char>)>();

  GStrv g_strv_builder_end(
    ffi.Pointer<GStrvBuilder> builder,
  ) {
    return _g_strv_builder_end(
      builder,
    );
  }

  late final _g_strv_builder_endPtr =
      _lookup<ffi.NativeFunction<GStrv Function(ffi.Pointer<GStrvBuilder>)>>(
          'g_strv_builder_end');
  late final _g_strv_builder_end = _g_strv_builder_endPtr
      .asFunction<GStrv Function(ffi.Pointer<GStrvBuilder>)>();

  ffi.Pointer<ffi.Int> __errno_location() {
    return ___errno_location();
  }

  late final ___errno_locationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__errno_location');
  late final ___errno_location =
      ___errno_locationPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int g_strcmp0(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _g_strcmp0(
      str1,
      str2,
    );
  }

  late final _g_strcmp0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('g_strcmp0');
  late final _g_strcmp0 = _g_strcmp0Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_test_minimized_result(
    double minimized_quantity,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_minimized_result(
      minimized_quantity,
      format,
    );
  }

  late final _g_test_minimized_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<ffi.Char>)>>('g_test_minimized_result');
  late final _g_test_minimized_result = _g_test_minimized_resultPtr
      .asFunction<void Function(double, ffi.Pointer<ffi.Char>)>();

  void g_test_maximized_result(
    double maximized_quantity,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_maximized_result(
      maximized_quantity,
      format,
    );
  }

  late final _g_test_maximized_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<ffi.Char>)>>('g_test_maximized_result');
  late final _g_test_maximized_result = _g_test_maximized_resultPtr
      .asFunction<void Function(double, ffi.Pointer<ffi.Char>)>();

  void g_test_init(
    ffi.Pointer<ffi.Int> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argv,
  ) {
    return _g_test_init(
      argc,
      argv,
    );
  }

  late final _g_test_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>('g_test_init');
  late final _g_test_init = _g_test_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  int g_test_subprocess() {
    return _g_test_subprocess();
  }

  late final _g_test_subprocessPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('g_test_subprocess');
  late final _g_test_subprocess =
      _g_test_subprocessPtr.asFunction<int Function()>();

  int g_test_run() {
    return _g_test_run();
  }

  late final _g_test_runPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('g_test_run');
  late final _g_test_run = _g_test_runPtr.asFunction<int Function()>();

  void g_test_add_func(
    ffi.Pointer<ffi.Char> testpath,
    GTestFunc test_func,
  ) {
    return _g_test_add_func(
      testpath,
      test_func,
    );
  }

  late final _g_test_add_funcPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, GTestFunc)>>(
      'g_test_add_func');
  late final _g_test_add_func = _g_test_add_funcPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, GTestFunc)>();

  void g_test_add_data_func(
    ffi.Pointer<ffi.Char> testpath,
    gconstpointer test_data,
    GTestDataFunc test_func,
  ) {
    return _g_test_add_data_func(
      testpath,
      test_data,
      test_func,
    );
  }

  late final _g_test_add_data_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, gconstpointer,
              GTestDataFunc)>>('g_test_add_data_func');
  late final _g_test_add_data_func = _g_test_add_data_funcPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, gconstpointer, GTestDataFunc)>();

  void g_test_add_data_func_full(
    ffi.Pointer<ffi.Char> testpath,
    ffi.Pointer test_data,
    GTestDataFunc test_func,
    GDestroyNotify data_free_func,
  ) {
    return _g_test_add_data_func_full(
      testpath,
      test_data,
      test_func,
      data_free_func,
    );
  }

  late final _g_test_add_data_func_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer, GTestDataFunc,
              GDestroyNotify)>>('g_test_add_data_func_full');
  late final _g_test_add_data_func_full =
      _g_test_add_data_func_fullPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer, GTestDataFunc,
              GDestroyNotify)>();

  ffi.Pointer<ffi.Char> g_test_get_path() {
    return _g_test_get_path();
  }

  late final _g_test_get_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_test_get_path');
  late final _g_test_get_path =
      _g_test_get_pathPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void g_test_fail() {
    return _g_test_fail();
  }

  late final _g_test_failPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_test_fail');
  late final _g_test_fail = _g_test_failPtr.asFunction<void Function()>();

  void g_test_fail_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_fail_printf(
      format,
    );
  }

  late final _g_test_fail_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_fail_printf');
  late final _g_test_fail_printf =
      _g_test_fail_printfPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_incomplete(
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _g_test_incomplete(
      msg,
    );
  }

  late final _g_test_incompletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_incomplete');
  late final _g_test_incomplete =
      _g_test_incompletePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_incomplete_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_incomplete_printf(
      format,
    );
  }

  late final _g_test_incomplete_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_incomplete_printf');
  late final _g_test_incomplete_printf = _g_test_incomplete_printfPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_skip(
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _g_test_skip(
      msg,
    );
  }

  late final _g_test_skipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_skip');
  late final _g_test_skip =
      _g_test_skipPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_skip_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_skip_printf(
      format,
    );
  }

  late final _g_test_skip_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_skip_printf');
  late final _g_test_skip_printf =
      _g_test_skip_printfPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int g_test_failed() {
    return _g_test_failed();
  }

  late final _g_test_failedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('g_test_failed');
  late final _g_test_failed = _g_test_failedPtr.asFunction<int Function()>();

  void g_test_set_nonfatal_assertions() {
    return _g_test_set_nonfatal_assertions();
  }

  late final _g_test_set_nonfatal_assertionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_test_set_nonfatal_assertions');
  late final _g_test_set_nonfatal_assertions =
      _g_test_set_nonfatal_assertionsPtr.asFunction<void Function()>();

  void g_test_disable_crash_reporting() {
    return _g_test_disable_crash_reporting();
  }

  late final _g_test_disable_crash_reportingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_test_disable_crash_reporting');
  late final _g_test_disable_crash_reporting =
      _g_test_disable_crash_reportingPtr.asFunction<void Function()>();

  void g_test_message(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _g_test_message(
      format,
    );
  }

  late final _g_test_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_message');
  late final _g_test_message =
      _g_test_messagePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_bug_base(
    ffi.Pointer<ffi.Char> uri_pattern,
  ) {
    return _g_test_bug_base(
      uri_pattern,
    );
  }

  late final _g_test_bug_basePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_bug_base');
  late final _g_test_bug_base =
      _g_test_bug_basePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_bug(
    ffi.Pointer<ffi.Char> bug_uri_snippet,
  ) {
    return _g_test_bug(
      bug_uri_snippet,
    );
  }

  late final _g_test_bugPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_bug');
  late final _g_test_bug =
      _g_test_bugPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_summary(
    ffi.Pointer<ffi.Char> summary,
  ) {
    return _g_test_summary(
      summary,
    );
  }

  late final _g_test_summaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'g_test_summary');
  late final _g_test_summary =
      _g_test_summaryPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void g_test_timer_start() {
    return _g_test_timer_start();
  }

  late final _g_test_timer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_test_timer_start');
  late final _g_test_timer_start =
      _g_test_timer_startPtr.asFunction<void Function()>();

  double g_test_timer_elapsed() {
    return _g_test_timer_elapsed();
  }

  late final _g_test_timer_elapsedPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'g_test_timer_elapsed');
  late final _g_test_timer_elapsed =
      _g_test_timer_elapsedPtr.asFunction<double Function()>();

  double g_test_timer_last() {
    return _g_test_timer_last();
  }

  late final _g_test_timer_lastPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('g_test_timer_last');
  late final _g_test_timer_last =
      _g_test_timer_lastPtr.asFunction<double Function()>();

  void g_test_queue_free(
    ffi.Pointer gfree_pointer,
  ) {
    return _g_test_queue_free(
      gfree_pointer,
    );
  }

  late final _g_test_queue_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_test_queue_free');
  late final _g_test_queue_free =
      _g_test_queue_freePtr.asFunction<void Function(ffi.Pointer)>();

  void g_test_queue_destroy(
    GDestroyNotify destroy_func,
    ffi.Pointer destroy_data,
  ) {
    return _g_test_queue_destroy(
      destroy_func,
      destroy_data,
    );
  }

  late final _g_test_queue_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GDestroyNotify, ffi.Pointer)>>(
      'g_test_queue_destroy');
  late final _g_test_queue_destroy = _g_test_queue_destroyPtr
      .asFunction<void Function(GDestroyNotify, ffi.Pointer)>();

  int g_test_trap_fork(
    int usec_timeout,
    int test_trap_flags,
  ) {
    return _g_test_trap_fork(
      usec_timeout,
      test_trap_flags,
    );
  }

  late final _g_test_trap_forkPtr =
      _lookup<ffi.NativeFunction<gboolean Function(guint64, ffi.Int32)>>(
          'g_test_trap_fork');
  late final _g_test_trap_fork =
      _g_test_trap_forkPtr.asFunction<int Function(int, int)>();

  void g_test_trap_subprocess(
    ffi.Pointer<ffi.Char> test_path,
    int usec_timeout,
    int test_flags,
  ) {
    return _g_test_trap_subprocess(
      test_path,
      usec_timeout,
      test_flags,
    );
  }

  late final _g_test_trap_subprocessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, guint64,
              ffi.Int32)>>('g_test_trap_subprocess');
  late final _g_test_trap_subprocess = _g_test_trap_subprocessPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, int)>();

  void g_test_trap_subprocess_with_envp(
    ffi.Pointer<ffi.Char> test_path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> envp,
    int usec_timeout,
    int test_flags,
  ) {
    return _g_test_trap_subprocess_with_envp(
      test_path,
      envp,
      usec_timeout,
      test_flags,
    );
  }

  late final _g_test_trap_subprocess_with_envpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              guint64,
              ffi.Int32)>>('g_test_trap_subprocess_with_envp');
  late final _g_test_trap_subprocess_with_envp =
      _g_test_trap_subprocess_with_envpPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int, int)>();

  int g_test_trap_has_passed() {
    return _g_test_trap_has_passed();
  }

  late final _g_test_trap_has_passedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_test_trap_has_passed');
  late final _g_test_trap_has_passed =
      _g_test_trap_has_passedPtr.asFunction<int Function()>();

  int g_test_trap_reached_timeout() {
    return _g_test_trap_reached_timeout();
  }

  late final _g_test_trap_reached_timeoutPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_test_trap_reached_timeout');
  late final _g_test_trap_reached_timeout =
      _g_test_trap_reached_timeoutPtr.asFunction<int Function()>();

  int g_test_rand_int() {
    return _g_test_rand_int();
  }

  late final _g_test_rand_intPtr =
      _lookup<ffi.NativeFunction<gint32 Function()>>('g_test_rand_int');
  late final _g_test_rand_int =
      _g_test_rand_intPtr.asFunction<int Function()>();

  int g_test_rand_int_range(
    int begin,
    int end,
  ) {
    return _g_test_rand_int_range(
      begin,
      end,
    );
  }

  late final _g_test_rand_int_rangePtr =
      _lookup<ffi.NativeFunction<gint32 Function(gint32, gint32)>>(
          'g_test_rand_int_range');
  late final _g_test_rand_int_range =
      _g_test_rand_int_rangePtr.asFunction<int Function(int, int)>();

  double g_test_rand_double() {
    return _g_test_rand_double();
  }

  late final _g_test_rand_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('g_test_rand_double');
  late final _g_test_rand_double =
      _g_test_rand_doublePtr.asFunction<double Function()>();

  double g_test_rand_double_range(
    double range_start,
    double range_end,
  ) {
    return _g_test_rand_double_range(
      range_start,
      range_end,
    );
  }

  late final _g_test_rand_double_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'g_test_rand_double_range');
  late final _g_test_rand_double_range = _g_test_rand_double_rangePtr
      .asFunction<double Function(double, double)>();

  ffi.Pointer<GTestCase> g_test_create_case(
    ffi.Pointer<ffi.Char> test_name,
    int data_size,
    gconstpointer test_data,
    GTestFixtureFunc data_setup,
    GTestFixtureFunc data_test,
    GTestFixtureFunc data_teardown,
  ) {
    return _g_test_create_case(
      test_name,
      data_size,
      test_data,
      data_setup,
      data_test,
      data_teardown,
    );
  }

  late final _g_test_create_casePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTestCase> Function(
              ffi.Pointer<ffi.Char>,
              gsize,
              gconstpointer,
              GTestFixtureFunc,
              GTestFixtureFunc,
              GTestFixtureFunc)>>('g_test_create_case');
  late final _g_test_create_case = _g_test_create_casePtr.asFunction<
      ffi.Pointer<GTestCase> Function(ffi.Pointer<ffi.Char>, int, gconstpointer,
          GTestFixtureFunc, GTestFixtureFunc, GTestFixtureFunc)>();

  ffi.Pointer<GTestSuite> g_test_create_suite(
    ffi.Pointer<ffi.Char> suite_name,
  ) {
    return _g_test_create_suite(
      suite_name,
    );
  }

  late final _g_test_create_suitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTestSuite> Function(
              ffi.Pointer<ffi.Char>)>>('g_test_create_suite');
  late final _g_test_create_suite = _g_test_create_suitePtr
      .asFunction<ffi.Pointer<GTestSuite> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GTestSuite> g_test_get_root() {
    return _g_test_get_root();
  }

  late final _g_test_get_rootPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTestSuite> Function()>>(
          'g_test_get_root');
  late final _g_test_get_root =
      _g_test_get_rootPtr.asFunction<ffi.Pointer<GTestSuite> Function()>();

  void g_test_suite_add(
    ffi.Pointer<GTestSuite> suite,
    ffi.Pointer<GTestCase> test_case,
  ) {
    return _g_test_suite_add(
      suite,
      test_case,
    );
  }

  late final _g_test_suite_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestSuite>,
              ffi.Pointer<GTestCase>)>>('g_test_suite_add');
  late final _g_test_suite_add = _g_test_suite_addPtr.asFunction<
      void Function(ffi.Pointer<GTestSuite>, ffi.Pointer<GTestCase>)>();

  void g_test_suite_add_suite(
    ffi.Pointer<GTestSuite> suite,
    ffi.Pointer<GTestSuite> nestedsuite,
  ) {
    return _g_test_suite_add_suite(
      suite,
      nestedsuite,
    );
  }

  late final _g_test_suite_add_suitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestSuite>,
              ffi.Pointer<GTestSuite>)>>('g_test_suite_add_suite');
  late final _g_test_suite_add_suite = _g_test_suite_add_suitePtr.asFunction<
      void Function(ffi.Pointer<GTestSuite>, ffi.Pointer<GTestSuite>)>();

  int g_test_run_suite(
    ffi.Pointer<GTestSuite> suite,
  ) {
    return _g_test_run_suite(
      suite,
    );
  }

  late final _g_test_run_suitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GTestSuite>)>>(
          'g_test_run_suite');
  late final _g_test_run_suite =
      _g_test_run_suitePtr.asFunction<int Function(ffi.Pointer<GTestSuite>)>();

  void g_test_case_free(
    ffi.Pointer<GTestCase> test_case,
  ) {
    return _g_test_case_free(
      test_case,
    );
  }

  late final _g_test_case_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestCase>)>>(
          'g_test_case_free');
  late final _g_test_case_free =
      _g_test_case_freePtr.asFunction<void Function(ffi.Pointer<GTestCase>)>();

  void g_test_suite_free(
    ffi.Pointer<GTestSuite> suite,
  ) {
    return _g_test_suite_free(
      suite,
    );
  }

  late final _g_test_suite_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestSuite>)>>(
          'g_test_suite_free');
  late final _g_test_suite_free = _g_test_suite_freePtr
      .asFunction<void Function(ffi.Pointer<GTestSuite>)>();

  void g_test_trap_assertions(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    int assertion_flags,
    ffi.Pointer<ffi.Char> pattern,
  ) {
    return _g_test_trap_assertions(
      domain,
      file,
      line,
      func,
      assertion_flags,
      pattern,
    );
  }

  late final _g_test_trap_assertionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              guint64,
              ffi.Pointer<ffi.Char>)>>('g_test_trap_assertions');
  late final _g_test_trap_assertions = _g_test_trap_assertionsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void g_assertion_message(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _g_assertion_message(
      domain,
      file,
      line,
      func,
      message,
    );
  }

  late final _g_assertion_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assertion_message');
  late final _g_assertion_message = _g_assertion_messagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_assertion_message_expr(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
  ) {
    return _g_assertion_message_expr(
      domain,
      file,
      line,
      func,
      expr,
    );
  }

  late final _g_assertion_message_exprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assertion_message_expr');
  late final _g_assertion_message_expr =
      _g_assertion_message_exprPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void g_assertion_message_cmpstr(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> cmp,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _g_assertion_message_cmpstr(
      domain,
      file,
      line,
      func,
      expr,
      arg1,
      cmp,
      arg2,
    );
  }

  late final _g_assertion_message_cmpstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_assertion_message_cmpstr');
  late final _g_assertion_message_cmpstr =
      _g_assertion_message_cmpstrPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void g_assertion_message_cmpstrv(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    int first_wrong_idx,
  ) {
    return _g_assertion_message_cmpstrv(
      domain,
      file,
      line,
      func,
      expr,
      arg1,
      arg2,
      first_wrong_idx,
    );
  }

  late final _g_assertion_message_cmpstrvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              gsize)>>('g_assertion_message_cmpstrv');
  late final _g_assertion_message_cmpstrv =
      _g_assertion_message_cmpstrvPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int)>();

  void g_assertion_message_cmpint(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    int arg1,
    ffi.Pointer<ffi.Char> cmp,
    int arg2,
    int numtype,
  ) {
    return _g_assertion_message_cmpint(
      domain,
      file,
      line,
      func,
      expr,
      arg1,
      cmp,
      arg2,
      numtype,
    );
  }

  late final _g_assertion_message_cmpintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              guint64,
              ffi.Pointer<ffi.Char>,
              guint64,
              ffi.Char)>>('g_assertion_message_cmpint');
  late final _g_assertion_message_cmpint =
      _g_assertion_message_cmpintPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  void g_assertion_message_error(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> expr,
    ffi.Pointer<GError> error,
    int error_domain,
    int error_code,
  ) {
    return _g_assertion_message_error(
      domain,
      file,
      line,
      func,
      expr,
      error,
      error_domain,
      error_code,
    );
  }

  late final _g_assertion_message_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GError>,
              GQuark,
              ffi.Int)>>('g_assertion_message_error');
  late final _g_assertion_message_error =
      _g_assertion_message_errorPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GError>,
              int,
              int)>();

  void g_test_add_vtable(
    ffi.Pointer<ffi.Char> testpath,
    int data_size,
    gconstpointer test_data,
    GTestFixtureFunc data_setup,
    GTestFixtureFunc data_test,
    GTestFixtureFunc data_teardown,
  ) {
    return _g_test_add_vtable(
      testpath,
      data_size,
      test_data,
      data_setup,
      data_test,
      data_teardown,
    );
  }

  late final _g_test_add_vtablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              gsize,
              gconstpointer,
              GTestFixtureFunc,
              GTestFixtureFunc,
              GTestFixtureFunc)>>('g_test_add_vtable');
  late final _g_test_add_vtable = _g_test_add_vtablePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, gconstpointer, GTestFixtureFunc,
          GTestFixtureFunc, GTestFixtureFunc)>();

  late final ffi.Pointer<ffi.Pointer<GTestConfig>> _g_test_config_vars =
      _lookup<ffi.Pointer<GTestConfig>>('g_test_config_vars');

  ffi.Pointer<GTestConfig> get g_test_config_vars => _g_test_config_vars.value;

  ffi.Pointer<ffi.Char> g_test_log_type_name(
    int log_type,
  ) {
    return _g_test_log_type_name(
      log_type,
    );
  }

  late final _g_test_log_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'g_test_log_type_name');
  late final _g_test_log_type_name = _g_test_log_type_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<GTestLogBuffer> g_test_log_buffer_new() {
    return _g_test_log_buffer_new();
  }

  late final _g_test_log_buffer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTestLogBuffer> Function()>>(
          'g_test_log_buffer_new');
  late final _g_test_log_buffer_new = _g_test_log_buffer_newPtr
      .asFunction<ffi.Pointer<GTestLogBuffer> Function()>();

  void g_test_log_buffer_free(
    ffi.Pointer<GTestLogBuffer> tbuffer,
  ) {
    return _g_test_log_buffer_free(
      tbuffer,
    );
  }

  late final _g_test_log_buffer_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestLogBuffer>)>>(
      'g_test_log_buffer_free');
  late final _g_test_log_buffer_free = _g_test_log_buffer_freePtr
      .asFunction<void Function(ffi.Pointer<GTestLogBuffer>)>();

  void g_test_log_buffer_push(
    ffi.Pointer<GTestLogBuffer> tbuffer,
    int n_bytes,
    ffi.Pointer<guint8> bytes,
  ) {
    return _g_test_log_buffer_push(
      tbuffer,
      n_bytes,
      bytes,
    );
  }

  late final _g_test_log_buffer_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTestLogBuffer>, guint,
              ffi.Pointer<guint8>)>>('g_test_log_buffer_push');
  late final _g_test_log_buffer_push = _g_test_log_buffer_pushPtr.asFunction<
      void Function(ffi.Pointer<GTestLogBuffer>, int, ffi.Pointer<guint8>)>();

  ffi.Pointer<GTestLogMsg> g_test_log_buffer_pop(
    ffi.Pointer<GTestLogBuffer> tbuffer,
  ) {
    return _g_test_log_buffer_pop(
      tbuffer,
    );
  }

  late final _g_test_log_buffer_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTestLogMsg> Function(
              ffi.Pointer<GTestLogBuffer>)>>('g_test_log_buffer_pop');
  late final _g_test_log_buffer_pop = _g_test_log_buffer_popPtr.asFunction<
      ffi.Pointer<GTestLogMsg> Function(ffi.Pointer<GTestLogBuffer>)>();

  void g_test_log_msg_free(
    ffi.Pointer<GTestLogMsg> tmsg,
  ) {
    return _g_test_log_msg_free(
      tmsg,
    );
  }

  late final _g_test_log_msg_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTestLogMsg>)>>(
          'g_test_log_msg_free');
  late final _g_test_log_msg_free = _g_test_log_msg_freePtr
      .asFunction<void Function(ffi.Pointer<GTestLogMsg>)>();

  void g_test_log_set_fatal_handler(
    GTestLogFatalFunc log_func,
    ffi.Pointer user_data,
  ) {
    return _g_test_log_set_fatal_handler(
      log_func,
      user_data,
    );
  }

  late final _g_test_log_set_fatal_handlerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(GTestLogFatalFunc, ffi.Pointer)>>(
      'g_test_log_set_fatal_handler');
  late final _g_test_log_set_fatal_handler = _g_test_log_set_fatal_handlerPtr
      .asFunction<void Function(GTestLogFatalFunc, ffi.Pointer)>();

  void g_test_expect_message(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> pattern,
  ) {
    return _g_test_expect_message(
      log_domain,
      log_level,
      pattern,
    );
  }

  late final _g_test_expect_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('g_test_expect_message');
  late final _g_test_expect_message = _g_test_expect_messagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void g_test_assert_expected_messages_internal(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
  ) {
    return _g_test_assert_expected_messages_internal(
      domain,
      file,
      line,
      func,
    );
  }

  late final _g_test_assert_expected_messages_internalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
                  ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'g_test_assert_expected_messages_internal');
  late final _g_test_assert_expected_messages_internal =
      _g_test_assert_expected_messages_internalPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_test_build_filename(
    int file_type,
    ffi.Pointer<ffi.Char> first_path,
  ) {
    return _g_test_build_filename(
      file_type,
      first_path,
    );
  }

  late final _g_test_build_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('g_test_build_filename');
  late final _g_test_build_filename = _g_test_build_filenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_test_get_dir(
    int file_type,
  ) {
    return _g_test_get_dir(
      file_type,
    );
  }

  late final _g_test_get_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'g_test_get_dir');
  late final _g_test_get_dir =
      _g_test_get_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> g_test_get_filename(
    int file_type,
    ffi.Pointer<ffi.Char> first_path,
  ) {
    return _g_test_get_filename(
      file_type,
      first_path,
    );
  }

  late final _g_test_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('g_test_get_filename');
  late final _g_test_get_filename = _g_test_get_filenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GThreadPool> g_thread_pool_new(
    GFunc func,
    ffi.Pointer user_data,
    int max_threads,
    int exclusive,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_new(
      func,
      user_data,
      max_threads,
      exclusive,
      error,
    );
  }

  late final _g_thread_pool_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThreadPool> Function(GFunc, ffi.Pointer, gint, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_pool_new');
  late final _g_thread_pool_new = _g_thread_pool_newPtr.asFunction<
      ffi.Pointer<GThreadPool> Function(
          GFunc, ffi.Pointer, int, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GThreadPool> g_thread_pool_new_full(
    GFunc func,
    ffi.Pointer user_data,
    GDestroyNotify item_free_func,
    int max_threads,
    int exclusive,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_new_full(
      func,
      user_data,
      item_free_func,
      max_threads,
      exclusive,
      error,
    );
  }

  late final _g_thread_pool_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThreadPool> Function(
              GFunc,
              ffi.Pointer,
              GDestroyNotify,
              gint,
              gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_pool_new_full');
  late final _g_thread_pool_new_full = _g_thread_pool_new_fullPtr.asFunction<
      ffi.Pointer<GThreadPool> Function(GFunc, ffi.Pointer, GDestroyNotify, int,
          int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_thread_pool_free(
    ffi.Pointer<GThreadPool> pool,
    int immediate,
    int wait_,
  ) {
    return _g_thread_pool_free(
      pool,
      immediate,
      wait_,
    );
  }

  late final _g_thread_pool_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GThreadPool>, gboolean,
              gboolean)>>('g_thread_pool_free');
  late final _g_thread_pool_free = _g_thread_pool_freePtr
      .asFunction<void Function(ffi.Pointer<GThreadPool>, int, int)>();

  int g_thread_pool_push(
    ffi.Pointer<GThreadPool> pool,
    ffi.Pointer data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_push(
      pool,
      data,
      error,
    );
  }

  late final _g_thread_pool_pushPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GThreadPool>, ffi.Pointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_pool_push');
  late final _g_thread_pool_push = _g_thread_pool_pushPtr.asFunction<
      int Function(ffi.Pointer<GThreadPool>, ffi.Pointer,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_thread_pool_unprocessed(
    ffi.Pointer<GThreadPool> pool,
  ) {
    return _g_thread_pool_unprocessed(
      pool,
    );
  }

  late final _g_thread_pool_unprocessedPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GThreadPool>)>>(
          'g_thread_pool_unprocessed');
  late final _g_thread_pool_unprocessed = _g_thread_pool_unprocessedPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>)>();

  void g_thread_pool_set_sort_function(
    ffi.Pointer<GThreadPool> pool,
    GCompareDataFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_thread_pool_set_sort_function(
      pool,
      func,
      user_data,
    );
  }

  late final _g_thread_pool_set_sort_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GThreadPool>, GCompareDataFunc,
              ffi.Pointer)>>('g_thread_pool_set_sort_function');
  late final _g_thread_pool_set_sort_function =
      _g_thread_pool_set_sort_functionPtr.asFunction<
          void Function(
              ffi.Pointer<GThreadPool>, GCompareDataFunc, ffi.Pointer)>();

  int g_thread_pool_move_to_front(
    ffi.Pointer<GThreadPool> pool,
    ffi.Pointer data,
  ) {
    return _g_thread_pool_move_to_front(
      pool,
      data,
    );
  }

  late final _g_thread_pool_move_to_frontPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GThreadPool>,
              ffi.Pointer)>>('g_thread_pool_move_to_front');
  late final _g_thread_pool_move_to_front = _g_thread_pool_move_to_frontPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>, ffi.Pointer)>();

  int g_thread_pool_set_max_threads(
    ffi.Pointer<GThreadPool> pool,
    int max_threads,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_pool_set_max_threads(
      pool,
      max_threads,
      error,
    );
  }

  late final _g_thread_pool_set_max_threadsPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GThreadPool>, gint,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'g_thread_pool_set_max_threads');
  late final _g_thread_pool_set_max_threads =
      _g_thread_pool_set_max_threadsPtr.asFunction<
          int Function(ffi.Pointer<GThreadPool>, int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_thread_pool_get_max_threads(
    ffi.Pointer<GThreadPool> pool,
  ) {
    return _g_thread_pool_get_max_threads(
      pool,
    );
  }

  late final _g_thread_pool_get_max_threadsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GThreadPool>)>>(
          'g_thread_pool_get_max_threads');
  late final _g_thread_pool_get_max_threads = _g_thread_pool_get_max_threadsPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>)>();

  int g_thread_pool_get_num_threads(
    ffi.Pointer<GThreadPool> pool,
  ) {
    return _g_thread_pool_get_num_threads(
      pool,
    );
  }

  late final _g_thread_pool_get_num_threadsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GThreadPool>)>>(
          'g_thread_pool_get_num_threads');
  late final _g_thread_pool_get_num_threads = _g_thread_pool_get_num_threadsPtr
      .asFunction<int Function(ffi.Pointer<GThreadPool>)>();

  void g_thread_pool_set_max_unused_threads(
    int max_threads,
  ) {
    return _g_thread_pool_set_max_unused_threads(
      max_threads,
    );
  }

  late final _g_thread_pool_set_max_unused_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gint)>>(
          'g_thread_pool_set_max_unused_threads');
  late final _g_thread_pool_set_max_unused_threads =
      _g_thread_pool_set_max_unused_threadsPtr.asFunction<void Function(int)>();

  int g_thread_pool_get_max_unused_threads() {
    return _g_thread_pool_get_max_unused_threads();
  }

  late final _g_thread_pool_get_max_unused_threadsPtr =
      _lookup<ffi.NativeFunction<gint Function()>>(
          'g_thread_pool_get_max_unused_threads');
  late final _g_thread_pool_get_max_unused_threads =
      _g_thread_pool_get_max_unused_threadsPtr.asFunction<int Function()>();

  int g_thread_pool_get_num_unused_threads() {
    return _g_thread_pool_get_num_unused_threads();
  }

  late final _g_thread_pool_get_num_unused_threadsPtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_thread_pool_get_num_unused_threads');
  late final _g_thread_pool_get_num_unused_threads =
      _g_thread_pool_get_num_unused_threadsPtr.asFunction<int Function()>();

  void g_thread_pool_stop_unused_threads() {
    return _g_thread_pool_stop_unused_threads();
  }

  late final _g_thread_pool_stop_unused_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'g_thread_pool_stop_unused_threads');
  late final _g_thread_pool_stop_unused_threads =
      _g_thread_pool_stop_unused_threadsPtr.asFunction<void Function()>();

  void g_thread_pool_set_max_idle_time(
    int interval,
  ) {
    return _g_thread_pool_set_max_idle_time(
      interval,
    );
  }

  late final _g_thread_pool_set_max_idle_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint)>>(
          'g_thread_pool_set_max_idle_time');
  late final _g_thread_pool_set_max_idle_time =
      _g_thread_pool_set_max_idle_timePtr.asFunction<void Function(int)>();

  int g_thread_pool_get_max_idle_time() {
    return _g_thread_pool_get_max_idle_time();
  }

  late final _g_thread_pool_get_max_idle_timePtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_thread_pool_get_max_idle_time');
  late final _g_thread_pool_get_max_idle_time =
      _g_thread_pool_get_max_idle_timePtr.asFunction<int Function()>();

  ffi.Pointer<GTimer> g_timer_new() {
    return _g_timer_new();
  }

  late final _g_timer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTimer> Function()>>(
          'g_timer_new');
  late final _g_timer_new =
      _g_timer_newPtr.asFunction<ffi.Pointer<GTimer> Function()>();

  void g_timer_destroy(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_destroy(
      timer,
    );
  }

  late final _g_timer_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_destroy');
  late final _g_timer_destroy =
      _g_timer_destroyPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_start(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_start(
      timer,
    );
  }

  late final _g_timer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_start');
  late final _g_timer_start =
      _g_timer_startPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_stop(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_stop(
      timer,
    );
  }

  late final _g_timer_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_stop');
  late final _g_timer_stop =
      _g_timer_stopPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_reset(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_reset(
      timer,
    );
  }

  late final _g_timer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_reset');
  late final _g_timer_reset =
      _g_timer_resetPtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  void g_timer_continue(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_continue(
      timer,
    );
  }

  late final _g_timer_continuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimer>)>>(
          'g_timer_continue');
  late final _g_timer_continue =
      _g_timer_continuePtr.asFunction<void Function(ffi.Pointer<GTimer>)>();

  double g_timer_elapsed(
    ffi.Pointer<GTimer> timer,
    ffi.Pointer<gulong> microseconds,
  ) {
    return _g_timer_elapsed(
      timer,
      microseconds,
    );
  }

  late final _g_timer_elapsedPtr = _lookup<
      ffi.NativeFunction<
          gdouble Function(
              ffi.Pointer<GTimer>, ffi.Pointer<gulong>)>>('g_timer_elapsed');
  late final _g_timer_elapsed = _g_timer_elapsedPtr
      .asFunction<double Function(ffi.Pointer<GTimer>, ffi.Pointer<gulong>)>();

  int g_timer_is_active(
    ffi.Pointer<GTimer> timer,
  ) {
    return _g_timer_is_active(
      timer,
    );
  }

  late final _g_timer_is_activePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTimer>)>>(
          'g_timer_is_active');
  late final _g_timer_is_active =
      _g_timer_is_activePtr.asFunction<int Function(ffi.Pointer<GTimer>)>();

  void g_usleep(
    int microseconds,
  ) {
    return _g_usleep(
      microseconds,
    );
  }

  late final _g_usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gulong)>>('g_usleep');
  late final _g_usleep = _g_usleepPtr.asFunction<void Function(int)>();

  void g_time_val_add(
    ffi.Pointer<GTimeVal> time_,
    int microseconds,
  ) {
    return _g_time_val_add(
      time_,
      microseconds,
    );
  }

  late final _g_time_val_addPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTimeVal>, glong)>>(
      'g_time_val_add');
  late final _g_time_val_add = _g_time_val_addPtr
      .asFunction<void Function(ffi.Pointer<GTimeVal>, int)>();

  int g_time_val_from_iso8601(
    ffi.Pointer<ffi.Char> iso_date,
    ffi.Pointer<GTimeVal> time_,
  ) {
    return _g_time_val_from_iso8601(
      iso_date,
      time_,
    );
  }

  late final _g_time_val_from_iso8601Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GTimeVal>)>>('g_time_val_from_iso8601');
  late final _g_time_val_from_iso8601 = _g_time_val_from_iso8601Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GTimeVal>)>();

  ffi.Pointer<ffi.Char> g_time_val_to_iso8601(
    ffi.Pointer<GTimeVal> time_,
  ) {
    return _g_time_val_to_iso8601(
      time_,
    );
  }

  late final _g_time_val_to_iso8601Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GTimeVal>)>>('g_time_val_to_iso8601');
  late final _g_time_val_to_iso8601 = _g_time_val_to_iso8601Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GTimeVal>)>();

  void g_trash_stack_push(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
    ffi.Pointer data_p,
  ) {
    return _g_trash_stack_push(
      stack_p,
      data_p,
    );
  }

  late final _g_trash_stack_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<GTrashStack>>,
              ffi.Pointer)>>('g_trash_stack_push');
  late final _g_trash_stack_push = _g_trash_stack_pushPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<GTrashStack>>, ffi.Pointer)>();

  ffi.Pointer g_trash_stack_pop(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
  ) {
    return _g_trash_stack_pop(
      stack_p,
    );
  }

  late final _g_trash_stack_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<ffi.Pointer<GTrashStack>>)>>('g_trash_stack_pop');
  late final _g_trash_stack_pop = _g_trash_stack_popPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GTrashStack>>)>();

  ffi.Pointer g_trash_stack_peek(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
  ) {
    return _g_trash_stack_peek(
      stack_p,
    );
  }

  late final _g_trash_stack_peekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<ffi.Pointer<GTrashStack>>)>>('g_trash_stack_peek');
  late final _g_trash_stack_peek = _g_trash_stack_peekPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<ffi.Pointer<GTrashStack>>)>();

  int g_trash_stack_height(
    ffi.Pointer<ffi.Pointer<GTrashStack>> stack_p,
  ) {
    return _g_trash_stack_height(
      stack_p,
    );
  }

  late final _g_trash_stack_heightPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<ffi.Pointer<GTrashStack>>)>>('g_trash_stack_height');
  late final _g_trash_stack_height = _g_trash_stack_heightPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<GTrashStack>>)>();

  ffi.Pointer<GTree> g_tree_new(
    GCompareFunc key_compare_func,
  ) {
    return _g_tree_new(
      key_compare_func,
    );
  }

  late final _g_tree_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTree> Function(GCompareFunc)>>(
          'g_tree_new');
  late final _g_tree_new =
      _g_tree_newPtr.asFunction<ffi.Pointer<GTree> Function(GCompareFunc)>();

  ffi.Pointer<GTree> g_tree_new_with_data(
    GCompareDataFunc key_compare_func,
    ffi.Pointer key_compare_data,
  ) {
    return _g_tree_new_with_data(
      key_compare_func,
      key_compare_data,
    );
  }

  late final _g_tree_new_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTree> Function(
              GCompareDataFunc, ffi.Pointer)>>('g_tree_new_with_data');
  late final _g_tree_new_with_data = _g_tree_new_with_dataPtr
      .asFunction<ffi.Pointer<GTree> Function(GCompareDataFunc, ffi.Pointer)>();

  ffi.Pointer<GTree> g_tree_new_full(
    GCompareDataFunc key_compare_func,
    ffi.Pointer key_compare_data,
    GDestroyNotify key_destroy_func,
    GDestroyNotify value_destroy_func,
  ) {
    return _g_tree_new_full(
      key_compare_func,
      key_compare_data,
      key_destroy_func,
      value_destroy_func,
    );
  }

  late final _g_tree_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTree> Function(GCompareDataFunc, ffi.Pointer,
              GDestroyNotify, GDestroyNotify)>>('g_tree_new_full');
  late final _g_tree_new_full = _g_tree_new_fullPtr.asFunction<
      ffi.Pointer<GTree> Function(
          GCompareDataFunc, ffi.Pointer, GDestroyNotify, GDestroyNotify)>();

  ffi.Pointer<GTreeNode> g_tree_node_first(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_node_first(
      tree,
    );
  }

  late final _g_tree_node_firstPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>>(
      'g_tree_node_first');
  late final _g_tree_node_first = _g_tree_node_firstPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GTreeNode> g_tree_node_last(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_node_last(
      tree,
    );
  }

  late final _g_tree_node_lastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>>(
      'g_tree_node_last');
  late final _g_tree_node_last = _g_tree_node_lastPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GTreeNode> g_tree_node_previous(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_previous(
      node,
    );
  }

  late final _g_tree_node_previousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTreeNode>)>>('g_tree_node_previous');
  late final _g_tree_node_previous = _g_tree_node_previousPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer<GTreeNode> g_tree_node_next(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_next(
      node,
    );
  }

  late final _g_tree_node_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTreeNode>)>>('g_tree_node_next');
  late final _g_tree_node_next = _g_tree_node_nextPtr
      .asFunction<ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer<GTree> g_tree_ref(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_ref(
      tree,
    );
  }

  late final _g_tree_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GTree> Function(ffi.Pointer<GTree>)>>(
      'g_tree_ref');
  late final _g_tree_ref = _g_tree_refPtr
      .asFunction<ffi.Pointer<GTree> Function(ffi.Pointer<GTree>)>();

  void g_tree_unref(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_unref(
      tree,
    );
  }

  late final _g_tree_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTree>)>>(
          'g_tree_unref');
  late final _g_tree_unref =
      _g_tree_unrefPtr.asFunction<void Function(ffi.Pointer<GTree>)>();

  void g_tree_destroy(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_destroy(
      tree,
    );
  }

  late final _g_tree_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTree>)>>(
          'g_tree_destroy');
  late final _g_tree_destroy =
      _g_tree_destroyPtr.asFunction<void Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GTreeNode> g_tree_insert_node(
    ffi.Pointer<GTree> tree,
    ffi.Pointer key,
    ffi.Pointer value,
  ) {
    return _g_tree_insert_node(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_insert_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, ffi.Pointer,
              ffi.Pointer)>>('g_tree_insert_node');
  late final _g_tree_insert_node = _g_tree_insert_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(
          ffi.Pointer<GTree>, ffi.Pointer, ffi.Pointer)>();

  void g_tree_insert(
    ffi.Pointer<GTree> tree,
    ffi.Pointer key,
    ffi.Pointer value,
  ) {
    return _g_tree_insert(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTree>, ffi.Pointer, ffi.Pointer)>>('g_tree_insert');
  late final _g_tree_insert = _g_tree_insertPtr.asFunction<
      void Function(ffi.Pointer<GTree>, ffi.Pointer, ffi.Pointer)>();

  ffi.Pointer<GTreeNode> g_tree_replace_node(
    ffi.Pointer<GTree> tree,
    ffi.Pointer key,
    ffi.Pointer value,
  ) {
    return _g_tree_replace_node(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_replace_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, ffi.Pointer,
              ffi.Pointer)>>('g_tree_replace_node');
  late final _g_tree_replace_node = _g_tree_replace_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(
          ffi.Pointer<GTree>, ffi.Pointer, ffi.Pointer)>();

  void g_tree_replace(
    ffi.Pointer<GTree> tree,
    ffi.Pointer key,
    ffi.Pointer value,
  ) {
    return _g_tree_replace(
      tree,
      key,
      value,
    );
  }

  late final _g_tree_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GTree>, ffi.Pointer, ffi.Pointer)>>('g_tree_replace');
  late final _g_tree_replace = _g_tree_replacePtr.asFunction<
      void Function(ffi.Pointer<GTree>, ffi.Pointer, ffi.Pointer)>();

  int g_tree_remove(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_remove(
      tree,
      key,
    );
  }

  late final _g_tree_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_remove');
  late final _g_tree_remove = _g_tree_removePtr
      .asFunction<int Function(ffi.Pointer<GTree>, gconstpointer)>();

  void g_tree_remove_all(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_remove_all(
      tree,
    );
  }

  late final _g_tree_remove_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTree>)>>(
          'g_tree_remove_all');
  late final _g_tree_remove_all =
      _g_tree_remove_allPtr.asFunction<void Function(ffi.Pointer<GTree>)>();

  int g_tree_steal(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_steal(
      tree,
      key,
    );
  }

  late final _g_tree_stealPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_steal');
  late final _g_tree_steal = _g_tree_stealPtr
      .asFunction<int Function(ffi.Pointer<GTree>, gconstpointer)>();

  ffi.Pointer g_tree_node_key(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_key(
      node,
    );
  }

  late final _g_tree_node_keyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GTreeNode>)>>(
          'g_tree_node_key');
  late final _g_tree_node_key = _g_tree_node_keyPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer g_tree_node_value(
    ffi.Pointer<GTreeNode> node,
  ) {
    return _g_tree_node_value(
      node,
    );
  }

  late final _g_tree_node_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GTreeNode>)>>(
          'g_tree_node_value');
  late final _g_tree_node_value = _g_tree_node_valuePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GTreeNode>)>();

  ffi.Pointer<GTreeNode> g_tree_lookup_node(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_lookup_node(
      tree,
      key,
    );
  }

  late final _g_tree_lookup_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_lookup_node');
  late final _g_tree_lookup_node = _g_tree_lookup_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, gconstpointer)>();

  ffi.Pointer g_tree_lookup(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_lookup(
      tree,
      key,
    );
  }

  late final _g_tree_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_lookup');
  late final _g_tree_lookup = _g_tree_lookupPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GTree>, gconstpointer)>();

  int g_tree_lookup_extended(
    ffi.Pointer<GTree> tree,
    gconstpointer lookup_key,
    ffi.Pointer<ffi.Pointer> orig_key,
    ffi.Pointer<ffi.Pointer> value,
  ) {
    return _g_tree_lookup_extended(
      tree,
      lookup_key,
      orig_key,
      value,
    );
  }

  late final _g_tree_lookup_extendedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GTree>,
              gconstpointer,
              ffi.Pointer<ffi.Pointer>,
              ffi.Pointer<ffi.Pointer>)>>('g_tree_lookup_extended');
  late final _g_tree_lookup_extended = _g_tree_lookup_extendedPtr.asFunction<
      int Function(ffi.Pointer<GTree>, gconstpointer, ffi.Pointer<ffi.Pointer>,
          ffi.Pointer<ffi.Pointer>)>();

  void g_tree_foreach(
    ffi.Pointer<GTree> tree,
    GTraverseFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_tree_foreach(
      tree,
      func,
      user_data,
    );
  }

  late final _g_tree_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTree>, GTraverseFunc,
              ffi.Pointer)>>('g_tree_foreach');
  late final _g_tree_foreach = _g_tree_foreachPtr.asFunction<
      void Function(ffi.Pointer<GTree>, GTraverseFunc, ffi.Pointer)>();

  void g_tree_foreach_node(
    ffi.Pointer<GTree> tree,
    GTraverseNodeFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_tree_foreach_node(
      tree,
      func,
      user_data,
    );
  }

  late final _g_tree_foreach_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTree>, GTraverseNodeFunc,
              ffi.Pointer)>>('g_tree_foreach_node');
  late final _g_tree_foreach_node = _g_tree_foreach_nodePtr.asFunction<
      void Function(ffi.Pointer<GTree>, GTraverseNodeFunc, ffi.Pointer)>();

  void g_tree_traverse(
    ffi.Pointer<GTree> tree,
    GTraverseFunc traverse_func,
    int traverse_type,
    ffi.Pointer user_data,
  ) {
    return _g_tree_traverse(
      tree,
      traverse_func,
      traverse_type,
      user_data,
    );
  }

  late final _g_tree_traversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTree>, GTraverseFunc, ffi.Int32,
              ffi.Pointer)>>('g_tree_traverse');
  late final _g_tree_traverse = _g_tree_traversePtr.asFunction<
      void Function(ffi.Pointer<GTree>, GTraverseFunc, int, ffi.Pointer)>();

  ffi.Pointer<GTreeNode> g_tree_search_node(
    ffi.Pointer<GTree> tree,
    GCompareFunc search_func,
    gconstpointer user_data,
  ) {
    return _g_tree_search_node(
      tree,
      search_func,
      user_data,
    );
  }

  late final _g_tree_search_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, GCompareFunc,
              gconstpointer)>>('g_tree_search_node');
  late final _g_tree_search_node = _g_tree_search_nodePtr.asFunction<
      ffi.Pointer<GTreeNode> Function(
          ffi.Pointer<GTree>, GCompareFunc, gconstpointer)>();

  ffi.Pointer g_tree_search(
    ffi.Pointer<GTree> tree,
    GCompareFunc search_func,
    gconstpointer user_data,
  ) {
    return _g_tree_search(
      tree,
      search_func,
      user_data,
    );
  }

  late final _g_tree_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GTree>, GCompareFunc,
              gconstpointer)>>('g_tree_search');
  late final _g_tree_search = _g_tree_searchPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GTree>, GCompareFunc, gconstpointer)>();

  ffi.Pointer<GTreeNode> g_tree_lower_bound(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_lower_bound(
      tree,
      key,
    );
  }

  late final _g_tree_lower_boundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_lower_bound');
  late final _g_tree_lower_bound = _g_tree_lower_boundPtr.asFunction<
      ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, gconstpointer)>();

  ffi.Pointer<GTreeNode> g_tree_upper_bound(
    ffi.Pointer<GTree> tree,
    gconstpointer key,
  ) {
    return _g_tree_upper_bound(
      tree,
      key,
    );
  }

  late final _g_tree_upper_boundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTreeNode> Function(
              ffi.Pointer<GTree>, gconstpointer)>>('g_tree_upper_bound');
  late final _g_tree_upper_bound = _g_tree_upper_boundPtr.asFunction<
      ffi.Pointer<GTreeNode> Function(ffi.Pointer<GTree>, gconstpointer)>();

  int g_tree_height(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_height(
      tree,
    );
  }

  late final _g_tree_heightPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GTree>)>>(
          'g_tree_height');
  late final _g_tree_height =
      _g_tree_heightPtr.asFunction<int Function(ffi.Pointer<GTree>)>();

  int g_tree_nnodes(
    ffi.Pointer<GTree> tree,
  ) {
    return _g_tree_nnodes(
      tree,
    );
  }

  late final _g_tree_nnodesPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GTree>)>>(
          'g_tree_nnodes');
  late final _g_tree_nnodes =
      _g_tree_nnodesPtr.asFunction<int Function(ffi.Pointer<GTree>)>();

  ffi.Pointer<GUri> g_uri_ref(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_ref(
      uri,
    );
  }

  late final _g_uri_refPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GUri> Function(ffi.Pointer<GUri>)>>(
      'g_uri_ref');
  late final _g_uri_ref =
      _g_uri_refPtr.asFunction<ffi.Pointer<GUri> Function(ffi.Pointer<GUri>)>();

  void g_uri_unref(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_unref(
      uri,
    );
  }

  late final _g_uri_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GUri>)>>(
          'g_uri_unref');
  late final _g_uri_unref =
      _g_uri_unrefPtr.asFunction<void Function(ffi.Pointer<GUri>)>();

  int g_uri_split(
    ffi.Pointer<ffi.Char> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> scheme,
    ffi.Pointer<ffi.Pointer<ffi.Char>> userinfo,
    ffi.Pointer<ffi.Pointer<ffi.Char>> host,
    ffi.Pointer<gint> port,
    ffi.Pointer<ffi.Pointer<ffi.Char>> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> query,
    ffi.Pointer<ffi.Pointer<ffi.Char>> fragment,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_split(
      uri_ref,
      flags,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
      error,
    );
  }

  late final _g_uri_splitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_split');
  late final _g_uri_split = _g_uri_splitPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_split_with_user(
    ffi.Pointer<ffi.Char> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> scheme,
    ffi.Pointer<ffi.Pointer<ffi.Char>> user,
    ffi.Pointer<ffi.Pointer<ffi.Char>> password,
    ffi.Pointer<ffi.Pointer<ffi.Char>> auth_params,
    ffi.Pointer<ffi.Pointer<ffi.Char>> host,
    ffi.Pointer<gint> port,
    ffi.Pointer<ffi.Pointer<ffi.Char>> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> query,
    ffi.Pointer<ffi.Pointer<ffi.Char>> fragment,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_split_with_user(
      uri_ref,
      flags,
      scheme,
      user,
      password,
      auth_params,
      host,
      port,
      path,
      query,
      fragment,
      error,
    );
  }

  late final _g_uri_split_with_userPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_split_with_user');
  late final _g_uri_split_with_user = _g_uri_split_with_userPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_split_network(
    ffi.Pointer<ffi.Char> uri_string,
    int flags,
    ffi.Pointer<ffi.Pointer<ffi.Char>> scheme,
    ffi.Pointer<ffi.Pointer<ffi.Char>> host,
    ffi.Pointer<gint> port,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_split_network(
      uri_string,
      flags,
      scheme,
      host,
      port,
      error,
    );
  }

  late final _g_uri_split_networkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<gint>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_split_network');
  late final _g_uri_split_network = _g_uri_split_networkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<gint>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_is_valid(
    ffi.Pointer<ffi.Char> uri_string,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_is_valid(
      uri_string,
      flags,
      error,
    );
  }

  late final _g_uri_is_validPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_is_valid');
  late final _g_uri_is_valid = _g_uri_is_validPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_uri_join(
    int flags,
    ffi.Pointer<ffi.Char> scheme,
    ffi.Pointer<ffi.Char> userinfo,
    ffi.Pointer<ffi.Char> host,
    int port,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _g_uri_join(
      flags,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_join');
  late final _g_uri_join = _g_uri_joinPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_join_with_user(
    int flags,
    ffi.Pointer<ffi.Char> scheme,
    ffi.Pointer<ffi.Char> user,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> auth_params,
    ffi.Pointer<ffi.Char> host,
    int port,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _g_uri_join_with_user(
      flags,
      scheme,
      user,
      password,
      auth_params,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_join_with_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_join_with_user');
  late final _g_uri_join_with_user = _g_uri_join_with_userPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GUri> g_uri_parse(
    ffi.Pointer<ffi.Char> uri_string,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_parse(
      uri_string,
      flags,
      error,
    );
  }

  late final _g_uri_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_parse');
  late final _g_uri_parse = _g_uri_parsePtr.asFunction<
      ffi.Pointer<GUri> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GUri> g_uri_parse_relative(
    ffi.Pointer<GUri> base_uri,
    ffi.Pointer<ffi.Char> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_parse_relative(
      base_uri,
      uri_ref,
      flags,
      error,
    );
  }

  late final _g_uri_parse_relativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(
              ffi.Pointer<GUri>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_parse_relative');
  late final _g_uri_parse_relative = _g_uri_parse_relativePtr.asFunction<
      ffi.Pointer<GUri> Function(ffi.Pointer<GUri>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_uri_resolve_relative(
    ffi.Pointer<ffi.Char> base_uri_string,
    ffi.Pointer<ffi.Char> uri_ref,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_resolve_relative(
      base_uri_string,
      uri_ref,
      flags,
      error,
    );
  }

  late final _g_uri_resolve_relativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_resolve_relative');
  late final _g_uri_resolve_relative = _g_uri_resolve_relativePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GUri> g_uri_build(
    int flags,
    ffi.Pointer<ffi.Char> scheme,
    ffi.Pointer<ffi.Char> userinfo,
    ffi.Pointer<ffi.Char> host,
    int port,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _g_uri_build(
      flags,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_buildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_build');
  late final _g_uri_build = _g_uri_buildPtr.asFunction<
      ffi.Pointer<GUri> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GUri> g_uri_build_with_user(
    int flags,
    ffi.Pointer<ffi.Char> scheme,
    ffi.Pointer<ffi.Char> user,
    ffi.Pointer<ffi.Char> password,
    ffi.Pointer<ffi.Char> auth_params,
    ffi.Pointer<ffi.Char> host,
    int port,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _g_uri_build_with_user(
      flags,
      scheme,
      user,
      password,
      auth_params,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _g_uri_build_with_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GUri> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_build_with_user');
  late final _g_uri_build_with_user = _g_uri_build_with_userPtr.asFunction<
      ffi.Pointer<GUri> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_to_string(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_to_string(
      uri,
    );
  }

  late final _g_uri_to_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_to_string');
  late final _g_uri_to_string = _g_uri_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_to_string_partial(
    ffi.Pointer<GUri> uri,
    int flags,
  ) {
    return _g_uri_to_string_partial(
      uri,
      flags,
    );
  }

  late final _g_uri_to_string_partialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GUri>, ffi.Int32)>>('g_uri_to_string_partial');
  late final _g_uri_to_string_partial = _g_uri_to_string_partialPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>, int)>();

  ffi.Pointer<ffi.Char> g_uri_get_scheme(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_scheme(
      uri,
    );
  }

  late final _g_uri_get_schemePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_scheme');
  late final _g_uri_get_scheme = _g_uri_get_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_userinfo(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_userinfo(
      uri,
    );
  }

  late final _g_uri_get_userinfoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_userinfo');
  late final _g_uri_get_userinfo = _g_uri_get_userinfoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_user(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_user(
      uri,
    );
  }

  late final _g_uri_get_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>('g_uri_get_user');
  late final _g_uri_get_user = _g_uri_get_userPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_password(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_password(
      uri,
    );
  }

  late final _g_uri_get_passwordPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_password');
  late final _g_uri_get_password = _g_uri_get_passwordPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_auth_params(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_auth_params(
      uri,
    );
  }

  late final _g_uri_get_auth_paramsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_auth_params');
  late final _g_uri_get_auth_params = _g_uri_get_auth_paramsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_host(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_host(
      uri,
    );
  }

  late final _g_uri_get_hostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>('g_uri_get_host');
  late final _g_uri_get_host = _g_uri_get_hostPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  int g_uri_get_port(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_port(
      uri,
    );
  }

  late final _g_uri_get_portPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GUri>)>>(
          'g_uri_get_port');
  late final _g_uri_get_port =
      _g_uri_get_portPtr.asFunction<int Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_path(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_path(
      uri,
    );
  }

  late final _g_uri_get_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>('g_uri_get_path');
  late final _g_uri_get_path = _g_uri_get_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_query(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_query(
      uri,
    );
  }

  late final _g_uri_get_queryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_query');
  late final _g_uri_get_query = _g_uri_get_queryPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<ffi.Char> g_uri_get_fragment(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_fragment(
      uri,
    );
  }

  late final _g_uri_get_fragmentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>>(
      'g_uri_get_fragment');
  late final _g_uri_get_fragment = _g_uri_get_fragmentPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GUri>)>();

  int g_uri_get_flags(
    ffi.Pointer<GUri> uri,
  ) {
    return _g_uri_get_flags(
      uri,
    );
  }

  late final _g_uri_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GUri>)>>(
          'g_uri_get_flags');
  late final _g_uri_get_flags =
      _g_uri_get_flagsPtr.asFunction<int Function(ffi.Pointer<GUri>)>();

  ffi.Pointer<GHashTable> g_uri_parse_params(
    ffi.Pointer<ffi.Char> params,
    int length,
    ffi.Pointer<ffi.Char> separators,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_parse_params(
      params,
      length,
      separators,
      flags,
      error,
    );
  }

  late final _g_uri_parse_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_parse_params');
  late final _g_uri_parse_params = _g_uri_parse_paramsPtr.asFunction<
      ffi.Pointer<GHashTable> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_uri_params_iter_init(
    ffi.Pointer<GUriParamsIter> iter,
    ffi.Pointer<ffi.Char> params,
    int length,
    ffi.Pointer<ffi.Char> separators,
    int flags,
  ) {
    return _g_uri_params_iter_init(
      iter,
      params,
      length,
      separators,
      flags,
    );
  }

  late final _g_uri_params_iter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GUriParamsIter>,
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_uri_params_iter_init');
  late final _g_uri_params_iter_init = _g_uri_params_iter_initPtr.asFunction<
      void Function(ffi.Pointer<GUriParamsIter>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  int g_uri_params_iter_next(
    ffi.Pointer<GUriParamsIter> iter,
    ffi.Pointer<ffi.Pointer<ffi.Char>> attribute,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_params_iter_next(
      iter,
      attribute,
      value,
      error,
    );
  }

  late final _g_uri_params_iter_nextPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GUriParamsIter>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_params_iter_next');
  late final _g_uri_params_iter_next = _g_uri_params_iter_nextPtr.asFunction<
      int Function(
          ffi.Pointer<GUriParamsIter>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int g_uri_error_quark() {
    return _g_uri_error_quark();
  }

  late final _g_uri_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('g_uri_error_quark');
  late final _g_uri_error_quark =
      _g_uri_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> g_uri_unescape_string(
    ffi.Pointer<ffi.Char> escaped_string,
    ffi.Pointer<ffi.Char> illegal_characters,
  ) {
    return _g_uri_unescape_string(
      escaped_string,
      illegal_characters,
    );
  }

  late final _g_uri_unescape_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_unescape_string');
  late final _g_uri_unescape_string = _g_uri_unescape_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_unescape_segment(
    ffi.Pointer<ffi.Char> escaped_string,
    ffi.Pointer<ffi.Char> escaped_string_end,
    ffi.Pointer<ffi.Char> illegal_characters,
  ) {
    return _g_uri_unescape_segment(
      escaped_string,
      escaped_string_end,
      illegal_characters,
    );
  }

  late final _g_uri_unescape_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('g_uri_unescape_segment');
  late final _g_uri_unescape_segment = _g_uri_unescape_segmentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_parse_scheme(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_uri_parse_scheme(
      uri,
    );
  }

  late final _g_uri_parse_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_uri_parse_scheme');
  late final _g_uri_parse_scheme = _g_uri_parse_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_peek_scheme(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _g_uri_peek_scheme(
      uri,
    );
  }

  late final _g_uri_peek_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('g_uri_peek_scheme');
  late final _g_uri_peek_scheme = _g_uri_peek_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uri_escape_string(
    ffi.Pointer<ffi.Char> unescaped,
    ffi.Pointer<ffi.Char> reserved_chars_allowed,
    int allow_utf8,
  ) {
    return _g_uri_escape_string(
      unescaped,
      reserved_chars_allowed,
      allow_utf8,
    );
  }

  late final _g_uri_escape_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, gboolean)>>('g_uri_escape_string');
  late final _g_uri_escape_string = _g_uri_escape_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GBytes> g_uri_unescape_bytes(
    ffi.Pointer<ffi.Char> escaped_string,
    int length,
    ffi.Pointer<ffi.Char> illegal_characters,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_uri_unescape_bytes(
      escaped_string,
      length,
      illegal_characters,
      error,
    );
  }

  late final _g_uri_unescape_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<ffi.Char>,
              gssize,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_uri_unescape_bytes');
  late final _g_uri_unescape_bytes = _g_uri_unescape_bytesPtr.asFunction<
      ffi.Pointer<GBytes> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<ffi.Char> g_uri_escape_bytes(
    ffi.Pointer<guint8> unescaped,
    int length,
    ffi.Pointer<ffi.Char> reserved_chars_allowed,
  ) {
    return _g_uri_escape_bytes(
      unescaped,
      length,
      reserved_chars_allowed,
    );
  }

  late final _g_uri_escape_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<guint8>, gsize,
              ffi.Pointer<ffi.Char>)>>('g_uri_escape_bytes');
  late final _g_uri_escape_bytes = _g_uri_escape_bytesPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<guint8>, int, ffi.Pointer<ffi.Char>)>();

  int g_uuid_string_is_valid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _g_uuid_string_is_valid(
      str,
    );
  }

  late final _g_uuid_string_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_uuid_string_is_valid');
  late final _g_uuid_string_is_valid = _g_uuid_string_is_validPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_uuid_string_random() {
    return _g_uuid_string_random();
  }

  late final _g_uuid_string_randomPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'g_uuid_string_random');
  late final _g_uuid_string_random =
      _g_uuid_string_randomPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  late final ffi.Pointer<guint> _glib_major_version =
      _lookup<guint>('glib_major_version');

  int get glib_major_version => _glib_major_version.value;

  late final ffi.Pointer<guint> _glib_minor_version =
      _lookup<guint>('glib_minor_version');

  int get glib_minor_version => _glib_minor_version.value;

  late final ffi.Pointer<guint> _glib_micro_version =
      _lookup<guint>('glib_micro_version');

  int get glib_micro_version => _glib_micro_version.value;

  late final ffi.Pointer<guint> _glib_interface_age =
      _lookup<guint>('glib_interface_age');

  int get glib_interface_age => _glib_interface_age.value;

  late final ffi.Pointer<guint> _glib_binary_age =
      _lookup<guint>('glib_binary_age');

  int get glib_binary_age => _glib_binary_age.value;

  ffi.Pointer<ffi.Char> glib_check_version(
    int required_major,
    int required_minor,
    int required_micro,
  ) {
    return _glib_check_version(
      required_major,
      required_minor,
      required_micro,
    );
  }

  late final _glib_check_versionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(guint, guint, guint)>>(
      'glib_check_version');
  late final _glib_check_version = _glib_check_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int, int)>();

  ffi.Pointer<GMemChunk> g_mem_chunk_new(
    ffi.Pointer<ffi.Char> name,
    int atom_size,
    int area_size,
    int type,
  ) {
    return _g_mem_chunk_new(
      name,
      atom_size,
      area_size,
      type,
    );
  }

  late final _g_mem_chunk_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMemChunk> Function(
              ffi.Pointer<ffi.Char>, gint, gsize, gint)>>('g_mem_chunk_new');
  late final _g_mem_chunk_new = _g_mem_chunk_newPtr.asFunction<
      ffi.Pointer<GMemChunk> Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void g_mem_chunk_destroy(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_destroy(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_destroy');
  late final _g_mem_chunk_destroy = _g_mem_chunk_destroyPtr
      .asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  ffi.Pointer g_mem_chunk_alloc(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_alloc(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_alloc');
  late final _g_mem_chunk_alloc = _g_mem_chunk_allocPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GMemChunk>)>();

  ffi.Pointer g_mem_chunk_alloc0(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_alloc0(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_alloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_alloc0');
  late final _g_mem_chunk_alloc0 = _g_mem_chunk_alloc0Ptr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_free(
    ffi.Pointer<GMemChunk> mem_chunk,
    ffi.Pointer mem,
  ) {
    return _g_mem_chunk_free(
      mem_chunk,
      mem,
    );
  }

  late final _g_mem_chunk_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMemChunk>, ffi.Pointer)>>('g_mem_chunk_free');
  late final _g_mem_chunk_free = _g_mem_chunk_freePtr
      .asFunction<void Function(ffi.Pointer<GMemChunk>, ffi.Pointer)>();

  void g_mem_chunk_clean(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_clean(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_clean');
  late final _g_mem_chunk_clean =
      _g_mem_chunk_cleanPtr.asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_reset(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_reset(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_reset');
  late final _g_mem_chunk_reset =
      _g_mem_chunk_resetPtr.asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_print(
    ffi.Pointer<GMemChunk> mem_chunk,
  ) {
    return _g_mem_chunk_print(
      mem_chunk,
    );
  }

  late final _g_mem_chunk_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMemChunk>)>>(
          'g_mem_chunk_print');
  late final _g_mem_chunk_print =
      _g_mem_chunk_printPtr.asFunction<void Function(ffi.Pointer<GMemChunk>)>();

  void g_mem_chunk_info() {
    return _g_mem_chunk_info();
  }

  late final _g_mem_chunk_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_mem_chunk_info');
  late final _g_mem_chunk_info =
      _g_mem_chunk_infoPtr.asFunction<void Function()>();

  void g_blow_chunks() {
    return _g_blow_chunks();
  }

  late final _g_blow_chunksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_blow_chunks');
  late final _g_blow_chunks = _g_blow_chunksPtr.asFunction<void Function()>();

  ffi.Pointer<GAllocator> g_allocator_new(
    ffi.Pointer<ffi.Char> name,
    int n_preallocs,
  ) {
    return _g_allocator_new(
      name,
      n_preallocs,
    );
  }

  late final _g_allocator_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GAllocator> Function(
              ffi.Pointer<ffi.Char>, guint)>>('g_allocator_new');
  late final _g_allocator_new = _g_allocator_newPtr.asFunction<
      ffi.Pointer<GAllocator> Function(ffi.Pointer<ffi.Char>, int)>();

  void g_allocator_free(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_allocator_free(
      allocator,
    );
  }

  late final _g_allocator_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_allocator_free');
  late final _g_allocator_free =
      _g_allocator_freePtr.asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_list_push_allocator(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_list_push_allocator(
      allocator,
    );
  }

  late final _g_list_push_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_list_push_allocator');
  late final _g_list_push_allocator = _g_list_push_allocatorPtr
      .asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_list_pop_allocator() {
    return _g_list_pop_allocator();
  }

  late final _g_list_pop_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_list_pop_allocator');
  late final _g_list_pop_allocator =
      _g_list_pop_allocatorPtr.asFunction<void Function()>();

  void g_slist_push_allocator(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_slist_push_allocator(
      allocator,
    );
  }

  late final _g_slist_push_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_slist_push_allocator');
  late final _g_slist_push_allocator = _g_slist_push_allocatorPtr
      .asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_slist_pop_allocator() {
    return _g_slist_pop_allocator();
  }

  late final _g_slist_pop_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_slist_pop_allocator');
  late final _g_slist_pop_allocator =
      _g_slist_pop_allocatorPtr.asFunction<void Function()>();

  void g_node_push_allocator(
    ffi.Pointer<GAllocator> allocator,
  ) {
    return _g_node_push_allocator(
      allocator,
    );
  }

  late final _g_node_push_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GAllocator>)>>(
          'g_node_push_allocator');
  late final _g_node_push_allocator = _g_node_push_allocatorPtr
      .asFunction<void Function(ffi.Pointer<GAllocator>)>();

  void g_node_pop_allocator() {
    return _g_node_pop_allocator();
  }

  late final _g_node_pop_allocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_node_pop_allocator');
  late final _g_node_pop_allocator =
      _g_node_pop_allocatorPtr.asFunction<void Function()>();

  ffi.Pointer<GCache> g_cache_new(
    GCacheNewFunc value_new_func,
    GCacheDestroyFunc value_destroy_func,
    GCacheDupFunc key_dup_func,
    GCacheDestroyFunc key_destroy_func,
    GHashFunc hash_key_func,
    GHashFunc hash_value_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_cache_new(
      value_new_func,
      value_destroy_func,
      key_dup_func,
      key_destroy_func,
      hash_key_func,
      hash_value_func,
      key_equal_func,
    );
  }

  late final _g_cache_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GCache> Function(
              GCacheNewFunc,
              GCacheDestroyFunc,
              GCacheDupFunc,
              GCacheDestroyFunc,
              GHashFunc,
              GHashFunc,
              GEqualFunc)>>('g_cache_new');
  late final _g_cache_new = _g_cache_newPtr.asFunction<
      ffi.Pointer<GCache> Function(
          GCacheNewFunc,
          GCacheDestroyFunc,
          GCacheDupFunc,
          GCacheDestroyFunc,
          GHashFunc,
          GHashFunc,
          GEqualFunc)>();

  void g_cache_destroy(
    ffi.Pointer<GCache> cache,
  ) {
    return _g_cache_destroy(
      cache,
    );
  }

  late final _g_cache_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCache>)>>(
          'g_cache_destroy');
  late final _g_cache_destroy =
      _g_cache_destroyPtr.asFunction<void Function(ffi.Pointer<GCache>)>();

  ffi.Pointer g_cache_insert(
    ffi.Pointer<GCache> cache,
    ffi.Pointer key,
  ) {
    return _g_cache_insert(
      cache,
      key,
    );
  }

  late final _g_cache_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GCache>, ffi.Pointer)>>('g_cache_insert');
  late final _g_cache_insert = _g_cache_insertPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GCache>, ffi.Pointer)>();

  void g_cache_remove(
    ffi.Pointer<GCache> cache,
    gconstpointer value,
  ) {
    return _g_cache_remove(
      cache,
      value,
    );
  }

  late final _g_cache_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCache>, gconstpointer)>>('g_cache_remove');
  late final _g_cache_remove = _g_cache_removePtr
      .asFunction<void Function(ffi.Pointer<GCache>, gconstpointer)>();

  void g_cache_key_foreach(
    ffi.Pointer<GCache> cache,
    GHFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_cache_key_foreach(
      cache,
      func,
      user_data,
    );
  }

  late final _g_cache_key_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCache>, GHFunc,
              ffi.Pointer)>>('g_cache_key_foreach');
  late final _g_cache_key_foreach = _g_cache_key_foreachPtr
      .asFunction<void Function(ffi.Pointer<GCache>, GHFunc, ffi.Pointer)>();

  void g_cache_value_foreach(
    ffi.Pointer<GCache> cache,
    GHFunc func,
    ffi.Pointer user_data,
  ) {
    return _g_cache_value_foreach(
      cache,
      func,
      user_data,
    );
  }

  late final _g_cache_value_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCache>, GHFunc,
              ffi.Pointer)>>('g_cache_value_foreach');
  late final _g_cache_value_foreach = _g_cache_value_foreachPtr
      .asFunction<void Function(ffi.Pointer<GCache>, GHFunc, ffi.Pointer)>();

  ffi.Pointer<GCompletion> g_completion_new(
    GCompletionFunc func,
  ) {
    return _g_completion_new(
      func,
    );
  }

  late final _g_completion_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GCompletion> Function(GCompletionFunc)>>(
      'g_completion_new');
  late final _g_completion_new = _g_completion_newPtr
      .asFunction<ffi.Pointer<GCompletion> Function(GCompletionFunc)>();

  void g_completion_add_items(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<GList> items,
  ) {
    return _g_completion_add_items(
      cmp,
      items,
    );
  }

  late final _g_completion_add_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCompletion>,
              ffi.Pointer<GList>)>>('g_completion_add_items');
  late final _g_completion_add_items = _g_completion_add_itemsPtr.asFunction<
      void Function(ffi.Pointer<GCompletion>, ffi.Pointer<GList>)>();

  void g_completion_remove_items(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<GList> items,
  ) {
    return _g_completion_remove_items(
      cmp,
      items,
    );
  }

  late final _g_completion_remove_itemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCompletion>,
              ffi.Pointer<GList>)>>('g_completion_remove_items');
  late final _g_completion_remove_items =
      _g_completion_remove_itemsPtr.asFunction<
          void Function(ffi.Pointer<GCompletion>, ffi.Pointer<GList>)>();

  void g_completion_clear_items(
    ffi.Pointer<GCompletion> cmp,
  ) {
    return _g_completion_clear_items(
      cmp,
    );
  }

  late final _g_completion_clear_itemsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCompletion>)>>(
          'g_completion_clear_items');
  late final _g_completion_clear_items = _g_completion_clear_itemsPtr
      .asFunction<void Function(ffi.Pointer<GCompletion>)>();

  ffi.Pointer<GList> g_completion_complete(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<ffi.Char> prefix,
    ffi.Pointer<ffi.Pointer<ffi.Char>> new_prefix,
  ) {
    return _g_completion_complete(
      cmp,
      prefix,
      new_prefix,
    );
  }

  late final _g_completion_completePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GCompletion>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('g_completion_complete');
  late final _g_completion_complete = _g_completion_completePtr.asFunction<
      ffi.Pointer<GList> Function(ffi.Pointer<GCompletion>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<GList> g_completion_complete_utf8(
    ffi.Pointer<GCompletion> cmp,
    ffi.Pointer<ffi.Char> prefix,
    ffi.Pointer<ffi.Pointer<ffi.Char>> new_prefix,
  ) {
    return _g_completion_complete_utf8(
      cmp,
      prefix,
      new_prefix,
    );
  }

  late final _g_completion_complete_utf8Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GCompletion>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'g_completion_complete_utf8');
  late final _g_completion_complete_utf8 =
      _g_completion_complete_utf8Ptr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GCompletion>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void g_completion_set_compare(
    ffi.Pointer<GCompletion> cmp,
    GCompletionStrncmpFunc strncmp_func,
  ) {
    return _g_completion_set_compare(
      cmp,
      strncmp_func,
    );
  }

  late final _g_completion_set_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GCompletion>,
              GCompletionStrncmpFunc)>>('g_completion_set_compare');
  late final _g_completion_set_compare =
      _g_completion_set_comparePtr.asFunction<
          void Function(ffi.Pointer<GCompletion>, GCompletionStrncmpFunc)>();

  void g_completion_free(
    ffi.Pointer<GCompletion> cmp,
  ) {
    return _g_completion_free(
      cmp,
    );
  }

  late final _g_completion_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCompletion>)>>(
          'g_completion_free');
  late final _g_completion_free = _g_completion_freePtr
      .asFunction<void Function(ffi.Pointer<GCompletion>)>();

  ffi.Pointer<GRelation> g_relation_new(
    int fields,
  ) {
    return _g_relation_new(
      fields,
    );
  }

  late final _g_relation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GRelation> Function(gint)>>(
          'g_relation_new');
  late final _g_relation_new =
      _g_relation_newPtr.asFunction<ffi.Pointer<GRelation> Function(int)>();

  void g_relation_destroy(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_destroy(
      relation,
    );
  }

  late final _g_relation_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRelation>)>>(
          'g_relation_destroy');
  late final _g_relation_destroy = _g_relation_destroyPtr
      .asFunction<void Function(ffi.Pointer<GRelation>)>();

  void g_relation_index(
    ffi.Pointer<GRelation> relation,
    int field,
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_relation_index(
      relation,
      field,
      hash_func,
      key_equal_func,
    );
  }

  late final _g_relation_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GRelation>, gint, GHashFunc,
              GEqualFunc)>>('g_relation_index');
  late final _g_relation_index = _g_relation_indexPtr.asFunction<
      void Function(ffi.Pointer<GRelation>, int, GHashFunc, GEqualFunc)>();

  void g_relation_insert(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_insert(
      relation,
    );
  }

  late final _g_relation_insertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRelation>)>>(
          'g_relation_insert');
  late final _g_relation_insert =
      _g_relation_insertPtr.asFunction<void Function(ffi.Pointer<GRelation>)>();

  int g_relation_delete(
    ffi.Pointer<GRelation> relation,
    gconstpointer key,
    int field,
  ) {
    return _g_relation_delete(
      relation,
      key,
      field,
    );
  }

  late final _g_relation_deletePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GRelation>, gconstpointer,
              gint)>>('g_relation_delete');
  late final _g_relation_delete = _g_relation_deletePtr
      .asFunction<int Function(ffi.Pointer<GRelation>, gconstpointer, int)>();

  ffi.Pointer<GTuples> g_relation_select(
    ffi.Pointer<GRelation> relation,
    gconstpointer key,
    int field,
  ) {
    return _g_relation_select(
      relation,
      key,
      field,
    );
  }

  late final _g_relation_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTuples> Function(ffi.Pointer<GRelation>, gconstpointer,
              gint)>>('g_relation_select');
  late final _g_relation_select = _g_relation_selectPtr.asFunction<
      ffi.Pointer<GTuples> Function(
          ffi.Pointer<GRelation>, gconstpointer, int)>();

  int g_relation_count(
    ffi.Pointer<GRelation> relation,
    gconstpointer key,
    int field,
  ) {
    return _g_relation_count(
      relation,
      key,
      field,
    );
  }

  late final _g_relation_countPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GRelation>, gconstpointer,
              gint)>>('g_relation_count');
  late final _g_relation_count = _g_relation_countPtr
      .asFunction<int Function(ffi.Pointer<GRelation>, gconstpointer, int)>();

  int g_relation_exists(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_exists(
      relation,
    );
  }

  late final _g_relation_existsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GRelation>)>>(
          'g_relation_exists');
  late final _g_relation_exists =
      _g_relation_existsPtr.asFunction<int Function(ffi.Pointer<GRelation>)>();

  void g_relation_print(
    ffi.Pointer<GRelation> relation,
  ) {
    return _g_relation_print(
      relation,
    );
  }

  late final _g_relation_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GRelation>)>>(
          'g_relation_print');
  late final _g_relation_print =
      _g_relation_printPtr.asFunction<void Function(ffi.Pointer<GRelation>)>();

  void g_tuples_destroy(
    ffi.Pointer<GTuples> tuples,
  ) {
    return _g_tuples_destroy(
      tuples,
    );
  }

  late final _g_tuples_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTuples>)>>(
          'g_tuples_destroy');
  late final _g_tuples_destroy =
      _g_tuples_destroyPtr.asFunction<void Function(ffi.Pointer<GTuples>)>();

  ffi.Pointer g_tuples_index(
    ffi.Pointer<GTuples> tuples,
    int index_,
    int field,
  ) {
    return _g_tuples_index(
      tuples,
      index_,
      field,
    );
  }

  late final _g_tuples_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GTuples>, gint, gint)>>('g_tuples_index');
  late final _g_tuples_index = _g_tuples_indexPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GTuples>, int, int)>();

  late final ffi.Pointer<GThreadFunctions> _g_thread_functions_for_glib_use =
      _lookup<GThreadFunctions>('g_thread_functions_for_glib_use');

  GThreadFunctions get g_thread_functions_for_glib_use =>
      _g_thread_functions_for_glib_use.ref;

  late final ffi.Pointer<gboolean> _g_thread_use_default_impl =
      _lookup<gboolean>('g_thread_use_default_impl');

  int get g_thread_use_default_impl => _g_thread_use_default_impl.value;

  set g_thread_use_default_impl(int value) =>
      _g_thread_use_default_impl.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<guint64 Function()>>>
      _g_thread_gettime =
      _lookup<ffi.Pointer<ffi.NativeFunction<guint64 Function()>>>(
          'g_thread_gettime');

  ffi.Pointer<ffi.NativeFunction<guint64 Function()>> get g_thread_gettime =>
      _g_thread_gettime.value;

  set g_thread_gettime(
          ffi.Pointer<ffi.NativeFunction<guint64 Function()>> value) =>
      _g_thread_gettime.value = value;

  ffi.Pointer<GThread> g_thread_create(
    GThreadFunc func,
    ffi.Pointer data,
    int joinable,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_create(
      func,
      data,
      joinable,
      error,
    );
  }

  late final _g_thread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(GThreadFunc, ffi.Pointer, gboolean,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_create');
  late final _g_thread_create = _g_thread_createPtr.asFunction<
      ffi.Pointer<GThread> Function(
          GThreadFunc, ffi.Pointer, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GThread> g_thread_create_full(
    GThreadFunc func,
    ffi.Pointer data,
    int stack_size,
    int joinable,
    int bound,
    int priority,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _g_thread_create_full(
      func,
      data,
      stack_size,
      joinable,
      bound,
      priority,
      error,
    );
  }

  late final _g_thread_create_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GThread> Function(
              GThreadFunc,
              ffi.Pointer,
              gulong,
              gboolean,
              gboolean,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('g_thread_create_full');
  late final _g_thread_create_full = _g_thread_create_fullPtr.asFunction<
      ffi.Pointer<GThread> Function(GThreadFunc, ffi.Pointer, int, int, int,
          int, ffi.Pointer<ffi.Pointer<GError>>)>();

  void g_thread_set_priority(
    ffi.Pointer<GThread> thread,
    int priority,
  ) {
    return _g_thread_set_priority(
      thread,
      priority,
    );
  }

  late final _g_thread_set_priorityPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GThread>, ffi.Int32)>>(
      'g_thread_set_priority');
  late final _g_thread_set_priority = _g_thread_set_priorityPtr
      .asFunction<void Function(ffi.Pointer<GThread>, int)>();

  void g_thread_foreach(
    GFunc thread_func,
    ffi.Pointer user_data,
  ) {
    return _g_thread_foreach(
      thread_func,
      user_data,
    );
  }

  late final _g_thread_foreachPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GFunc, ffi.Pointer)>>(
          'g_thread_foreach');
  late final _g_thread_foreach =
      _g_thread_foreachPtr.asFunction<void Function(GFunc, ffi.Pointer)>();

  int __sched_cpucount(
    int __setsize,
    ffi.Pointer<cpu_set_t> __setp,
  ) {
    return ___sched_cpucount(
      __setsize,
      __setp,
    );
  }

  late final ___sched_cpucountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<cpu_set_t>)>>(
      '__sched_cpucount');
  late final ___sched_cpucount = ___sched_cpucountPtr
      .asFunction<int Function(int, ffi.Pointer<cpu_set_t>)>();

  ffi.Pointer<cpu_set_t> __sched_cpualloc(
    int __count,
  ) {
    return ___sched_cpualloc(
      __count,
    );
  }

  late final ___sched_cpuallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cpu_set_t> Function(ffi.Size)>>(
          '__sched_cpualloc');
  late final ___sched_cpualloc =
      ___sched_cpuallocPtr.asFunction<ffi.Pointer<cpu_set_t> Function(int)>();

  void __sched_cpufree(
    ffi.Pointer<cpu_set_t> __set,
  ) {
    return ___sched_cpufree(
      __set,
    );
  }

  late final ___sched_cpufreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cpu_set_t>)>>(
          '__sched_cpufree');
  late final ___sched_cpufree =
      ___sched_cpufreePtr.asFunction<void Function(ffi.Pointer<cpu_set_t>)>();

  int sched_setparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setparam(
      __pid,
      __param,
    );
  }

  late final _sched_setparamPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>>(
      'sched_setparam');
  late final _sched_setparam = _sched_setparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_getparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_getparam(
      __pid,
      __param,
    );
  }

  late final _sched_getparamPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>>(
      'sched_getparam');
  late final _sched_getparam = _sched_getparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setscheduler(
      __pid,
      __policy,
      __param,
    );
  }

  late final _sched_setschedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__pid_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('sched_setscheduler');
  late final _sched_setscheduler = _sched_setschedulerPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int sched_getscheduler(
    int __pid,
  ) {
    return _sched_getscheduler(
      __pid,
    );
  }

  late final _sched_getschedulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t)>>(
          'sched_getscheduler');
  late final _sched_getscheduler =
      _sched_getschedulerPtr.asFunction<int Function(int)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_max(
    int __algorithm,
  ) {
    return _sched_get_priority_max(
      __algorithm,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  int sched_get_priority_min(
    int __algorithm,
  ) {
    return _sched_get_priority_min(
      __algorithm,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_rr_get_interval(
    int __pid,
    ffi.Pointer<timespec> __t,
  ) {
    return _sched_rr_get_interval(
      __pid,
      __t,
    );
  }

  late final _sched_rr_get_intervalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>>(
      'sched_rr_get_interval');
  late final _sched_rr_get_interval = _sched_rr_get_intervalPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int pthread_create(
    ffi.Pointer<pthread_t> __newthread,
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        __start_routine,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _pthread_create(
      __newthread,
      __attr,
      __start_routine,
      __arg,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> __retval,
  ) {
    return _pthread_exit(
      __retval,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    return _pthread_join(
      __th,
      __thread_return,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_detach(
    int __th,
  ) {
    return _pthread_detach(
      __th,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(int)>();

  int pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self = _pthread_selfPtr.asFunction<int Function()>();

  int pthread_equal(
    int __thread1,
    int __thread2,
  ) {
    return _pthread_equal(
      __thread1,
      __thread2,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(int, int)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_init(
      __attr,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_destroy(
      __attr,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __detachstate,
  ) {
    return _pthread_attr_getdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    int __detachstate,
  ) {
    return _pthread_attr_setdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __guardsize,
  ) {
    return _pthread_attr_getguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __guardsize,
  ) {
    return _pthread_attr_setguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_getschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_setschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __policy,
  ) {
    return _pthread_attr_getschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    int __policy,
  ) {
    return _pthread_attr_setschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __inherit,
  ) {
    return _pthread_attr_getinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    int __inherit,
  ) {
    return _pthread_attr_setinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __scope,
  ) {
    return _pthread_attr_getscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> __attr,
    int __scope,
  ) {
    return _pthread_attr_setscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ) {
    return _pthread_attr_getstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
  ) {
    return _pthread_attr_setstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __stacksize,
  ) {
    return _pthread_attr_setstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
    int __stacksize,
  ) {
    return _pthread_attr_setstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_setschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_getschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  int pthread_setschedprio(
    int __target_thread,
    int __prio,
  ) {
    return _pthread_setschedprio(
      __target_thread,
      __prio,
    );
  }

  late final _pthread_setschedprioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_setschedprio');
  late final _pthread_setschedprio =
      _pthread_setschedprioPtr.asFunction<int Function(int, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> __once_control,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
  ) {
    return _pthread_once(
      __once_control,
      __init_routine,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_setcancelstate(
    int __state,
    ffi.Pointer<ffi.Int> __oldstate,
  ) {
    return _pthread_setcancelstate(
      __state,
      __oldstate,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int __type,
    ffi.Pointer<ffi.Int> __oldtype,
  ) {
    return _pthread_setcanceltype(
      __type,
      __oldtype,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_cancel(
    int __th,
  ) {
    return _pthread_cancel(
      __th,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(int)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  void __pthread_register_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_register_cancel(
      __buf,
    );
  }

  late final ___pthread_register_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_register_cancel');
  late final ___pthread_register_cancel = ___pthread_register_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unregister_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unregister_cancel(
      __buf,
    );
  }

  late final ___pthread_unregister_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_unregister_cancel');
  late final ___pthread_unregister_cancel = ___pthread_unregister_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unwind_next(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unwind_next(
      __buf,
    );
  }

  late final ___pthread_unwind_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__pthread_unwind_buf_t>)>>('__pthread_unwind_next');
  late final ___pthread_unwind_next = ___pthread_unwind_nextPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  int __sigsetjmp(
    ffi.Pointer<__jmp_buf_tag> __env,
    int __savemask,
  ) {
    return ___sigsetjmp(
      __env,
      __savemask,
    );
  }

  late final ___sigsetjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<__jmp_buf_tag>, ffi.Int)>>('__sigsetjmp');
  late final ___sigsetjmp = ___sigsetjmpPtr
      .asFunction<int Function(ffi.Pointer<__jmp_buf_tag>, int)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<pthread_mutexattr_t> __mutexattr,
  ) {
    return _pthread_mutex_init(
      __mutex,
      __mutexattr,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_destroy(
      __mutex,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_trylock(
      __mutex,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_lock(
      __mutex,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_timedlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_mutex_timedlock(
      __mutex,
      __abstime,
    );
  }

  late final _pthread_mutex_timedlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_mutex_timedlock');
  late final _pthread_mutex_timedlock = _pthread_mutex_timedlockPtr.asFunction<
      int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_unlock(
      __mutex,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutex_getprioceiling(
      __mutex,
      __prioceiling,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    int __prioceiling,
    ffi.Pointer<ffi.Int> __old_ceiling,
  ) {
    return _pthread_mutex_setprioceiling(
      __mutex,
      __prioceiling,
      __old_ceiling,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_consistent(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_consistent(
      __mutex,
    );
  }

  late final _pthread_mutex_consistentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_consistent');
  late final _pthread_mutex_consistent = _pthread_mutex_consistentPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_init(
      __attr,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_destroy(
      __attr,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_mutexattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_mutexattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __kind,
  ) {
    return _pthread_mutexattr_gettype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __kind,
  ) {
    return _pthread_mutexattr_settype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __protocol,
  ) {
    return _pthread_mutexattr_getprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __protocol,
  ) {
    return _pthread_mutexattr_setprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutexattr_getprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __prioceiling,
  ) {
    return _pthread_mutexattr_setprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __robustness,
  ) {
    return _pthread_mutexattr_getrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_getrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getrobust');
  late final _pthread_mutexattr_getrobust =
      _pthread_mutexattr_getrobustPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __robustness,
  ) {
    return _pthread_mutexattr_setrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_setrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setrobust');
  late final _pthread_mutexattr_setrobust = _pthread_mutexattr_setrobustPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlock_init(
      __rwlock,
      __attr,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_destroy(
      __rwlock,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_rdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_tryrdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedrdlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedrdlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedrdlock');
  late final _pthread_rwlock_timedrdlock =
      _pthread_rwlock_timedrdlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_wrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_trywrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedwrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedwrlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedwrlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedwrlock');
  late final _pthread_rwlock_timedwrlock =
      _pthread_rwlock_timedwrlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_unlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_init(
      __attr,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_destroy(
      __attr,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_rwlockattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_rwlockattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_rwlockattr_getkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pref,
  ) {
    return _pthread_rwlockattr_getkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_getkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getkind_np');
  late final _pthread_rwlockattr_getkind_np =
      _pthread_rwlockattr_getkind_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pref,
  ) {
    return _pthread_rwlockattr_setkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_setkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setkind_np');
  late final _pthread_rwlockattr_setkind_np = _pthread_rwlockattr_setkind_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_condattr_t> __cond_attr,
  ) {
    return _pthread_cond_init(
      __cond,
      __cond_attr,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_destroy(
      __cond,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_signal(
      __cond,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_broadcast(
      __cond,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_cond_wait(
      __cond,
      __mutex,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_cond_timedwait(
      __cond,
      __mutex,
      __abstime,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_init(
      __attr,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_destroy(
      __attr,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_condattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_condattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_condattr_getclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_condattr_getclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_getclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<__clockid_t>)>>('pthread_condattr_getclock');
  late final _pthread_condattr_getclock =
      _pthread_condattr_getclockPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)>();

  int pthread_condattr_setclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __clock_id,
  ) {
    return _pthread_condattr_setclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_setclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              __clockid_t)>>('pthread_condattr_setclock');
  late final _pthread_condattr_setclock = _pthread_condattr_setclockPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_barrier_init(
    ffi.Pointer<pthread_barrier_t> __barrier,
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __count,
  ) {
    return _pthread_barrier_init(
      __barrier,
      __attr,
      __count,
    );
  }

  late final _pthread_barrier_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>>('pthread_barrier_init');
  late final _pthread_barrier_init = _pthread_barrier_initPtr.asFunction<
      int Function(ffi.Pointer<pthread_barrier_t>,
          ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_barrier_destroy(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_destroy(
      __barrier,
    );
  }

  late final _pthread_barrier_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_destroy');
  late final _pthread_barrier_destroy = _pthread_barrier_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrier_wait(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_wait(
      __barrier,
    );
  }

  late final _pthread_barrier_waitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_wait');
  late final _pthread_barrier_wait = _pthread_barrier_waitPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrierattr_init(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_init(
      __attr,
    );
  }

  late final _pthread_barrierattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrierattr_t>)>>('pthread_barrierattr_init');
  late final _pthread_barrierattr_init = _pthread_barrierattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_destroy(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_destroy(
      __attr,
    );
  }

  late final _pthread_barrierattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>(
      'pthread_barrierattr_destroy');
  late final _pthread_barrierattr_destroy = _pthread_barrierattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_getpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_barrierattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_barrierattr_getpshared');
  late final _pthread_barrierattr_getpshared =
      _pthread_barrierattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_barrierattr_setpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_barrierattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Int)>>('pthread_barrierattr_setpshared');
  late final _pthread_barrierattr_setpshared =
      _pthread_barrierattr_setpsharedPtr
          .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> __key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        __destr_function,
  ) {
    return _pthread_key_create(
      __key,
      __destr_function,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int __key,
  ) {
    return _pthread_key_delete(
      __key,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int __key,
  ) {
    return _pthread_getspecific(
      __key,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_setspecific(
    int __key,
    ffi.Pointer<ffi.Void> __pointer,
  ) {
    return _pthread_setspecific(
      __key,
      __pointer,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_getcpuclockid(
      __thread_id,
      __clock_id,
    );
  }

  late final _pthread_getcpuclockidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__clockid_t>)>>('pthread_getcpuclockid');
  late final _pthread_getcpuclockid = _pthread_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<__clockid_t>)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
  ) {
    return _pthread_atfork(
      __prepare,
      __parent,
      __child,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void g_static_mutex_init(
    ffi.Pointer<GStaticMutex> mutex,
  ) {
    return _g_static_mutex_init(
      mutex,
    );
  }

  late final _g_static_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticMutex>)>>(
          'g_static_mutex_init');
  late final _g_static_mutex_init = _g_static_mutex_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticMutex>)>();

  void g_static_mutex_free(
    ffi.Pointer<GStaticMutex> mutex,
  ) {
    return _g_static_mutex_free(
      mutex,
    );
  }

  late final _g_static_mutex_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticMutex>)>>(
          'g_static_mutex_free');
  late final _g_static_mutex_free = _g_static_mutex_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticMutex>)>();

  ffi.Pointer<GMutex> g_static_mutex_get_mutex_impl(
    ffi.Pointer<GStaticMutex> mutex,
  ) {
    return _g_static_mutex_get_mutex_impl(
      mutex,
    );
  }

  late final _g_static_mutex_get_mutex_implPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GMutex> Function(
              ffi.Pointer<GStaticMutex>)>>('g_static_mutex_get_mutex_impl');
  late final _g_static_mutex_get_mutex_impl = _g_static_mutex_get_mutex_implPtr
      .asFunction<ffi.Pointer<GMutex> Function(ffi.Pointer<GStaticMutex>)>();

  void g_static_rec_mutex_init(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_init(
      mutex,
    );
  }

  late final _g_static_rec_mutex_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_init');
  late final _g_static_rec_mutex_init = _g_static_rec_mutex_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_lock(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_lock(
      mutex,
    );
  }

  late final _g_static_rec_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_lock');
  late final _g_static_rec_mutex_lock = _g_static_rec_mutex_lockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  int g_static_rec_mutex_trylock(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_trylock(
      mutex,
    );
  }

  late final _g_static_rec_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_trylock');
  late final _g_static_rec_mutex_trylock = _g_static_rec_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_unlock(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_unlock(
      mutex,
    );
  }

  late final _g_static_rec_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_unlock');
  late final _g_static_rec_mutex_unlock = _g_static_rec_mutex_unlockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_lock_full(
    ffi.Pointer<GStaticRecMutex> mutex,
    int depth,
  ) {
    return _g_static_rec_mutex_lock_full(
      mutex,
      depth,
    );
  }

  late final _g_static_rec_mutex_lock_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStaticRecMutex>,
              guint)>>('g_static_rec_mutex_lock_full');
  late final _g_static_rec_mutex_lock_full = _g_static_rec_mutex_lock_fullPtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>, int)>();

  int g_static_rec_mutex_unlock_full(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_unlock_full(
      mutex,
    );
  }

  late final _g_static_rec_mutex_unlock_fullPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GStaticRecMutex>)>>(
          'g_static_rec_mutex_unlock_full');
  late final _g_static_rec_mutex_unlock_full =
      _g_static_rec_mutex_unlock_fullPtr
          .asFunction<int Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rec_mutex_free(
    ffi.Pointer<GStaticRecMutex> mutex,
  ) {
    return _g_static_rec_mutex_free(
      mutex,
    );
  }

  late final _g_static_rec_mutex_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRecMutex>)>>(
      'g_static_rec_mutex_free');
  late final _g_static_rec_mutex_free = _g_static_rec_mutex_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticRecMutex>)>();

  void g_static_rw_lock_init(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_init(
      lock,
    );
  }

  late final _g_static_rw_lock_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_init');
  late final _g_static_rw_lock_init = _g_static_rw_lock_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_reader_lock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_reader_lock(
      lock,
    );
  }

  late final _g_static_rw_lock_reader_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_reader_lock');
  late final _g_static_rw_lock_reader_lock = _g_static_rw_lock_reader_lockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  int g_static_rw_lock_reader_trylock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_reader_trylock(
      lock,
    );
  }

  late final _g_static_rw_lock_reader_trylockPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_reader_trylock');
  late final _g_static_rw_lock_reader_trylock =
      _g_static_rw_lock_reader_trylockPtr
          .asFunction<int Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_reader_unlock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_reader_unlock(
      lock,
    );
  }

  late final _g_static_rw_lock_reader_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_reader_unlock');
  late final _g_static_rw_lock_reader_unlock =
      _g_static_rw_lock_reader_unlockPtr
          .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_writer_lock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_writer_lock(
      lock,
    );
  }

  late final _g_static_rw_lock_writer_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_writer_lock');
  late final _g_static_rw_lock_writer_lock = _g_static_rw_lock_writer_lockPtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  int g_static_rw_lock_writer_trylock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_writer_trylock(
      lock,
    );
  }

  late final _g_static_rw_lock_writer_trylockPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_writer_trylock');
  late final _g_static_rw_lock_writer_trylock =
      _g_static_rw_lock_writer_trylockPtr
          .asFunction<int Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_writer_unlock(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_writer_unlock(
      lock,
    );
  }

  late final _g_static_rw_lock_writer_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_writer_unlock');
  late final _g_static_rw_lock_writer_unlock =
      _g_static_rw_lock_writer_unlockPtr
          .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  void g_static_rw_lock_free(
    ffi.Pointer<GStaticRWLock> lock,
  ) {
    return _g_static_rw_lock_free(
      lock,
    );
  }

  late final _g_static_rw_lock_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticRWLock>)>>(
      'g_static_rw_lock_free');
  late final _g_static_rw_lock_free = _g_static_rw_lock_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticRWLock>)>();

  ffi.Pointer<GPrivate> g_private_new(
    GDestroyNotify notify,
  ) {
    return _g_private_new(
      notify,
    );
  }

  late final _g_private_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GPrivate> Function(GDestroyNotify)>>(
      'g_private_new');
  late final _g_private_new = _g_private_newPtr
      .asFunction<ffi.Pointer<GPrivate> Function(GDestroyNotify)>();

  void g_static_private_init(
    ffi.Pointer<GStaticPrivate> private_key,
  ) {
    return _g_static_private_init(
      private_key,
    );
  }

  late final _g_static_private_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticPrivate>)>>(
      'g_static_private_init');
  late final _g_static_private_init = _g_static_private_initPtr
      .asFunction<void Function(ffi.Pointer<GStaticPrivate>)>();

  ffi.Pointer g_static_private_get(
    ffi.Pointer<GStaticPrivate> private_key,
  ) {
    return _g_static_private_get(
      private_key,
    );
  }

  late final _g_static_private_getPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GStaticPrivate>)>>(
      'g_static_private_get');
  late final _g_static_private_get = _g_static_private_getPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GStaticPrivate>)>();

  void g_static_private_set(
    ffi.Pointer<GStaticPrivate> private_key,
    ffi.Pointer data,
    GDestroyNotify notify,
  ) {
    return _g_static_private_set(
      private_key,
      data,
      notify,
    );
  }

  late final _g_static_private_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GStaticPrivate>, ffi.Pointer,
              GDestroyNotify)>>('g_static_private_set');
  late final _g_static_private_set = _g_static_private_setPtr.asFunction<
      void Function(
          ffi.Pointer<GStaticPrivate>, ffi.Pointer, GDestroyNotify)>();

  void g_static_private_free(
    ffi.Pointer<GStaticPrivate> private_key,
  ) {
    return _g_static_private_free(
      private_key,
    );
  }

  late final _g_static_private_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GStaticPrivate>)>>(
      'g_static_private_free');
  late final _g_static_private_free = _g_static_private_freePtr
      .asFunction<void Function(ffi.Pointer<GStaticPrivate>)>();

  int g_once_init_enter_impl(
    ffi.Pointer<gsize> location,
  ) {
    return _g_once_init_enter_impl(
      location,
    );
  }

  late final _g_once_init_enter_implPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<gsize>)>>(
          'g_once_init_enter_impl');
  late final _g_once_init_enter_impl =
      _g_once_init_enter_implPtr.asFunction<int Function(ffi.Pointer<gsize>)>();

  void g_thread_init(
    ffi.Pointer vtable,
  ) {
    return _g_thread_init(
      vtable,
    );
  }

  late final _g_thread_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_thread_init');
  late final _g_thread_init =
      _g_thread_initPtr.asFunction<void Function(ffi.Pointer)>();

  void g_thread_init_with_errorcheck_mutexes(
    ffi.Pointer vtable,
  ) {
    return _g_thread_init_with_errorcheck_mutexes(
      vtable,
    );
  }

  late final _g_thread_init_with_errorcheck_mutexesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_thread_init_with_errorcheck_mutexes');
  late final _g_thread_init_with_errorcheck_mutexes =
      _g_thread_init_with_errorcheck_mutexesPtr
          .asFunction<void Function(ffi.Pointer)>();

  int g_thread_get_initialized() {
    return _g_thread_get_initialized();
  }

  late final _g_thread_get_initializedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'g_thread_get_initialized');
  late final _g_thread_get_initialized =
      _g_thread_get_initializedPtr.asFunction<int Function()>();

  late final ffi.Pointer<gboolean> _g_threads_got_initialized =
      _lookup<gboolean>('g_threads_got_initialized');

  int get g_threads_got_initialized => _g_threads_got_initialized.value;

  set g_threads_got_initialized(int value) =>
      _g_threads_got_initialized.value = value;

  ffi.Pointer<GMutex> g_mutex_new() {
    return _g_mutex_new();
  }

  late final _g_mutex_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GMutex> Function()>>(
          'g_mutex_new');
  late final _g_mutex_new =
      _g_mutex_newPtr.asFunction<ffi.Pointer<GMutex> Function()>();

  void g_mutex_free(
    ffi.Pointer<GMutex> mutex,
  ) {
    return _g_mutex_free(
      mutex,
    );
  }

  late final _g_mutex_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex>)>>(
          'g_mutex_free');
  late final _g_mutex_free =
      _g_mutex_freePtr.asFunction<void Function(ffi.Pointer<GMutex>)>();

  ffi.Pointer<GCond> g_cond_new() {
    return _g_cond_new();
  }

  late final _g_cond_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GCond> Function()>>('g_cond_new');
  late final _g_cond_new =
      _g_cond_newPtr.asFunction<ffi.Pointer<GCond> Function()>();

  void g_cond_free(
    ffi.Pointer<GCond> cond,
  ) {
    return _g_cond_free(
      cond,
    );
  }

  late final _g_cond_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond>)>>(
          'g_cond_free');
  late final _g_cond_free =
      _g_cond_freePtr.asFunction<void Function(ffi.Pointer<GCond>)>();

  int g_cond_timed_wait(
    ffi.Pointer<GCond> cond,
    ffi.Pointer<GMutex> mutex,
    ffi.Pointer<GTimeVal> abs_time,
  ) {
    return _g_cond_timed_wait(
      cond,
      mutex,
      abs_time,
    );
  }

  late final _g_cond_timed_waitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCond>, ffi.Pointer<GMutex>,
              ffi.Pointer<GTimeVal>)>>('g_cond_timed_wait');
  late final _g_cond_timed_wait = _g_cond_timed_waitPtr.asFunction<
      int Function(
          ffi.Pointer<GCond>, ffi.Pointer<GMutex>, ffi.Pointer<GTimeVal>)>();

  void g_type_init() {
    return _g_type_init();
  }

  late final _g_type_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('g_type_init');
  late final _g_type_init = _g_type_initPtr.asFunction<void Function()>();

  void g_type_init_with_debug_flags(
    int debug_flags,
  ) {
    return _g_type_init_with_debug_flags(
      debug_flags,
    );
  }

  late final _g_type_init_with_debug_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'g_type_init_with_debug_flags');
  late final _g_type_init_with_debug_flags =
      _g_type_init_with_debug_flagsPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> g_type_name(
    int type,
  ) {
    return _g_type_name(
      type,
    );
  }

  late final _g_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(GType)>>(
          'g_type_name');
  late final _g_type_name =
      _g_type_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int g_type_qname(
    int type,
  ) {
    return _g_type_qname(
      type,
    );
  }

  late final _g_type_qnamePtr =
      _lookup<ffi.NativeFunction<GQuark Function(GType)>>('g_type_qname');
  late final _g_type_qname = _g_type_qnamePtr.asFunction<int Function(int)>();

  int g_type_from_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_type_from_name(
      name,
    );
  }

  late final _g_type_from_namePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<ffi.Char>)>>(
          'g_type_from_name');
  late final _g_type_from_name =
      _g_type_from_namePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_type_parent(
    int type,
  ) {
    return _g_type_parent(
      type,
    );
  }

  late final _g_type_parentPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>('g_type_parent');
  late final _g_type_parent = _g_type_parentPtr.asFunction<int Function(int)>();

  int g_type_depth(
    int type,
  ) {
    return _g_type_depth(
      type,
    );
  }

  late final _g_type_depthPtr =
      _lookup<ffi.NativeFunction<guint Function(GType)>>('g_type_depth');
  late final _g_type_depth = _g_type_depthPtr.asFunction<int Function(int)>();

  int g_type_next_base(
    int leaf_type,
    int root_type,
  ) {
    return _g_type_next_base(
      leaf_type,
      root_type,
    );
  }

  late final _g_type_next_basePtr =
      _lookup<ffi.NativeFunction<GType Function(GType, GType)>>(
          'g_type_next_base');
  late final _g_type_next_base =
      _g_type_next_basePtr.asFunction<int Function(int, int)>();

  int g_type_is_a(
    int type,
    int is_a_type,
  ) {
    return _g_type_is_a(
      type,
      is_a_type,
    );
  }

  late final _g_type_is_aPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_type_is_a');
  late final _g_type_is_a =
      _g_type_is_aPtr.asFunction<int Function(int, int)>();

  ffi.Pointer g_type_class_ref(
    int type,
  ) {
    return _g_type_class_ref(
      type,
    );
  }

  late final _g_type_class_refPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType)>>(
          'g_type_class_ref');
  late final _g_type_class_ref =
      _g_type_class_refPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_type_class_peek(
    int type,
  ) {
    return _g_type_class_peek(
      type,
    );
  }

  late final _g_type_class_peekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType)>>(
          'g_type_class_peek');
  late final _g_type_class_peek =
      _g_type_class_peekPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_type_class_peek_static(
    int type,
  ) {
    return _g_type_class_peek_static(
      type,
    );
  }

  late final _g_type_class_peek_staticPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType)>>(
          'g_type_class_peek_static');
  late final _g_type_class_peek_static =
      _g_type_class_peek_staticPtr.asFunction<ffi.Pointer Function(int)>();

  void g_type_class_unref(
    ffi.Pointer g_class,
  ) {
    return _g_type_class_unref(
      g_class,
    );
  }

  late final _g_type_class_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_type_class_unref');
  late final _g_type_class_unref =
      _g_type_class_unrefPtr.asFunction<void Function(ffi.Pointer)>();

  ffi.Pointer g_type_class_peek_parent(
    ffi.Pointer g_class,
  ) {
    return _g_type_class_peek_parent(
      g_class,
    );
  }

  late final _g_type_class_peek_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_type_class_peek_parent');
  late final _g_type_class_peek_parent = _g_type_class_peek_parentPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer)>();

  ffi.Pointer g_type_interface_peek(
    ffi.Pointer instance_class,
    int iface_type,
  ) {
    return _g_type_interface_peek(
      instance_class,
      iface_type,
    );
  }

  late final _g_type_interface_peekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer, GType)>>(
          'g_type_interface_peek');
  late final _g_type_interface_peek = _g_type_interface_peekPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer, int)>();

  ffi.Pointer g_type_interface_peek_parent(
    ffi.Pointer g_iface,
  ) {
    return _g_type_interface_peek_parent(
      g_iface,
    );
  }

  late final _g_type_interface_peek_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_type_interface_peek_parent');
  late final _g_type_interface_peek_parent = _g_type_interface_peek_parentPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer)>();

  ffi.Pointer g_type_default_interface_ref(
    int g_type,
  ) {
    return _g_type_default_interface_ref(
      g_type,
    );
  }

  late final _g_type_default_interface_refPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType)>>(
          'g_type_default_interface_ref');
  late final _g_type_default_interface_ref =
      _g_type_default_interface_refPtr.asFunction<ffi.Pointer Function(int)>();

  ffi.Pointer g_type_default_interface_peek(
    int g_type,
  ) {
    return _g_type_default_interface_peek(
      g_type,
    );
  }

  late final _g_type_default_interface_peekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType)>>(
          'g_type_default_interface_peek');
  late final _g_type_default_interface_peek =
      _g_type_default_interface_peekPtr.asFunction<ffi.Pointer Function(int)>();

  void g_type_default_interface_unref(
    ffi.Pointer g_iface,
  ) {
    return _g_type_default_interface_unref(
      g_iface,
    );
  }

  late final _g_type_default_interface_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_type_default_interface_unref');
  late final _g_type_default_interface_unref =
      _g_type_default_interface_unrefPtr
          .asFunction<void Function(ffi.Pointer)>();

  ffi.Pointer<GType> g_type_children(
    int type,
    ffi.Pointer<guint> n_children,
  ) {
    return _g_type_children(
      type,
      n_children,
    );
  }

  late final _g_type_childrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_children');
  late final _g_type_children = _g_type_childrenPtr
      .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  ffi.Pointer<GType> g_type_interfaces(
    int type,
    ffi.Pointer<guint> n_interfaces,
  ) {
    return _g_type_interfaces(
      type,
      n_interfaces,
    );
  }

  late final _g_type_interfacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_interfaces');
  late final _g_type_interfaces = _g_type_interfacesPtr
      .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  void g_type_set_qdata(
    int type,
    int quark,
    ffi.Pointer data,
  ) {
    return _g_type_set_qdata(
      type,
      quark,
      data,
    );
  }

  late final _g_type_set_qdataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GType, GQuark, ffi.Pointer)>>(
      'g_type_set_qdata');
  late final _g_type_set_qdata =
      _g_type_set_qdataPtr.asFunction<void Function(int, int, ffi.Pointer)>();

  ffi.Pointer g_type_get_qdata(
    int type,
    int quark,
  ) {
    return _g_type_get_qdata(
      type,
      quark,
    );
  }

  late final _g_type_get_qdataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType, GQuark)>>(
          'g_type_get_qdata');
  late final _g_type_get_qdata =
      _g_type_get_qdataPtr.asFunction<ffi.Pointer Function(int, int)>();

  void g_type_query(
    int type,
    ffi.Pointer<GTypeQuery> query,
  ) {
    return _g_type_query(
      type,
      query,
    );
  }

  late final _g_type_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeQuery>)>>('g_type_query');
  late final _g_type_query = _g_type_queryPtr
      .asFunction<void Function(int, ffi.Pointer<GTypeQuery>)>();

  int g_type_get_instance_count(
    int type,
  ) {
    return _g_type_get_instance_count(
      type,
    );
  }

  late final _g_type_get_instance_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(GType)>>(
          'g_type_get_instance_count');
  late final _g_type_get_instance_count =
      _g_type_get_instance_countPtr.asFunction<int Function(int)>();

  int g_type_register_static(
    int parent_type,
    ffi.Pointer<ffi.Char> type_name,
    ffi.Pointer<GTypeInfo> info,
    int flags,
  ) {
    return _g_type_register_static(
      parent_type,
      type_name,
      info,
      flags,
    );
  }

  late final _g_type_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(GType, ffi.Pointer<ffi.Char>, ffi.Pointer<GTypeInfo>,
              ffi.Int32)>>('g_type_register_static');
  late final _g_type_register_static = _g_type_register_staticPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<GTypeInfo>, int)>();

  int g_type_register_static_simple(
    int parent_type,
    ffi.Pointer<ffi.Char> type_name,
    int class_size,
    GClassInitFunc class_init,
    int instance_size,
    GInstanceInitFunc instance_init,
    int flags,
  ) {
    return _g_type_register_static_simple(
      parent_type,
      type_name,
      class_size,
      class_init,
      instance_size,
      instance_init,
      flags,
    );
  }

  late final _g_type_register_static_simplePtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              GType,
              ffi.Pointer<ffi.Char>,
              guint,
              GClassInitFunc,
              guint,
              GInstanceInitFunc,
              ffi.Int32)>>('g_type_register_static_simple');
  late final _g_type_register_static_simple =
      _g_type_register_static_simplePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, GClassInitFunc, int,
              GInstanceInitFunc, int)>();

  int g_type_register_dynamic(
    int parent_type,
    ffi.Pointer<ffi.Char> type_name,
    ffi.Pointer<GTypePlugin> plugin,
    int flags,
  ) {
    return _g_type_register_dynamic(
      parent_type,
      type_name,
      plugin,
      flags,
    );
  }

  late final _g_type_register_dynamicPtr = _lookup<
      ffi.NativeFunction<
          GType Function(GType, ffi.Pointer<ffi.Char>, ffi.Pointer<GTypePlugin>,
              ffi.Int32)>>('g_type_register_dynamic');
  late final _g_type_register_dynamic = _g_type_register_dynamicPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<GTypePlugin>, int)>();

  int g_type_register_fundamental(
    int type_id,
    ffi.Pointer<ffi.Char> type_name,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeFundamentalInfo> finfo,
    int flags,
  ) {
    return _g_type_register_fundamental(
      type_id,
      type_name,
      info,
      finfo,
      flags,
    );
  }

  late final _g_type_register_fundamentalPtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              GType,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeFundamentalInfo>,
              ffi.Int32)>>('g_type_register_fundamental');
  late final _g_type_register_fundamental =
      _g_type_register_fundamentalPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeFundamentalInfo>, int)>();

  void g_type_add_interface_static(
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> info,
  ) {
    return _g_type_add_interface_static(
      instance_type,
      interface_type,
      info,
    );
  }

  late final _g_type_add_interface_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, GType,
              ffi.Pointer<GInterfaceInfo>)>>('g_type_add_interface_static');
  late final _g_type_add_interface_static = _g_type_add_interface_staticPtr
      .asFunction<void Function(int, int, ffi.Pointer<GInterfaceInfo>)>();

  void g_type_add_interface_dynamic(
    int instance_type,
    int interface_type,
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_add_interface_dynamic(
      instance_type,
      interface_type,
      plugin,
    );
  }

  late final _g_type_add_interface_dynamicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, GType,
              ffi.Pointer<GTypePlugin>)>>('g_type_add_interface_dynamic');
  late final _g_type_add_interface_dynamic = _g_type_add_interface_dynamicPtr
      .asFunction<void Function(int, int, ffi.Pointer<GTypePlugin>)>();

  void g_type_interface_add_prerequisite(
    int interface_type,
    int prerequisite_type,
  ) {
    return _g_type_interface_add_prerequisite(
      interface_type,
      prerequisite_type,
    );
  }

  late final _g_type_interface_add_prerequisitePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, GType)>>(
          'g_type_interface_add_prerequisite');
  late final _g_type_interface_add_prerequisite =
      _g_type_interface_add_prerequisitePtr
          .asFunction<void Function(int, int)>();

  ffi.Pointer<GType> g_type_interface_prerequisites(
    int interface_type,
    ffi.Pointer<guint> n_prerequisites,
  ) {
    return _g_type_interface_prerequisites(
      interface_type,
      n_prerequisites,
    );
  }

  late final _g_type_interface_prerequisitesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GType> Function(
              GType, ffi.Pointer<guint>)>>('g_type_interface_prerequisites');
  late final _g_type_interface_prerequisites =
      _g_type_interface_prerequisitesPtr
          .asFunction<ffi.Pointer<GType> Function(int, ffi.Pointer<guint>)>();

  int g_type_interface_instantiatable_prerequisite(
    int interface_type,
  ) {
    return _g_type_interface_instantiatable_prerequisite(
      interface_type,
    );
  }

  late final _g_type_interface_instantiatable_prerequisitePtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>(
          'g_type_interface_instantiatable_prerequisite');
  late final _g_type_interface_instantiatable_prerequisite =
      _g_type_interface_instantiatable_prerequisitePtr
          .asFunction<int Function(int)>();

  void g_type_class_add_private(
    ffi.Pointer g_class,
    int private_size,
  ) {
    return _g_type_class_add_private(
      g_class,
      private_size,
    );
  }

  late final _g_type_class_add_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer, gsize)>>(
          'g_type_class_add_private');
  late final _g_type_class_add_private = _g_type_class_add_privatePtr
      .asFunction<void Function(ffi.Pointer, int)>();

  int g_type_add_instance_private(
    int class_type,
    int private_size,
  ) {
    return _g_type_add_instance_private(
      class_type,
      private_size,
    );
  }

  late final _g_type_add_instance_privatePtr =
      _lookup<ffi.NativeFunction<gint Function(GType, gsize)>>(
          'g_type_add_instance_private');
  late final _g_type_add_instance_private =
      _g_type_add_instance_privatePtr.asFunction<int Function(int, int)>();

  ffi.Pointer g_type_instance_get_private(
    ffi.Pointer<GTypeInstance> instance,
    int private_type,
  ) {
    return _g_type_instance_get_private(
      instance,
      private_type,
    );
  }

  late final _g_type_instance_get_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_instance_get_private');
  late final _g_type_instance_get_private = _g_type_instance_get_privatePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GTypeInstance>, int)>();

  void g_type_class_adjust_private_offset(
    ffi.Pointer g_class,
    ffi.Pointer<gint> private_size_or_offset,
  ) {
    return _g_type_class_adjust_private_offset(
      g_class,
      private_size_or_offset,
    );
  }

  late final _g_type_class_adjust_private_offsetPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer, ffi.Pointer<gint>)>>(
      'g_type_class_adjust_private_offset');
  late final _g_type_class_adjust_private_offset =
      _g_type_class_adjust_private_offsetPtr
          .asFunction<void Function(ffi.Pointer, ffi.Pointer<gint>)>();

  void g_type_add_class_private(
    int class_type,
    int private_size,
  ) {
    return _g_type_add_class_private(
      class_type,
      private_size,
    );
  }

  late final _g_type_add_class_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, gsize)>>(
          'g_type_add_class_private');
  late final _g_type_add_class_private =
      _g_type_add_class_privatePtr.asFunction<void Function(int, int)>();

  ffi.Pointer g_type_class_get_private(
    ffi.Pointer<GTypeClass> klass,
    int private_type,
  ) {
    return _g_type_class_get_private(
      klass,
      private_type,
    );
  }

  late final _g_type_class_get_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GTypeClass>, GType)>>('g_type_class_get_private');
  late final _g_type_class_get_private = _g_type_class_get_privatePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_class_get_instance_private_offset(
    ffi.Pointer g_class,
  ) {
    return _g_type_class_get_instance_private_offset(
      g_class,
    );
  }

  late final _g_type_class_get_instance_private_offsetPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer)>>(
          'g_type_class_get_instance_private_offset');
  late final _g_type_class_get_instance_private_offset =
      _g_type_class_get_instance_private_offsetPtr
          .asFunction<int Function(ffi.Pointer)>();

  void g_type_ensure(
    int type,
  ) {
    return _g_type_ensure(
      type,
    );
  }

  late final _g_type_ensurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType)>>('g_type_ensure');
  late final _g_type_ensure =
      _g_type_ensurePtr.asFunction<void Function(int)>();

  int g_type_get_type_registration_serial() {
    return _g_type_get_type_registration_serial();
  }

  late final _g_type_get_type_registration_serialPtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'g_type_get_type_registration_serial');
  late final _g_type_get_type_registration_serial =
      _g_type_get_type_registration_serialPtr.asFunction<int Function()>();

  ffi.Pointer<GTypePlugin> g_type_get_plugin(
    int type,
  ) {
    return _g_type_get_plugin(
      type,
    );
  }

  late final _g_type_get_pluginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypePlugin> Function(GType)>>(
          'g_type_get_plugin');
  late final _g_type_get_plugin = _g_type_get_pluginPtr
      .asFunction<ffi.Pointer<GTypePlugin> Function(int)>();

  ffi.Pointer<GTypePlugin> g_type_interface_get_plugin(
    int instance_type,
    int interface_type,
  ) {
    return _g_type_interface_get_plugin(
      instance_type,
      interface_type,
    );
  }

  late final _g_type_interface_get_pluginPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GTypePlugin> Function(GType, GType)>>(
      'g_type_interface_get_plugin');
  late final _g_type_interface_get_plugin = _g_type_interface_get_pluginPtr
      .asFunction<ffi.Pointer<GTypePlugin> Function(int, int)>();

  int g_type_fundamental_next() {
    return _g_type_fundamental_next();
  }

  late final _g_type_fundamental_nextPtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_fundamental_next');
  late final _g_type_fundamental_next =
      _g_type_fundamental_nextPtr.asFunction<int Function()>();

  int g_type_fundamental(
    int type_id,
  ) {
    return _g_type_fundamental(
      type_id,
    );
  }

  late final _g_type_fundamentalPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>('g_type_fundamental');
  late final _g_type_fundamental =
      _g_type_fundamentalPtr.asFunction<int Function(int)>();

  ffi.Pointer<GTypeInstance> g_type_create_instance(
    int type,
  ) {
    return _g_type_create_instance(
      type,
    );
  }

  late final _g_type_create_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypeInstance> Function(GType)>>(
          'g_type_create_instance');
  late final _g_type_create_instance = _g_type_create_instancePtr
      .asFunction<ffi.Pointer<GTypeInstance> Function(int)>();

  void g_type_free_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_free_instance(
      instance,
    );
  }

  late final _g_type_free_instancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeInstance>)>>(
      'g_type_free_instance');
  late final _g_type_free_instance = _g_type_free_instancePtr
      .asFunction<void Function(ffi.Pointer<GTypeInstance>)>();

  void g_type_add_class_cache_func(
    ffi.Pointer cache_data,
    GTypeClassCacheFunc cache_func,
  ) {
    return _g_type_add_class_cache_func(
      cache_data,
      cache_func,
    );
  }

  late final _g_type_add_class_cache_funcPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer, GTypeClassCacheFunc)>>(
      'g_type_add_class_cache_func');
  late final _g_type_add_class_cache_func = _g_type_add_class_cache_funcPtr
      .asFunction<void Function(ffi.Pointer, GTypeClassCacheFunc)>();

  void g_type_remove_class_cache_func(
    ffi.Pointer cache_data,
    GTypeClassCacheFunc cache_func,
  ) {
    return _g_type_remove_class_cache_func(
      cache_data,
      cache_func,
    );
  }

  late final _g_type_remove_class_cache_funcPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer, GTypeClassCacheFunc)>>(
      'g_type_remove_class_cache_func');
  late final _g_type_remove_class_cache_func =
      _g_type_remove_class_cache_funcPtr
          .asFunction<void Function(ffi.Pointer, GTypeClassCacheFunc)>();

  void g_type_class_unref_uncached(
    ffi.Pointer g_class,
  ) {
    return _g_type_class_unref_uncached(
      g_class,
    );
  }

  late final _g_type_class_unref_uncachedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_type_class_unref_uncached');
  late final _g_type_class_unref_uncached =
      _g_type_class_unref_uncachedPtr.asFunction<void Function(ffi.Pointer)>();

  void g_type_add_interface_check(
    ffi.Pointer check_data,
    GTypeInterfaceCheckFunc check_func,
  ) {
    return _g_type_add_interface_check(
      check_data,
      check_func,
    );
  }

  late final _g_type_add_interface_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer,
              GTypeInterfaceCheckFunc)>>('g_type_add_interface_check');
  late final _g_type_add_interface_check = _g_type_add_interface_checkPtr
      .asFunction<void Function(ffi.Pointer, GTypeInterfaceCheckFunc)>();

  void g_type_remove_interface_check(
    ffi.Pointer check_data,
    GTypeInterfaceCheckFunc check_func,
  ) {
    return _g_type_remove_interface_check(
      check_data,
      check_func,
    );
  }

  late final _g_type_remove_interface_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer,
              GTypeInterfaceCheckFunc)>>('g_type_remove_interface_check');
  late final _g_type_remove_interface_check = _g_type_remove_interface_checkPtr
      .asFunction<void Function(ffi.Pointer, GTypeInterfaceCheckFunc)>();

  ffi.Pointer<GTypeValueTable> g_type_value_table_peek(
    int type,
  ) {
    return _g_type_value_table_peek(
      type,
    );
  }

  late final _g_type_value_table_peekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GTypeValueTable> Function(GType)>>(
          'g_type_value_table_peek');
  late final _g_type_value_table_peek = _g_type_value_table_peekPtr
      .asFunction<ffi.Pointer<GTypeValueTable> Function(int)>();

  int g_type_check_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_check_instance(
      instance,
    );
  }

  late final _g_type_check_instancePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeInstance>)>>(
      'g_type_check_instance');
  late final _g_type_check_instance = _g_type_check_instancePtr
      .asFunction<int Function(ffi.Pointer<GTypeInstance>)>();

  ffi.Pointer<GTypeInstance> g_type_check_instance_cast(
    ffi.Pointer<GTypeInstance> instance,
    int iface_type,
  ) {
    return _g_type_check_instance_cast(
      instance,
      iface_type,
    );
  }

  late final _g_type_check_instance_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeInstance> Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_cast');
  late final _g_type_check_instance_cast =
      _g_type_check_instance_castPtr.asFunction<
          ffi.Pointer<GTypeInstance> Function(
              ffi.Pointer<GTypeInstance>, int)>();

  int g_type_check_instance_is_a(
    ffi.Pointer<GTypeInstance> instance,
    int iface_type,
  ) {
    return _g_type_check_instance_is_a(
      instance,
      iface_type,
    );
  }

  late final _g_type_check_instance_is_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_is_a');
  late final _g_type_check_instance_is_a = _g_type_check_instance_is_aPtr
      .asFunction<int Function(ffi.Pointer<GTypeInstance>, int)>();

  int g_type_check_instance_is_fundamentally_a(
    ffi.Pointer<GTypeInstance> instance,
    int fundamental_type,
  ) {
    return _g_type_check_instance_is_fundamentally_a(
      instance,
      fundamental_type,
    );
  }

  late final _g_type_check_instance_is_fundamentally_aPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GTypeInstance>,
              GType)>>('g_type_check_instance_is_fundamentally_a');
  late final _g_type_check_instance_is_fundamentally_a =
      _g_type_check_instance_is_fundamentally_aPtr
          .asFunction<int Function(ffi.Pointer<GTypeInstance>, int)>();

  ffi.Pointer<GTypeClass> g_type_check_class_cast(
    ffi.Pointer<GTypeClass> g_class,
    int is_a_type,
  ) {
    return _g_type_check_class_cast(
      g_class,
      is_a_type,
    );
  }

  late final _g_type_check_class_castPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GTypeClass> Function(
              ffi.Pointer<GTypeClass>, GType)>>('g_type_check_class_cast');
  late final _g_type_check_class_cast = _g_type_check_class_castPtr.asFunction<
      ffi.Pointer<GTypeClass> Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_check_class_is_a(
    ffi.Pointer<GTypeClass> g_class,
    int is_a_type,
  ) {
    return _g_type_check_class_is_a(
      g_class,
      is_a_type,
    );
  }

  late final _g_type_check_class_is_aPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GTypeClass>, GType)>>(
      'g_type_check_class_is_a');
  late final _g_type_check_class_is_a = _g_type_check_class_is_aPtr
      .asFunction<int Function(ffi.Pointer<GTypeClass>, int)>();

  int g_type_check_is_value_type(
    int type,
  ) {
    return _g_type_check_is_value_type(
      type,
    );
  }

  late final _g_type_check_is_value_typePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType)>>(
          'g_type_check_is_value_type');
  late final _g_type_check_is_value_type =
      _g_type_check_is_value_typePtr.asFunction<int Function(int)>();

  int g_type_check_value(
    ffi.Pointer<GValue> value,
  ) {
    return _g_type_check_value(
      value,
    );
  }

  late final _g_type_check_valuePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_type_check_value');
  late final _g_type_check_value =
      _g_type_check_valuePtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int g_type_check_value_holds(
    ffi.Pointer<GValue> value,
    int type,
  ) {
    return _g_type_check_value_holds(
      value,
      type,
    );
  }

  late final _g_type_check_value_holdsPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>, GType)>>(
      'g_type_check_value_holds');
  late final _g_type_check_value_holds = _g_type_check_value_holdsPtr
      .asFunction<int Function(ffi.Pointer<GValue>, int)>();

  int g_type_test_flags(
    int type,
    int flags,
  ) {
    return _g_type_test_flags(
      type,
      flags,
    );
  }

  late final _g_type_test_flagsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, guint)>>(
          'g_type_test_flags');
  late final _g_type_test_flags =
      _g_type_test_flagsPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> g_type_name_from_instance(
    ffi.Pointer<GTypeInstance> instance,
  ) {
    return _g_type_name_from_instance(
      instance,
    );
  }

  late final _g_type_name_from_instancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GTypeInstance>)>>('g_type_name_from_instance');
  late final _g_type_name_from_instance = _g_type_name_from_instancePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GTypeInstance>)>();

  ffi.Pointer<ffi.Char> g_type_name_from_class(
    ffi.Pointer<GTypeClass> g_class,
  ) {
    return _g_type_name_from_class(
      g_class,
    );
  }

  late final _g_type_name_from_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GTypeClass>)>>('g_type_name_from_class');
  late final _g_type_name_from_class = _g_type_name_from_classPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GTypeClass>)>();

  ffi.Pointer<GValue> g_value_init(
    ffi.Pointer<GValue> value,
    int g_type,
  ) {
    return _g_value_init(
      value,
      g_type,
    );
  }

  late final _g_value_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, GType)>>('g_value_init');
  late final _g_value_init = _g_value_initPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  void g_value_copy(
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
  ) {
    return _g_value_copy(
      src_value,
      dest_value,
    );
  }

  late final _g_value_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('g_value_copy');
  late final _g_value_copy = _g_value_copyPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> g_value_reset(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_reset(
      value,
    );
  }

  late final _g_value_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>>('g_value_reset');
  late final _g_value_reset = _g_value_resetPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>();

  void g_value_unset(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_unset(
      value,
    );
  }

  late final _g_value_unsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>)>>(
          'g_value_unset');
  late final _g_value_unset =
      _g_value_unsetPtr.asFunction<void Function(ffi.Pointer<GValue>)>();

  void g_value_set_instance(
    ffi.Pointer<GValue> value,
    ffi.Pointer instance,
  ) {
    return _g_value_set_instance(
      value,
      instance,
    );
  }

  late final _g_value_set_instancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer)>>(
      'g_value_set_instance');
  late final _g_value_set_instance = _g_value_set_instancePtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer)>();

  void g_value_init_from_instance(
    ffi.Pointer<GValue> value,
    ffi.Pointer instance,
  ) {
    return _g_value_init_from_instance(
      value,
      instance,
    );
  }

  late final _g_value_init_from_instancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer)>>(
      'g_value_init_from_instance');
  late final _g_value_init_from_instance = _g_value_init_from_instancePtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer)>();

  int g_value_fits_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_fits_pointer(
      value,
    );
  }

  late final _g_value_fits_pointerPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_value_fits_pointer');
  late final _g_value_fits_pointer =
      _g_value_fits_pointerPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  ffi.Pointer g_value_peek_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_peek_pointer(
      value,
    );
  }

  late final _g_value_peek_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>>(
          'g_value_peek_pointer');
  late final _g_value_peek_pointer = _g_value_peek_pointerPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>();

  int g_value_type_compatible(
    int src_type,
    int dest_type,
  ) {
    return _g_value_type_compatible(
      src_type,
      dest_type,
    );
  }

  late final _g_value_type_compatiblePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_value_type_compatible');
  late final _g_value_type_compatible =
      _g_value_type_compatiblePtr.asFunction<int Function(int, int)>();

  int g_value_type_transformable(
    int src_type,
    int dest_type,
  ) {
    return _g_value_type_transformable(
      src_type,
      dest_type,
    );
  }

  late final _g_value_type_transformablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GType)>>(
          'g_value_type_transformable');
  late final _g_value_type_transformable =
      _g_value_type_transformablePtr.asFunction<int Function(int, int)>();

  int g_value_transform(
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
  ) {
    return _g_value_transform(
      src_value,
      dest_value,
    );
  }

  late final _g_value_transformPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('g_value_transform');
  late final _g_value_transform = _g_value_transformPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void g_value_register_transform_func(
    int src_type,
    int dest_type,
    GValueTransform transform_func,
  ) {
    return _g_value_register_transform_func(
      src_type,
      dest_type,
      transform_func,
    );
  }

  late final _g_value_register_transform_funcPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(GType, GType, GValueTransform)>>(
      'g_value_register_transform_func');
  late final _g_value_register_transform_func =
      _g_value_register_transform_funcPtr
          .asFunction<void Function(int, int, GValueTransform)>();

  ffi.Pointer<GParamSpec> g_param_spec_ref(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_ref(
      pspec,
    );
  }

  late final _g_param_spec_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_ref');
  late final _g_param_spec_ref = _g_param_spec_refPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  void g_param_spec_unref(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_unref(
      pspec,
    );
  }

  late final _g_param_spec_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_unref');
  late final _g_param_spec_unref = _g_param_spec_unrefPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>)>();

  void g_param_spec_sink(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_sink(
      pspec,
    );
  }

  late final _g_param_spec_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_sink');
  late final _g_param_spec_sink = _g_param_spec_sinkPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_ref_sink(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_ref_sink(
      pspec,
    );
  }

  late final _g_param_spec_ref_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_ref_sink');
  late final _g_param_spec_ref_sink = _g_param_spec_ref_sinkPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer g_param_spec_get_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
  ) {
    return _g_param_spec_get_qdata(
      pspec,
      quark,
    );
  }

  late final _g_param_spec_get_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GParamSpec>, GQuark)>>('g_param_spec_get_qdata');
  late final _g_param_spec_get_qdata = _g_param_spec_get_qdataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GParamSpec>, int)>();

  void g_param_spec_set_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
    ffi.Pointer data,
  ) {
    return _g_param_spec_set_qdata(
      pspec,
      quark,
      data,
    );
  }

  late final _g_param_spec_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>, GQuark,
              ffi.Pointer)>>('g_param_spec_set_qdata');
  late final _g_param_spec_set_qdata = _g_param_spec_set_qdataPtr
      .asFunction<void Function(ffi.Pointer<GParamSpec>, int, ffi.Pointer)>();

  void g_param_spec_set_qdata_full(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
    ffi.Pointer data,
    GDestroyNotify destroy,
  ) {
    return _g_param_spec_set_qdata_full(
      pspec,
      quark,
      data,
      destroy,
    );
  }

  late final _g_param_spec_set_qdata_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>, GQuark, ffi.Pointer,
              GDestroyNotify)>>('g_param_spec_set_qdata_full');
  late final _g_param_spec_set_qdata_full =
      _g_param_spec_set_qdata_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpec>, int, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer g_param_spec_steal_qdata(
    ffi.Pointer<GParamSpec> pspec,
    int quark,
  ) {
    return _g_param_spec_steal_qdata(
      pspec,
      quark,
    );
  }

  late final _g_param_spec_steal_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GParamSpec>, GQuark)>>('g_param_spec_steal_qdata');
  late final _g_param_spec_steal_qdata = _g_param_spec_steal_qdataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GParamSpec>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_get_redirect_target(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_redirect_target(
      pspec,
    );
  }

  late final _g_param_spec_get_redirect_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_redirect_target');
  late final _g_param_spec_get_redirect_target =
      _g_param_spec_get_redirect_targetPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<GParamSpec>)>();

  void g_param_value_set_default(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_set_default(
      pspec,
      value,
    );
  }

  late final _g_param_value_set_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_set_default');
  late final _g_param_value_set_default =
      _g_param_value_set_defaultPtr.asFunction<
          void Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_defaults(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_defaults(
      pspec,
      value,
    );
  }

  late final _g_param_value_defaultsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_defaults');
  late final _g_param_value_defaults = _g_param_value_defaultsPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_validate(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_validate(
      pspec,
      value,
    );
  }

  late final _g_param_value_validatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_validate');
  late final _g_param_value_validate = _g_param_value_validatePtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_is_valid(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value,
  ) {
    return _g_param_value_is_valid(
      pspec,
      value,
    );
  }

  late final _g_param_value_is_validPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>,
              ffi.Pointer<GValue>)>>('g_param_value_is_valid');
  late final _g_param_value_is_valid = _g_param_value_is_validPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>)>();

  int g_param_value_convert(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> src_value,
    ffi.Pointer<GValue> dest_value,
    int strict_validation,
  ) {
    return _g_param_value_convert(
      pspec,
      src_value,
      dest_value,
      strict_validation,
    );
  }

  late final _g_param_value_convertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, gboolean)>>('g_param_value_convert');
  late final _g_param_value_convert = _g_param_value_convertPtr.asFunction<
      int Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
          ffi.Pointer<GValue>, int)>();

  int g_param_values_cmp(
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _g_param_values_cmp(
      pspec,
      value1,
      value2,
    );
  }

  late final _g_param_values_cmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('g_param_values_cmp');
  late final _g_param_values_cmp = _g_param_values_cmpPtr.asFunction<
      int Function(
          ffi.Pointer<GParamSpec>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<ffi.Char> g_param_spec_get_name(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_name(
      pspec,
    );
  }

  late final _g_param_spec_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_name');
  late final _g_param_spec_get_name = _g_param_spec_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<ffi.Char> g_param_spec_get_nick(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_nick(
      pspec,
    );
  }

  late final _g_param_spec_get_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_nick');
  late final _g_param_spec_get_nick = _g_param_spec_get_nickPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<ffi.Char> g_param_spec_get_blurb(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_blurb(
      pspec,
    );
  }

  late final _g_param_spec_get_blurbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_blurb');
  late final _g_param_spec_get_blurb = _g_param_spec_get_blurbPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GParamSpec>)>();

  void g_value_set_param(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_set_param(
      value,
      param,
    );
  }

  late final _g_value_set_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_set_param');
  late final _g_value_set_param = _g_value_set_paramPtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_value_get_param(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_param(
      value,
    );
  }

  late final _g_value_get_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GValue>)>>('g_value_get_param');
  late final _g_value_get_param = _g_value_get_paramPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GParamSpec> g_value_dup_param(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_param(
      value,
    );
  }

  late final _g_value_dup_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GValue>)>>('g_value_dup_param');
  late final _g_value_dup_param = _g_value_dup_paramPtr
      .asFunction<ffi.Pointer<GParamSpec> Function(ffi.Pointer<GValue>)>();

  void g_value_take_param(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_take_param(
      value,
      param,
    );
  }

  late final _g_value_take_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_take_param');
  late final _g_value_take_param = _g_value_take_paramPtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  void g_value_set_param_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GParamSpec> param,
  ) {
    return _g_value_set_param_take_ownership(
      value,
      param,
    );
  }

  late final _g_value_set_param_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GParamSpec>)>>('g_value_set_param_take_ownership');
  late final _g_value_set_param_take_ownership =
      _g_value_set_param_take_ownershipPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GValue> g_param_spec_get_default_value(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_default_value(
      pspec,
    );
  }

  late final _g_param_spec_get_default_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GParamSpec>)>>('g_param_spec_get_default_value');
  late final _g_param_spec_get_default_value =
      _g_param_spec_get_default_valuePtr
          .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GParamSpec>)>();

  int g_param_spec_get_name_quark(
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_get_name_quark(
      pspec,
    );
  }

  late final _g_param_spec_get_name_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<GParamSpec>)>>(
          'g_param_spec_get_name_quark');
  late final _g_param_spec_get_name_quark = _g_param_spec_get_name_quarkPtr
      .asFunction<int Function(ffi.Pointer<GParamSpec>)>();

  int g_param_type_register_static(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GParamSpecTypeInfo> pspec_info,
  ) {
    return _g_param_type_register_static(
      name,
      pspec_info,
    );
  }

  late final _g_param_type_register_staticPtr = _lookup<
          ffi.NativeFunction<
              GType Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<GParamSpecTypeInfo>)>>(
      'g_param_type_register_static');
  late final _g_param_type_register_static =
      _g_param_type_register_staticPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<GParamSpecTypeInfo>)>();

  int g_param_spec_is_valid_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_param_spec_is_valid_name(
      name,
    );
  }

  late final _g_param_spec_is_valid_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_param_spec_is_valid_name');
  late final _g_param_spec_is_valid_name = _g_param_spec_is_valid_namePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _g_param_type_register_static_constant(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GParamSpecTypeInfo> pspec_info,
    int opt_type,
  ) {
    return __g_param_type_register_static_constant(
      name,
      pspec_info,
      opt_type,
    );
  }

  late final __g_param_type_register_static_constantPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GParamSpecTypeInfo>,
              GType)>>('_g_param_type_register_static_constant');
  late final __g_param_type_register_static_constant =
      __g_param_type_register_static_constantPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<GParamSpecTypeInfo>, int)>();

  ffi.Pointer g_param_spec_internal(
    int param_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int flags,
  ) {
    return _g_param_spec_internal(
      param_type,
      name,
      nick,
      blurb,
      flags,
    );
  }

  late final _g_param_spec_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              GType,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_param_spec_internal');
  late final _g_param_spec_internal = _g_param_spec_internalPtr.asFunction<
      ffi.Pointer Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GParamSpecPool> g_param_spec_pool_new(
    int type_prefixing,
  ) {
    return _g_param_spec_pool_new(
      type_prefixing,
    );
  }

  late final _g_param_spec_pool_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GParamSpecPool> Function(gboolean)>>(
      'g_param_spec_pool_new');
  late final _g_param_spec_pool_new = _g_param_spec_pool_newPtr
      .asFunction<ffi.Pointer<GParamSpecPool> Function(int)>();

  void g_param_spec_pool_insert(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<GParamSpec> pspec,
    int owner_type,
  ) {
    return _g_param_spec_pool_insert(
      pool,
      pspec,
      owner_type,
    );
  }

  late final _g_param_spec_pool_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<GParamSpec>, GType)>>('g_param_spec_pool_insert');
  late final _g_param_spec_pool_insert =
      _g_param_spec_pool_insertPtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<GParamSpec>, int)>();

  void g_param_spec_pool_remove(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_param_spec_pool_remove(
      pool,
      pspec,
    );
  }

  late final _g_param_spec_pool_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<GParamSpec>)>>('g_param_spec_pool_remove');
  late final _g_param_spec_pool_remove =
      _g_param_spec_pool_removePtr.asFunction<
          void Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_pool_lookup(
    ffi.Pointer<GParamSpecPool> pool,
    ffi.Pointer<ffi.Char> param_name,
    int owner_type,
    int walk_ancestors,
  ) {
    return _g_param_spec_pool_lookup(
      pool,
      param_name,
      owner_type,
      walk_ancestors,
    );
  }

  late final _g_param_spec_pool_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpecPool>,
              ffi.Pointer<ffi.Char>,
              GType,
              gboolean)>>('g_param_spec_pool_lookup');
  late final _g_param_spec_pool_lookup =
      _g_param_spec_pool_lookupPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GParamSpecPool>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GList> g_param_spec_pool_list_owned(
    ffi.Pointer<GParamSpecPool> pool,
    int owner_type,
  ) {
    return _g_param_spec_pool_list_owned(
      pool,
      owner_type,
    );
  }

  late final _g_param_spec_pool_list_ownedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GParamSpecPool>,
              GType)>>('g_param_spec_pool_list_owned');
  late final _g_param_spec_pool_list_owned =
      _g_param_spec_pool_list_ownedPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GParamSpecPool>, int)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_param_spec_pool_list(
    ffi.Pointer<GParamSpecPool> pool,
    int owner_type,
    ffi.Pointer<guint> n_pspecs_p,
  ) {
    return _g_param_spec_pool_list(
      pool,
      owner_type,
      n_pspecs_p,
    );
  }

  late final _g_param_spec_pool_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GParamSpecPool>,
              GType,
              ffi.Pointer<guint>)>>('g_param_spec_pool_list');
  late final _g_param_spec_pool_list = _g_param_spec_pool_listPtr.asFunction<
      ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
          ffi.Pointer<GParamSpecPool>, int, ffi.Pointer<guint>)>();

  void g_param_spec_pool_free(
    ffi.Pointer<GParamSpecPool> pool,
  ) {
    return _g_param_spec_pool_free(
      pool,
    );
  }

  late final _g_param_spec_pool_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpecPool>)>>(
      'g_param_spec_pool_free');
  late final _g_param_spec_pool_free = _g_param_spec_pool_freePtr
      .asFunction<void Function(ffi.Pointer<GParamSpecPool>)>();

  ffi.Pointer<GClosure> g_cclosure_new(
    GCallback callback_func,
    ffi.Pointer user_data,
    GClosureNotify destroy_data,
  ) {
    return _g_cclosure_new(
      callback_func,
      user_data,
      destroy_data,
    );
  }

  late final _g_cclosure_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer, GClosureNotify)>>('g_cclosure_new');
  late final _g_cclosure_new = _g_cclosure_newPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer, GClosureNotify)>();

  ffi.Pointer<GClosure> g_cclosure_new_swap(
    GCallback callback_func,
    ffi.Pointer user_data,
    GClosureNotify destroy_data,
  ) {
    return _g_cclosure_new_swap(
      callback_func,
      user_data,
      destroy_data,
    );
  }

  late final _g_cclosure_new_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer, GClosureNotify)>>('g_cclosure_new_swap');
  late final _g_cclosure_new_swap = _g_cclosure_new_swapPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer, GClosureNotify)>();

  ffi.Pointer<GClosure> g_signal_type_cclosure_new(
    int itype,
    int struct_offset,
  ) {
    return _g_signal_type_cclosure_new(
      itype,
      struct_offset,
    );
  }

  late final _g_signal_type_cclosure_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GClosure> Function(GType, guint)>>(
          'g_signal_type_cclosure_new');
  late final _g_signal_type_cclosure_new = _g_signal_type_cclosure_newPtr
      .asFunction<ffi.Pointer<GClosure> Function(int, int)>();

  ffi.Pointer<GClosure> g_closure_ref(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_ref(
      closure,
    );
  }

  late final _g_closure_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              ffi.Pointer<GClosure>)>>('g_closure_ref');
  late final _g_closure_ref = _g_closure_refPtr
      .asFunction<ffi.Pointer<GClosure> Function(ffi.Pointer<GClosure>)>();

  void g_closure_sink(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_sink(
      closure,
    );
  }

  late final _g_closure_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_sink');
  late final _g_closure_sink =
      _g_closure_sinkPtr.asFunction<void Function(ffi.Pointer<GClosure>)>();

  void g_closure_unref(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_unref(
      closure,
    );
  }

  late final _g_closure_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_unref');
  late final _g_closure_unref =
      _g_closure_unrefPtr.asFunction<void Function(ffi.Pointer<GClosure>)>();

  ffi.Pointer<GClosure> g_closure_new_simple(
    int sizeof_closure,
    ffi.Pointer data,
  ) {
    return _g_closure_new_simple(
      sizeof_closure,
      data,
    );
  }

  late final _g_closure_new_simplePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GClosure> Function(guint, ffi.Pointer)>>(
      'g_closure_new_simple');
  late final _g_closure_new_simple = _g_closure_new_simplePtr
      .asFunction<ffi.Pointer<GClosure> Function(int, ffi.Pointer)>();

  void g_closure_add_finalize_notifier(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_add_finalize_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_add_finalize_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer,
              GClosureNotify)>>('g_closure_add_finalize_notifier');
  late final _g_closure_add_finalize_notifier =
      _g_closure_add_finalize_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureNotify)>();

  void g_closure_remove_finalize_notifier(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_remove_finalize_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_remove_finalize_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer,
              GClosureNotify)>>('g_closure_remove_finalize_notifier');
  late final _g_closure_remove_finalize_notifier =
      _g_closure_remove_finalize_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureNotify)>();

  void g_closure_add_invalidate_notifier(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_add_invalidate_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_add_invalidate_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer,
              GClosureNotify)>>('g_closure_add_invalidate_notifier');
  late final _g_closure_add_invalidate_notifier =
      _g_closure_add_invalidate_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureNotify)>();

  void g_closure_remove_invalidate_notifier(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer notify_data,
    GClosureNotify notify_func,
  ) {
    return _g_closure_remove_invalidate_notifier(
      closure,
      notify_data,
      notify_func,
    );
  }

  late final _g_closure_remove_invalidate_notifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer,
              GClosureNotify)>>('g_closure_remove_invalidate_notifier');
  late final _g_closure_remove_invalidate_notifier =
      _g_closure_remove_invalidate_notifierPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureNotify)>();

  void g_closure_add_marshal_guards(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer pre_marshal_data,
    GClosureNotify pre_marshal_notify,
    ffi.Pointer post_marshal_data,
    GClosureNotify post_marshal_notify,
  ) {
    return _g_closure_add_marshal_guards(
      closure,
      pre_marshal_data,
      pre_marshal_notify,
      post_marshal_data,
      post_marshal_notify,
    );
  }

  late final _g_closure_add_marshal_guardsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureNotify,
              ffi.Pointer, GClosureNotify)>>('g_closure_add_marshal_guards');
  late final _g_closure_add_marshal_guards =
      _g_closure_add_marshal_guardsPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureNotify,
              ffi.Pointer, GClosureNotify)>();

  void g_closure_set_marshal(
    ffi.Pointer<GClosure> closure,
    GClosureMarshal marshal,
  ) {
    return _g_closure_set_marshal(
      closure,
      marshal,
    );
  }

  late final _g_closure_set_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>,
              GClosureMarshal)>>('g_closure_set_marshal');
  late final _g_closure_set_marshal = _g_closure_set_marshalPtr
      .asFunction<void Function(ffi.Pointer<GClosure>, GClosureMarshal)>();

  void g_closure_set_meta_marshal(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer marshal_data,
    GClosureMarshal meta_marshal,
  ) {
    return _g_closure_set_meta_marshal(
      closure,
      marshal_data,
      meta_marshal,
    );
  }

  late final _g_closure_set_meta_marshalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer,
              GClosureMarshal)>>('g_closure_set_meta_marshal');
  late final _g_closure_set_meta_marshal =
      _g_closure_set_meta_marshalPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer, GClosureMarshal)>();

  void g_closure_invalidate(
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_closure_invalidate(
      closure,
    );
  }

  late final _g_closure_invalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GClosure>)>>(
          'g_closure_invalidate');
  late final _g_closure_invalidate = _g_closure_invalidatePtr
      .asFunction<void Function(ffi.Pointer<GClosure>)>();

  void g_closure_invoke(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
  ) {
    return _g_closure_invoke(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
    );
  }

  late final _g_closure_invokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, guint,
              ffi.Pointer<GValue>, ffi.Pointer)>>('g_closure_invoke');
  late final _g_closure_invoke = _g_closure_invokePtr.asFunction<
      void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
          ffi.Pointer<GValue>, ffi.Pointer)>();

  void g_cclosure_marshal_generic(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_gvalue,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_generic(
      closure,
      return_gvalue,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_genericPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_generic');
  late final _g_cclosure_marshal_generic =
      _g_cclosure_marshal_genericPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_generic_va(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args_list,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_generic_va(
      closure,
      return_value,
      instance,
      args_list,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_generic_vaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_generic_va');
  late final _g_cclosure_marshal_generic_va =
      _g_cclosure_marshal_generic_vaPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__VOID(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__VOID(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__VOIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__VOID');
  late final _g_cclosure_marshal_VOID__VOID =
      _g_cclosure_marshal_VOID__VOIDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__VOIDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__VOIDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__VOIDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__VOIDv');
  late final _g_cclosure_marshal_VOID__VOIDv =
      _g_cclosure_marshal_VOID__VOIDvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__BOOLEAN(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__BOOLEAN(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__BOOLEANPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__BOOLEAN');
  late final _g_cclosure_marshal_VOID__BOOLEAN =
      _g_cclosure_marshal_VOID__BOOLEANPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__BOOLEANv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__BOOLEANv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__BOOLEANvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__BOOLEANv');
  late final _g_cclosure_marshal_VOID__BOOLEANv =
      _g_cclosure_marshal_VOID__BOOLEANvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__CHAR(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__CHAR(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__CHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__CHAR');
  late final _g_cclosure_marshal_VOID__CHAR =
      _g_cclosure_marshal_VOID__CHARPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__CHARv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__CHARv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__CHARvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__CHARv');
  late final _g_cclosure_marshal_VOID__CHARv =
      _g_cclosure_marshal_VOID__CHARvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UCHAR(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UCHAR(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UCHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__UCHAR');
  late final _g_cclosure_marshal_VOID__UCHAR =
      _g_cclosure_marshal_VOID__UCHARPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__UCHARv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UCHARv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UCHARvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UCHARv');
  late final _g_cclosure_marshal_VOID__UCHARv =
      _g_cclosure_marshal_VOID__UCHARvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__INT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__INT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__INTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__INT');
  late final _g_cclosure_marshal_VOID__INT =
      _g_cclosure_marshal_VOID__INTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__INTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__INTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__INTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__INTv');
  late final _g_cclosure_marshal_VOID__INTv =
      _g_cclosure_marshal_VOID__INTvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UINT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UINT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UINTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__UINT');
  late final _g_cclosure_marshal_VOID__UINT =
      _g_cclosure_marshal_VOID__UINTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__UINTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UINTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UINTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UINTv');
  late final _g_cclosure_marshal_VOID__UINTv =
      _g_cclosure_marshal_VOID__UINTvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__LONG(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__LONG(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__LONGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__LONG');
  late final _g_cclosure_marshal_VOID__LONG =
      _g_cclosure_marshal_VOID__LONGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__LONGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__LONGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__LONGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__LONGv');
  late final _g_cclosure_marshal_VOID__LONGv =
      _g_cclosure_marshal_VOID__LONGvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__ULONG(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__ULONG(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__ULONGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__ULONG');
  late final _g_cclosure_marshal_VOID__ULONG =
      _g_cclosure_marshal_VOID__ULONGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__ULONGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__ULONGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__ULONGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__ULONGv');
  late final _g_cclosure_marshal_VOID__ULONGv =
      _g_cclosure_marshal_VOID__ULONGvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__ENUM(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__ENUM(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__ENUMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__ENUM');
  late final _g_cclosure_marshal_VOID__ENUM =
      _g_cclosure_marshal_VOID__ENUMPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__ENUMv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__ENUMv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__ENUMvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__ENUMv');
  late final _g_cclosure_marshal_VOID__ENUMv =
      _g_cclosure_marshal_VOID__ENUMvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__FLAGS(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__FLAGS(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__FLAGSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__FLAGS');
  late final _g_cclosure_marshal_VOID__FLAGS =
      _g_cclosure_marshal_VOID__FLAGSPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__FLAGSv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__FLAGSv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__FLAGSvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__FLAGSv');
  late final _g_cclosure_marshal_VOID__FLAGSv =
      _g_cclosure_marshal_VOID__FLAGSvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__FLOAT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__FLOAT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__FLOATPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__FLOAT');
  late final _g_cclosure_marshal_VOID__FLOAT =
      _g_cclosure_marshal_VOID__FLOATPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__FLOATv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__FLOATv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__FLOATvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__FLOATv');
  late final _g_cclosure_marshal_VOID__FLOATv =
      _g_cclosure_marshal_VOID__FLOATvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__DOUBLE(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__DOUBLE(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__DOUBLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__DOUBLE');
  late final _g_cclosure_marshal_VOID__DOUBLE =
      _g_cclosure_marshal_VOID__DOUBLEPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__DOUBLEv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__DOUBLEv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__DOUBLEvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__DOUBLEv');
  late final _g_cclosure_marshal_VOID__DOUBLEv =
      _g_cclosure_marshal_VOID__DOUBLEvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__STRING(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__STRING(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__STRINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__STRING');
  late final _g_cclosure_marshal_VOID__STRING =
      _g_cclosure_marshal_VOID__STRINGPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__STRINGv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__STRINGv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__STRINGvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__STRINGv');
  late final _g_cclosure_marshal_VOID__STRINGv =
      _g_cclosure_marshal_VOID__STRINGvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__PARAM(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__PARAM(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__PARAMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__PARAM');
  late final _g_cclosure_marshal_VOID__PARAM =
      _g_cclosure_marshal_VOID__PARAMPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__PARAMv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__PARAMv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__PARAMvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__PARAMv');
  late final _g_cclosure_marshal_VOID__PARAMv =
      _g_cclosure_marshal_VOID__PARAMvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__BOXED(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__BOXED(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__BOXEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__BOXED');
  late final _g_cclosure_marshal_VOID__BOXED =
      _g_cclosure_marshal_VOID__BOXEDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__BOXEDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__BOXEDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__BOXEDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__BOXEDv');
  late final _g_cclosure_marshal_VOID__BOXEDv =
      _g_cclosure_marshal_VOID__BOXEDvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__POINTER');
  late final _g_cclosure_marshal_VOID__POINTER =
      _g_cclosure_marshal_VOID__POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__POINTERvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__POINTERv');
  late final _g_cclosure_marshal_VOID__POINTERv =
      _g_cclosure_marshal_VOID__POINTERvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__OBJECT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__OBJECT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__OBJECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__OBJECT');
  late final _g_cclosure_marshal_VOID__OBJECT =
      _g_cclosure_marshal_VOID__OBJECTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__OBJECTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__OBJECTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__OBJECTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__OBJECTv');
  late final _g_cclosure_marshal_VOID__OBJECTv =
      _g_cclosure_marshal_VOID__OBJECTvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__VARIANT(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__VARIANT(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__VARIANTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__VARIANT');
  late final _g_cclosure_marshal_VOID__VARIANT =
      _g_cclosure_marshal_VOID__VARIANTPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__VARIANTv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__VARIANTv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__VARIANTvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__VARIANTv');
  late final _g_cclosure_marshal_VOID__VARIANTv =
      _g_cclosure_marshal_VOID__VARIANTvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_VOID__UINT_POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_VOID__UINT_POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_VOID__UINT_POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_VOID__UINT_POINTER');
  late final _g_cclosure_marshal_VOID__UINT_POINTER =
      _g_cclosure_marshal_VOID__UINT_POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_VOID__UINT_POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_VOID__UINT_POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_VOID__UINT_POINTERvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_VOID__UINT_POINTERv');
  late final _g_cclosure_marshal_VOID__UINT_POINTERv =
      _g_cclosure_marshal_VOID__UINT_POINTERvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_BOOLEAN__FLAGS(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_BOOLEAN__FLAGS(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__FLAGSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_BOOLEAN__FLAGS');
  late final _g_cclosure_marshal_BOOLEAN__FLAGS =
      _g_cclosure_marshal_BOOLEAN__FLAGSPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_BOOLEAN__FLAGSv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_BOOLEAN__FLAGSv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__FLAGSvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_BOOLEAN__FLAGSv');
  late final _g_cclosure_marshal_BOOLEAN__FLAGSv =
      _g_cclosure_marshal_BOOLEAN__FLAGSvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_STRING__OBJECT_POINTER(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_STRING__OBJECT_POINTER(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_STRING__OBJECT_POINTERPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_STRING__OBJECT_POINTER');
  late final _g_cclosure_marshal_STRING__OBJECT_POINTER =
      _g_cclosure_marshal_STRING__OBJECT_POINTERPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_STRING__OBJECT_POINTERv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_STRING__OBJECT_POINTERv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_STRING__OBJECT_POINTERvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GClosure>,
                  ffi.Pointer<GValue>,
                  ffi.Pointer,
                  ffi.Pointer<__va_list_tag>,
                  ffi.Pointer,
                  ffi.Int,
                  ffi.Pointer<GType>)>>(
      'g_cclosure_marshal_STRING__OBJECT_POINTERv');
  late final _g_cclosure_marshal_STRING__OBJECT_POINTERv =
      _g_cclosure_marshal_STRING__OBJECT_POINTERvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    int n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data,
  ) {
    return _g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
      closure,
      return_value,
      n_param_values,
      param_values,
      invocation_hint,
      marshal_data,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              guint,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer)>>('g_cclosure_marshal_BOOLEAN__BOXED_BOXED');
  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXED =
      _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDPtr.asFunction<
          void Function(ffi.Pointer<GClosure>, ffi.Pointer<GValue>, int,
              ffi.Pointer<GValue>, ffi.Pointer, ffi.Pointer)>();

  void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
      closure,
      return_value,
      instance,
      args,
      marshal_data,
      n_params,
      param_types,
    );
  }

  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              ffi.Int,
              ffi.Pointer<GType>)>>('g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv');
  late final _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv =
      _g_cclosure_marshal_BOOLEAN__BOXED_BOXEDvPtr.asFunction<
          void Function(
              ffi.Pointer<GClosure>,
              ffi.Pointer<GValue>,
              ffi.Pointer,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer,
              int,
              ffi.Pointer<GType>)>();

  int g_signal_newv(
    ffi.Pointer<ffi.Char> signal_name,
    int itype,
    int signal_flags,
    ffi.Pointer<GClosure> class_closure,
    GSignalAccumulator accumulator,
    ffi.Pointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
    ffi.Pointer<GType> param_types,
  ) {
    return _g_signal_newv(
      signal_name,
      itype,
      signal_flags,
      class_closure,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
      param_types,
    );
  }

  late final _g_signal_newvPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              GSignalAccumulator,
              ffi.Pointer,
              GSignalCMarshaller,
              GType,
              guint,
              ffi.Pointer<GType>)>>('g_signal_newv');
  late final _g_signal_newv = _g_signal_newvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<GClosure>,
          GSignalAccumulator,
          ffi.Pointer,
          GSignalCMarshaller,
          int,
          int,
          ffi.Pointer<GType>)>();

  int g_signal_new_valist(
    ffi.Pointer<ffi.Char> signal_name,
    int itype,
    int signal_flags,
    ffi.Pointer<GClosure> class_closure,
    GSignalAccumulator accumulator,
    ffi.Pointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _g_signal_new_valist(
      signal_name,
      itype,
      signal_flags,
      class_closure,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
      args,
    );
  }

  late final _g_signal_new_valistPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              GSignalAccumulator,
              ffi.Pointer,
              GSignalCMarshaller,
              GType,
              guint,
              ffi.Pointer<__va_list_tag>)>>('g_signal_new_valist');
  late final _g_signal_new_valist = _g_signal_new_valistPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<GClosure>,
          GSignalAccumulator,
          ffi.Pointer,
          GSignalCMarshaller,
          int,
          int,
          ffi.Pointer<__va_list_tag>)>();

  int g_signal_new(
    ffi.Pointer<ffi.Char> signal_name,
    int itype,
    int signal_flags,
    int class_offset,
    GSignalAccumulator accumulator,
    ffi.Pointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
  ) {
    return _g_signal_new(
      signal_name,
      itype,
      signal_flags,
      class_offset,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
    );
  }

  late final _g_signal_newPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32,
              guint,
              GSignalAccumulator,
              ffi.Pointer,
              GSignalCMarshaller,
              GType,
              guint)>>('g_signal_new');
  late final _g_signal_new = _g_signal_newPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, GSignalAccumulator,
          ffi.Pointer, GSignalCMarshaller, int, int)>();

  int g_signal_new_class_handler(
    ffi.Pointer<ffi.Char> signal_name,
    int itype,
    int signal_flags,
    GCallback class_handler,
    GSignalAccumulator accumulator,
    ffi.Pointer accu_data,
    GSignalCMarshaller c_marshaller,
    int return_type,
    int n_params,
  ) {
    return _g_signal_new_class_handler(
      signal_name,
      itype,
      signal_flags,
      class_handler,
      accumulator,
      accu_data,
      c_marshaller,
      return_type,
      n_params,
    );
  }

  late final _g_signal_new_class_handlerPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32,
              GCallback,
              GSignalAccumulator,
              ffi.Pointer,
              GSignalCMarshaller,
              GType,
              guint)>>('g_signal_new_class_handler');
  late final _g_signal_new_class_handler =
      _g_signal_new_class_handlerPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, int, int, GCallback,
              GSignalAccumulator, ffi.Pointer, GSignalCMarshaller, int, int)>();

  void g_signal_set_va_marshaller(
    int signal_id,
    int instance_type,
    GSignalCVaMarshaller va_marshaller,
  ) {
    return _g_signal_set_va_marshaller(
      signal_id,
      instance_type,
      va_marshaller,
    );
  }

  late final _g_signal_set_va_marshallerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(guint, GType,
              GSignalCVaMarshaller)>>('g_signal_set_va_marshaller');
  late final _g_signal_set_va_marshaller = _g_signal_set_va_marshallerPtr
      .asFunction<void Function(int, int, GSignalCVaMarshaller)>();

  void g_signal_emitv(
    ffi.Pointer<GValue> instance_and_params,
    int signal_id,
    int detail,
    ffi.Pointer<GValue> return_value,
  ) {
    return _g_signal_emitv(
      instance_and_params,
      signal_id,
      detail,
      return_value,
    );
  }

  late final _g_signal_emitvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, guint, GQuark,
              ffi.Pointer<GValue>)>>('g_signal_emitv');
  late final _g_signal_emitv = _g_signal_emitvPtr.asFunction<
      void Function(ffi.Pointer<GValue>, int, int, ffi.Pointer<GValue>)>();

  void g_signal_emit_valist(
    ffi.Pointer instance,
    int signal_id,
    int detail,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_signal_emit_valist(
      instance,
      signal_id,
      detail,
      var_args,
    );
  }

  late final _g_signal_emit_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer, guint, GQuark,
              ffi.Pointer<__va_list_tag>)>>('g_signal_emit_valist');
  late final _g_signal_emit_valist = _g_signal_emit_valistPtr.asFunction<
      void Function(ffi.Pointer, int, int, ffi.Pointer<__va_list_tag>)>();

  void g_signal_emit(
    ffi.Pointer instance,
    int signal_id,
    int detail,
  ) {
    return _g_signal_emit(
      instance,
      signal_id,
      detail,
    );
  }

  late final _g_signal_emitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer, guint, GQuark)>>(
      'g_signal_emit');
  late final _g_signal_emit =
      _g_signal_emitPtr.asFunction<void Function(ffi.Pointer, int, int)>();

  void g_signal_emit_by_name(
    ffi.Pointer instance,
    ffi.Pointer<ffi.Char> detailed_signal,
  ) {
    return _g_signal_emit_by_name(
      instance,
      detailed_signal,
    );
  }

  late final _g_signal_emit_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer, ffi.Pointer<ffi.Char>)>>('g_signal_emit_by_name');
  late final _g_signal_emit_by_name = _g_signal_emit_by_namePtr
      .asFunction<void Function(ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  int g_signal_lookup(
    ffi.Pointer<ffi.Char> name,
    int itype,
  ) {
    return _g_signal_lookup(
      name,
      itype,
    );
  }

  late final _g_signal_lookupPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<ffi.Char>, GType)>>(
          'g_signal_lookup');
  late final _g_signal_lookup = _g_signal_lookupPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> g_signal_name(
    int signal_id,
  ) {
    return _g_signal_name(
      signal_id,
    );
  }

  late final _g_signal_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(guint)>>(
          'g_signal_name');
  late final _g_signal_name =
      _g_signal_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void g_signal_query(
    int signal_id,
    ffi.Pointer<GSignalQuery> query,
  ) {
    return _g_signal_query(
      signal_id,
      query,
    );
  }

  late final _g_signal_queryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(guint, ffi.Pointer<GSignalQuery>)>>(
      'g_signal_query');
  late final _g_signal_query = _g_signal_queryPtr
      .asFunction<void Function(int, ffi.Pointer<GSignalQuery>)>();

  ffi.Pointer<guint> g_signal_list_ids(
    int itype,
    ffi.Pointer<guint> n_ids,
  ) {
    return _g_signal_list_ids(
      itype,
      n_ids,
    );
  }

  late final _g_signal_list_idsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint> Function(
              GType, ffi.Pointer<guint>)>>('g_signal_list_ids');
  late final _g_signal_list_ids = _g_signal_list_idsPtr
      .asFunction<ffi.Pointer<guint> Function(int, ffi.Pointer<guint>)>();

  int g_signal_is_valid_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_signal_is_valid_name(
      name,
    );
  }

  late final _g_signal_is_valid_namePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'g_signal_is_valid_name');
  late final _g_signal_is_valid_name = _g_signal_is_valid_namePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int g_signal_parse_name(
    ffi.Pointer<ffi.Char> detailed_signal,
    int itype,
    ffi.Pointer<guint> signal_id_p,
    ffi.Pointer<GQuark> detail_p,
    int force_detail_quark,
  ) {
    return _g_signal_parse_name(
      detailed_signal,
      itype,
      signal_id_p,
      detail_p,
      force_detail_quark,
    );
  }

  late final _g_signal_parse_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>, GType, ffi.Pointer<guint>,
              ffi.Pointer<GQuark>, gboolean)>>('g_signal_parse_name');
  late final _g_signal_parse_name = _g_signal_parse_namePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<guint>,
          ffi.Pointer<GQuark>, int)>();

  ffi.Pointer<GSignalInvocationHint> g_signal_get_invocation_hint(
    ffi.Pointer instance,
  ) {
    return _g_signal_get_invocation_hint(
      instance,
    );
  }

  late final _g_signal_get_invocation_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSignalInvocationHint> Function(
              ffi.Pointer)>>('g_signal_get_invocation_hint');
  late final _g_signal_get_invocation_hint = _g_signal_get_invocation_hintPtr
      .asFunction<ffi.Pointer<GSignalInvocationHint> Function(ffi.Pointer)>();

  void g_signal_stop_emission(
    ffi.Pointer instance,
    int signal_id,
    int detail,
  ) {
    return _g_signal_stop_emission(
      instance,
      signal_id,
      detail,
    );
  }

  late final _g_signal_stop_emissionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer, guint, GQuark)>>(
      'g_signal_stop_emission');
  late final _g_signal_stop_emission = _g_signal_stop_emissionPtr
      .asFunction<void Function(ffi.Pointer, int, int)>();

  void g_signal_stop_emission_by_name(
    ffi.Pointer instance,
    ffi.Pointer<ffi.Char> detailed_signal,
  ) {
    return _g_signal_stop_emission_by_name(
      instance,
      detailed_signal,
    );
  }

  late final _g_signal_stop_emission_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer,
              ffi.Pointer<ffi.Char>)>>('g_signal_stop_emission_by_name');
  late final _g_signal_stop_emission_by_name =
      _g_signal_stop_emission_by_namePtr
          .asFunction<void Function(ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  int g_signal_add_emission_hook(
    int signal_id,
    int detail,
    GSignalEmissionHook hook_func,
    ffi.Pointer hook_data,
    GDestroyNotify data_destroy,
  ) {
    return _g_signal_add_emission_hook(
      signal_id,
      detail,
      hook_func,
      hook_data,
      data_destroy,
    );
  }

  late final _g_signal_add_emission_hookPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(guint, GQuark, GSignalEmissionHook, ffi.Pointer,
              GDestroyNotify)>>('g_signal_add_emission_hook');
  late final _g_signal_add_emission_hook =
      _g_signal_add_emission_hookPtr.asFunction<
          int Function(
              int, int, GSignalEmissionHook, ffi.Pointer, GDestroyNotify)>();

  void g_signal_remove_emission_hook(
    int signal_id,
    int hook_id,
  ) {
    return _g_signal_remove_emission_hook(
      signal_id,
      hook_id,
    );
  }

  late final _g_signal_remove_emission_hookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint, gulong)>>(
          'g_signal_remove_emission_hook');
  late final _g_signal_remove_emission_hook =
      _g_signal_remove_emission_hookPtr.asFunction<void Function(int, int)>();

  int g_signal_has_handler_pending(
    ffi.Pointer instance,
    int signal_id,
    int detail,
    int may_be_blocked,
  ) {
    return _g_signal_has_handler_pending(
      instance,
      signal_id,
      detail,
      may_be_blocked,
    );
  }

  late final _g_signal_has_handler_pendingPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer, guint, GQuark,
              gboolean)>>('g_signal_has_handler_pending');
  late final _g_signal_has_handler_pending = _g_signal_has_handler_pendingPtr
      .asFunction<int Function(ffi.Pointer, int, int, int)>();

  int g_signal_connect_closure_by_id(
    ffi.Pointer instance,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_connect_closure_by_id(
      instance,
      signal_id,
      detail,
      closure,
      after,
    );
  }

  late final _g_signal_connect_closure_by_idPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer, guint, GQuark, ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_connect_closure_by_id');
  late final _g_signal_connect_closure_by_id =
      _g_signal_connect_closure_by_idPtr.asFunction<
          int Function(ffi.Pointer, int, int, ffi.Pointer<GClosure>, int)>();

  int g_signal_connect_closure(
    ffi.Pointer instance,
    ffi.Pointer<ffi.Char> detailed_signal,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_connect_closure(
      instance,
      detailed_signal,
      closure,
      after,
    );
  }

  late final _g_signal_connect_closurePtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GClosure>, gboolean)>>('g_signal_connect_closure');
  late final _g_signal_connect_closure =
      _g_signal_connect_closurePtr.asFunction<
          int Function(ffi.Pointer, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GClosure>, int)>();

  int g_signal_connect_data(
    ffi.Pointer instance,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer data,
    GClosureNotify destroy_data,
    int connect_flags,
  ) {
    return _g_signal_connect_data(
      instance,
      detailed_signal,
      c_handler,
      data,
      destroy_data,
      connect_flags,
    );
  }

  late final _g_signal_connect_dataPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              GCallback,
              ffi.Pointer,
              GClosureNotify,
              ffi.Int32)>>('g_signal_connect_data');
  late final _g_signal_connect_data = _g_signal_connect_dataPtr.asFunction<
      int Function(ffi.Pointer, ffi.Pointer<ffi.Char>, GCallback, ffi.Pointer,
          GClosureNotify, int)>();

  void g_signal_handler_block(
    ffi.Pointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_block(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer, gulong)>>(
          'g_signal_handler_block');
  late final _g_signal_handler_block =
      _g_signal_handler_blockPtr.asFunction<void Function(ffi.Pointer, int)>();

  void g_signal_handler_unblock(
    ffi.Pointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_unblock(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_unblockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer, gulong)>>(
          'g_signal_handler_unblock');
  late final _g_signal_handler_unblock = _g_signal_handler_unblockPtr
      .asFunction<void Function(ffi.Pointer, int)>();

  void g_signal_handler_disconnect(
    ffi.Pointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_disconnect(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer, gulong)>>(
          'g_signal_handler_disconnect');
  late final _g_signal_handler_disconnect = _g_signal_handler_disconnectPtr
      .asFunction<void Function(ffi.Pointer, int)>();

  int g_signal_handler_is_connected(
    ffi.Pointer instance,
    int handler_id,
  ) {
    return _g_signal_handler_is_connected(
      instance,
      handler_id,
    );
  }

  late final _g_signal_handler_is_connectedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer, gulong)>>(
          'g_signal_handler_is_connected');
  late final _g_signal_handler_is_connected = _g_signal_handler_is_connectedPtr
      .asFunction<int Function(ffi.Pointer, int)>();

  int g_signal_handler_find(
    ffi.Pointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    ffi.Pointer func,
    ffi.Pointer data,
  ) {
    return _g_signal_handler_find(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handler_findPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(
              ffi.Pointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              ffi.Pointer,
              ffi.Pointer)>>('g_signal_handler_find');
  late final _g_signal_handler_find = _g_signal_handler_findPtr.asFunction<
      int Function(ffi.Pointer, int, int, int, ffi.Pointer<GClosure>,
          ffi.Pointer, ffi.Pointer)>();

  int g_signal_handlers_block_matched(
    ffi.Pointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    ffi.Pointer func,
    ffi.Pointer data,
  ) {
    return _g_signal_handlers_block_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_block_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              ffi.Pointer,
              ffi.Pointer)>>('g_signal_handlers_block_matched');
  late final _g_signal_handlers_block_matched =
      _g_signal_handlers_block_matchedPtr.asFunction<
          int Function(ffi.Pointer, int, int, int, ffi.Pointer<GClosure>,
              ffi.Pointer, ffi.Pointer)>();

  int g_signal_handlers_unblock_matched(
    ffi.Pointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    ffi.Pointer func,
    ffi.Pointer data,
  ) {
    return _g_signal_handlers_unblock_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_unblock_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              ffi.Pointer,
              ffi.Pointer)>>('g_signal_handlers_unblock_matched');
  late final _g_signal_handlers_unblock_matched =
      _g_signal_handlers_unblock_matchedPtr.asFunction<
          int Function(ffi.Pointer, int, int, int, ffi.Pointer<GClosure>,
              ffi.Pointer, ffi.Pointer)>();

  int g_signal_handlers_disconnect_matched(
    ffi.Pointer instance,
    int mask,
    int signal_id,
    int detail,
    ffi.Pointer<GClosure> closure,
    ffi.Pointer func,
    ffi.Pointer data,
  ) {
    return _g_signal_handlers_disconnect_matched(
      instance,
      mask,
      signal_id,
      detail,
      closure,
      func,
      data,
    );
  }

  late final _g_signal_handlers_disconnect_matchedPtr = _lookup<
      ffi.NativeFunction<
          guint Function(
              ffi.Pointer,
              ffi.Int32,
              guint,
              GQuark,
              ffi.Pointer<GClosure>,
              ffi.Pointer,
              ffi.Pointer)>>('g_signal_handlers_disconnect_matched');
  late final _g_signal_handlers_disconnect_matched =
      _g_signal_handlers_disconnect_matchedPtr.asFunction<
          int Function(ffi.Pointer, int, int, int, ffi.Pointer<GClosure>,
              ffi.Pointer, ffi.Pointer)>();

  void g_clear_signal_handler(
    ffi.Pointer<gulong> handler_id_ptr,
    ffi.Pointer instance,
  ) {
    return _g_clear_signal_handler(
      handler_id_ptr,
      instance,
    );
  }

  late final _g_clear_signal_handlerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<gulong>, ffi.Pointer)>>(
      'g_clear_signal_handler');
  late final _g_clear_signal_handler = _g_clear_signal_handlerPtr
      .asFunction<void Function(ffi.Pointer<gulong>, ffi.Pointer)>();

  void g_signal_override_class_closure(
    int signal_id,
    int instance_type,
    ffi.Pointer<GClosure> class_closure,
  ) {
    return _g_signal_override_class_closure(
      signal_id,
      instance_type,
      class_closure,
    );
  }

  late final _g_signal_override_class_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(guint, GType,
              ffi.Pointer<GClosure>)>>('g_signal_override_class_closure');
  late final _g_signal_override_class_closure =
      _g_signal_override_class_closurePtr
          .asFunction<void Function(int, int, ffi.Pointer<GClosure>)>();

  void g_signal_override_class_handler(
    ffi.Pointer<ffi.Char> signal_name,
    int instance_type,
    GCallback class_handler,
  ) {
    return _g_signal_override_class_handler(
      signal_name,
      instance_type,
      class_handler,
    );
  }

  late final _g_signal_override_class_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, GType,
              GCallback)>>('g_signal_override_class_handler');
  late final _g_signal_override_class_handler =
      _g_signal_override_class_handlerPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>, int, GCallback)>();

  void g_signal_chain_from_overridden(
    ffi.Pointer<GValue> instance_and_params,
    ffi.Pointer<GValue> return_value,
  ) {
    return _g_signal_chain_from_overridden(
      instance_and_params,
      return_value,
    );
  }

  late final _g_signal_chain_from_overriddenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('g_signal_chain_from_overridden');
  late final _g_signal_chain_from_overridden =
      _g_signal_chain_from_overriddenPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void g_signal_chain_from_overridden_handler(
    ffi.Pointer instance,
  ) {
    return _g_signal_chain_from_overridden_handler(
      instance,
    );
  }

  late final _g_signal_chain_from_overridden_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_signal_chain_from_overridden_handler');
  late final _g_signal_chain_from_overridden_handler =
      _g_signal_chain_from_overridden_handlerPtr
          .asFunction<void Function(ffi.Pointer)>();

  int g_signal_accumulator_true_handled(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    ffi.Pointer dummy,
  ) {
    return _g_signal_accumulator_true_handled(
      ihint,
      return_accu,
      handler_return,
      dummy,
    );
  }

  late final _g_signal_accumulator_true_handledPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSignalInvocationHint>,
              ffi.Pointer<GValue>,
              ffi.Pointer<GValue>,
              ffi.Pointer)>>('g_signal_accumulator_true_handled');
  late final _g_signal_accumulator_true_handled =
      _g_signal_accumulator_true_handledPtr.asFunction<
          int Function(ffi.Pointer<GSignalInvocationHint>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, ffi.Pointer)>();

  int g_signal_accumulator_first_wins(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    ffi.Pointer dummy,
  ) {
    return _g_signal_accumulator_first_wins(
      ihint,
      return_accu,
      handler_return,
      dummy,
    );
  }

  late final _g_signal_accumulator_first_winsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GSignalInvocationHint>,
              ffi.Pointer<GValue>,
              ffi.Pointer<GValue>,
              ffi.Pointer)>>('g_signal_accumulator_first_wins');
  late final _g_signal_accumulator_first_wins =
      _g_signal_accumulator_first_winsPtr.asFunction<
          int Function(ffi.Pointer<GSignalInvocationHint>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>, ffi.Pointer)>();

  void g_signal_handlers_destroy(
    ffi.Pointer instance,
  ) {
    return _g_signal_handlers_destroy(
      instance,
    );
  }

  late final _g_signal_handlers_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_signal_handlers_destroy');
  late final _g_signal_handlers_destroy =
      _g_signal_handlers_destroyPtr.asFunction<void Function(ffi.Pointer)>();

  void _g_signals_destroy(
    int itype,
  ) {
    return __g_signals_destroy(
      itype,
    );
  }

  late final __g_signals_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType)>>(
          '_g_signals_destroy');
  late final __g_signals_destroy =
      __g_signals_destroyPtr.asFunction<void Function(int)>();

  int g_date_get_type() {
    return _g_date_get_type();
  }

  late final _g_date_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_date_get_type');
  late final _g_date_get_type =
      _g_date_get_typePtr.asFunction<int Function()>();

  int g_strv_get_type() {
    return _g_strv_get_type();
  }

  late final _g_strv_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_strv_get_type');
  late final _g_strv_get_type =
      _g_strv_get_typePtr.asFunction<int Function()>();

  int g_gstring_get_type() {
    return _g_gstring_get_type();
  }

  late final _g_gstring_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_gstring_get_type');
  late final _g_gstring_get_type =
      _g_gstring_get_typePtr.asFunction<int Function()>();

  int g_hash_table_get_type() {
    return _g_hash_table_get_type();
  }

  late final _g_hash_table_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_hash_table_get_type');
  late final _g_hash_table_get_type =
      _g_hash_table_get_typePtr.asFunction<int Function()>();

  int g_array_get_type() {
    return _g_array_get_type();
  }

  late final _g_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_array_get_type');
  late final _g_array_get_type =
      _g_array_get_typePtr.asFunction<int Function()>();

  int g_byte_array_get_type() {
    return _g_byte_array_get_type();
  }

  late final _g_byte_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_byte_array_get_type');
  late final _g_byte_array_get_type =
      _g_byte_array_get_typePtr.asFunction<int Function()>();

  int g_ptr_array_get_type() {
    return _g_ptr_array_get_type();
  }

  late final _g_ptr_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_ptr_array_get_type');
  late final _g_ptr_array_get_type =
      _g_ptr_array_get_typePtr.asFunction<int Function()>();

  int g_bytes_get_type() {
    return _g_bytes_get_type();
  }

  late final _g_bytes_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_bytes_get_type');
  late final _g_bytes_get_type =
      _g_bytes_get_typePtr.asFunction<int Function()>();

  int g_variant_type_get_gtype() {
    return _g_variant_type_get_gtype();
  }

  late final _g_variant_type_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_type_get_gtype');
  late final _g_variant_type_get_gtype =
      _g_variant_type_get_gtypePtr.asFunction<int Function()>();

  int g_regex_get_type() {
    return _g_regex_get_type();
  }

  late final _g_regex_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_regex_get_type');
  late final _g_regex_get_type =
      _g_regex_get_typePtr.asFunction<int Function()>();

  int g_match_info_get_type() {
    return _g_match_info_get_type();
  }

  late final _g_match_info_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_match_info_get_type');
  late final _g_match_info_get_type =
      _g_match_info_get_typePtr.asFunction<int Function()>();

  int g_error_get_type() {
    return _g_error_get_type();
  }

  late final _g_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_error_get_type');
  late final _g_error_get_type =
      _g_error_get_typePtr.asFunction<int Function()>();

  int g_date_time_get_type() {
    return _g_date_time_get_type();
  }

  late final _g_date_time_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_date_time_get_type');
  late final _g_date_time_get_type =
      _g_date_time_get_typePtr.asFunction<int Function()>();

  int g_time_zone_get_type() {
    return _g_time_zone_get_type();
  }

  late final _g_time_zone_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_time_zone_get_type');
  late final _g_time_zone_get_type =
      _g_time_zone_get_typePtr.asFunction<int Function()>();

  int g_io_channel_get_type() {
    return _g_io_channel_get_type();
  }

  late final _g_io_channel_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_channel_get_type');
  late final _g_io_channel_get_type =
      _g_io_channel_get_typePtr.asFunction<int Function()>();

  int g_io_condition_get_type() {
    return _g_io_condition_get_type();
  }

  late final _g_io_condition_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_io_condition_get_type');
  late final _g_io_condition_get_type =
      _g_io_condition_get_typePtr.asFunction<int Function()>();

  int g_variant_builder_get_type() {
    return _g_variant_builder_get_type();
  }

  late final _g_variant_builder_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_variant_builder_get_type');
  late final _g_variant_builder_get_type =
      _g_variant_builder_get_typePtr.asFunction<int Function()>();

  int g_variant_dict_get_type() {
    return _g_variant_dict_get_type();
  }

  late final _g_variant_dict_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_dict_get_type');
  late final _g_variant_dict_get_type =
      _g_variant_dict_get_typePtr.asFunction<int Function()>();

  int g_key_file_get_type() {
    return _g_key_file_get_type();
  }

  late final _g_key_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_key_file_get_type');
  late final _g_key_file_get_type =
      _g_key_file_get_typePtr.asFunction<int Function()>();

  int g_main_loop_get_type() {
    return _g_main_loop_get_type();
  }

  late final _g_main_loop_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_main_loop_get_type');
  late final _g_main_loop_get_type =
      _g_main_loop_get_typePtr.asFunction<int Function()>();

  int g_main_context_get_type() {
    return _g_main_context_get_type();
  }

  late final _g_main_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_main_context_get_type');
  late final _g_main_context_get_type =
      _g_main_context_get_typePtr.asFunction<int Function()>();

  int g_source_get_type() {
    return _g_source_get_type();
  }

  late final _g_source_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_source_get_type');
  late final _g_source_get_type =
      _g_source_get_typePtr.asFunction<int Function()>();

  int g_pollfd_get_type() {
    return _g_pollfd_get_type();
  }

  late final _g_pollfd_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_pollfd_get_type');
  late final _g_pollfd_get_type =
      _g_pollfd_get_typePtr.asFunction<int Function()>();

  int g_thread_get_type() {
    return _g_thread_get_type();
  }

  late final _g_thread_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_thread_get_type');
  late final _g_thread_get_type =
      _g_thread_get_typePtr.asFunction<int Function()>();

  int g_checksum_get_type() {
    return _g_checksum_get_type();
  }

  late final _g_checksum_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_checksum_get_type');
  late final _g_checksum_get_type =
      _g_checksum_get_typePtr.asFunction<int Function()>();

  int g_markup_parse_context_get_type() {
    return _g_markup_parse_context_get_type();
  }

  late final _g_markup_parse_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_markup_parse_context_get_type');
  late final _g_markup_parse_context_get_type =
      _g_markup_parse_context_get_typePtr.asFunction<int Function()>();

  int g_mapped_file_get_type() {
    return _g_mapped_file_get_type();
  }

  late final _g_mapped_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_mapped_file_get_type');
  late final _g_mapped_file_get_type =
      _g_mapped_file_get_typePtr.asFunction<int Function()>();

  int g_option_group_get_type() {
    return _g_option_group_get_type();
  }

  late final _g_option_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_option_group_get_type');
  late final _g_option_group_get_type =
      _g_option_group_get_typePtr.asFunction<int Function()>();

  int g_uri_get_type() {
    return _g_uri_get_type();
  }

  late final _g_uri_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_uri_get_type');
  late final _g_uri_get_type = _g_uri_get_typePtr.asFunction<int Function()>();

  int g_tree_get_type() {
    return _g_tree_get_type();
  }

  late final _g_tree_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_tree_get_type');
  late final _g_tree_get_type =
      _g_tree_get_typePtr.asFunction<int Function()>();

  int g_pattern_spec_get_type() {
    return _g_pattern_spec_get_type();
  }

  late final _g_pattern_spec_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_pattern_spec_get_type');
  late final _g_pattern_spec_get_type =
      _g_pattern_spec_get_typePtr.asFunction<int Function()>();

  int g_bookmark_file_get_type() {
    return _g_bookmark_file_get_type();
  }

  late final _g_bookmark_file_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_bookmark_file_get_type');
  late final _g_bookmark_file_get_type =
      _g_bookmark_file_get_typePtr.asFunction<int Function()>();

  int g_hmac_get_type() {
    return _g_hmac_get_type();
  }

  late final _g_hmac_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_hmac_get_type');
  late final _g_hmac_get_type =
      _g_hmac_get_typePtr.asFunction<int Function()>();

  int g_dir_get_type() {
    return _g_dir_get_type();
  }

  late final _g_dir_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_dir_get_type');
  late final _g_dir_get_type = _g_dir_get_typePtr.asFunction<int Function()>();

  int g_rand_get_type() {
    return _g_rand_get_type();
  }

  late final _g_rand_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_rand_get_type');
  late final _g_rand_get_type =
      _g_rand_get_typePtr.asFunction<int Function()>();

  int g_strv_builder_get_type() {
    return _g_strv_builder_get_type();
  }

  late final _g_strv_builder_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_strv_builder_get_type');
  late final _g_strv_builder_get_type =
      _g_strv_builder_get_typePtr.asFunction<int Function()>();

  int g_variant_get_gtype() {
    return _g_variant_get_gtype();
  }

  late final _g_variant_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_variant_get_gtype');
  late final _g_variant_get_gtype =
      _g_variant_get_gtypePtr.asFunction<int Function()>();

  ffi.Pointer g_boxed_copy(
    int boxed_type,
    gconstpointer src_boxed,
  ) {
    return _g_boxed_copy(
      boxed_type,
      src_boxed,
    );
  }

  late final _g_boxed_copyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(GType, gconstpointer)>>(
          'g_boxed_copy');
  late final _g_boxed_copy =
      _g_boxed_copyPtr.asFunction<ffi.Pointer Function(int, gconstpointer)>();

  void g_boxed_free(
    int boxed_type,
    ffi.Pointer boxed,
  ) {
    return _g_boxed_free(
      boxed_type,
      boxed,
    );
  }

  late final _g_boxed_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, ffi.Pointer)>>(
          'g_boxed_free');
  late final _g_boxed_free =
      _g_boxed_freePtr.asFunction<void Function(int, ffi.Pointer)>();

  void g_value_set_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_set_boxed');
  late final _g_value_set_boxed = _g_value_set_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_set_static_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_static_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_static_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_set_static_boxed');
  late final _g_value_set_static_boxed = _g_value_set_static_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_take_boxed(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_take_boxed(
      value,
      v_boxed,
    );
  }

  late final _g_value_take_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, gconstpointer)>>('g_value_take_boxed');
  late final _g_value_take_boxed = _g_value_take_boxedPtr
      .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  void g_value_set_boxed_take_ownership(
    ffi.Pointer<GValue> value,
    gconstpointer v_boxed,
  ) {
    return _g_value_set_boxed_take_ownership(
      value,
      v_boxed,
    );
  }

  late final _g_value_set_boxed_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              gconstpointer)>>('g_value_set_boxed_take_ownership');
  late final _g_value_set_boxed_take_ownership =
      _g_value_set_boxed_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, gconstpointer)>();

  ffi.Pointer g_value_get_boxed(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_boxed(
      value,
    );
  }

  late final _g_value_get_boxedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_boxed');
  late final _g_value_get_boxed = _g_value_get_boxedPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>();

  ffi.Pointer g_value_dup_boxed(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_boxed(
      value,
    );
  }

  late final _g_value_dup_boxedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>>(
          'g_value_dup_boxed');
  late final _g_value_dup_boxed = _g_value_dup_boxedPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>();

  int g_boxed_type_register_static(
    ffi.Pointer<ffi.Char> name,
    GBoxedCopyFunc boxed_copy,
    GBoxedFreeFunc boxed_free,
  ) {
    return _g_boxed_type_register_static(
      name,
      boxed_copy,
      boxed_free,
    );
  }

  late final _g_boxed_type_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<ffi.Char>, GBoxedCopyFunc,
              GBoxedFreeFunc)>>('g_boxed_type_register_static');
  late final _g_boxed_type_register_static =
      _g_boxed_type_register_staticPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, GBoxedCopyFunc, GBoxedFreeFunc)>();

  int g_closure_get_type() {
    return _g_closure_get_type();
  }

  late final _g_closure_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_closure_get_type');
  late final _g_closure_get_type =
      _g_closure_get_typePtr.asFunction<int Function()>();

  int g_value_get_type() {
    return _g_value_get_type();
  }

  late final _g_value_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_value_get_type');
  late final _g_value_get_type =
      _g_value_get_typePtr.asFunction<int Function()>();

  /// GInitiallyUnowned:
  ///
  /// A type for objects that have an initially floating reference.
  ///
  /// All the fields in the `GInitiallyUnowned` structure are private to the
  /// implementation and should never be accessed directly.
  /// /
  /// /**
  /// GInitiallyUnownedClass:
  ///
  /// The class structure for the GInitiallyUnowned type.
  int g_initially_unowned_get_type() {
    return _g_initially_unowned_get_type();
  }

  late final _g_initially_unowned_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_initially_unowned_get_type');
  late final _g_initially_unowned_get_type =
      _g_initially_unowned_get_typePtr.asFunction<int Function()>();

  void g_object_class_install_property(
    ffi.Pointer<GObjectClass> oclass,
    int property_id,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_class_install_property(
      oclass,
      property_id,
      pspec,
    );
  }

  late final _g_object_class_install_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
              ffi.Pointer<GParamSpec>)>>('g_object_class_install_property');
  late final _g_object_class_install_property =
      _g_object_class_install_propertyPtr.asFunction<
          void Function(
              ffi.Pointer<GObjectClass>, int, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_object_class_find_property(
    ffi.Pointer<GObjectClass> oclass,
    ffi.Pointer<ffi.Char> property_name,
  ) {
    return _g_object_class_find_property(
      oclass,
      property_name,
    );
  }

  late final _g_object_class_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<GObjectClass>,
              ffi.Pointer<ffi.Char>)>>('g_object_class_find_property');
  late final _g_object_class_find_property =
      _g_object_class_find_propertyPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<GObjectClass>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_object_class_list_properties(
    ffi.Pointer<GObjectClass> oclass,
    ffi.Pointer<guint> n_properties,
  ) {
    return _g_object_class_list_properties(
      oclass,
      n_properties,
    );
  }

  late final _g_object_class_list_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GObjectClass>,
              ffi.Pointer<guint>)>>('g_object_class_list_properties');
  late final _g_object_class_list_properties =
      _g_object_class_list_propertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer<GObjectClass>, ffi.Pointer<guint>)>();

  void g_object_class_override_property(
    ffi.Pointer<GObjectClass> oclass,
    int property_id,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_object_class_override_property(
      oclass,
      property_id,
      name,
    );
  }

  late final _g_object_class_override_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
              ffi.Pointer<ffi.Char>)>>('g_object_class_override_property');
  late final _g_object_class_override_property =
      _g_object_class_override_propertyPtr.asFunction<
          void Function(
              ffi.Pointer<GObjectClass>, int, ffi.Pointer<ffi.Char>)>();

  void g_object_class_install_properties(
    ffi.Pointer<GObjectClass> oclass,
    int n_pspecs,
    ffi.Pointer<ffi.Pointer<GParamSpec>> pspecs,
  ) {
    return _g_object_class_install_properties(
      oclass,
      n_pspecs,
      pspecs,
    );
  }

  late final _g_object_class_install_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObjectClass>, guint,
                  ffi.Pointer<ffi.Pointer<GParamSpec>>)>>(
      'g_object_class_install_properties');
  late final _g_object_class_install_properties =
      _g_object_class_install_propertiesPtr.asFunction<
          void Function(ffi.Pointer<GObjectClass>, int,
              ffi.Pointer<ffi.Pointer<GParamSpec>>)>();

  void g_object_interface_install_property(
    ffi.Pointer g_iface,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_interface_install_property(
      g_iface,
      pspec,
    );
  }

  late final _g_object_interface_install_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer,
              ffi.Pointer<GParamSpec>)>>('g_object_interface_install_property');
  late final _g_object_interface_install_property =
      _g_object_interface_install_propertyPtr
          .asFunction<void Function(ffi.Pointer, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_object_interface_find_property(
    ffi.Pointer g_iface,
    ffi.Pointer<ffi.Char> property_name,
  ) {
    return _g_object_interface_find_property(
      g_iface,
      property_name,
    );
  }

  late final _g_object_interface_find_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer,
              ffi.Pointer<ffi.Char>)>>('g_object_interface_find_property');
  late final _g_object_interface_find_property =
      _g_object_interface_find_propertyPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<GParamSpec>> g_object_interface_list_properties(
    ffi.Pointer g_iface,
    ffi.Pointer<guint> n_properties_p,
  ) {
    return _g_object_interface_list_properties(
      g_iface,
      n_properties_p,
    );
  }

  late final _g_object_interface_list_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(ffi.Pointer,
              ffi.Pointer<guint>)>>('g_object_interface_list_properties');
  late final _g_object_interface_list_properties =
      _g_object_interface_list_propertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<GParamSpec>> Function(
              ffi.Pointer, ffi.Pointer<guint>)>();

  int g_object_get_type() {
    return _g_object_get_type();
  }

  late final _g_object_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_object_get_type');
  late final _g_object_get_type =
      _g_object_get_typePtr.asFunction<int Function()>();

  ffi.Pointer g_object_new(
    int object_type,
    ffi.Pointer<ffi.Char> first_property_name,
  ) {
    return _g_object_new(
      object_type,
      first_property_name,
    );
  }

  late final _g_object_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(GType, ffi.Pointer<ffi.Char>)>>('g_object_new');
  late final _g_object_new = _g_object_newPtr
      .asFunction<ffi.Pointer Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GObject> g_object_new_with_properties(
    int object_type,
    int n_properties,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_new_with_properties(
      object_type,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_new_with_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              GType,
              guint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GValue>)>>('g_object_new_with_properties');
  late final _g_object_new_with_properties =
      _g_object_new_with_propertiesPtr.asFunction<
          ffi.Pointer<GObject> Function(int, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  ffi.Pointer g_object_newv(
    int object_type,
    int n_parameters,
    ffi.Pointer<GParameter> parameters,
  ) {
    return _g_object_newv(
      object_type,
      n_parameters,
      parameters,
    );
  }

  late final _g_object_newvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              GType, guint, ffi.Pointer<GParameter>)>>('g_object_newv');
  late final _g_object_newv = _g_object_newvPtr
      .asFunction<ffi.Pointer Function(int, int, ffi.Pointer<GParameter>)>();

  ffi.Pointer<GObject> g_object_new_valist(
    int object_type,
    ffi.Pointer<ffi.Char> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_new_valist(
      object_type,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(GType, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_object_new_valist');
  late final _g_object_new_valist = _g_object_new_valistPtr.asFunction<
      ffi.Pointer<GObject> Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void g_object_set(
    ffi.Pointer object,
    ffi.Pointer<ffi.Char> first_property_name,
  ) {
    return _g_object_set(
      object,
      first_property_name,
    );
  }

  late final _g_object_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer, ffi.Pointer<ffi.Char>)>>('g_object_set');
  late final _g_object_set = _g_object_setPtr
      .asFunction<void Function(ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  void g_object_get(
    ffi.Pointer object,
    ffi.Pointer<ffi.Char> first_property_name,
  ) {
    return _g_object_get(
      object,
      first_property_name,
    );
  }

  late final _g_object_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer, ffi.Pointer<ffi.Char>)>>('g_object_get');
  late final _g_object_get = _g_object_getPtr
      .asFunction<void Function(ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer g_object_connect(
    ffi.Pointer object,
    ffi.Pointer<ffi.Char> signal_spec,
  ) {
    return _g_object_connect(
      object,
      signal_spec,
    );
  }

  late final _g_object_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer, ffi.Pointer<ffi.Char>)>>('g_object_connect');
  late final _g_object_connect = _g_object_connectPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  void g_object_disconnect(
    ffi.Pointer object,
    ffi.Pointer<ffi.Char> signal_spec,
  ) {
    return _g_object_disconnect(
      object,
      signal_spec,
    );
  }

  late final _g_object_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer, ffi.Pointer<ffi.Char>)>>('g_object_disconnect');
  late final _g_object_disconnect = _g_object_disconnectPtr
      .asFunction<void Function(ffi.Pointer, ffi.Pointer<ffi.Char>)>();

  void g_object_setv(
    ffi.Pointer<GObject> object,
    int n_properties,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_setv(
      object,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_setvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              guint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GValue>)>>('g_object_setv');
  late final _g_object_setv = _g_object_setvPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  void g_object_set_valist(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_set_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_set_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_object_set_valist');
  late final _g_object_set_valist = _g_object_set_valistPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void g_object_getv(
    ffi.Pointer<GObject> object,
    int n_properties,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _g_object_getv(
      object,
      n_properties,
      names,
      values,
    );
  }

  late final _g_object_getvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>,
              guint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GValue>)>>('g_object_getv');
  late final _g_object_getv = _g_object_getvPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  void g_object_get_valist(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _g_object_get_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _g_object_get_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('g_object_get_valist');
  late final _g_object_get_valist = _g_object_get_valistPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void g_object_set_property(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> property_name,
    ffi.Pointer<GValue> value,
  ) {
    return _g_object_set_property(
      object,
      property_name,
      value,
    );
  }

  late final _g_object_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('g_object_set_property');
  late final _g_object_set_property = _g_object_set_propertyPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>, ffi.Pointer<GValue>)>();

  void g_object_get_property(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> property_name,
    ffi.Pointer<GValue> value,
  ) {
    return _g_object_get_property(
      object,
      property_name,
      value,
    );
  }

  late final _g_object_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('g_object_get_property');
  late final _g_object_get_property = _g_object_get_propertyPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>, ffi.Pointer<GValue>)>();

  void g_object_freeze_notify(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_freeze_notify(
      object,
    );
  }

  late final _g_object_freeze_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_freeze_notify');
  late final _g_object_freeze_notify = _g_object_freeze_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_object_notify(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> property_name,
  ) {
    return _g_object_notify(
      object,
      property_name,
    );
  }

  late final _g_object_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>)>>('g_object_notify');
  late final _g_object_notify = _g_object_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>)>();

  void g_object_notify_by_pspec(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _g_object_notify_by_pspec(
      object,
      pspec,
    );
  }

  late final _g_object_notify_by_pspecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<GParamSpec>)>>('g_object_notify_by_pspec');
  late final _g_object_notify_by_pspec =
      _g_object_notify_by_pspecPtr.asFunction<
          void Function(ffi.Pointer<GObject>, ffi.Pointer<GParamSpec>)>();

  void g_object_thaw_notify(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_thaw_notify(
      object,
    );
  }

  late final _g_object_thaw_notifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_thaw_notify');
  late final _g_object_thaw_notify = _g_object_thaw_notifyPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  int g_object_is_floating(
    ffi.Pointer object,
  ) {
    return _g_object_is_floating(
      object,
    );
  }

  late final _g_object_is_floatingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer)>>(
          'g_object_is_floating');
  late final _g_object_is_floating =
      _g_object_is_floatingPtr.asFunction<int Function(ffi.Pointer)>();

  ffi.Pointer g_object_ref_sink(
    ffi.Pointer object,
  ) {
    return _g_object_ref_sink(
      object,
    );
  }

  late final _g_object_ref_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_object_ref_sink');
  late final _g_object_ref_sink =
      _g_object_ref_sinkPtr.asFunction<ffi.Pointer Function(ffi.Pointer)>();

  ffi.Pointer g_object_take_ref(
    ffi.Pointer object,
  ) {
    return _g_object_take_ref(
      object,
    );
  }

  late final _g_object_take_refPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_object_take_ref');
  late final _g_object_take_ref =
      _g_object_take_refPtr.asFunction<ffi.Pointer Function(ffi.Pointer)>();

  ffi.Pointer g_object_ref(
    ffi.Pointer object,
  ) {
    return _g_object_ref(
      object,
    );
  }

  late final _g_object_refPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'g_object_ref');
  late final _g_object_ref =
      _g_object_refPtr.asFunction<ffi.Pointer Function(ffi.Pointer)>();

  void g_object_unref(
    ffi.Pointer object,
  ) {
    return _g_object_unref(
      object,
    );
  }

  late final _g_object_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'g_object_unref');
  late final _g_object_unref =
      _g_object_unrefPtr.asFunction<void Function(ffi.Pointer)>();

  void g_object_weak_ref(
    ffi.Pointer<GObject> object,
    GWeakNotify notify,
    ffi.Pointer data,
  ) {
    return _g_object_weak_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_weak_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GWeakNotify,
              ffi.Pointer)>>('g_object_weak_ref');
  late final _g_object_weak_ref = _g_object_weak_refPtr.asFunction<
      void Function(ffi.Pointer<GObject>, GWeakNotify, ffi.Pointer)>();

  void g_object_weak_unref(
    ffi.Pointer<GObject> object,
    GWeakNotify notify,
    ffi.Pointer data,
  ) {
    return _g_object_weak_unref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_weak_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GWeakNotify,
              ffi.Pointer)>>('g_object_weak_unref');
  late final _g_object_weak_unref = _g_object_weak_unrefPtr.asFunction<
      void Function(ffi.Pointer<GObject>, GWeakNotify, ffi.Pointer)>();

  void g_object_add_weak_pointer(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Pointer> weak_pointer_location,
  ) {
    return _g_object_add_weak_pointer(
      object,
      weak_pointer_location,
    );
  }

  late final _g_object_add_weak_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Pointer>)>>('g_object_add_weak_pointer');
  late final _g_object_add_weak_pointer =
      _g_object_add_weak_pointerPtr.asFunction<
          void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Pointer>)>();

  void g_object_remove_weak_pointer(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Pointer> weak_pointer_location,
  ) {
    return _g_object_remove_weak_pointer(
      object,
      weak_pointer_location,
    );
  }

  late final _g_object_remove_weak_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Pointer>)>>('g_object_remove_weak_pointer');
  late final _g_object_remove_weak_pointer =
      _g_object_remove_weak_pointerPtr.asFunction<
          void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Pointer>)>();

  void g_object_add_toggle_ref(
    ffi.Pointer<GObject> object,
    GToggleNotify notify,
    ffi.Pointer data,
  ) {
    return _g_object_add_toggle_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_add_toggle_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GToggleNotify,
              ffi.Pointer)>>('g_object_add_toggle_ref');
  late final _g_object_add_toggle_ref = _g_object_add_toggle_refPtr.asFunction<
      void Function(ffi.Pointer<GObject>, GToggleNotify, ffi.Pointer)>();

  void g_object_remove_toggle_ref(
    ffi.Pointer<GObject> object,
    GToggleNotify notify,
    ffi.Pointer data,
  ) {
    return _g_object_remove_toggle_ref(
      object,
      notify,
      data,
    );
  }

  late final _g_object_remove_toggle_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GToggleNotify,
              ffi.Pointer)>>('g_object_remove_toggle_ref');
  late final _g_object_remove_toggle_ref =
      _g_object_remove_toggle_refPtr.asFunction<
          void Function(ffi.Pointer<GObject>, GToggleNotify, ffi.Pointer)>();

  ffi.Pointer g_object_get_qdata(
    ffi.Pointer<GObject> object,
    int quark,
  ) {
    return _g_object_get_qdata(
      object,
      quark,
    );
  }

  late final _g_object_get_qdataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GObject>, GQuark)>>(
      'g_object_get_qdata');
  late final _g_object_get_qdata = _g_object_get_qdataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GObject>, int)>();

  void g_object_set_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    ffi.Pointer data,
  ) {
    return _g_object_set_qdata(
      object,
      quark,
      data,
    );
  }

  late final _g_object_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GQuark,
              ffi.Pointer)>>('g_object_set_qdata');
  late final _g_object_set_qdata = _g_object_set_qdataPtr
      .asFunction<void Function(ffi.Pointer<GObject>, int, ffi.Pointer)>();

  void g_object_set_qdata_full(
    ffi.Pointer<GObject> object,
    int quark,
    ffi.Pointer data,
    GDestroyNotify destroy,
  ) {
    return _g_object_set_qdata_full(
      object,
      quark,
      data,
      destroy,
    );
  }

  late final _g_object_set_qdata_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, GQuark, ffi.Pointer,
              GDestroyNotify)>>('g_object_set_qdata_full');
  late final _g_object_set_qdata_full = _g_object_set_qdata_fullPtr.asFunction<
      void Function(ffi.Pointer<GObject>, int, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer g_object_steal_qdata(
    ffi.Pointer<GObject> object,
    int quark,
  ) {
    return _g_object_steal_qdata(
      object,
      quark,
    );
  }

  late final _g_object_steal_qdataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GObject>, GQuark)>>(
      'g_object_steal_qdata');
  late final _g_object_steal_qdata = _g_object_steal_qdataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GObject>, int)>();

  ffi.Pointer g_object_dup_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    GDuplicateFunc dup_func,
    ffi.Pointer user_data,
  ) {
    return _g_object_dup_qdata(
      object,
      quark,
      dup_func,
      user_data,
    );
  }

  late final _g_object_dup_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GObject>, GQuark, GDuplicateFunc,
              ffi.Pointer)>>('g_object_dup_qdata');
  late final _g_object_dup_qdata = _g_object_dup_qdataPtr.asFunction<
      ffi.Pointer Function(
          ffi.Pointer<GObject>, int, GDuplicateFunc, ffi.Pointer)>();

  int g_object_replace_qdata(
    ffi.Pointer<GObject> object,
    int quark,
    ffi.Pointer oldval,
    ffi.Pointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_object_replace_qdata(
      object,
      quark,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_object_replace_qdataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GObject>,
              GQuark,
              ffi.Pointer,
              ffi.Pointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_object_replace_qdata');
  late final _g_object_replace_qdata = _g_object_replace_qdataPtr.asFunction<
      int Function(ffi.Pointer<GObject>, int, ffi.Pointer, ffi.Pointer,
          GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  ffi.Pointer g_object_get_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _g_object_get_data(
      object,
      key,
    );
  }

  late final _g_object_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>>('g_object_get_data');
  late final _g_object_get_data = _g_object_get_dataPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>)>();

  void g_object_set_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer data,
  ) {
    return _g_object_set_data(
      object,
      key,
      data,
    );
  }

  late final _g_object_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer)>>('g_object_set_data');
  late final _g_object_set_data = _g_object_set_dataPtr.asFunction<
      void Function(
          ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>, ffi.Pointer)>();

  void g_object_set_data_full(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer data,
    GDestroyNotify destroy,
  ) {
    return _g_object_set_data_full(
      object,
      key,
      data,
      destroy,
    );
  }

  late final _g_object_set_data_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer, GDestroyNotify)>>('g_object_set_data_full');
  late final _g_object_set_data_full = _g_object_set_data_fullPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>, ffi.Pointer,
          GDestroyNotify)>();

  ffi.Pointer g_object_steal_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _g_object_steal_data(
      object,
      key,
    );
  }

  late final _g_object_steal_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>>('g_object_steal_data');
  late final _g_object_steal_data = _g_object_steal_dataPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer g_object_dup_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> key,
    GDuplicateFunc dup_func,
    ffi.Pointer user_data,
  ) {
    return _g_object_dup_data(
      object,
      key,
      dup_func,
      user_data,
    );
  }

  late final _g_object_dup_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              GDuplicateFunc, ffi.Pointer)>>('g_object_dup_data');
  late final _g_object_dup_data = _g_object_dup_dataPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
          GDuplicateFunc, ffi.Pointer)>();

  int g_object_replace_data(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer oldval,
    ffi.Pointer newval,
    GDestroyNotify destroy,
    ffi.Pointer<GDestroyNotify> old_destroy,
  ) {
    return _g_object_replace_data(
      object,
      key,
      oldval,
      newval,
      destroy,
      old_destroy,
    );
  }

  late final _g_object_replace_dataPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer,
              GDestroyNotify,
              ffi.Pointer<GDestroyNotify>)>>('g_object_replace_data');
  late final _g_object_replace_data = _g_object_replace_dataPtr.asFunction<
      int Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>, ffi.Pointer,
          ffi.Pointer, GDestroyNotify, ffi.Pointer<GDestroyNotify>)>();

  void g_object_watch_closure(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_object_watch_closure(
      object,
      closure,
    );
  }

  late final _g_object_watch_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>,
              ffi.Pointer<GClosure>)>>('g_object_watch_closure');
  late final _g_object_watch_closure = _g_object_watch_closurePtr
      .asFunction<void Function(ffi.Pointer<GObject>, ffi.Pointer<GClosure>)>();

  ffi.Pointer<GClosure> g_cclosure_new_object(
    GCallback callback_func,
    ffi.Pointer<GObject> object,
  ) {
    return _g_cclosure_new_object(
      callback_func,
      object,
    );
  }

  late final _g_cclosure_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer<GObject>)>>('g_cclosure_new_object');
  late final _g_cclosure_new_object = _g_cclosure_new_objectPtr.asFunction<
      ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer<GObject>)>();

  ffi.Pointer<GClosure> g_cclosure_new_object_swap(
    GCallback callback_func,
    ffi.Pointer<GObject> object,
  ) {
    return _g_cclosure_new_object_swap(
      callback_func,
      object,
    );
  }

  late final _g_cclosure_new_object_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              GCallback, ffi.Pointer<GObject>)>>('g_cclosure_new_object_swap');
  late final _g_cclosure_new_object_swap =
      _g_cclosure_new_object_swapPtr.asFunction<
          ffi.Pointer<GClosure> Function(GCallback, ffi.Pointer<GObject>)>();

  ffi.Pointer<GClosure> g_closure_new_object(
    int sizeof_closure,
    ffi.Pointer<GObject> object,
  ) {
    return _g_closure_new_object(
      sizeof_closure,
      object,
    );
  }

  late final _g_closure_new_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GClosure> Function(
              guint, ffi.Pointer<GObject>)>>('g_closure_new_object');
  late final _g_closure_new_object = _g_closure_new_objectPtr
      .asFunction<ffi.Pointer<GClosure> Function(int, ffi.Pointer<GObject>)>();

  void g_value_set_object(
    ffi.Pointer<GValue> value,
    ffi.Pointer v_object,
  ) {
    return _g_value_set_object(
      value,
      v_object,
    );
  }

  late final _g_value_set_objectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer)>>(
      'g_value_set_object');
  late final _g_value_set_object = _g_value_set_objectPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer)>();

  ffi.Pointer g_value_get_object(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_object(
      value,
    );
  }

  late final _g_value_get_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_object');
  late final _g_value_get_object = _g_value_get_objectPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>();

  ffi.Pointer g_value_dup_object(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_object(
      value,
    );
  }

  late final _g_value_dup_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>>(
          'g_value_dup_object');
  late final _g_value_dup_object = _g_value_dup_objectPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>();

  int g_signal_connect_object(
    ffi.Pointer instance,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer gobject,
    int connect_flags,
  ) {
    return _g_signal_connect_object(
      instance,
      detailed_signal,
      c_handler,
      gobject,
      connect_flags,
    );
  }

  late final _g_signal_connect_objectPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer, ffi.Pointer<ffi.Char>, GCallback,
              ffi.Pointer, ffi.Int32)>>('g_signal_connect_object');
  late final _g_signal_connect_object = _g_signal_connect_objectPtr.asFunction<
      int Function(
          ffi.Pointer, ffi.Pointer<ffi.Char>, GCallback, ffi.Pointer, int)>();

  void g_object_force_floating(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_force_floating(
      object,
    );
  }

  late final _g_object_force_floatingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_force_floating');
  late final _g_object_force_floating = _g_object_force_floatingPtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_object_run_dispose(
    ffi.Pointer<GObject> object,
  ) {
    return _g_object_run_dispose(
      object,
    );
  }

  late final _g_object_run_disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject>)>>(
          'g_object_run_dispose');
  late final _g_object_run_dispose = _g_object_run_disposePtr
      .asFunction<void Function(ffi.Pointer<GObject>)>();

  void g_value_take_object(
    ffi.Pointer<GValue> value,
    ffi.Pointer v_object,
  ) {
    return _g_value_take_object(
      value,
      v_object,
    );
  }

  late final _g_value_take_objectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer)>>(
      'g_value_take_object');
  late final _g_value_take_object = _g_value_take_objectPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer)>();

  void g_value_set_object_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer v_object,
  ) {
    return _g_value_set_object_take_ownership(
      value,
      v_object,
    );
  }

  late final _g_value_set_object_take_ownershipPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer)>>(
      'g_value_set_object_take_ownership');
  late final _g_value_set_object_take_ownership =
      _g_value_set_object_take_ownershipPtr
          .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer)>();

  int g_object_compat_control(
    int what,
    ffi.Pointer data,
  ) {
    return _g_object_compat_control(
      what,
      data,
    );
  }

  late final _g_object_compat_controlPtr =
      _lookup<ffi.NativeFunction<gsize Function(gsize, ffi.Pointer)>>(
          'g_object_compat_control');
  late final _g_object_compat_control =
      _g_object_compat_controlPtr.asFunction<int Function(int, ffi.Pointer)>();

  void g_clear_object(
    ffi.Pointer<ffi.Pointer<GObject>> object_ptr,
  ) {
    return _g_clear_object(
      object_ptr,
    );
  }

  late final _g_clear_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GObject>>)>>('g_clear_object');
  late final _g_clear_object = _g_clear_objectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GObject>>)>();

  void g_weak_ref_init(
    ffi.Pointer<GWeakRef> weak_ref,
    ffi.Pointer object,
  ) {
    return _g_weak_ref_init(
      weak_ref,
      object,
    );
  }

  late final _g_weak_ref_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GWeakRef>, ffi.Pointer)>>('g_weak_ref_init');
  late final _g_weak_ref_init = _g_weak_ref_initPtr
      .asFunction<void Function(ffi.Pointer<GWeakRef>, ffi.Pointer)>();

  void g_weak_ref_clear(
    ffi.Pointer<GWeakRef> weak_ref,
  ) {
    return _g_weak_ref_clear(
      weak_ref,
    );
  }

  late final _g_weak_ref_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GWeakRef>)>>(
          'g_weak_ref_clear');
  late final _g_weak_ref_clear =
      _g_weak_ref_clearPtr.asFunction<void Function(ffi.Pointer<GWeakRef>)>();

  ffi.Pointer g_weak_ref_get(
    ffi.Pointer<GWeakRef> weak_ref,
  ) {
    return _g_weak_ref_get(
      weak_ref,
    );
  }

  late final _g_weak_ref_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GWeakRef>)>>(
          'g_weak_ref_get');
  late final _g_weak_ref_get = _g_weak_ref_getPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GWeakRef>)>();

  void g_weak_ref_set(
    ffi.Pointer<GWeakRef> weak_ref,
    ffi.Pointer object,
  ) {
    return _g_weak_ref_set(
      weak_ref,
      object,
    );
  }

  late final _g_weak_ref_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GWeakRef>, ffi.Pointer)>>('g_weak_ref_set');
  late final _g_weak_ref_set = _g_weak_ref_setPtr
      .asFunction<void Function(ffi.Pointer<GWeakRef>, ffi.Pointer)>();

  int g_binding_flags_get_type() {
    return _g_binding_flags_get_type();
  }

  late final _g_binding_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_flags_get_type');
  late final _g_binding_flags_get_type =
      _g_binding_flags_get_typePtr.asFunction<int Function()>();

  int g_binding_get_type() {
    return _g_binding_get_type();
  }

  late final _g_binding_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_get_type');
  late final _g_binding_get_type =
      _g_binding_get_typePtr.asFunction<int Function()>();

  int g_binding_get_flags(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_flags(
      binding,
    );
  }

  late final _g_binding_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GBinding>)>>(
          'g_binding_get_flags');
  late final _g_binding_get_flags =
      _g_binding_get_flagsPtr.asFunction<int Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_get_source(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_source(
      binding,
    );
  }

  late final _g_binding_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_source');
  late final _g_binding_get_source = _g_binding_get_sourcePtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_dup_source(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_dup_source(
      binding,
    );
  }

  late final _g_binding_dup_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_dup_source');
  late final _g_binding_dup_source = _g_binding_dup_sourcePtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_get_target(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_target(
      binding,
    );
  }

  late final _g_binding_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_target');
  late final _g_binding_get_target = _g_binding_get_targetPtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GObject> g_binding_dup_target(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_dup_target(
      binding,
    );
  }

  late final _g_binding_dup_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GBinding>)>>('g_binding_dup_target');
  late final _g_binding_dup_target = _g_binding_dup_targetPtr
      .asFunction<ffi.Pointer<GObject> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<ffi.Char> g_binding_get_source_property(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_source_property(
      binding,
    );
  }

  late final _g_binding_get_source_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_source_property');
  late final _g_binding_get_source_property = _g_binding_get_source_propertyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<ffi.Char> g_binding_get_target_property(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_get_target_property(
      binding,
    );
  }

  late final _g_binding_get_target_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GBinding>)>>('g_binding_get_target_property');
  late final _g_binding_get_target_property = _g_binding_get_target_propertyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GBinding>)>();

  void g_binding_unbind(
    ffi.Pointer<GBinding> binding,
  ) {
    return _g_binding_unbind(
      binding,
    );
  }

  late final _g_binding_unbindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GBinding>)>>(
          'g_binding_unbind');
  late final _g_binding_unbind =
      _g_binding_unbindPtr.asFunction<void Function(ffi.Pointer<GBinding>)>();

  ffi.Pointer<GBinding> g_object_bind_property(
    ffi.Pointer source,
    ffi.Pointer<ffi.Char> source_property,
    ffi.Pointer target,
    ffi.Pointer<ffi.Char> target_property,
    int flags,
  ) {
    return _g_object_bind_property(
      source,
      source_property,
      target,
      target_property,
      flags,
    );
  }

  late final _g_object_bind_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_object_bind_property');
  late final _g_object_bind_property = _g_object_bind_propertyPtr.asFunction<
      ffi.Pointer<GBinding> Function(ffi.Pointer, ffi.Pointer<ffi.Char>,
          ffi.Pointer, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GBinding> g_object_bind_property_full(
    ffi.Pointer source,
    ffi.Pointer<ffi.Char> source_property,
    ffi.Pointer target,
    ffi.Pointer<ffi.Char> target_property,
    int flags,
    GBindingTransformFunc transform_to,
    GBindingTransformFunc transform_from,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _g_object_bind_property_full(
      source,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
      user_data,
      notify,
    );
  }

  late final _g_object_bind_property_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              GBindingTransformFunc,
              GBindingTransformFunc,
              ffi.Pointer,
              GDestroyNotify)>>('g_object_bind_property_full');
  late final _g_object_bind_property_full =
      _g_object_bind_property_fullPtr.asFunction<
          ffi.Pointer<GBinding> Function(
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              int,
              GBindingTransformFunc,
              GBindingTransformFunc,
              ffi.Pointer,
              GDestroyNotify)>();

  ffi.Pointer<GBinding> g_object_bind_property_with_closures(
    ffi.Pointer source,
    ffi.Pointer<ffi.Char> source_property,
    ffi.Pointer target,
    ffi.Pointer<ffi.Char> target_property,
    int flags,
    ffi.Pointer<GClosure> transform_to,
    ffi.Pointer<GClosure> transform_from,
  ) {
    return _g_object_bind_property_with_closures(
      source,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
    );
  }

  late final _g_object_bind_property_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBinding> Function(
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_object_bind_property_with_closures');
  late final _g_object_bind_property_with_closures =
      _g_object_bind_property_with_closuresPtr.asFunction<
          ffi.Pointer<GBinding> Function(
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  int g_binding_group_get_type() {
    return _g_binding_group_get_type();
  }

  late final _g_binding_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_binding_group_get_type');
  late final _g_binding_group_get_type =
      _g_binding_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GBindingGroup> g_binding_group_new() {
    return _g_binding_group_new();
  }

  late final _g_binding_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GBindingGroup> Function()>>(
          'g_binding_group_new');
  late final _g_binding_group_new = _g_binding_group_newPtr
      .asFunction<ffi.Pointer<GBindingGroup> Function()>();

  ffi.Pointer g_binding_group_dup_source(
    ffi.Pointer<GBindingGroup> self,
  ) {
    return _g_binding_group_dup_source(
      self,
    );
  }

  late final _g_binding_group_dup_sourcePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GBindingGroup>)>>(
      'g_binding_group_dup_source');
  late final _g_binding_group_dup_source = _g_binding_group_dup_sourcePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GBindingGroup>)>();

  void g_binding_group_set_source(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer source,
  ) {
    return _g_binding_group_set_source(
      self,
      source,
    );
  }

  late final _g_binding_group_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GBindingGroup>,
              ffi.Pointer)>>('g_binding_group_set_source');
  late final _g_binding_group_set_source = _g_binding_group_set_sourcePtr
      .asFunction<void Function(ffi.Pointer<GBindingGroup>, ffi.Pointer)>();

  void g_binding_group_bind(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<ffi.Char> source_property,
    ffi.Pointer target,
    ffi.Pointer<ffi.Char> target_property,
    int flags,
  ) {
    return _g_binding_group_bind(
      self,
      source_property,
      target,
      target_property,
      flags,
    );
  }

  late final _g_binding_group_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_binding_group_bind');
  late final _g_binding_group_bind = _g_binding_group_bindPtr.asFunction<
      void Function(ffi.Pointer<GBindingGroup>, ffi.Pointer<ffi.Char>,
          ffi.Pointer, ffi.Pointer<ffi.Char>, int)>();

  void g_binding_group_bind_full(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<ffi.Char> source_property,
    ffi.Pointer target,
    ffi.Pointer<ffi.Char> target_property,
    int flags,
    GBindingTransformFunc transform_to,
    GBindingTransformFunc transform_from,
    ffi.Pointer user_data,
    GDestroyNotify user_data_destroy,
  ) {
    return _g_binding_group_bind_full(
      self,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
      user_data,
      user_data_destroy,
    );
  }

  late final _g_binding_group_bind_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              GBindingTransformFunc,
              GBindingTransformFunc,
              ffi.Pointer,
              GDestroyNotify)>>('g_binding_group_bind_full');
  late final _g_binding_group_bind_full =
      _g_binding_group_bind_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              int,
              GBindingTransformFunc,
              GBindingTransformFunc,
              ffi.Pointer,
              GDestroyNotify)>();

  void g_binding_group_bind_with_closures(
    ffi.Pointer<GBindingGroup> self,
    ffi.Pointer<ffi.Char> source_property,
    ffi.Pointer target,
    ffi.Pointer<ffi.Char> target_property,
    int flags,
    ffi.Pointer<GClosure> transform_to,
    ffi.Pointer<GClosure> transform_from,
  ) {
    return _g_binding_group_bind_with_closures(
      self,
      source_property,
      target,
      target_property,
      flags,
      transform_to,
      transform_from,
    );
  }

  late final _g_binding_group_bind_with_closuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>>('g_binding_group_bind_with_closures');
  late final _g_binding_group_bind_with_closures =
      _g_binding_group_bind_with_closuresPtr.asFunction<
          void Function(
              ffi.Pointer<GBindingGroup>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GClosure>,
              ffi.Pointer<GClosure>)>();

  ffi.Pointer<GEnumValue> g_enum_get_value(
    ffi.Pointer<GEnumClass> enum_class,
    int value,
  ) {
    return _g_enum_get_value(
      enum_class,
      value,
    );
  }

  late final _g_enum_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, gint)>>('g_enum_get_value');
  late final _g_enum_get_value = _g_enum_get_valuePtr.asFunction<
      ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>, int)>();

  ffi.Pointer<GEnumValue> g_enum_get_value_by_name(
    ffi.Pointer<GEnumClass> enum_class,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_enum_get_value_by_name(
      enum_class,
      name,
    );
  }

  late final _g_enum_get_value_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>,
              ffi.Pointer<ffi.Char>)>>('g_enum_get_value_by_name');
  late final _g_enum_get_value_by_name =
      _g_enum_get_value_by_namePtr.asFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GEnumValue> g_enum_get_value_by_nick(
    ffi.Pointer<GEnumClass> enum_class,
    ffi.Pointer<ffi.Char> nick,
  ) {
    return _g_enum_get_value_by_nick(
      enum_class,
      nick,
    );
  }

  late final _g_enum_get_value_by_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GEnumValue> Function(ffi.Pointer<GEnumClass>,
              ffi.Pointer<ffi.Char>)>>('g_enum_get_value_by_nick');
  late final _g_enum_get_value_by_nick =
      _g_enum_get_value_by_nickPtr.asFunction<
          ffi.Pointer<GEnumValue> Function(
              ffi.Pointer<GEnumClass>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFlagsValue> g_flags_get_first_value(
    ffi.Pointer<GFlagsClass> flags_class,
    int value,
  ) {
    return _g_flags_get_first_value(
      flags_class,
      value,
    );
  }

  late final _g_flags_get_first_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, guint)>>('g_flags_get_first_value');
  late final _g_flags_get_first_value = _g_flags_get_first_valuePtr.asFunction<
      ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>, int)>();

  ffi.Pointer<GFlagsValue> g_flags_get_value_by_name(
    ffi.Pointer<GFlagsClass> flags_class,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_flags_get_value_by_name(
      flags_class,
      name,
    );
  }

  late final _g_flags_get_value_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>,
              ffi.Pointer<ffi.Char>)>>('g_flags_get_value_by_name');
  late final _g_flags_get_value_by_name =
      _g_flags_get_value_by_namePtr.asFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GFlagsValue> g_flags_get_value_by_nick(
    ffi.Pointer<GFlagsClass> flags_class,
    ffi.Pointer<ffi.Char> nick,
  ) {
    return _g_flags_get_value_by_nick(
      flags_class,
      nick,
    );
  }

  late final _g_flags_get_value_by_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GFlagsValue> Function(ffi.Pointer<GFlagsClass>,
              ffi.Pointer<ffi.Char>)>>('g_flags_get_value_by_nick');
  late final _g_flags_get_value_by_nick =
      _g_flags_get_value_by_nickPtr.asFunction<
          ffi.Pointer<GFlagsValue> Function(
              ffi.Pointer<GFlagsClass>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_enum_to_string(
    int g_enum_type,
    int value,
  ) {
    return _g_enum_to_string(
      g_enum_type,
      value,
    );
  }

  late final _g_enum_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(GType, gint)>>(
          'g_enum_to_string');
  late final _g_enum_to_string = _g_enum_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> g_flags_to_string(
    int flags_type,
    int value,
  ) {
    return _g_flags_to_string(
      flags_type,
      value,
    );
  }

  late final _g_flags_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(GType, guint)>>(
          'g_flags_to_string');
  late final _g_flags_to_string = _g_flags_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  void g_value_set_enum(
    ffi.Pointer<GValue> value,
    int v_enum,
  ) {
    return _g_value_set_enum(
      value,
      v_enum,
    );
  }

  late final _g_value_set_enumPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint)>>(
          'g_value_set_enum');
  late final _g_value_set_enum = _g_value_set_enumPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_enum(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_enum(
      value,
    );
  }

  late final _g_value_get_enumPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_enum');
  late final _g_value_get_enum =
      _g_value_get_enumPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_flags(
    ffi.Pointer<GValue> value,
    int v_flags,
  ) {
    return _g_value_set_flags(
      value,
      v_flags,
    );
  }

  late final _g_value_set_flagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint)>>(
      'g_value_set_flags');
  late final _g_value_set_flags = _g_value_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_flags(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_flags(
      value,
    );
  }

  late final _g_value_get_flagsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_flags');
  late final _g_value_get_flags =
      _g_value_get_flagsPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int g_enum_register_static(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GEnumValue> const_static_values,
  ) {
    return _g_enum_register_static(
      name,
      const_static_values,
    );
  }

  late final _g_enum_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GEnumValue>)>>('g_enum_register_static');
  late final _g_enum_register_static = _g_enum_register_staticPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GEnumValue>)>();

  int g_flags_register_static(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GFlagsValue> const_static_values,
  ) {
    return _g_flags_register_static(
      name,
      const_static_values,
    );
  }

  late final _g_flags_register_staticPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GFlagsValue>)>>('g_flags_register_static');
  late final _g_flags_register_static = _g_flags_register_staticPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GFlagsValue>)>();

  void g_enum_complete_type_info(
    int g_enum_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GEnumValue> const_values,
  ) {
    return _g_enum_complete_type_info(
      g_enum_type,
      info,
      const_values,
    );
  }

  late final _g_enum_complete_type_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GEnumValue>)>>('g_enum_complete_type_info');
  late final _g_enum_complete_type_info =
      _g_enum_complete_type_infoPtr.asFunction<
          void Function(
              int, ffi.Pointer<GTypeInfo>, ffi.Pointer<GEnumValue>)>();

  void g_flags_complete_type_info(
    int g_flags_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GFlagsValue> const_values,
  ) {
    return _g_flags_complete_type_info(
      g_flags_type,
      info,
      const_values,
    );
  }

  late final _g_flags_complete_type_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GType, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GFlagsValue>)>>('g_flags_complete_type_info');
  late final _g_flags_complete_type_info =
      _g_flags_complete_type_infoPtr.asFunction<
          void Function(
              int, ffi.Pointer<GTypeInfo>, ffi.Pointer<GFlagsValue>)>();

  int g_unicode_type_get_type() {
    return _g_unicode_type_get_type();
  }

  late final _g_unicode_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_unicode_type_get_type');
  late final _g_unicode_type_get_type =
      _g_unicode_type_get_typePtr.asFunction<int Function()>();

  int g_unicode_break_type_get_type() {
    return _g_unicode_break_type_get_type();
  }

  late final _g_unicode_break_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unicode_break_type_get_type');
  late final _g_unicode_break_type_get_type =
      _g_unicode_break_type_get_typePtr.asFunction<int Function()>();

  int g_unicode_script_get_type() {
    return _g_unicode_script_get_type();
  }

  late final _g_unicode_script_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_unicode_script_get_type');
  late final _g_unicode_script_get_type =
      _g_unicode_script_get_typePtr.asFunction<int Function()>();

  int g_normalize_mode_get_type() {
    return _g_normalize_mode_get_type();
  }

  late final _g_normalize_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'g_normalize_mode_get_type');
  late final _g_normalize_mode_get_type =
      _g_normalize_mode_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GParamSpec> g_param_spec_char(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_char(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint8,
              gint8,
              gint8,
              ffi.Int32)>>('g_param_spec_char');
  late final _g_param_spec_char = _g_param_spec_charPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uchar(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uchar(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              guint8,
              guint8,
              guint8,
              ffi.Int32)>>('g_param_spec_uchar');
  late final _g_param_spec_uchar = _g_param_spec_ucharPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_boolean(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_boolean(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gboolean,
              ffi.Int32)>>('g_param_spec_boolean');
  late final _g_param_spec_boolean = _g_param_spec_booleanPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_int(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_int(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              gint,
              gint,
              ffi.Int32)>>('g_param_spec_int');
  late final _g_param_spec_int = _g_param_spec_intPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uint(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uint(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              guint,
              guint,
              guint,
              ffi.Int32)>>('g_param_spec_uint');
  late final _g_param_spec_uint = _g_param_spec_uintPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_long(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_long(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              glong,
              glong,
              glong,
              ffi.Int32)>>('g_param_spec_long');
  late final _g_param_spec_long = _g_param_spec_longPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_ulong(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_ulong(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gulong,
              gulong,
              gulong,
              ffi.Int32)>>('g_param_spec_ulong');
  late final _g_param_spec_ulong = _g_param_spec_ulongPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_int64(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_int64(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint64,
              gint64,
              gint64,
              ffi.Int32)>>('g_param_spec_int64');
  late final _g_param_spec_int64 = _g_param_spec_int64Ptr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_uint64(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int minimum,
    int maximum,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_uint64(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              guint64,
              guint64,
              guint64,
              ffi.Int32)>>('g_param_spec_uint64');
  late final _g_param_spec_uint64 = _g_param_spec_uint64Ptr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_unichar(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_unichar(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_unicharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gunichar,
              ffi.Int32)>>('g_param_spec_unichar');
  late final _g_param_spec_unichar = _g_param_spec_unicharPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_enum(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int enum_type,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_enum(
      name,
      nick,
      blurb,
      enum_type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_enumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GType,
              gint,
              ffi.Int32)>>('g_param_spec_enum');
  late final _g_param_spec_enum = _g_param_spec_enumPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_flags(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int flags_type,
    int default_value,
    int flags,
  ) {
    return _g_param_spec_flags(
      name,
      nick,
      blurb,
      flags_type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GType,
              guint,
              ffi.Int32)>>('g_param_spec_flags');
  late final _g_param_spec_flags = _g_param_spec_flagsPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_float(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    double minimum,
    double maximum,
    double default_value,
    int flags,
  ) {
    return _g_param_spec_float(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gfloat,
              gfloat,
              gfloat,
              ffi.Int32)>>('g_param_spec_float');
  late final _g_param_spec_float = _g_param_spec_floatPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          double,
          int)>();

  ffi.Pointer<GParamSpec> g_param_spec_double(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    double minimum,
    double maximum,
    double default_value,
    int flags,
  ) {
    return _g_param_spec_double(
      name,
      nick,
      blurb,
      minimum,
      maximum,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gdouble,
              gdouble,
              gdouble,
              ffi.Int32)>>('g_param_spec_double');
  late final _g_param_spec_double = _g_param_spec_doublePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          double,
          int)>();

  ffi.Pointer<GParamSpec> g_param_spec_string(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    ffi.Pointer<ffi.Char> default_value,
    int flags,
  ) {
    return _g_param_spec_string(
      name,
      nick,
      blurb,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_param_spec_string');
  late final _g_param_spec_string = _g_param_spec_stringPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  ffi.Pointer<GParamSpec> g_param_spec_param(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int param_type,
    int flags,
  ) {
    return _g_param_spec_param(
      name,
      nick,
      blurb,
      param_type,
      flags,
    );
  }

  late final _g_param_spec_paramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32)>>('g_param_spec_param');
  late final _g_param_spec_param = _g_param_spec_paramPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_boxed(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int boxed_type,
    int flags,
  ) {
    return _g_param_spec_boxed(
      name,
      nick,
      blurb,
      boxed_type,
      flags,
    );
  }

  late final _g_param_spec_boxedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32)>>('g_param_spec_boxed');
  late final _g_param_spec_boxed = _g_param_spec_boxedPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_pointer(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int flags,
  ) {
    return _g_param_spec_pointer(
      name,
      nick,
      blurb,
      flags,
    );
  }

  late final _g_param_spec_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('g_param_spec_pointer');
  late final _g_param_spec_pointer = _g_param_spec_pointerPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_value_array(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    ffi.Pointer<GParamSpec> element_spec,
    int flags,
  ) {
    return _g_param_spec_value_array(
      name,
      nick,
      blurb,
      element_spec,
      flags,
    );
  }

  late final _g_param_spec_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GParamSpec>,
              ffi.Int32)>>('g_param_spec_value_array');
  late final _g_param_spec_value_array =
      _g_param_spec_value_arrayPtr.asFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GParamSpec>,
              int)>();

  ffi.Pointer<GParamSpec> g_param_spec_object(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int object_type,
    int flags,
  ) {
    return _g_param_spec_object(
      name,
      nick,
      blurb,
      object_type,
      flags,
    );
  }

  late final _g_param_spec_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32)>>('g_param_spec_object');
  late final _g_param_spec_object = _g_param_spec_objectPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_override(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GParamSpec> overridden,
  ) {
    return _g_param_spec_override(
      name,
      overridden,
    );
  }

  late final _g_param_spec_overridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GParamSpec>)>>('g_param_spec_override');
  late final _g_param_spec_override = _g_param_spec_overridePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<GParamSpec>)>();

  ffi.Pointer<GParamSpec> g_param_spec_gtype(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int is_a_type,
    int flags,
  ) {
    return _g_param_spec_gtype(
      name,
      nick,
      blurb,
      is_a_type,
      flags,
    );
  }

  late final _g_param_spec_gtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GType,
              ffi.Int32)>>('g_param_spec_gtype');
  late final _g_param_spec_gtype = _g_param_spec_gtypePtr.asFunction<
      ffi.Pointer<GParamSpec> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<GParamSpec> g_param_spec_variant(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    ffi.Pointer<GVariantType> type,
    ffi.Pointer<GVariant> default_value,
    int flags,
  ) {
    return _g_param_spec_variant(
      name,
      nick,
      blurb,
      type,
      default_value,
      flags,
    );
  }

  late final _g_param_spec_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GVariantType>,
              ffi.Pointer<GVariant>,
              ffi.Int32)>>('g_param_spec_variant');
  late final _g_param_spec_variant = _g_param_spec_variantPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GVariantType>,
          ffi.Pointer<GVariant>,
          int)>();

  late final ffi.Pointer<ffi.Pointer<GType>> _g_param_spec_types =
      _lookup<ffi.Pointer<GType>>('g_param_spec_types');

  ffi.Pointer<GType> get g_param_spec_types => _g_param_spec_types.value;

  set g_param_spec_types(ffi.Pointer<GType> value) =>
      _g_param_spec_types.value = value;

  int g_signal_group_get_type() {
    return _g_signal_group_get_type();
  }

  late final _g_signal_group_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_signal_group_get_type');
  late final _g_signal_group_get_type =
      _g_signal_group_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GSignalGroup> g_signal_group_new(
    int target_type,
  ) {
    return _g_signal_group_new(
      target_type,
    );
  }

  late final _g_signal_group_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSignalGroup> Function(GType)>>(
          'g_signal_group_new');
  late final _g_signal_group_new = _g_signal_group_newPtr
      .asFunction<ffi.Pointer<GSignalGroup> Function(int)>();

  void g_signal_group_set_target(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer target,
  ) {
    return _g_signal_group_set_target(
      self,
      target,
    );
  }

  late final _g_signal_group_set_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>,
              ffi.Pointer)>>('g_signal_group_set_target');
  late final _g_signal_group_set_target = _g_signal_group_set_targetPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer)>();

  ffi.Pointer g_signal_group_dup_target(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_dup_target(
      self,
    );
  }

  late final _g_signal_group_dup_targetPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GSignalGroup>)>>(
      'g_signal_group_dup_target');
  late final _g_signal_group_dup_target = _g_signal_group_dup_targetPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_block(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_block(
      self,
    );
  }

  late final _g_signal_group_blockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_block');
  late final _g_signal_group_block = _g_signal_group_blockPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_unblock(
    ffi.Pointer<GSignalGroup> self,
  ) {
    return _g_signal_group_unblock(
      self,
    );
  }

  late final _g_signal_group_unblockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSignalGroup>)>>(
          'g_signal_group_unblock');
  late final _g_signal_group_unblock = _g_signal_group_unblockPtr
      .asFunction<void Function(ffi.Pointer<GSignalGroup>)>();

  void g_signal_group_connect_closure(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<ffi.Char> detailed_signal,
    ffi.Pointer<GClosure> closure,
    int after,
  ) {
    return _g_signal_group_connect_closure(
      self,
      detailed_signal,
      closure,
      after,
    );
  }

  late final _g_signal_group_connect_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GClosure>,
              gboolean)>>('g_signal_group_connect_closure');
  late final _g_signal_group_connect_closure =
      _g_signal_group_connect_closurePtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GClosure>, int)>();

  void g_signal_group_connect_object(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer object,
    int flags,
  ) {
    return _g_signal_group_connect_object(
      self,
      detailed_signal,
      c_handler,
      object,
      flags,
    );
  }

  late final _g_signal_group_connect_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<ffi.Char>,
              GCallback,
              ffi.Pointer,
              ffi.Int32)>>('g_signal_group_connect_object');
  late final _g_signal_group_connect_object =
      _g_signal_group_connect_objectPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer, int)>();

  void g_signal_group_connect_data(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer data,
    GClosureNotify notify,
    int flags,
  ) {
    return _g_signal_group_connect_data(
      self,
      detailed_signal,
      c_handler,
      data,
      notify,
      flags,
    );
  }

  late final _g_signal_group_connect_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GSignalGroup>,
              ffi.Pointer<ffi.Char>,
              GCallback,
              ffi.Pointer,
              GClosureNotify,
              ffi.Int32)>>('g_signal_group_connect_data');
  late final _g_signal_group_connect_data =
      _g_signal_group_connect_dataPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer, GClosureNotify, int)>();

  void g_signal_group_connect(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer data,
  ) {
    return _g_signal_group_connect(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer)>>('g_signal_group_connect');
  late final _g_signal_group_connect = _g_signal_group_connectPtr.asFunction<
      void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>, GCallback,
          ffi.Pointer)>();

  void g_signal_group_connect_after(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer data,
  ) {
    return _g_signal_group_connect_after(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connect_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer)>>('g_signal_group_connect_after');
  late final _g_signal_group_connect_after =
      _g_signal_group_connect_afterPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer)>();

  void g_signal_group_connect_swapped(
    ffi.Pointer<GSignalGroup> self,
    ffi.Pointer<ffi.Char> detailed_signal,
    GCallback c_handler,
    ffi.Pointer data,
  ) {
    return _g_signal_group_connect_swapped(
      self,
      detailed_signal,
      c_handler,
      data,
    );
  }

  late final _g_signal_group_connect_swappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer)>>('g_signal_group_connect_swapped');
  late final _g_signal_group_connect_swapped =
      _g_signal_group_connect_swappedPtr.asFunction<
          void Function(ffi.Pointer<GSignalGroup>, ffi.Pointer<ffi.Char>,
              GCallback, ffi.Pointer)>();

  void g_source_set_closure(
    ffi.Pointer<GSource> source,
    ffi.Pointer<GClosure> closure,
  ) {
    return _g_source_set_closure(
      source,
      closure,
    );
  }

  late final _g_source_set_closurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GSource>,
              ffi.Pointer<GClosure>)>>('g_source_set_closure');
  late final _g_source_set_closure = _g_source_set_closurePtr
      .asFunction<void Function(ffi.Pointer<GSource>, ffi.Pointer<GClosure>)>();

  void g_source_set_dummy_callback(
    ffi.Pointer<GSource> source,
  ) {
    return _g_source_set_dummy_callback(
      source,
    );
  }

  late final _g_source_set_dummy_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource>)>>(
          'g_source_set_dummy_callback');
  late final _g_source_set_dummy_callback = _g_source_set_dummy_callbackPtr
      .asFunction<void Function(ffi.Pointer<GSource>)>();

  int g_type_module_get_type() {
    return _g_type_module_get_type();
  }

  late final _g_type_module_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_module_get_type');
  late final _g_type_module_get_type =
      _g_type_module_get_typePtr.asFunction<int Function()>();

  int g_type_module_use(
    ffi.Pointer<GTypeModule> module,
  ) {
    return _g_type_module_use(
      module,
    );
  }

  late final _g_type_module_usePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GTypeModule>)>>(
          'g_type_module_use');
  late final _g_type_module_use = _g_type_module_usePtr
      .asFunction<int Function(ffi.Pointer<GTypeModule>)>();

  void g_type_module_unuse(
    ffi.Pointer<GTypeModule> module,
  ) {
    return _g_type_module_unuse(
      module,
    );
  }

  late final _g_type_module_unusePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypeModule>)>>(
          'g_type_module_unuse');
  late final _g_type_module_unuse = _g_type_module_unusePtr
      .asFunction<void Function(ffi.Pointer<GTypeModule>)>();

  void g_type_module_set_name(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_type_module_set_name(
      module,
      name,
    );
  }

  late final _g_type_module_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTypeModule>,
              ffi.Pointer<ffi.Char>)>>('g_type_module_set_name');
  late final _g_type_module_set_name = _g_type_module_set_namePtr.asFunction<
      void Function(ffi.Pointer<GTypeModule>, ffi.Pointer<ffi.Char>)>();

  int g_type_module_register_type(
    ffi.Pointer<GTypeModule> module,
    int parent_type,
    ffi.Pointer<ffi.Char> type_name,
    ffi.Pointer<GTypeInfo> type_info,
    int flags,
  ) {
    return _g_type_module_register_type(
      module,
      parent_type,
      type_name,
      type_info,
      flags,
    );
  }

  late final _g_type_module_register_typePtr = _lookup<
      ffi.NativeFunction<
          GType Function(
              ffi.Pointer<GTypeModule>,
              GType,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GTypeInfo>,
              ffi.Int32)>>('g_type_module_register_type');
  late final _g_type_module_register_type =
      _g_type_module_register_typePtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GTypeInfo>, int)>();

  void g_type_module_add_interface(
    ffi.Pointer<GTypeModule> module,
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> interface_info,
  ) {
    return _g_type_module_add_interface(
      module,
      instance_type,
      interface_type,
      interface_info,
    );
  }

  late final _g_type_module_add_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GTypeModule>, GType, GType,
              ffi.Pointer<GInterfaceInfo>)>>('g_type_module_add_interface');
  late final _g_type_module_add_interface =
      _g_type_module_add_interfacePtr.asFunction<
          void Function(ffi.Pointer<GTypeModule>, int, int,
              ffi.Pointer<GInterfaceInfo>)>();

  int g_type_module_register_enum(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GEnumValue> const_static_values,
  ) {
    return _g_type_module_register_enum(
      module,
      name,
      const_static_values,
    );
  }

  late final _g_type_module_register_enumPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GTypeModule>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GEnumValue>)>>('g_type_module_register_enum');
  late final _g_type_module_register_enum =
      _g_type_module_register_enumPtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GEnumValue>)>();

  int g_type_module_register_flags(
    ffi.Pointer<GTypeModule> module,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GFlagsValue> const_static_values,
  ) {
    return _g_type_module_register_flags(
      module,
      name,
      const_static_values,
    );
  }

  late final _g_type_module_register_flagsPtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GTypeModule>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GFlagsValue>)>>('g_type_module_register_flags');
  late final _g_type_module_register_flags =
      _g_type_module_register_flagsPtr.asFunction<
          int Function(ffi.Pointer<GTypeModule>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GFlagsValue>)>();

  int g_type_plugin_get_type() {
    return _g_type_plugin_get_type();
  }

  late final _g_type_plugin_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_type_plugin_get_type');
  late final _g_type_plugin_get_type =
      _g_type_plugin_get_typePtr.asFunction<int Function()>();

  void g_type_plugin_use(
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_plugin_use(
      plugin,
    );
  }

  late final _g_type_plugin_usePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>(
          'g_type_plugin_use');
  late final _g_type_plugin_use = _g_type_plugin_usePtr
      .asFunction<void Function(ffi.Pointer<GTypePlugin>)>();

  void g_type_plugin_unuse(
    ffi.Pointer<GTypePlugin> plugin,
  ) {
    return _g_type_plugin_unuse(
      plugin,
    );
  }

  late final _g_type_plugin_unusePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GTypePlugin>)>>(
          'g_type_plugin_unuse');
  late final _g_type_plugin_unuse = _g_type_plugin_unusePtr
      .asFunction<void Function(ffi.Pointer<GTypePlugin>)>();

  void g_type_plugin_complete_type_info(
    ffi.Pointer<GTypePlugin> plugin,
    int g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table,
  ) {
    return _g_type_plugin_complete_type_info(
      plugin,
      g_type,
      info,
      value_table,
    );
  }

  late final _g_type_plugin_complete_type_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTypePlugin>, GType,
                  ffi.Pointer<GTypeInfo>, ffi.Pointer<GTypeValueTable>)>>(
      'g_type_plugin_complete_type_info');
  late final _g_type_plugin_complete_type_info =
      _g_type_plugin_complete_type_infoPtr.asFunction<
          void Function(ffi.Pointer<GTypePlugin>, int, ffi.Pointer<GTypeInfo>,
              ffi.Pointer<GTypeValueTable>)>();

  void g_type_plugin_complete_interface_info(
    ffi.Pointer<GTypePlugin> plugin,
    int instance_type,
    int interface_type,
    ffi.Pointer<GInterfaceInfo> info,
  ) {
    return _g_type_plugin_complete_interface_info(
      plugin,
      instance_type,
      interface_type,
      info,
    );
  }

  late final _g_type_plugin_complete_interface_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GTypePlugin>, GType, GType,
                  ffi.Pointer<GInterfaceInfo>)>>(
      'g_type_plugin_complete_interface_info');
  late final _g_type_plugin_complete_interface_info =
      _g_type_plugin_complete_interface_infoPtr.asFunction<
          void Function(ffi.Pointer<GTypePlugin>, int, int,
              ffi.Pointer<GInterfaceInfo>)>();

  int g_value_array_get_type() {
    return _g_value_array_get_type();
  }

  late final _g_value_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_value_array_get_type');
  late final _g_value_array_get_type =
      _g_value_array_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GValue> g_value_array_get_nth(
    ffi.Pointer<GValueArray> value_array,
    int index_,
  ) {
    return _g_value_array_get_nth(
      value_array,
      index_,
    );
  }

  late final _g_value_array_get_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValueArray>, guint)>>('g_value_array_get_nth');
  late final _g_value_array_get_nth = _g_value_array_get_nthPtr.asFunction<
      ffi.Pointer<GValue> Function(ffi.Pointer<GValueArray>, int)>();

  ffi.Pointer<GValueArray> g_value_array_new(
    int n_prealloced,
  ) {
    return _g_value_array_new(
      n_prealloced,
    );
  }

  late final _g_value_array_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GValueArray> Function(guint)>>(
          'g_value_array_new');
  late final _g_value_array_new = _g_value_array_newPtr
      .asFunction<ffi.Pointer<GValueArray> Function(int)>();

  void g_value_array_free(
    ffi.Pointer<GValueArray> value_array,
  ) {
    return _g_value_array_free(
      value_array,
    );
  }

  late final _g_value_array_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValueArray>)>>(
          'g_value_array_free');
  late final _g_value_array_free = _g_value_array_freePtr
      .asFunction<void Function(ffi.Pointer<GValueArray>)>();

  ffi.Pointer<GValueArray> g_value_array_copy(
    ffi.Pointer<GValueArray> value_array,
  ) {
    return _g_value_array_copy(
      value_array,
    );
  }

  late final _g_value_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>)>>('g_value_array_copy');
  late final _g_value_array_copy = _g_value_array_copyPtr.asFunction<
      ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>)>();

  ffi.Pointer<GValueArray> g_value_array_prepend(
    ffi.Pointer<GValueArray> value_array,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_prepend(
      value_array,
      value,
    );
  }

  late final _g_value_array_prependPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              ffi.Pointer<GValue>)>>('g_value_array_prepend');
  late final _g_value_array_prepend = _g_value_array_prependPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_append(
    ffi.Pointer<GValueArray> value_array,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_append(
      value_array,
      value,
    );
  }

  late final _g_value_array_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              ffi.Pointer<GValue>)>>('g_value_array_append');
  late final _g_value_array_append = _g_value_array_appendPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_insert(
    ffi.Pointer<GValueArray> value_array,
    int index_,
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_array_insert(
      value_array,
      index_,
      value,
    );
  }

  late final _g_value_array_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>, guint,
              ffi.Pointer<GValue>)>>('g_value_array_insert');
  late final _g_value_array_insert = _g_value_array_insertPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, int, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValueArray> g_value_array_remove(
    ffi.Pointer<GValueArray> value_array,
    int index_,
  ) {
    return _g_value_array_remove(
      value_array,
      index_,
    );
  }

  late final _g_value_array_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, guint)>>('g_value_array_remove');
  late final _g_value_array_remove = _g_value_array_removePtr.asFunction<
      ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>, int)>();

  ffi.Pointer<GValueArray> g_value_array_sort(
    ffi.Pointer<GValueArray> value_array,
    GCompareFunc compare_func,
  ) {
    return _g_value_array_sort(
      value_array,
      compare_func,
    );
  }

  late final _g_value_array_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, GCompareFunc)>>('g_value_array_sort');
  late final _g_value_array_sort = _g_value_array_sortPtr.asFunction<
      ffi.Pointer<GValueArray> Function(
          ffi.Pointer<GValueArray>, GCompareFunc)>();

  ffi.Pointer<GValueArray> g_value_array_sort_with_data(
    ffi.Pointer<GValueArray> value_array,
    GCompareDataFunc compare_func,
    ffi.Pointer user_data,
  ) {
    return _g_value_array_sort_with_data(
      value_array,
      compare_func,
      user_data,
    );
  }

  late final _g_value_array_sort_with_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValueArray> Function(ffi.Pointer<GValueArray>,
              GCompareDataFunc, ffi.Pointer)>>('g_value_array_sort_with_data');
  late final _g_value_array_sort_with_data =
      _g_value_array_sort_with_dataPtr.asFunction<
          ffi.Pointer<GValueArray> Function(
              ffi.Pointer<GValueArray>, GCompareDataFunc, ffi.Pointer)>();

  void g_value_set_char(
    ffi.Pointer<GValue> value,
    int v_char,
  ) {
    return _g_value_set_char(
      value,
      v_char,
    );
  }

  late final _g_value_set_charPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Char)>>(
      'g_value_set_char');
  late final _g_value_set_char = _g_value_set_charPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_char(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_char(
      value,
    );
  }

  late final _g_value_get_charPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Pointer<GValue>)>>(
          'g_value_get_char');
  late final _g_value_get_char =
      _g_value_get_charPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_schar(
    ffi.Pointer<GValue> value,
    int v_char,
  ) {
    return _g_value_set_schar(
      value,
      v_char,
    );
  }

  late final _g_value_set_scharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint8)>>(
      'g_value_set_schar');
  late final _g_value_set_schar = _g_value_set_scharPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_schar(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_schar(
      value,
    );
  }

  late final _g_value_get_scharPtr =
      _lookup<ffi.NativeFunction<gint8 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_schar');
  late final _g_value_get_schar =
      _g_value_get_scharPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uchar(
    ffi.Pointer<GValue> value,
    int v_uchar,
  ) {
    return _g_value_set_uchar(
      value,
      v_uchar,
    );
  }

  late final _g_value_set_ucharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guchar)>>(
      'g_value_set_uchar');
  late final _g_value_set_uchar = _g_value_set_ucharPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uchar(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uchar(
      value,
    );
  }

  late final _g_value_get_ucharPtr =
      _lookup<ffi.NativeFunction<guchar Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uchar');
  late final _g_value_get_uchar =
      _g_value_get_ucharPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_boolean(
    ffi.Pointer<GValue> value,
    int v_boolean,
  ) {
    return _g_value_set_boolean(
      value,
      v_boolean,
    );
  }

  late final _g_value_set_booleanPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gboolean)>>(
      'g_value_set_boolean');
  late final _g_value_set_boolean = _g_value_set_booleanPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_boolean(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_boolean(
      value,
    );
  }

  late final _g_value_get_booleanPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'g_value_get_boolean');
  late final _g_value_get_boolean =
      _g_value_get_booleanPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_int(
    ffi.Pointer<GValue> value,
    int v_int,
  ) {
    return _g_value_set_int(
      value,
      v_int,
    );
  }

  late final _g_value_set_intPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint)>>(
          'g_value_set_int');
  late final _g_value_set_int =
      _g_value_set_intPtr.asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_int(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_int(
      value,
    );
  }

  late final _g_value_get_intPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_int');
  late final _g_value_get_int =
      _g_value_get_intPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uint(
    ffi.Pointer<GValue> value,
    int v_uint,
  ) {
    return _g_value_set_uint(
      value,
      v_uint,
    );
  }

  late final _g_value_set_uintPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint)>>(
      'g_value_set_uint');
  late final _g_value_set_uint = _g_value_set_uintPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uint(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uint(
      value,
    );
  }

  late final _g_value_get_uintPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uint');
  late final _g_value_get_uint =
      _g_value_get_uintPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_long(
    ffi.Pointer<GValue> value,
    int v_long,
  ) {
    return _g_value_set_long(
      value,
      v_long,
    );
  }

  late final _g_value_set_longPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, glong)>>(
      'g_value_set_long');
  late final _g_value_set_long = _g_value_set_longPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_long(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_long(
      value,
    );
  }

  late final _g_value_get_longPtr =
      _lookup<ffi.NativeFunction<glong Function(ffi.Pointer<GValue>)>>(
          'g_value_get_long');
  late final _g_value_get_long =
      _g_value_get_longPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_ulong(
    ffi.Pointer<GValue> value,
    int v_ulong,
  ) {
    return _g_value_set_ulong(
      value,
      v_ulong,
    );
  }

  late final _g_value_set_ulongPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gulong)>>(
      'g_value_set_ulong');
  late final _g_value_set_ulong = _g_value_set_ulongPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_ulong(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_ulong(
      value,
    );
  }

  late final _g_value_get_ulongPtr =
      _lookup<ffi.NativeFunction<gulong Function(ffi.Pointer<GValue>)>>(
          'g_value_get_ulong');
  late final _g_value_get_ulong =
      _g_value_get_ulongPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_int64(
    ffi.Pointer<GValue> value,
    int v_int64,
  ) {
    return _g_value_set_int64(
      value,
      v_int64,
    );
  }

  late final _g_value_set_int64Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint64)>>(
      'g_value_set_int64');
  late final _g_value_set_int64 = _g_value_set_int64Ptr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_int64(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_int64(
      value,
    );
  }

  late final _g_value_get_int64Ptr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_int64');
  late final _g_value_get_int64 =
      _g_value_get_int64Ptr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_uint64(
    ffi.Pointer<GValue> value,
    int v_uint64,
  ) {
    return _g_value_set_uint64(
      value,
      v_uint64,
    );
  }

  late final _g_value_set_uint64Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint64)>>(
      'g_value_set_uint64');
  late final _g_value_set_uint64 = _g_value_set_uint64Ptr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_uint64(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_uint64(
      value,
    );
  }

  late final _g_value_get_uint64Ptr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GValue>)>>(
          'g_value_get_uint64');
  late final _g_value_get_uint64 =
      _g_value_get_uint64Ptr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_float(
    ffi.Pointer<GValue> value,
    double v_float,
  ) {
    return _g_value_set_float(
      value,
      v_float,
    );
  }

  late final _g_value_set_floatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gfloat)>>(
      'g_value_set_float');
  late final _g_value_set_float = _g_value_set_floatPtr
      .asFunction<void Function(ffi.Pointer<GValue>, double)>();

  double g_value_get_float(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_float(
      value,
    );
  }

  late final _g_value_get_floatPtr =
      _lookup<ffi.NativeFunction<gfloat Function(ffi.Pointer<GValue>)>>(
          'g_value_get_float');
  late final _g_value_get_float =
      _g_value_get_floatPtr.asFunction<double Function(ffi.Pointer<GValue>)>();

  void g_value_set_double(
    ffi.Pointer<GValue> value,
    double v_double,
  ) {
    return _g_value_set_double(
      value,
      v_double,
    );
  }

  late final _g_value_set_doublePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gdouble)>>(
      'g_value_set_double');
  late final _g_value_set_double = _g_value_set_doublePtr
      .asFunction<void Function(ffi.Pointer<GValue>, double)>();

  double g_value_get_double(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_double(
      value,
    );
  }

  late final _g_value_get_doublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GValue>)>>(
          'g_value_get_double');
  late final _g_value_get_double =
      _g_value_get_doublePtr.asFunction<double Function(ffi.Pointer<GValue>)>();

  void g_value_set_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Char> v_string,
  ) {
    return _g_value_set_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('g_value_set_string');
  late final _g_value_set_string = _g_value_set_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  void g_value_set_static_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Char> v_string,
  ) {
    return _g_value_set_static_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_static_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('g_value_set_static_string');
  late final _g_value_set_static_string = _g_value_set_static_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  void g_value_set_interned_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Char> v_string,
  ) {
    return _g_value_set_interned_string(
      value,
      v_string,
    );
  }

  late final _g_value_set_interned_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('g_value_set_interned_string');
  late final _g_value_set_interned_string = _g_value_set_interned_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_value_get_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_string(
      value,
    );
  }

  late final _g_value_get_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>>(
      'g_value_get_string');
  late final _g_value_get_string = _g_value_get_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<ffi.Char> g_value_dup_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_string(
      value,
    );
  }

  late final _g_value_dup_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>>(
      'g_value_dup_string');
  late final _g_value_dup_string = _g_value_dup_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<ffi.Char> g_value_steal_string(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_steal_string(
      value,
    );
  }

  late final _g_value_steal_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>>(
      'g_value_steal_string');
  late final _g_value_steal_string = _g_value_steal_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>();

  void g_value_set_pointer(
    ffi.Pointer<GValue> value,
    ffi.Pointer v_pointer,
  ) {
    return _g_value_set_pointer(
      value,
      v_pointer,
    );
  }

  late final _g_value_set_pointerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer)>>(
      'g_value_set_pointer');
  late final _g_value_set_pointer = _g_value_set_pointerPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer)>();

  ffi.Pointer g_value_get_pointer(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_pointer(
      value,
    );
  }

  late final _g_value_get_pointerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>>(
          'g_value_get_pointer');
  late final _g_value_get_pointer = _g_value_get_pointerPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GValue>)>();

  int g_gtype_get_type() {
    return _g_gtype_get_type();
  }

  late final _g_gtype_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('g_gtype_get_type');
  late final _g_gtype_get_type =
      _g_gtype_get_typePtr.asFunction<int Function()>();

  void g_value_set_gtype(
    ffi.Pointer<GValue> value,
    int v_gtype,
  ) {
    return _g_value_set_gtype(
      value,
      v_gtype,
    );
  }

  late final _g_value_set_gtypePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, GType)>>(
      'g_value_set_gtype');
  late final _g_value_set_gtype = _g_value_set_gtypePtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  int g_value_get_gtype(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_gtype(
      value,
    );
  }

  late final _g_value_get_gtypePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<GValue>)>>(
          'g_value_get_gtype');
  late final _g_value_get_gtype =
      _g_value_get_gtypePtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void g_value_set_variant(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
  ) {
    return _g_value_set_variant(
      value,
      variant,
    );
  }

  late final _g_value_set_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariant>)>>('g_value_set_variant');
  late final _g_value_set_variant = _g_value_set_variantPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GVariant>)>();

  void g_value_take_variant(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GVariant> variant,
  ) {
    return _g_value_take_variant(
      value,
      variant,
    );
  }

  late final _g_value_take_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GVariant>)>>('g_value_take_variant');
  late final _g_value_take_variant = _g_value_take_variantPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GVariant>)>();

  ffi.Pointer<GVariant> g_value_get_variant(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_get_variant(
      value,
    );
  }

  late final _g_value_get_variantPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>>(
      'g_value_get_variant');
  late final _g_value_get_variant = _g_value_get_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GVariant> g_value_dup_variant(
    ffi.Pointer<GValue> value,
  ) {
    return _g_value_dup_variant(
      value,
    );
  }

  late final _g_value_dup_variantPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>>(
      'g_value_dup_variant');
  late final _g_value_dup_variant = _g_value_dup_variantPtr
      .asFunction<ffi.Pointer<GVariant> Function(ffi.Pointer<GValue>)>();

  int g_pointer_type_register_static(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _g_pointer_type_register_static(
      name,
    );
  }

  late final _g_pointer_type_register_staticPtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<ffi.Char>)>>(
          'g_pointer_type_register_static');
  late final _g_pointer_type_register_static =
      _g_pointer_type_register_staticPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> g_strdup_value_contents(
    ffi.Pointer<GValue> value,
  ) {
    return _g_strdup_value_contents(
      value,
    );
  }

  late final _g_strdup_value_contentsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>>(
      'g_strdup_value_contents');
  late final _g_strdup_value_contents = _g_strdup_value_contentsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>();

  void g_value_take_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Char> v_string,
  ) {
    return _g_value_take_string(
      value,
      v_string,
    );
  }

  late final _g_value_take_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('g_value_take_string');
  late final _g_value_take_string = _g_value_take_stringPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  void g_value_set_string_take_ownership(
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Char> v_string,
  ) {
    return _g_value_set_string_take_ownership(
      value,
      v_string,
    );
  }

  late final _g_value_set_string_take_ownershipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('g_value_set_string_take_ownership');
  late final _g_value_set_string_take_ownership =
      _g_value_set_string_take_ownershipPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  int gst_allocator_flags_get_type() {
    return _gst_allocator_flags_get_type();
  }

  late final _gst_allocator_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_allocator_flags_get_type');
  late final _gst_allocator_flags_get_type =
      _gst_allocator_flags_get_typePtr.asFunction<int Function()>();

  int gst_bin_flags_get_type() {
    return _gst_bin_flags_get_type();
  }

  late final _gst_bin_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_bin_flags_get_type');
  late final _gst_bin_flags_get_type =
      _gst_bin_flags_get_typePtr.asFunction<int Function()>();

  int gst_buffer_flags_get_type() {
    return _gst_buffer_flags_get_type();
  }

  late final _gst_buffer_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_buffer_flags_get_type');
  late final _gst_buffer_flags_get_type =
      _gst_buffer_flags_get_typePtr.asFunction<int Function()>();

  int gst_buffer_copy_flags_get_type() {
    return _gst_buffer_copy_flags_get_type();
  }

  late final _gst_buffer_copy_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_buffer_copy_flags_get_type');
  late final _gst_buffer_copy_flags_get_type =
      _gst_buffer_copy_flags_get_typePtr.asFunction<int Function()>();

  int gst_buffer_pool_acquire_flags_get_type() {
    return _gst_buffer_pool_acquire_flags_get_type();
  }

  late final _gst_buffer_pool_acquire_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_buffer_pool_acquire_flags_get_type');
  late final _gst_buffer_pool_acquire_flags_get_type =
      _gst_buffer_pool_acquire_flags_get_typePtr.asFunction<int Function()>();

  int gst_bus_flags_get_type() {
    return _gst_bus_flags_get_type();
  }

  late final _gst_bus_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_bus_flags_get_type');
  late final _gst_bus_flags_get_type =
      _gst_bus_flags_get_typePtr.asFunction<int Function()>();

  int gst_bus_sync_reply_get_type() {
    return _gst_bus_sync_reply_get_type();
  }

  late final _gst_bus_sync_reply_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_bus_sync_reply_get_type');
  late final _gst_bus_sync_reply_get_type =
      _gst_bus_sync_reply_get_typePtr.asFunction<int Function()>();

  int gst_caps_flags_get_type() {
    return _gst_caps_flags_get_type();
  }

  late final _gst_caps_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_caps_flags_get_type');
  late final _gst_caps_flags_get_type =
      _gst_caps_flags_get_typePtr.asFunction<int Function()>();

  int gst_caps_intersect_mode_get_type() {
    return _gst_caps_intersect_mode_get_type();
  }

  late final _gst_caps_intersect_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_caps_intersect_mode_get_type');
  late final _gst_caps_intersect_mode_get_type =
      _gst_caps_intersect_mode_get_typePtr.asFunction<int Function()>();

  int gst_clock_return_get_type() {
    return _gst_clock_return_get_type();
  }

  late final _gst_clock_return_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_clock_return_get_type');
  late final _gst_clock_return_get_type =
      _gst_clock_return_get_typePtr.asFunction<int Function()>();

  int gst_clock_entry_type_get_type() {
    return _gst_clock_entry_type_get_type();
  }

  late final _gst_clock_entry_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_clock_entry_type_get_type');
  late final _gst_clock_entry_type_get_type =
      _gst_clock_entry_type_get_typePtr.asFunction<int Function()>();

  int gst_clock_flags_get_type() {
    return _gst_clock_flags_get_type();
  }

  late final _gst_clock_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_clock_flags_get_type');
  late final _gst_clock_flags_get_type =
      _gst_clock_flags_get_typePtr.asFunction<int Function()>();

  int gst_debug_graph_details_get_type() {
    return _gst_debug_graph_details_get_type();
  }

  late final _gst_debug_graph_details_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_debug_graph_details_get_type');
  late final _gst_debug_graph_details_get_type =
      _gst_debug_graph_details_get_typePtr.asFunction<int Function()>();

  int gst_state_get_type() {
    return _gst_state_get_type();
  }

  late final _gst_state_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_state_get_type');
  late final _gst_state_get_type =
      _gst_state_get_typePtr.asFunction<int Function()>();

  int gst_state_change_return_get_type() {
    return _gst_state_change_return_get_type();
  }

  late final _gst_state_change_return_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_state_change_return_get_type');
  late final _gst_state_change_return_get_type =
      _gst_state_change_return_get_typePtr.asFunction<int Function()>();

  int gst_state_change_get_type() {
    return _gst_state_change_get_type();
  }

  late final _gst_state_change_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_state_change_get_type');
  late final _gst_state_change_get_type =
      _gst_state_change_get_typePtr.asFunction<int Function()>();

  int gst_element_flags_get_type() {
    return _gst_element_flags_get_type();
  }

  late final _gst_element_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_element_flags_get_type');
  late final _gst_element_flags_get_type =
      _gst_element_flags_get_typePtr.asFunction<int Function()>();

  int gst_core_error_get_type() {
    return _gst_core_error_get_type();
  }

  late final _gst_core_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_core_error_get_type');
  late final _gst_core_error_get_type =
      _gst_core_error_get_typePtr.asFunction<int Function()>();

  int gst_library_error_get_type() {
    return _gst_library_error_get_type();
  }

  late final _gst_library_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_library_error_get_type');
  late final _gst_library_error_get_type =
      _gst_library_error_get_typePtr.asFunction<int Function()>();

  int gst_resource_error_get_type() {
    return _gst_resource_error_get_type();
  }

  late final _gst_resource_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_resource_error_get_type');
  late final _gst_resource_error_get_type =
      _gst_resource_error_get_typePtr.asFunction<int Function()>();

  int gst_stream_error_get_type() {
    return _gst_stream_error_get_type();
  }

  late final _gst_stream_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_stream_error_get_type');
  late final _gst_stream_error_get_type =
      _gst_stream_error_get_typePtr.asFunction<int Function()>();

  int gst_event_type_flags_get_type() {
    return _gst_event_type_flags_get_type();
  }

  late final _gst_event_type_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_event_type_flags_get_type');
  late final _gst_event_type_flags_get_type =
      _gst_event_type_flags_get_typePtr.asFunction<int Function()>();

  int gst_event_type_get_type() {
    return _gst_event_type_get_type();
  }

  late final _gst_event_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_event_type_get_type');
  late final _gst_event_type_get_type =
      _gst_event_type_get_typePtr.asFunction<int Function()>();

  int gst_stream_flags_get_type() {
    return _gst_stream_flags_get_type();
  }

  late final _gst_stream_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_stream_flags_get_type');
  late final _gst_stream_flags_get_type =
      _gst_stream_flags_get_typePtr.asFunction<int Function()>();

  int gst_qos_type_get_type() {
    return _gst_qos_type_get_type();
  }

  late final _gst_qos_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_qos_type_get_type');
  late final _gst_qos_type_get_type =
      _gst_qos_type_get_typePtr.asFunction<int Function()>();

  int gst_gap_flags_get_type() {
    return _gst_gap_flags_get_type();
  }

  late final _gst_gap_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_gap_flags_get_type');
  late final _gst_gap_flags_get_type =
      _gst_gap_flags_get_typePtr.asFunction<int Function()>();

  int gst_format_get_type() {
    return _gst_format_get_type();
  }

  late final _gst_format_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_format_get_type');
  late final _gst_format_get_type =
      _gst_format_get_typePtr.asFunction<int Function()>();

  int gst_debug_level_get_type() {
    return _gst_debug_level_get_type();
  }

  late final _gst_debug_level_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_debug_level_get_type');
  late final _gst_debug_level_get_type =
      _gst_debug_level_get_typePtr.asFunction<int Function()>();

  int gst_debug_color_flags_get_type() {
    return _gst_debug_color_flags_get_type();
  }

  late final _gst_debug_color_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_debug_color_flags_get_type');
  late final _gst_debug_color_flags_get_type =
      _gst_debug_color_flags_get_typePtr.asFunction<int Function()>();

  int gst_stack_trace_flags_get_type() {
    return _gst_stack_trace_flags_get_type();
  }

  late final _gst_stack_trace_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_stack_trace_flags_get_type');
  late final _gst_stack_trace_flags_get_type =
      _gst_stack_trace_flags_get_typePtr.asFunction<int Function()>();

  int gst_debug_color_mode_get_type() {
    return _gst_debug_color_mode_get_type();
  }

  late final _gst_debug_color_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_debug_color_mode_get_type');
  late final _gst_debug_color_mode_get_type =
      _gst_debug_color_mode_get_typePtr.asFunction<int Function()>();

  int gst_iterator_result_get_type() {
    return _gst_iterator_result_get_type();
  }

  late final _gst_iterator_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_iterator_result_get_type');
  late final _gst_iterator_result_get_type =
      _gst_iterator_result_get_typePtr.asFunction<int Function()>();

  int gst_iterator_item_get_type() {
    return _gst_iterator_item_get_type();
  }

  late final _gst_iterator_item_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_iterator_item_get_type');
  late final _gst_iterator_item_get_type =
      _gst_iterator_item_get_typePtr.asFunction<int Function()>();

  int gst_memory_flags_get_type() {
    return _gst_memory_flags_get_type();
  }

  late final _gst_memory_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_memory_flags_get_type');
  late final _gst_memory_flags_get_type =
      _gst_memory_flags_get_typePtr.asFunction<int Function()>();

  int gst_map_flags_get_type() {
    return _gst_map_flags_get_type();
  }

  late final _gst_map_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_map_flags_get_type');
  late final _gst_map_flags_get_type =
      _gst_map_flags_get_typePtr.asFunction<int Function()>();

  int gst_message_type_get_type() {
    return _gst_message_type_get_type();
  }

  late final _gst_message_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_message_type_get_type');
  late final _gst_message_type_get_type =
      _gst_message_type_get_typePtr.asFunction<int Function()>();

  int gst_structure_change_type_get_type() {
    return _gst_structure_change_type_get_type();
  }

  late final _gst_structure_change_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_structure_change_type_get_type');
  late final _gst_structure_change_type_get_type =
      _gst_structure_change_type_get_typePtr.asFunction<int Function()>();

  int gst_stream_status_type_get_type() {
    return _gst_stream_status_type_get_type();
  }

  late final _gst_stream_status_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_stream_status_type_get_type');
  late final _gst_stream_status_type_get_type =
      _gst_stream_status_type_get_typePtr.asFunction<int Function()>();

  int gst_progress_type_get_type() {
    return _gst_progress_type_get_type();
  }

  late final _gst_progress_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_progress_type_get_type');
  late final _gst_progress_type_get_type =
      _gst_progress_type_get_typePtr.asFunction<int Function()>();

  int gst_meta_flags_get_type() {
    return _gst_meta_flags_get_type();
  }

  late final _gst_meta_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_meta_flags_get_type');
  late final _gst_meta_flags_get_type =
      _gst_meta_flags_get_typePtr.asFunction<int Function()>();

  int gst_mini_object_flags_get_type() {
    return _gst_mini_object_flags_get_type();
  }

  late final _gst_mini_object_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_mini_object_flags_get_type');
  late final _gst_mini_object_flags_get_type =
      _gst_mini_object_flags_get_typePtr.asFunction<int Function()>();

  int gst_lock_flags_get_type() {
    return _gst_lock_flags_get_type();
  }

  late final _gst_lock_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_lock_flags_get_type');
  late final _gst_lock_flags_get_type =
      _gst_lock_flags_get_typePtr.asFunction<int Function()>();

  int gst_object_flags_get_type() {
    return _gst_object_flags_get_type();
  }

  late final _gst_object_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_object_flags_get_type');
  late final _gst_object_flags_get_type =
      _gst_object_flags_get_typePtr.asFunction<int Function()>();

  int gst_pad_direction_get_type() {
    return _gst_pad_direction_get_type();
  }

  late final _gst_pad_direction_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_direction_get_type');
  late final _gst_pad_direction_get_type =
      _gst_pad_direction_get_typePtr.asFunction<int Function()>();

  int gst_pad_mode_get_type() {
    return _gst_pad_mode_get_type();
  }

  late final _gst_pad_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_pad_mode_get_type');
  late final _gst_pad_mode_get_type =
      _gst_pad_mode_get_typePtr.asFunction<int Function()>();

  int gst_pad_link_return_get_type() {
    return _gst_pad_link_return_get_type();
  }

  late final _gst_pad_link_return_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_link_return_get_type');
  late final _gst_pad_link_return_get_type =
      _gst_pad_link_return_get_typePtr.asFunction<int Function()>();

  int gst_flow_return_get_type() {
    return _gst_flow_return_get_type();
  }

  late final _gst_flow_return_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_flow_return_get_type');
  late final _gst_flow_return_get_type =
      _gst_flow_return_get_typePtr.asFunction<int Function()>();

  int gst_pad_link_check_get_type() {
    return _gst_pad_link_check_get_type();
  }

  late final _gst_pad_link_check_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_link_check_get_type');
  late final _gst_pad_link_check_get_type =
      _gst_pad_link_check_get_typePtr.asFunction<int Function()>();

  int gst_pad_probe_type_get_type() {
    return _gst_pad_probe_type_get_type();
  }

  late final _gst_pad_probe_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_probe_type_get_type');
  late final _gst_pad_probe_type_get_type =
      _gst_pad_probe_type_get_typePtr.asFunction<int Function()>();

  int gst_pad_probe_return_get_type() {
    return _gst_pad_probe_return_get_type();
  }

  late final _gst_pad_probe_return_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_probe_return_get_type');
  late final _gst_pad_probe_return_get_type =
      _gst_pad_probe_return_get_typePtr.asFunction<int Function()>();

  int gst_pad_flags_get_type() {
    return _gst_pad_flags_get_type();
  }

  late final _gst_pad_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_pad_flags_get_type');
  late final _gst_pad_flags_get_type =
      _gst_pad_flags_get_typePtr.asFunction<int Function()>();

  int gst_pad_presence_get_type() {
    return _gst_pad_presence_get_type();
  }

  late final _gst_pad_presence_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_presence_get_type');
  late final _gst_pad_presence_get_type =
      _gst_pad_presence_get_typePtr.asFunction<int Function()>();

  int gst_pad_template_flags_get_type() {
    return _gst_pad_template_flags_get_type();
  }

  late final _gst_pad_template_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_template_flags_get_type');
  late final _gst_pad_template_flags_get_type =
      _gst_pad_template_flags_get_typePtr.asFunction<int Function()>();

  int gst_parse_error_get_type() {
    return _gst_parse_error_get_type();
  }

  late final _gst_parse_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_parse_error_get_type');
  late final _gst_parse_error_get_type =
      _gst_parse_error_get_typePtr.asFunction<int Function()>();

  int gst_parse_flags_get_type() {
    return _gst_parse_flags_get_type();
  }

  late final _gst_parse_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_parse_flags_get_type');
  late final _gst_parse_flags_get_type =
      _gst_parse_flags_get_typePtr.asFunction<int Function()>();

  int gst_pipeline_flags_get_type() {
    return _gst_pipeline_flags_get_type();
  }

  late final _gst_pipeline_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pipeline_flags_get_type');
  late final _gst_pipeline_flags_get_type =
      _gst_pipeline_flags_get_typePtr.asFunction<int Function()>();

  int gst_plugin_error_get_type() {
    return _gst_plugin_error_get_type();
  }

  late final _gst_plugin_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_plugin_error_get_type');
  late final _gst_plugin_error_get_type =
      _gst_plugin_error_get_typePtr.asFunction<int Function()>();

  int gst_plugin_flags_get_type() {
    return _gst_plugin_flags_get_type();
  }

  late final _gst_plugin_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_plugin_flags_get_type');
  late final _gst_plugin_flags_get_type =
      _gst_plugin_flags_get_typePtr.asFunction<int Function()>();

  int gst_plugin_dependency_flags_get_type() {
    return _gst_plugin_dependency_flags_get_type();
  }

  late final _gst_plugin_dependency_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_plugin_dependency_flags_get_type');
  late final _gst_plugin_dependency_flags_get_type =
      _gst_plugin_dependency_flags_get_typePtr.asFunction<int Function()>();

  int gst_rank_get_type() {
    return _gst_rank_get_type();
  }

  late final _gst_rank_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_rank_get_type');
  late final _gst_rank_get_type =
      _gst_rank_get_typePtr.asFunction<int Function()>();

  int gst_promise_result_get_type() {
    return _gst_promise_result_get_type();
  }

  late final _gst_promise_result_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_promise_result_get_type');
  late final _gst_promise_result_get_type =
      _gst_promise_result_get_typePtr.asFunction<int Function()>();

  int gst_query_type_flags_get_type() {
    return _gst_query_type_flags_get_type();
  }

  late final _gst_query_type_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_query_type_flags_get_type');
  late final _gst_query_type_flags_get_type =
      _gst_query_type_flags_get_typePtr.asFunction<int Function()>();

  int gst_query_type_get_type() {
    return _gst_query_type_get_type();
  }

  late final _gst_query_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_query_type_get_type');
  late final _gst_query_type_get_type =
      _gst_query_type_get_typePtr.asFunction<int Function()>();

  int gst_buffering_mode_get_type() {
    return _gst_buffering_mode_get_type();
  }

  late final _gst_buffering_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_buffering_mode_get_type');
  late final _gst_buffering_mode_get_type =
      _gst_buffering_mode_get_typePtr.asFunction<int Function()>();

  int gst_scheduling_flags_get_type() {
    return _gst_scheduling_flags_get_type();
  }

  late final _gst_scheduling_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_scheduling_flags_get_type');
  late final _gst_scheduling_flags_get_type =
      _gst_scheduling_flags_get_typePtr.asFunction<int Function()>();

  int gst_seek_type_get_type() {
    return _gst_seek_type_get_type();
  }

  late final _gst_seek_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_seek_type_get_type');
  late final _gst_seek_type_get_type =
      _gst_seek_type_get_typePtr.asFunction<int Function()>();

  int gst_seek_flags_get_type() {
    return _gst_seek_flags_get_type();
  }

  late final _gst_seek_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_seek_flags_get_type');
  late final _gst_seek_flags_get_type =
      _gst_seek_flags_get_typePtr.asFunction<int Function()>();

  int gst_segment_flags_get_type() {
    return _gst_segment_flags_get_type();
  }

  late final _gst_segment_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_segment_flags_get_type');
  late final _gst_segment_flags_get_type =
      _gst_segment_flags_get_typePtr.asFunction<int Function()>();

  int gst_stream_type_get_type() {
    return _gst_stream_type_get_type();
  }

  late final _gst_stream_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_stream_type_get_type');
  late final _gst_stream_type_get_type =
      _gst_stream_type_get_typePtr.asFunction<int Function()>();

  int gst_serialize_flags_get_type() {
    return _gst_serialize_flags_get_type();
  }

  late final _gst_serialize_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_serialize_flags_get_type');
  late final _gst_serialize_flags_get_type =
      _gst_serialize_flags_get_typePtr.asFunction<int Function()>();

  int gst_clock_type_get_type() {
    return _gst_clock_type_get_type();
  }

  late final _gst_clock_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_clock_type_get_type');
  late final _gst_clock_type_get_type =
      _gst_clock_type_get_typePtr.asFunction<int Function()>();

  int gst_tag_merge_mode_get_type() {
    return _gst_tag_merge_mode_get_type();
  }

  late final _gst_tag_merge_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_tag_merge_mode_get_type');
  late final _gst_tag_merge_mode_get_type =
      _gst_tag_merge_mode_get_typePtr.asFunction<int Function()>();

  int gst_tag_flag_get_type() {
    return _gst_tag_flag_get_type();
  }

  late final _gst_tag_flag_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_tag_flag_get_type');
  late final _gst_tag_flag_get_type =
      _gst_tag_flag_get_typePtr.asFunction<int Function()>();

  int gst_tag_scope_get_type() {
    return _gst_tag_scope_get_type();
  }

  late final _gst_tag_scope_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_tag_scope_get_type');
  late final _gst_tag_scope_get_type =
      _gst_tag_scope_get_typePtr.asFunction<int Function()>();

  int gst_task_state_get_type() {
    return _gst_task_state_get_type();
  }

  late final _gst_task_state_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_task_state_get_type');
  late final _gst_task_state_get_type =
      _gst_task_state_get_typePtr.asFunction<int Function()>();

  int gst_toc_scope_get_type() {
    return _gst_toc_scope_get_type();
  }

  late final _gst_toc_scope_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_toc_scope_get_type');
  late final _gst_toc_scope_get_type =
      _gst_toc_scope_get_typePtr.asFunction<int Function()>();

  int gst_toc_entry_type_get_type() {
    return _gst_toc_entry_type_get_type();
  }

  late final _gst_toc_entry_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_toc_entry_type_get_type');
  late final _gst_toc_entry_type_get_type =
      _gst_toc_entry_type_get_typePtr.asFunction<int Function()>();

  int gst_toc_loop_type_get_type() {
    return _gst_toc_loop_type_get_type();
  }

  late final _gst_toc_loop_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_toc_loop_type_get_type');
  late final _gst_toc_loop_type_get_type =
      _gst_toc_loop_type_get_typePtr.asFunction<int Function()>();

  int gst_tracer_value_scope_get_type() {
    return _gst_tracer_value_scope_get_type();
  }

  late final _gst_tracer_value_scope_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_tracer_value_scope_get_type');
  late final _gst_tracer_value_scope_get_type =
      _gst_tracer_value_scope_get_typePtr.asFunction<int Function()>();

  int gst_tracer_value_flags_get_type() {
    return _gst_tracer_value_flags_get_type();
  }

  late final _gst_tracer_value_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_tracer_value_flags_get_type');
  late final _gst_tracer_value_flags_get_type =
      _gst_tracer_value_flags_get_typePtr.asFunction<int Function()>();

  int gst_type_find_probability_get_type() {
    return _gst_type_find_probability_get_type();
  }

  late final _gst_type_find_probability_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_type_find_probability_get_type');
  late final _gst_type_find_probability_get_type =
      _gst_type_find_probability_get_typePtr.asFunction<int Function()>();

  int gst_uri_error_get_type() {
    return _gst_uri_error_get_type();
  }

  late final _gst_uri_error_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_uri_error_get_type');
  late final _gst_uri_error_get_type =
      _gst_uri_error_get_typePtr.asFunction<int Function()>();

  int gst_uri_type_get_type() {
    return _gst_uri_type_get_type();
  }

  late final _gst_uri_type_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_uri_type_get_type');
  late final _gst_uri_type_get_type =
      _gst_uri_type_get_typePtr.asFunction<int Function()>();

  int gst_search_mode_get_type() {
    return _gst_search_mode_get_type();
  }

  late final _gst_search_mode_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_search_mode_get_type');
  late final _gst_search_mode_get_type =
      _gst_search_mode_get_typePtr.asFunction<int Function()>();

  int gst_plugin_api_flags_get_type() {
    return _gst_plugin_api_flags_get_type();
  }

  late final _gst_plugin_api_flags_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_plugin_api_flags_get_type');
  late final _gst_plugin_api_flags_get_type =
      _gst_plugin_api_flags_get_typePtr.asFunction<int Function()>();

  int gst_atomic_queue_get_type() {
    return _gst_atomic_queue_get_type();
  }

  late final _gst_atomic_queue_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_atomic_queue_get_type');
  late final _gst_atomic_queue_get_type =
      _gst_atomic_queue_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstAtomicQueue> gst_atomic_queue_new(
    int initial_size,
  ) {
    return _gst_atomic_queue_new(
      initial_size,
    );
  }

  late final _gst_atomic_queue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstAtomicQueue> Function(guint)>>(
          'gst_atomic_queue_new');
  late final _gst_atomic_queue_new = _gst_atomic_queue_newPtr
      .asFunction<ffi.Pointer<GstAtomicQueue> Function(int)>();

  void gst_atomic_queue_ref(
    ffi.Pointer<GstAtomicQueue> queue,
  ) {
    return _gst_atomic_queue_ref(
      queue,
    );
  }

  late final _gst_atomic_queue_refPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstAtomicQueue>)>>(
      'gst_atomic_queue_ref');
  late final _gst_atomic_queue_ref = _gst_atomic_queue_refPtr
      .asFunction<void Function(ffi.Pointer<GstAtomicQueue>)>();

  void gst_atomic_queue_unref(
    ffi.Pointer<GstAtomicQueue> queue,
  ) {
    return _gst_atomic_queue_unref(
      queue,
    );
  }

  late final _gst_atomic_queue_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstAtomicQueue>)>>(
      'gst_atomic_queue_unref');
  late final _gst_atomic_queue_unref = _gst_atomic_queue_unrefPtr
      .asFunction<void Function(ffi.Pointer<GstAtomicQueue>)>();

  void gst_atomic_queue_push(
    ffi.Pointer<GstAtomicQueue> queue,
    ffi.Pointer data,
  ) {
    return _gst_atomic_queue_push(
      queue,
      data,
    );
  }

  late final _gst_atomic_queue_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstAtomicQueue>,
              ffi.Pointer)>>('gst_atomic_queue_push');
  late final _gst_atomic_queue_push = _gst_atomic_queue_pushPtr
      .asFunction<void Function(ffi.Pointer<GstAtomicQueue>, ffi.Pointer)>();

  ffi.Pointer gst_atomic_queue_pop(
    ffi.Pointer<GstAtomicQueue> queue,
  ) {
    return _gst_atomic_queue_pop(
      queue,
    );
  }

  late final _gst_atomic_queue_popPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GstAtomicQueue>)>>(
      'gst_atomic_queue_pop');
  late final _gst_atomic_queue_pop = _gst_atomic_queue_popPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GstAtomicQueue>)>();

  ffi.Pointer gst_atomic_queue_peek(
    ffi.Pointer<GstAtomicQueue> queue,
  ) {
    return _gst_atomic_queue_peek(
      queue,
    );
  }

  late final _gst_atomic_queue_peekPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer<GstAtomicQueue>)>>(
      'gst_atomic_queue_peek');
  late final _gst_atomic_queue_peek = _gst_atomic_queue_peekPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GstAtomicQueue>)>();

  int gst_atomic_queue_length(
    ffi.Pointer<GstAtomicQueue> queue,
  ) {
    return _gst_atomic_queue_length(
      queue,
    );
  }

  late final _gst_atomic_queue_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstAtomicQueue>)>>(
          'gst_atomic_queue_length');
  late final _gst_atomic_queue_length = _gst_atomic_queue_lengthPtr
      .asFunction<int Function(ffi.Pointer<GstAtomicQueue>)>();

  int gst_object_get_type() {
    return _gst_object_get_type();
  }

  late final _gst_object_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_object_get_type');
  late final _gst_object_get_type =
      _gst_object_get_typePtr.asFunction<int Function()>();

  int gst_object_set_name(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_object_set_name(
      object,
      name,
    );
  }

  late final _gst_object_set_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>)>>('gst_object_set_name');
  late final _gst_object_set_name = _gst_object_set_namePtr.asFunction<
      int Function(ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_object_get_name(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_get_name(
      object,
    );
  }

  late final _gst_object_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstObject>)>>('gst_object_get_name');
  late final _gst_object_get_name = _gst_object_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstObject>)>();

  int gst_object_set_parent(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<GstObject> parent,
  ) {
    return _gst_object_set_parent(
      object,
      parent,
    );
  }

  late final _gst_object_set_parentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstObject>)>>('gst_object_set_parent');
  late final _gst_object_set_parent = _gst_object_set_parentPtr.asFunction<
      int Function(ffi.Pointer<GstObject>, ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstObject> gst_object_get_parent(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_get_parent(
      object,
    );
  }

  late final _gst_object_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstObject> Function(
              ffi.Pointer<GstObject>)>>('gst_object_get_parent');
  late final _gst_object_get_parent = _gst_object_get_parentPtr
      .asFunction<ffi.Pointer<GstObject> Function(ffi.Pointer<GstObject>)>();

  void gst_object_unparent(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_unparent(
      object,
    );
  }

  late final _gst_object_unparentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstObject>)>>(
          'gst_object_unparent');
  late final _gst_object_unparent = _gst_object_unparentPtr
      .asFunction<void Function(ffi.Pointer<GstObject>)>();

  int gst_object_has_as_parent(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<GstObject> parent,
  ) {
    return _gst_object_has_as_parent(
      object,
      parent,
    );
  }

  late final _gst_object_has_as_parentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstObject>)>>('gst_object_has_as_parent');
  late final _gst_object_has_as_parent =
      _gst_object_has_as_parentPtr.asFunction<
          int Function(ffi.Pointer<GstObject>, ffi.Pointer<GstObject>)>();

  int gst_object_has_as_ancestor(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<GstObject> ancestor,
  ) {
    return _gst_object_has_as_ancestor(
      object,
      ancestor,
    );
  }

  late final _gst_object_has_as_ancestorPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstObject>)>>('gst_object_has_as_ancestor');
  late final _gst_object_has_as_ancestor =
      _gst_object_has_as_ancestorPtr.asFunction<
          int Function(ffi.Pointer<GstObject>, ffi.Pointer<GstObject>)>();

  int gst_object_has_ancestor(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<GstObject> ancestor,
  ) {
    return _gst_object_has_ancestor(
      object,
      ancestor,
    );
  }

  late final _gst_object_has_ancestorPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstObject>)>>('gst_object_has_ancestor');
  late final _gst_object_has_ancestor = _gst_object_has_ancestorPtr.asFunction<
      int Function(ffi.Pointer<GstObject>, ffi.Pointer<GstObject>)>();

  void gst_object_default_deep_notify(
    ffi.Pointer<GObject> object,
    ffi.Pointer<GstObject> orig,
    ffi.Pointer<GParamSpec> pspec,
    ffi.Pointer<ffi.Pointer<ffi.Char>> excluded_props,
  ) {
    return _gst_object_default_deep_notify(
      object,
      orig,
      pspec,
      excluded_props,
    );
  }

  late final _gst_object_default_deep_notifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GObject>,
                  ffi.Pointer<GstObject>,
                  ffi.Pointer<GParamSpec>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_object_default_deep_notify');
  late final _gst_object_default_deep_notify =
      _gst_object_default_deep_notifyPtr.asFunction<
          void Function(ffi.Pointer<GObject>, ffi.Pointer<GstObject>,
              ffi.Pointer<GParamSpec>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer gst_object_ref(
    ffi.Pointer object,
  ) {
    return _gst_object_ref(
      object,
    );
  }

  late final _gst_object_refPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'gst_object_ref');
  late final _gst_object_ref =
      _gst_object_refPtr.asFunction<ffi.Pointer Function(ffi.Pointer)>();

  void gst_object_unref(
    ffi.Pointer object,
  ) {
    return _gst_object_unref(
      object,
    );
  }

  late final _gst_object_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer)>>(
          'gst_object_unref');
  late final _gst_object_unref =
      _gst_object_unrefPtr.asFunction<void Function(ffi.Pointer)>();

  void gst_clear_object(
    ffi.Pointer<ffi.Pointer<GstObject>> object_ptr,
  ) {
    return _gst_clear_object(
      object_ptr,
    );
  }

  late final _gst_clear_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GstObject>>)>>('gst_clear_object');
  late final _gst_clear_object = _gst_clear_objectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GstObject>>)>();

  ffi.Pointer gst_object_ref_sink(
    ffi.Pointer object,
  ) {
    return _gst_object_ref_sink(
      object,
    );
  }

  late final _gst_object_ref_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer)>>(
          'gst_object_ref_sink');
  late final _gst_object_ref_sink =
      _gst_object_ref_sinkPtr.asFunction<ffi.Pointer Function(ffi.Pointer)>();

  int gst_object_replace(
    ffi.Pointer<ffi.Pointer<GstObject>> oldobj,
    ffi.Pointer<GstObject> newobj,
  ) {
    return _gst_object_replace(
      oldobj,
      newobj,
    );
  }

  late final _gst_object_replacePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<GstObject>>,
              ffi.Pointer<GstObject>)>>('gst_object_replace');
  late final _gst_object_replace = _gst_object_replacePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<GstObject>>, ffi.Pointer<GstObject>)>();

  ffi.Pointer<ffi.Char> gst_object_get_path_string(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_get_path_string(
      object,
    );
  }

  late final _gst_object_get_path_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstObject>)>>('gst_object_get_path_string');
  late final _gst_object_get_path_string = _gst_object_get_path_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstObject>)>();

  int gst_object_check_uniqueness(
    ffi.Pointer<GList> list,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_object_check_uniqueness(
      list,
      name,
    );
  }

  late final _gst_object_check_uniquenessPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GList>,
              ffi.Pointer<ffi.Char>)>>('gst_object_check_uniqueness');
  late final _gst_object_check_uniqueness = _gst_object_check_uniquenessPtr
      .asFunction<int Function(ffi.Pointer<GList>, ffi.Pointer<ffi.Char>)>();

  int gst_clock_get_type() {
    return _gst_clock_get_type();
  }

  late final _gst_clock_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_clock_get_type');
  late final _gst_clock_get_type =
      _gst_clock_get_typePtr.asFunction<int Function()>();

  int gst_clock_set_resolution(
    ffi.Pointer<GstClock> clock,
    int resolution,
  ) {
    return _gst_clock_set_resolution(
      clock,
      resolution,
    );
  }

  late final _gst_clock_set_resolutionPtr = _lookup<
      ffi.NativeFunction<
          GstClockTime Function(ffi.Pointer<GstClock>,
              GstClockTime)>>('gst_clock_set_resolution');
  late final _gst_clock_set_resolution = _gst_clock_set_resolutionPtr
      .asFunction<int Function(ffi.Pointer<GstClock>, int)>();

  int gst_clock_get_resolution(
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_get_resolution(
      clock,
    );
  }

  late final _gst_clock_get_resolutionPtr =
      _lookup<ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstClock>)>>(
          'gst_clock_get_resolution');
  late final _gst_clock_get_resolution = _gst_clock_get_resolutionPtr
      .asFunction<int Function(ffi.Pointer<GstClock>)>();

  int gst_clock_get_time(
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_get_time(
      clock,
    );
  }

  late final _gst_clock_get_timePtr =
      _lookup<ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstClock>)>>(
          'gst_clock_get_time');
  late final _gst_clock_get_time =
      _gst_clock_get_timePtr.asFunction<int Function(ffi.Pointer<GstClock>)>();

  void gst_clock_set_calibration(
    ffi.Pointer<GstClock> clock,
    int internal,
    int external1,
    int rate_num,
    int rate_denom,
  ) {
    return _gst_clock_set_calibration(
      clock,
      internal,
      external1,
      rate_num,
      rate_denom,
    );
  }

  late final _gst_clock_set_calibrationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstClock>, GstClockTime, GstClockTime,
              GstClockTime, GstClockTime)>>('gst_clock_set_calibration');
  late final _gst_clock_set_calibration = _gst_clock_set_calibrationPtr
      .asFunction<void Function(ffi.Pointer<GstClock>, int, int, int, int)>();

  void gst_clock_get_calibration(
    ffi.Pointer<GstClock> clock,
    ffi.Pointer<GstClockTime> internal,
    ffi.Pointer<GstClockTime> external1,
    ffi.Pointer<GstClockTime> rate_num,
    ffi.Pointer<GstClockTime> rate_denom,
  ) {
    return _gst_clock_get_calibration(
      clock,
      internal,
      external1,
      rate_num,
      rate_denom,
    );
  }

  late final _gst_clock_get_calibrationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstClock>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>)>>('gst_clock_get_calibration');
  late final _gst_clock_get_calibration =
      _gst_clock_get_calibrationPtr.asFunction<
          void Function(
              ffi.Pointer<GstClock>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>)>();

  int gst_clock_set_master(
    ffi.Pointer<GstClock> clock,
    ffi.Pointer<GstClock> master,
  ) {
    return _gst_clock_set_master(
      clock,
      master,
    );
  }

  late final _gst_clock_set_masterPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstClock>,
              ffi.Pointer<GstClock>)>>('gst_clock_set_master');
  late final _gst_clock_set_master = _gst_clock_set_masterPtr
      .asFunction<int Function(ffi.Pointer<GstClock>, ffi.Pointer<GstClock>)>();

  ffi.Pointer<GstClock> gst_clock_get_master(
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_get_master(
      clock,
    );
  }

  late final _gst_clock_get_masterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstClock> Function(
              ffi.Pointer<GstClock>)>>('gst_clock_get_master');
  late final _gst_clock_get_master = _gst_clock_get_masterPtr
      .asFunction<ffi.Pointer<GstClock> Function(ffi.Pointer<GstClock>)>();

  void gst_clock_set_timeout(
    ffi.Pointer<GstClock> clock,
    int timeout,
  ) {
    return _gst_clock_set_timeout(
      clock,
      timeout,
    );
  }

  late final _gst_clock_set_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstClock>, GstClockTime)>>('gst_clock_set_timeout');
  late final _gst_clock_set_timeout = _gst_clock_set_timeoutPtr
      .asFunction<void Function(ffi.Pointer<GstClock>, int)>();

  int gst_clock_get_timeout(
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_get_timeout(
      clock,
    );
  }

  late final _gst_clock_get_timeoutPtr =
      _lookup<ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstClock>)>>(
          'gst_clock_get_timeout');
  late final _gst_clock_get_timeout = _gst_clock_get_timeoutPtr
      .asFunction<int Function(ffi.Pointer<GstClock>)>();

  int gst_clock_add_observation(
    ffi.Pointer<GstClock> clock,
    int slave,
    int master,
    ffi.Pointer<gdouble> r_squared,
  ) {
    return _gst_clock_add_observation(
      clock,
      slave,
      master,
      r_squared,
    );
  }

  late final _gst_clock_add_observationPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstClock>, GstClockTime, GstClockTime,
              ffi.Pointer<gdouble>)>>('gst_clock_add_observation');
  late final _gst_clock_add_observation =
      _gst_clock_add_observationPtr.asFunction<
          int Function(
              ffi.Pointer<GstClock>, int, int, ffi.Pointer<gdouble>)>();

  int gst_clock_add_observation_unapplied(
    ffi.Pointer<GstClock> clock,
    int slave,
    int master,
    ffi.Pointer<gdouble> r_squared,
    ffi.Pointer<GstClockTime> internal,
    ffi.Pointer<GstClockTime> external1,
    ffi.Pointer<GstClockTime> rate_num,
    ffi.Pointer<GstClockTime> rate_denom,
  ) {
    return _gst_clock_add_observation_unapplied(
      clock,
      slave,
      master,
      r_squared,
      internal,
      external1,
      rate_num,
      rate_denom,
    );
  }

  late final _gst_clock_add_observation_unappliedPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstClock>,
                  GstClockTime,
                  GstClockTime,
                  ffi.Pointer<gdouble>,
                  ffi.Pointer<GstClockTime>,
                  ffi.Pointer<GstClockTime>,
                  ffi.Pointer<GstClockTime>,
                  ffi.Pointer<GstClockTime>)>>(
      'gst_clock_add_observation_unapplied');
  late final _gst_clock_add_observation_unapplied =
      _gst_clock_add_observation_unappliedPtr.asFunction<
          int Function(
              ffi.Pointer<GstClock>,
              int,
              int,
              ffi.Pointer<gdouble>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>)>();

  int gst_clock_get_internal_time(
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_get_internal_time(
      clock,
    );
  }

  late final _gst_clock_get_internal_timePtr =
      _lookup<ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstClock>)>>(
          'gst_clock_get_internal_time');
  late final _gst_clock_get_internal_time = _gst_clock_get_internal_timePtr
      .asFunction<int Function(ffi.Pointer<GstClock>)>();

  int gst_clock_adjust_unlocked(
    ffi.Pointer<GstClock> clock,
    int internal,
  ) {
    return _gst_clock_adjust_unlocked(
      clock,
      internal,
    );
  }

  late final _gst_clock_adjust_unlockedPtr = _lookup<
      ffi.NativeFunction<
          GstClockTime Function(ffi.Pointer<GstClock>,
              GstClockTime)>>('gst_clock_adjust_unlocked');
  late final _gst_clock_adjust_unlocked = _gst_clock_adjust_unlockedPtr
      .asFunction<int Function(ffi.Pointer<GstClock>, int)>();

  int gst_clock_adjust_with_calibration(
    ffi.Pointer<GstClock> clock,
    int internal_target,
    int cinternal,
    int cexternal,
    int cnum,
    int cdenom,
  ) {
    return _gst_clock_adjust_with_calibration(
      clock,
      internal_target,
      cinternal,
      cexternal,
      cnum,
      cdenom,
    );
  }

  late final _gst_clock_adjust_with_calibrationPtr = _lookup<
      ffi.NativeFunction<
          GstClockTime Function(
              ffi.Pointer<GstClock>,
              GstClockTime,
              GstClockTime,
              GstClockTime,
              GstClockTime,
              GstClockTime)>>('gst_clock_adjust_with_calibration');
  late final _gst_clock_adjust_with_calibration =
      _gst_clock_adjust_with_calibrationPtr.asFunction<
          int Function(ffi.Pointer<GstClock>, int, int, int, int, int)>();

  int gst_clock_unadjust_with_calibration(
    ffi.Pointer<GstClock> clock,
    int external_target,
    int cinternal,
    int cexternal,
    int cnum,
    int cdenom,
  ) {
    return _gst_clock_unadjust_with_calibration(
      clock,
      external_target,
      cinternal,
      cexternal,
      cnum,
      cdenom,
    );
  }

  late final _gst_clock_unadjust_with_calibrationPtr = _lookup<
      ffi.NativeFunction<
          GstClockTime Function(
              ffi.Pointer<GstClock>,
              GstClockTime,
              GstClockTime,
              GstClockTime,
              GstClockTime,
              GstClockTime)>>('gst_clock_unadjust_with_calibration');
  late final _gst_clock_unadjust_with_calibration =
      _gst_clock_unadjust_with_calibrationPtr.asFunction<
          int Function(ffi.Pointer<GstClock>, int, int, int, int, int)>();

  int gst_clock_unadjust_unlocked(
    ffi.Pointer<GstClock> clock,
    int external1,
  ) {
    return _gst_clock_unadjust_unlocked(
      clock,
      external1,
    );
  }

  late final _gst_clock_unadjust_unlockedPtr = _lookup<
      ffi.NativeFunction<
          GstClockTime Function(ffi.Pointer<GstClock>,
              GstClockTime)>>('gst_clock_unadjust_unlocked');
  late final _gst_clock_unadjust_unlocked = _gst_clock_unadjust_unlockedPtr
      .asFunction<int Function(ffi.Pointer<GstClock>, int)>();

  int gst_clock_wait_for_sync(
    ffi.Pointer<GstClock> clock,
    int timeout,
  ) {
    return _gst_clock_wait_for_sync(
      clock,
      timeout,
    );
  }

  late final _gst_clock_wait_for_syncPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstClock>, GstClockTime)>>('gst_clock_wait_for_sync');
  late final _gst_clock_wait_for_sync = _gst_clock_wait_for_syncPtr
      .asFunction<int Function(ffi.Pointer<GstClock>, int)>();

  int gst_clock_is_synced(
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_is_synced(
      clock,
    );
  }

  late final _gst_clock_is_syncedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstClock>)>>(
          'gst_clock_is_synced');
  late final _gst_clock_is_synced =
      _gst_clock_is_syncedPtr.asFunction<int Function(ffi.Pointer<GstClock>)>();

  void gst_clock_set_synced(
    ffi.Pointer<GstClock> clock,
    int synced,
  ) {
    return _gst_clock_set_synced(
      clock,
      synced,
    );
  }

  late final _gst_clock_set_syncedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstClock>, gboolean)>>(
      'gst_clock_set_synced');
  late final _gst_clock_set_synced = _gst_clock_set_syncedPtr
      .asFunction<void Function(ffi.Pointer<GstClock>, int)>();

  GstClockID gst_clock_new_single_shot_id(
    ffi.Pointer<GstClock> clock,
    int time,
  ) {
    return _gst_clock_new_single_shot_id(
      clock,
      time,
    );
  }

  late final _gst_clock_new_single_shot_idPtr = _lookup<
      ffi.NativeFunction<
          GstClockID Function(ffi.Pointer<GstClock>,
              GstClockTime)>>('gst_clock_new_single_shot_id');
  late final _gst_clock_new_single_shot_id = _gst_clock_new_single_shot_idPtr
      .asFunction<GstClockID Function(ffi.Pointer<GstClock>, int)>();

  GstClockID gst_clock_new_periodic_id(
    ffi.Pointer<GstClock> clock,
    int start_time,
    int interval,
  ) {
    return _gst_clock_new_periodic_id(
      clock,
      start_time,
      interval,
    );
  }

  late final _gst_clock_new_periodic_idPtr = _lookup<
      ffi.NativeFunction<
          GstClockID Function(ffi.Pointer<GstClock>, GstClockTime,
              GstClockTime)>>('gst_clock_new_periodic_id');
  late final _gst_clock_new_periodic_id = _gst_clock_new_periodic_idPtr
      .asFunction<GstClockID Function(ffi.Pointer<GstClock>, int, int)>();

  GstClockID gst_clock_id_ref(
    GstClockID id,
  ) {
    return _gst_clock_id_ref(
      id,
    );
  }

  late final _gst_clock_id_refPtr =
      _lookup<ffi.NativeFunction<GstClockID Function(GstClockID)>>(
          'gst_clock_id_ref');
  late final _gst_clock_id_ref =
      _gst_clock_id_refPtr.asFunction<GstClockID Function(GstClockID)>();

  void gst_clock_id_unref(
    GstClockID id,
  ) {
    return _gst_clock_id_unref(
      id,
    );
  }

  late final _gst_clock_id_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GstClockID)>>(
          'gst_clock_id_unref');
  late final _gst_clock_id_unref =
      _gst_clock_id_unrefPtr.asFunction<void Function(GstClockID)>();

  int gst_clock_id_compare_func(
    gconstpointer id1,
    gconstpointer id2,
  ) {
    return _gst_clock_id_compare_func(
      id1,
      id2,
    );
  }

  late final _gst_clock_id_compare_funcPtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'gst_clock_id_compare_func');
  late final _gst_clock_id_compare_func = _gst_clock_id_compare_funcPtr
      .asFunction<int Function(gconstpointer, gconstpointer)>();

  ffi.Pointer<GstClock> gst_clock_id_get_clock(
    GstClockID id,
  ) {
    return _gst_clock_id_get_clock(
      id,
    );
  }

  late final _gst_clock_id_get_clockPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstClock> Function(GstClockID)>>(
          'gst_clock_id_get_clock');
  late final _gst_clock_id_get_clock = _gst_clock_id_get_clockPtr
      .asFunction<ffi.Pointer<GstClock> Function(GstClockID)>();

  int gst_clock_id_uses_clock(
    GstClockID id,
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_clock_id_uses_clock(
      id,
      clock,
    );
  }

  late final _gst_clock_id_uses_clockPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              GstClockID, ffi.Pointer<GstClock>)>>('gst_clock_id_uses_clock');
  late final _gst_clock_id_uses_clock = _gst_clock_id_uses_clockPtr
      .asFunction<int Function(GstClockID, ffi.Pointer<GstClock>)>();

  int gst_clock_id_get_time(
    GstClockID id,
  ) {
    return _gst_clock_id_get_time(
      id,
    );
  }

  late final _gst_clock_id_get_timePtr =
      _lookup<ffi.NativeFunction<GstClockTime Function(GstClockID)>>(
          'gst_clock_id_get_time');
  late final _gst_clock_id_get_time =
      _gst_clock_id_get_timePtr.asFunction<int Function(GstClockID)>();

  int gst_clock_id_wait(
    GstClockID id,
    ffi.Pointer<GstClockTimeDiff> jitter,
  ) {
    return _gst_clock_id_wait(
      id,
      jitter,
    );
  }

  late final _gst_clock_id_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              GstClockID, ffi.Pointer<GstClockTimeDiff>)>>('gst_clock_id_wait');
  late final _gst_clock_id_wait = _gst_clock_id_waitPtr
      .asFunction<int Function(GstClockID, ffi.Pointer<GstClockTimeDiff>)>();

  int gst_clock_id_wait_async(
    GstClockID id,
    GstClockCallback func,
    ffi.Pointer user_data,
    GDestroyNotify destroy_data,
  ) {
    return _gst_clock_id_wait_async(
      id,
      func,
      user_data,
      destroy_data,
    );
  }

  late final _gst_clock_id_wait_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(GstClockID, GstClockCallback, ffi.Pointer,
              GDestroyNotify)>>('gst_clock_id_wait_async');
  late final _gst_clock_id_wait_async = _gst_clock_id_wait_asyncPtr.asFunction<
      int Function(
          GstClockID, GstClockCallback, ffi.Pointer, GDestroyNotify)>();

  void gst_clock_id_unschedule(
    GstClockID id,
  ) {
    return _gst_clock_id_unschedule(
      id,
    );
  }

  late final _gst_clock_id_unschedulePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GstClockID)>>(
          'gst_clock_id_unschedule');
  late final _gst_clock_id_unschedule =
      _gst_clock_id_unschedulePtr.asFunction<void Function(GstClockID)>();

  int gst_clock_single_shot_id_reinit(
    ffi.Pointer<GstClock> clock,
    GstClockID id,
    int time,
  ) {
    return _gst_clock_single_shot_id_reinit(
      clock,
      id,
      time,
    );
  }

  late final _gst_clock_single_shot_id_reinitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstClock>, GstClockID,
              GstClockTime)>>('gst_clock_single_shot_id_reinit');
  late final _gst_clock_single_shot_id_reinit =
      _gst_clock_single_shot_id_reinitPtr
          .asFunction<int Function(ffi.Pointer<GstClock>, GstClockID, int)>();

  int gst_clock_periodic_id_reinit(
    ffi.Pointer<GstClock> clock,
    GstClockID id,
    int start_time,
    int interval,
  ) {
    return _gst_clock_periodic_id_reinit(
      clock,
      id,
      start_time,
      interval,
    );
  }

  late final _gst_clock_periodic_id_reinitPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstClock>, GstClockID, GstClockTime,
              GstClockTime)>>('gst_clock_periodic_id_reinit');
  late final _gst_clock_periodic_id_reinit = _gst_clock_periodic_id_reinitPtr
      .asFunction<int Function(ffi.Pointer<GstClock>, GstClockID, int, int)>();

  int gst_control_source_get_type() {
    return _gst_control_source_get_type();
  }

  late final _gst_control_source_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_control_source_get_type');
  late final _gst_control_source_get_type =
      _gst_control_source_get_typePtr.asFunction<int Function()>();

  int gst_control_source_get_value(
    ffi.Pointer<GstControlSource> self,
    int timestamp,
    ffi.Pointer<gdouble> value,
  ) {
    return _gst_control_source_get_value(
      self,
      timestamp,
      value,
    );
  }

  late final _gst_control_source_get_valuePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstControlSource>, GstClockTime,
              ffi.Pointer<gdouble>)>>('gst_control_source_get_value');
  late final _gst_control_source_get_value =
      _gst_control_source_get_valuePtr.asFunction<
          int Function(
              ffi.Pointer<GstControlSource>, int, ffi.Pointer<gdouble>)>();

  int gst_control_source_get_value_array(
    ffi.Pointer<GstControlSource> self,
    int timestamp,
    int interval,
    int n_values,
    ffi.Pointer<gdouble> values,
  ) {
    return _gst_control_source_get_value_array(
      self,
      timestamp,
      interval,
      n_values,
      values,
    );
  }

  late final _gst_control_source_get_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlSource>,
              GstClockTime,
              GstClockTime,
              guint,
              ffi.Pointer<gdouble>)>>('gst_control_source_get_value_array');
  late final _gst_control_source_get_value_array =
      _gst_control_source_get_value_arrayPtr.asFunction<
          int Function(ffi.Pointer<GstControlSource>, int, int, int,
              ffi.Pointer<gdouble>)>();

  int gst_control_binding_get_type() {
    return _gst_control_binding_get_type();
  }

  late final _gst_control_binding_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_control_binding_get_type');
  late final _gst_control_binding_get_type =
      _gst_control_binding_get_typePtr.asFunction<int Function()>();

  int gst_control_binding_sync_values(
    ffi.Pointer<GstControlBinding> binding,
    ffi.Pointer<GstObject> object,
    int timestamp,
    int last_sync,
  ) {
    return _gst_control_binding_sync_values(
      binding,
      object,
      timestamp,
      last_sync,
    );
  }

  late final _gst_control_binding_sync_valuesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlBinding>,
              ffi.Pointer<GstObject>,
              GstClockTime,
              GstClockTime)>>('gst_control_binding_sync_values');
  late final _gst_control_binding_sync_values =
      _gst_control_binding_sync_valuesPtr.asFunction<
          int Function(ffi.Pointer<GstControlBinding>, ffi.Pointer<GstObject>,
              int, int)>();

  ffi.Pointer<GValue> gst_control_binding_get_value(
    ffi.Pointer<GstControlBinding> binding,
    int timestamp,
  ) {
    return _gst_control_binding_get_value(
      binding,
      timestamp,
    );
  }

  late final _gst_control_binding_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstControlBinding>,
              GstClockTime)>>('gst_control_binding_get_value');
  late final _gst_control_binding_get_value =
      _gst_control_binding_get_valuePtr.asFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstControlBinding>, int)>();

  int gst_control_binding_get_value_array(
    ffi.Pointer<GstControlBinding> binding,
    int timestamp,
    int interval,
    int n_values,
    ffi.Pointer values,
  ) {
    return _gst_control_binding_get_value_array(
      binding,
      timestamp,
      interval,
      n_values,
      values,
    );
  }

  late final _gst_control_binding_get_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlBinding>,
              GstClockTime,
              GstClockTime,
              guint,
              ffi.Pointer)>>('gst_control_binding_get_value_array');
  late final _gst_control_binding_get_value_array =
      _gst_control_binding_get_value_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<GstControlBinding>, int, int, int, ffi.Pointer)>();

  int gst_control_binding_get_g_value_array(
    ffi.Pointer<GstControlBinding> binding,
    int timestamp,
    int interval,
    int n_values,
    ffi.Pointer<GValue> values,
  ) {
    return _gst_control_binding_get_g_value_array(
      binding,
      timestamp,
      interval,
      n_values,
      values,
    );
  }

  late final _gst_control_binding_get_g_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlBinding>,
              GstClockTime,
              GstClockTime,
              guint,
              ffi.Pointer<GValue>)>>('gst_control_binding_get_g_value_array');
  late final _gst_control_binding_get_g_value_array =
      _gst_control_binding_get_g_value_arrayPtr.asFunction<
          int Function(ffi.Pointer<GstControlBinding>, int, int, int,
              ffi.Pointer<GValue>)>();

  void gst_control_binding_set_disabled(
    ffi.Pointer<GstControlBinding> binding,
    int disabled,
  ) {
    return _gst_control_binding_set_disabled(
      binding,
      disabled,
    );
  }

  late final _gst_control_binding_set_disabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstControlBinding>,
              gboolean)>>('gst_control_binding_set_disabled');
  late final _gst_control_binding_set_disabled =
      _gst_control_binding_set_disabledPtr
          .asFunction<void Function(ffi.Pointer<GstControlBinding>, int)>();

  int gst_control_binding_is_disabled(
    ffi.Pointer<GstControlBinding> binding,
  ) {
    return _gst_control_binding_is_disabled(
      binding,
    );
  }

  late final _gst_control_binding_is_disabledPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstControlBinding>)>>(
      'gst_control_binding_is_disabled');
  late final _gst_control_binding_is_disabled =
      _gst_control_binding_is_disabledPtr
          .asFunction<int Function(ffi.Pointer<GstControlBinding>)>();

  int gst_object_suggest_next_sync(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_suggest_next_sync(
      object,
    );
  }

  late final _gst_object_suggest_next_syncPtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstObject>)>>(
      'gst_object_suggest_next_sync');
  late final _gst_object_suggest_next_sync = _gst_object_suggest_next_syncPtr
      .asFunction<int Function(ffi.Pointer<GstObject>)>();

  int gst_object_sync_values(
    ffi.Pointer<GstObject> object,
    int timestamp,
  ) {
    return _gst_object_sync_values(
      object,
      timestamp,
    );
  }

  late final _gst_object_sync_valuesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstObject>, GstClockTime)>>('gst_object_sync_values');
  late final _gst_object_sync_values = _gst_object_sync_valuesPtr
      .asFunction<int Function(ffi.Pointer<GstObject>, int)>();

  int gst_object_has_active_control_bindings(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_has_active_control_bindings(
      object,
    );
  }

  late final _gst_object_has_active_control_bindingsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstObject>)>>(
          'gst_object_has_active_control_bindings');
  late final _gst_object_has_active_control_bindings =
      _gst_object_has_active_control_bindingsPtr
          .asFunction<int Function(ffi.Pointer<GstObject>)>();

  void gst_object_set_control_bindings_disabled(
    ffi.Pointer<GstObject> object,
    int disabled,
  ) {
    return _gst_object_set_control_bindings_disabled(
      object,
      disabled,
    );
  }

  late final _gst_object_set_control_bindings_disabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstObject>, gboolean)>>(
      'gst_object_set_control_bindings_disabled');
  late final _gst_object_set_control_bindings_disabled =
      _gst_object_set_control_bindings_disabledPtr
          .asFunction<void Function(ffi.Pointer<GstObject>, int)>();

  void gst_object_set_control_binding_disabled(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<ffi.Char> property_name,
    int disabled,
  ) {
    return _gst_object_set_control_binding_disabled(
      object,
      property_name,
      disabled,
    );
  }

  late final _gst_object_set_control_binding_disabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>,
              gboolean)>>('gst_object_set_control_binding_disabled');
  late final _gst_object_set_control_binding_disabled =
      _gst_object_set_control_binding_disabledPtr.asFunction<
          void Function(ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>, int)>();

  int gst_object_add_control_binding(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<GstControlBinding> binding,
  ) {
    return _gst_object_add_control_binding(
      object,
      binding,
    );
  }

  late final _gst_object_add_control_bindingPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstObject>, ffi.Pointer<GstControlBinding>)>>(
      'gst_object_add_control_binding');
  late final _gst_object_add_control_binding =
      _gst_object_add_control_bindingPtr.asFunction<
          int Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstControlBinding>)>();

  ffi.Pointer<GstControlBinding> gst_object_get_control_binding(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<ffi.Char> property_name,
  ) {
    return _gst_object_get_control_binding(
      object,
      property_name,
    );
  }

  late final _gst_object_get_control_bindingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstControlBinding> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>)>>('gst_object_get_control_binding');
  late final _gst_object_get_control_binding =
      _gst_object_get_control_bindingPtr.asFunction<
          ffi.Pointer<GstControlBinding> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>)>();

  int gst_object_remove_control_binding(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<GstControlBinding> binding,
  ) {
    return _gst_object_remove_control_binding(
      object,
      binding,
    );
  }

  late final _gst_object_remove_control_bindingPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstObject>, ffi.Pointer<GstControlBinding>)>>(
      'gst_object_remove_control_binding');
  late final _gst_object_remove_control_binding =
      _gst_object_remove_control_bindingPtr.asFunction<
          int Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstControlBinding>)>();

  ffi.Pointer<GValue> gst_object_get_value(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<ffi.Char> property_name,
    int timestamp,
  ) {
    return _gst_object_get_value(
      object,
      property_name,
      timestamp,
    );
  }

  late final _gst_object_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>, GstClockTime)>>('gst_object_get_value');
  late final _gst_object_get_value = _gst_object_get_valuePtr.asFunction<
      ffi.Pointer<GValue> Function(
          ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>, int)>();

  int gst_object_get_value_array(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<ffi.Char> property_name,
    int timestamp,
    int interval,
    int n_values,
    ffi.Pointer values,
  ) {
    return _gst_object_get_value_array(
      object,
      property_name,
      timestamp,
      interval,
      n_values,
      values,
    );
  }

  late final _gst_object_get_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>,
              GstClockTime,
              GstClockTime,
              guint,
              ffi.Pointer)>>('gst_object_get_value_array');
  late final _gst_object_get_value_array =
      _gst_object_get_value_arrayPtr.asFunction<
          int Function(ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>, int, int,
              int, ffi.Pointer)>();

  int gst_object_get_g_value_array(
    ffi.Pointer<GstObject> object,
    ffi.Pointer<ffi.Char> property_name,
    int timestamp,
    int interval,
    int n_values,
    ffi.Pointer<GValue> values,
  ) {
    return _gst_object_get_g_value_array(
      object,
      property_name,
      timestamp,
      interval,
      n_values,
      values,
    );
  }

  late final _gst_object_get_g_value_arrayPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>,
              GstClockTime,
              GstClockTime,
              guint,
              ffi.Pointer<GValue>)>>('gst_object_get_g_value_array');
  late final _gst_object_get_g_value_array =
      _gst_object_get_g_value_arrayPtr.asFunction<
          int Function(ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>, int, int,
              int, ffi.Pointer<GValue>)>();

  int gst_object_get_control_rate(
    ffi.Pointer<GstObject> object,
  ) {
    return _gst_object_get_control_rate(
      object,
    );
  }

  late final _gst_object_get_control_ratePtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstObject>)>>(
      'gst_object_get_control_rate');
  late final _gst_object_get_control_rate = _gst_object_get_control_ratePtr
      .asFunction<int Function(ffi.Pointer<GstObject>)>();

  void gst_object_set_control_rate(
    ffi.Pointer<GstObject> object,
    int control_rate,
  ) {
    return _gst_object_set_control_rate(
      object,
      control_rate,
    );
  }

  late final _gst_object_set_control_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstObject>,
              GstClockTime)>>('gst_object_set_control_rate');
  late final _gst_object_set_control_rate = _gst_object_set_control_ratePtr
      .asFunction<void Function(ffi.Pointer<GstObject>, int)>();

  ffi.Pointer<ffi.Char> gst_pad_mode_get_name(
    int mode,
  ) {
    return _gst_pad_mode_get_name(
      mode,
    );
  }

  late final _gst_pad_mode_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_pad_mode_get_name');
  late final _gst_pad_mode_get_name = _gst_pad_mode_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  late final ffi.Pointer<GType> __gst_mini_object_type =
      _lookup<GType>('_gst_mini_object_type');

  int get _gst_mini_object_type => __gst_mini_object_type.value;

  set _gst_mini_object_type(int value) => __gst_mini_object_type.value = value;

  int gst_mini_object_get_type() {
    return _gst_mini_object_get_type();
  }

  late final _gst_mini_object_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_mini_object_get_type');
  late final _gst_mini_object_get_type =
      _gst_mini_object_get_typePtr.asFunction<int Function()>();

  void gst_mini_object_init(
    ffi.Pointer<GstMiniObject> mini_object,
    int flags,
    int type,
    GstMiniObjectCopyFunction copy_func,
    GstMiniObjectDisposeFunction dispose_func,
    GstMiniObjectFreeFunction free_func,
  ) {
    return _gst_mini_object_init(
      mini_object,
      flags,
      type,
      copy_func,
      dispose_func,
      free_func,
    );
  }

  late final _gst_mini_object_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMiniObject>,
              guint,
              GType,
              GstMiniObjectCopyFunction,
              GstMiniObjectDisposeFunction,
              GstMiniObjectFreeFunction)>>('gst_mini_object_init');
  late final _gst_mini_object_init = _gst_mini_object_initPtr.asFunction<
      void Function(
          ffi.Pointer<GstMiniObject>,
          int,
          int,
          GstMiniObjectCopyFunction,
          GstMiniObjectDisposeFunction,
          GstMiniObjectFreeFunction)>();

  ffi.Pointer<GstMiniObject> gst_mini_object_ref(
    ffi.Pointer<GstMiniObject> mini_object,
  ) {
    return _gst_mini_object_ref(
      mini_object,
    );
  }

  late final _gst_mini_object_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMiniObject> Function(
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_ref');
  late final _gst_mini_object_ref = _gst_mini_object_refPtr.asFunction<
      ffi.Pointer<GstMiniObject> Function(ffi.Pointer<GstMiniObject>)>();

  void gst_mini_object_unref(
    ffi.Pointer<GstMiniObject> mini_object,
  ) {
    return _gst_mini_object_unref(
      mini_object,
    );
  }

  late final _gst_mini_object_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstMiniObject>)>>(
      'gst_mini_object_unref');
  late final _gst_mini_object_unref = _gst_mini_object_unrefPtr
      .asFunction<void Function(ffi.Pointer<GstMiniObject>)>();

  void gst_clear_mini_object(
    ffi.Pointer<ffi.Pointer<GstMiniObject>> object_ptr,
  ) {
    return _gst_clear_mini_object(
      object_ptr,
    );
  }

  late final _gst_clear_mini_objectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<GstMiniObject>>)>>(
      'gst_clear_mini_object');
  late final _gst_clear_mini_object = _gst_clear_mini_objectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GstMiniObject>>)>();

  void gst_mini_object_weak_ref(
    ffi.Pointer<GstMiniObject> object,
    GstMiniObjectNotify notify,
    ffi.Pointer data,
  ) {
    return _gst_mini_object_weak_ref(
      object,
      notify,
      data,
    );
  }

  late final _gst_mini_object_weak_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMiniObject>, GstMiniObjectNotify,
              ffi.Pointer)>>('gst_mini_object_weak_ref');
  late final _gst_mini_object_weak_ref =
      _gst_mini_object_weak_refPtr.asFunction<
          void Function(
              ffi.Pointer<GstMiniObject>, GstMiniObjectNotify, ffi.Pointer)>();

  void gst_mini_object_weak_unref(
    ffi.Pointer<GstMiniObject> object,
    GstMiniObjectNotify notify,
    ffi.Pointer data,
  ) {
    return _gst_mini_object_weak_unref(
      object,
      notify,
      data,
    );
  }

  late final _gst_mini_object_weak_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMiniObject>, GstMiniObjectNotify,
              ffi.Pointer)>>('gst_mini_object_weak_unref');
  late final _gst_mini_object_weak_unref =
      _gst_mini_object_weak_unrefPtr.asFunction<
          void Function(
              ffi.Pointer<GstMiniObject>, GstMiniObjectNotify, ffi.Pointer)>();

  int gst_mini_object_lock(
    ffi.Pointer<GstMiniObject> object,
    int flags,
  ) {
    return _gst_mini_object_lock(
      object,
      flags,
    );
  }

  late final _gst_mini_object_lockPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstMiniObject>, ffi.Int32)>>('gst_mini_object_lock');
  late final _gst_mini_object_lock = _gst_mini_object_lockPtr
      .asFunction<int Function(ffi.Pointer<GstMiniObject>, int)>();

  void gst_mini_object_unlock(
    ffi.Pointer<GstMiniObject> object,
    int flags,
  ) {
    return _gst_mini_object_unlock(
      object,
      flags,
    );
  }

  late final _gst_mini_object_unlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMiniObject>,
              ffi.Int32)>>('gst_mini_object_unlock');
  late final _gst_mini_object_unlock = _gst_mini_object_unlockPtr
      .asFunction<void Function(ffi.Pointer<GstMiniObject>, int)>();

  int gst_mini_object_is_writable(
    ffi.Pointer<GstMiniObject> mini_object,
  ) {
    return _gst_mini_object_is_writable(
      mini_object,
    );
  }

  late final _gst_mini_object_is_writablePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstMiniObject>)>>(
      'gst_mini_object_is_writable');
  late final _gst_mini_object_is_writable = _gst_mini_object_is_writablePtr
      .asFunction<int Function(ffi.Pointer<GstMiniObject>)>();

  ffi.Pointer<GstMiniObject> gst_mini_object_make_writable(
    ffi.Pointer<GstMiniObject> mini_object,
  ) {
    return _gst_mini_object_make_writable(
      mini_object,
    );
  }

  late final _gst_mini_object_make_writablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMiniObject> Function(
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_make_writable');
  late final _gst_mini_object_make_writable =
      _gst_mini_object_make_writablePtr.asFunction<
          ffi.Pointer<GstMiniObject> Function(ffi.Pointer<GstMiniObject>)>();

  ffi.Pointer<GstMiniObject> gst_mini_object_copy(
    ffi.Pointer<GstMiniObject> mini_object,
  ) {
    return _gst_mini_object_copy(
      mini_object,
    );
  }

  late final _gst_mini_object_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMiniObject> Function(
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_copy');
  late final _gst_mini_object_copy = _gst_mini_object_copyPtr.asFunction<
      ffi.Pointer<GstMiniObject> Function(ffi.Pointer<GstMiniObject>)>();

  void gst_mini_object_set_qdata(
    ffi.Pointer<GstMiniObject> object,
    int quark,
    ffi.Pointer data,
    GDestroyNotify destroy,
  ) {
    return _gst_mini_object_set_qdata(
      object,
      quark,
      data,
      destroy,
    );
  }

  late final _gst_mini_object_set_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMiniObject>, GQuark, ffi.Pointer,
              GDestroyNotify)>>('gst_mini_object_set_qdata');
  late final _gst_mini_object_set_qdata =
      _gst_mini_object_set_qdataPtr.asFunction<
          void Function(
              ffi.Pointer<GstMiniObject>, int, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer gst_mini_object_get_qdata(
    ffi.Pointer<GstMiniObject> object,
    int quark,
  ) {
    return _gst_mini_object_get_qdata(
      object,
      quark,
    );
  }

  late final _gst_mini_object_get_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GstMiniObject>,
              GQuark)>>('gst_mini_object_get_qdata');
  late final _gst_mini_object_get_qdata = _gst_mini_object_get_qdataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GstMiniObject>, int)>();

  ffi.Pointer gst_mini_object_steal_qdata(
    ffi.Pointer<GstMiniObject> object,
    int quark,
  ) {
    return _gst_mini_object_steal_qdata(
      object,
      quark,
    );
  }

  late final _gst_mini_object_steal_qdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GstMiniObject>,
              GQuark)>>('gst_mini_object_steal_qdata');
  late final _gst_mini_object_steal_qdata = _gst_mini_object_steal_qdataPtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GstMiniObject>, int)>();

  void gst_mini_object_add_parent(
    ffi.Pointer<GstMiniObject> object,
    ffi.Pointer<GstMiniObject> parent,
  ) {
    return _gst_mini_object_add_parent(
      object,
      parent,
    );
  }

  late final _gst_mini_object_add_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMiniObject>,
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_add_parent');
  late final _gst_mini_object_add_parent =
      _gst_mini_object_add_parentPtr.asFunction<
          void Function(
              ffi.Pointer<GstMiniObject>, ffi.Pointer<GstMiniObject>)>();

  void gst_mini_object_remove_parent(
    ffi.Pointer<GstMiniObject> object,
    ffi.Pointer<GstMiniObject> parent,
  ) {
    return _gst_mini_object_remove_parent(
      object,
      parent,
    );
  }

  late final _gst_mini_object_remove_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMiniObject>,
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_remove_parent');
  late final _gst_mini_object_remove_parent =
      _gst_mini_object_remove_parentPtr.asFunction<
          void Function(
              ffi.Pointer<GstMiniObject>, ffi.Pointer<GstMiniObject>)>();

  int gst_mini_object_replace(
    ffi.Pointer<ffi.Pointer<GstMiniObject>> olddata,
    ffi.Pointer<GstMiniObject> newdata,
  ) {
    return _gst_mini_object_replace(
      olddata,
      newdata,
    );
  }

  late final _gst_mini_object_replacePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<GstMiniObject>>,
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_replace');
  late final _gst_mini_object_replace = _gst_mini_object_replacePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<GstMiniObject>>,
          ffi.Pointer<GstMiniObject>)>();

  int gst_mini_object_take(
    ffi.Pointer<ffi.Pointer<GstMiniObject>> olddata,
    ffi.Pointer<GstMiniObject> newdata,
  ) {
    return _gst_mini_object_take(
      olddata,
      newdata,
    );
  }

  late final _gst_mini_object_takePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<GstMiniObject>>,
              ffi.Pointer<GstMiniObject>)>>('gst_mini_object_take');
  late final _gst_mini_object_take = _gst_mini_object_takePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<GstMiniObject>>,
          ffi.Pointer<GstMiniObject>)>();

  ffi.Pointer<GstMiniObject> gst_mini_object_steal(
    ffi.Pointer<ffi.Pointer<GstMiniObject>> olddata,
  ) {
    return _gst_mini_object_steal(
      olddata,
    );
  }

  late final _gst_mini_object_stealPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstMiniObject> Function(
                  ffi.Pointer<ffi.Pointer<GstMiniObject>>)>>(
      'gst_mini_object_steal');
  late final _gst_mini_object_steal = _gst_mini_object_stealPtr.asFunction<
      ffi.Pointer<GstMiniObject> Function(
          ffi.Pointer<ffi.Pointer<GstMiniObject>>)>();

  late final ffi.Pointer<GType> __gst_memory_type =
      _lookup<GType>('_gst_memory_type');

  int get _gst_memory_type => __gst_memory_type.value;

  set _gst_memory_type(int value) => __gst_memory_type.value = value;

  int gst_memory_get_type() {
    return _gst_memory_get_type();
  }

  late final _gst_memory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_memory_get_type');
  late final _gst_memory_get_type =
      _gst_memory_get_typePtr.asFunction<int Function()>();

  void gst_memory_init(
    ffi.Pointer<GstMemory> mem,
    int flags,
    ffi.Pointer<GstAllocator> allocator,
    ffi.Pointer<GstMemory> parent,
    int maxsize,
    int align,
    int offset,
    int size,
  ) {
    return _gst_memory_init(
      mem,
      flags,
      allocator,
      parent,
      maxsize,
      align,
      offset,
      size,
    );
  }

  late final _gst_memory_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMemory>,
              ffi.Int32,
              ffi.Pointer<GstAllocator>,
              ffi.Pointer<GstMemory>,
              gsize,
              gsize,
              gsize,
              gsize)>>('gst_memory_init');
  late final _gst_memory_init = _gst_memory_initPtr.asFunction<
      void Function(ffi.Pointer<GstMemory>, int, ffi.Pointer<GstAllocator>,
          ffi.Pointer<GstMemory>, int, int, int, int)>();

  int gst_memory_is_type(
    ffi.Pointer<GstMemory> mem,
    ffi.Pointer<ffi.Char> mem_type,
  ) {
    return _gst_memory_is_type(
      mem,
      mem_type,
    );
  }

  late final _gst_memory_is_typePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMemory>,
              ffi.Pointer<ffi.Char>)>>('gst_memory_is_type');
  late final _gst_memory_is_type = _gst_memory_is_typePtr.asFunction<
      int Function(ffi.Pointer<GstMemory>, ffi.Pointer<ffi.Char>)>();

  int gst_memory_get_sizes(
    ffi.Pointer<GstMemory> mem,
    ffi.Pointer<gsize> offset,
    ffi.Pointer<gsize> maxsize,
  ) {
    return _gst_memory_get_sizes(
      mem,
      offset,
      maxsize,
    );
  }

  late final _gst_memory_get_sizesPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GstMemory>, ffi.Pointer<gsize>,
              ffi.Pointer<gsize>)>>('gst_memory_get_sizes');
  late final _gst_memory_get_sizes = _gst_memory_get_sizesPtr.asFunction<
      int Function(
          ffi.Pointer<GstMemory>, ffi.Pointer<gsize>, ffi.Pointer<gsize>)>();

  void gst_memory_resize(
    ffi.Pointer<GstMemory> mem,
    int offset,
    int size,
  ) {
    return _gst_memory_resize(
      mem,
      offset,
      size,
    );
  }

  late final _gst_memory_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMemory>, gssize, gsize)>>('gst_memory_resize');
  late final _gst_memory_resize = _gst_memory_resizePtr
      .asFunction<void Function(ffi.Pointer<GstMemory>, int, int)>();

  ffi.Pointer<GstMemory> gst_memory_make_mapped(
    ffi.Pointer<GstMemory> mem,
    ffi.Pointer<GstMapInfo> info,
    int flags,
  ) {
    return _gst_memory_make_mapped(
      mem,
      info,
      flags,
    );
  }

  late final _gst_memory_make_mappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(ffi.Pointer<GstMemory>,
              ffi.Pointer<GstMapInfo>, ffi.Int32)>>('gst_memory_make_mapped');
  late final _gst_memory_make_mapped = _gst_memory_make_mappedPtr.asFunction<
      ffi.Pointer<GstMemory> Function(
          ffi.Pointer<GstMemory>, ffi.Pointer<GstMapInfo>, int)>();

  int gst_memory_map(
    ffi.Pointer<GstMemory> mem,
    ffi.Pointer<GstMapInfo> info,
    int flags,
  ) {
    return _gst_memory_map(
      mem,
      info,
      flags,
    );
  }

  late final _gst_memory_mapPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMemory>, ffi.Pointer<GstMapInfo>,
              ffi.Int32)>>('gst_memory_map');
  late final _gst_memory_map = _gst_memory_mapPtr.asFunction<
      int Function(ffi.Pointer<GstMemory>, ffi.Pointer<GstMapInfo>, int)>();

  void gst_memory_unmap(
    ffi.Pointer<GstMemory> mem,
    ffi.Pointer<GstMapInfo> info,
  ) {
    return _gst_memory_unmap(
      mem,
      info,
    );
  }

  late final _gst_memory_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMemory>,
              ffi.Pointer<GstMapInfo>)>>('gst_memory_unmap');
  late final _gst_memory_unmap = _gst_memory_unmapPtr.asFunction<
      void Function(ffi.Pointer<GstMemory>, ffi.Pointer<GstMapInfo>)>();

  ffi.Pointer<GstMemory> gst_memory_copy(
    ffi.Pointer<GstMemory> mem,
    int offset,
    int size,
  ) {
    return _gst_memory_copy(
      mem,
      offset,
      size,
    );
  }

  late final _gst_memory_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(
              ffi.Pointer<GstMemory>, gssize, gssize)>>('gst_memory_copy');
  late final _gst_memory_copy = _gst_memory_copyPtr.asFunction<
      ffi.Pointer<GstMemory> Function(ffi.Pointer<GstMemory>, int, int)>();

  ffi.Pointer<GstMemory> gst_memory_share(
    ffi.Pointer<GstMemory> mem,
    int offset,
    int size,
  ) {
    return _gst_memory_share(
      mem,
      offset,
      size,
    );
  }

  late final _gst_memory_sharePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(
              ffi.Pointer<GstMemory>, gssize, gssize)>>('gst_memory_share');
  late final _gst_memory_share = _gst_memory_sharePtr.asFunction<
      ffi.Pointer<GstMemory> Function(ffi.Pointer<GstMemory>, int, int)>();

  int gst_memory_is_span(
    ffi.Pointer<GstMemory> mem1,
    ffi.Pointer<GstMemory> mem2,
    ffi.Pointer<gsize> offset,
  ) {
    return _gst_memory_is_span(
      mem1,
      mem2,
      offset,
    );
  }

  late final _gst_memory_is_spanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMemory>, ffi.Pointer<GstMemory>,
              ffi.Pointer<gsize>)>>('gst_memory_is_span');
  late final _gst_memory_is_span = _gst_memory_is_spanPtr.asFunction<
      int Function(ffi.Pointer<GstMemory>, ffi.Pointer<GstMemory>,
          ffi.Pointer<gsize>)>();

  int gst_allocation_params_get_type() {
    return _gst_allocation_params_get_type();
  }

  late final _gst_allocation_params_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_allocation_params_get_type');
  late final _gst_allocation_params_get_type =
      _gst_allocation_params_get_typePtr.asFunction<int Function()>();

  /// gst_memory_alignment:
  ///
  /// The default memory alignment in bytes - 1
  /// an alignment of 7 would be the same as what malloc() guarantees.
  late final ffi.Pointer<gsize> _gst_memory_alignment =
      _lookup<gsize>('gst_memory_alignment');

  int get gst_memory_alignment => _gst_memory_alignment.value;

  set gst_memory_alignment(int value) => _gst_memory_alignment.value = value;

  int gst_allocator_get_type() {
    return _gst_allocator_get_type();
  }

  late final _gst_allocator_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_allocator_get_type');
  late final _gst_allocator_get_type =
      _gst_allocator_get_typePtr.asFunction<int Function()>();

  void gst_allocator_register(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GstAllocator> allocator,
  ) {
    return _gst_allocator_register(
      name,
      allocator,
    );
  }

  late final _gst_allocator_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstAllocator>)>>('gst_allocator_register');
  late final _gst_allocator_register = _gst_allocator_registerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GstAllocator>)>();

  ffi.Pointer<GstAllocator> gst_allocator_find(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_allocator_find(
      name,
    );
  }

  late final _gst_allocator_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstAllocator> Function(
              ffi.Pointer<ffi.Char>)>>('gst_allocator_find');
  late final _gst_allocator_find = _gst_allocator_findPtr
      .asFunction<ffi.Pointer<GstAllocator> Function(ffi.Pointer<ffi.Char>)>();

  void gst_allocator_set_default(
    ffi.Pointer<GstAllocator> allocator,
  ) {
    return _gst_allocator_set_default(
      allocator,
    );
  }

  late final _gst_allocator_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstAllocator>)>>(
          'gst_allocator_set_default');
  late final _gst_allocator_set_default = _gst_allocator_set_defaultPtr
      .asFunction<void Function(ffi.Pointer<GstAllocator>)>();

  ffi.Pointer<GstAllocationParams> gst_allocation_params_new() {
    return _gst_allocation_params_new();
  }

  late final _gst_allocation_params_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstAllocationParams> Function()>>(
          'gst_allocation_params_new');
  late final _gst_allocation_params_new = _gst_allocation_params_newPtr
      .asFunction<ffi.Pointer<GstAllocationParams> Function()>();

  void gst_allocation_params_init(
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_allocation_params_init(
      params,
    );
  }

  late final _gst_allocation_params_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstAllocationParams>)>>(
      'gst_allocation_params_init');
  late final _gst_allocation_params_init = _gst_allocation_params_initPtr
      .asFunction<void Function(ffi.Pointer<GstAllocationParams>)>();

  ffi.Pointer<GstAllocationParams> gst_allocation_params_copy(
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_allocation_params_copy(
      params,
    );
  }

  late final _gst_allocation_params_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstAllocationParams> Function(
              ffi.Pointer<GstAllocationParams>)>>('gst_allocation_params_copy');
  late final _gst_allocation_params_copy =
      _gst_allocation_params_copyPtr.asFunction<
          ffi.Pointer<GstAllocationParams> Function(
              ffi.Pointer<GstAllocationParams>)>();

  void gst_allocation_params_free(
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_allocation_params_free(
      params,
    );
  }

  late final _gst_allocation_params_freePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstAllocationParams>)>>(
      'gst_allocation_params_free');
  late final _gst_allocation_params_free = _gst_allocation_params_freePtr
      .asFunction<void Function(ffi.Pointer<GstAllocationParams>)>();

  ffi.Pointer<GstMemory> gst_allocator_alloc(
    ffi.Pointer<GstAllocator> allocator,
    int size,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_allocator_alloc(
      allocator,
      size,
      params,
    );
  }

  late final _gst_allocator_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(ffi.Pointer<GstAllocator>, gsize,
              ffi.Pointer<GstAllocationParams>)>>('gst_allocator_alloc');
  late final _gst_allocator_alloc = _gst_allocator_allocPtr.asFunction<
      ffi.Pointer<GstMemory> Function(
          ffi.Pointer<GstAllocator>, int, ffi.Pointer<GstAllocationParams>)>();

  void gst_allocator_free(
    ffi.Pointer<GstAllocator> allocator,
    ffi.Pointer<GstMemory> memory,
  ) {
    return _gst_allocator_free(
      allocator,
      memory,
    );
  }

  late final _gst_allocator_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstAllocator>,
              ffi.Pointer<GstMemory>)>>('gst_allocator_free');
  late final _gst_allocator_free = _gst_allocator_freePtr.asFunction<
      void Function(ffi.Pointer<GstAllocator>, ffi.Pointer<GstMemory>)>();

  ffi.Pointer<GstMemory> gst_memory_new_wrapped(
    int flags,
    ffi.Pointer data,
    int maxsize,
    int offset,
    int size,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_memory_new_wrapped(
      flags,
      data,
      maxsize,
      offset,
      size,
      user_data,
      notify,
    );
  }

  late final _gst_memory_new_wrappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(ffi.Int32, ffi.Pointer, gsize, gsize,
              gsize, ffi.Pointer, GDestroyNotify)>>('gst_memory_new_wrapped');
  late final _gst_memory_new_wrapped = _gst_memory_new_wrappedPtr.asFunction<
      ffi.Pointer<GstMemory> Function(
          int, ffi.Pointer, int, int, int, ffi.Pointer, GDestroyNotify)>();

  late final ffi.Pointer<GType> __gst_date_time_type =
      _lookup<GType>('_gst_date_time_type');

  int get _gst_date_time_type => __gst_date_time_type.value;

  set _gst_date_time_type(int value) => __gst_date_time_type.value = value;

  int gst_date_time_get_type() {
    return _gst_date_time_get_type();
  }

  late final _gst_date_time_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_date_time_get_type');
  late final _gst_date_time_get_type =
      _gst_date_time_get_typePtr.asFunction<int Function()>();

  int gst_date_time_has_year(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_has_year(
      datetime,
    );
  }

  late final _gst_date_time_has_yearPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_has_year');
  late final _gst_date_time_has_year = _gst_date_time_has_yearPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_has_month(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_has_month(
      datetime,
    );
  }

  late final _gst_date_time_has_monthPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_has_month');
  late final _gst_date_time_has_month = _gst_date_time_has_monthPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_has_day(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_has_day(
      datetime,
    );
  }

  late final _gst_date_time_has_dayPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_has_day');
  late final _gst_date_time_has_day = _gst_date_time_has_dayPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_has_time(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_has_time(
      datetime,
    );
  }

  late final _gst_date_time_has_timePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_has_time');
  late final _gst_date_time_has_time = _gst_date_time_has_timePtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_has_second(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_has_second(
      datetime,
    );
  }

  late final _gst_date_time_has_secondPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_has_second');
  late final _gst_date_time_has_second = _gst_date_time_has_secondPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_year(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_year(
      datetime,
    );
  }

  late final _gst_date_time_get_yearPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_year');
  late final _gst_date_time_get_year = _gst_date_time_get_yearPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_month(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_month(
      datetime,
    );
  }

  late final _gst_date_time_get_monthPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_month');
  late final _gst_date_time_get_month = _gst_date_time_get_monthPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_day(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_day(
      datetime,
    );
  }

  late final _gst_date_time_get_dayPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_day');
  late final _gst_date_time_get_day = _gst_date_time_get_dayPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_hour(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_hour(
      datetime,
    );
  }

  late final _gst_date_time_get_hourPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_hour');
  late final _gst_date_time_get_hour = _gst_date_time_get_hourPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_minute(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_minute(
      datetime,
    );
  }

  late final _gst_date_time_get_minutePtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_minute');
  late final _gst_date_time_get_minute = _gst_date_time_get_minutePtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_second(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_second(
      datetime,
    );
  }

  late final _gst_date_time_get_secondPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_second');
  late final _gst_date_time_get_second = _gst_date_time_get_secondPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  int gst_date_time_get_microsecond(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_microsecond(
      datetime,
    );
  }

  late final _gst_date_time_get_microsecondPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_microsecond');
  late final _gst_date_time_get_microsecond = _gst_date_time_get_microsecondPtr
      .asFunction<int Function(ffi.Pointer<GstDateTime>)>();

  double gst_date_time_get_time_zone_offset(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_get_time_zone_offset(
      datetime,
    );
  }

  late final _gst_date_time_get_time_zone_offsetPtr =
      _lookup<ffi.NativeFunction<gfloat Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_get_time_zone_offset');
  late final _gst_date_time_get_time_zone_offset =
      _gst_date_time_get_time_zone_offsetPtr
          .asFunction<double Function(ffi.Pointer<GstDateTime>)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_from_unix_epoch_local_time(
    int secs,
  ) {
    return _gst_date_time_new_from_unix_epoch_local_time(
      secs,
    );
  }

  late final _gst_date_time_new_from_unix_epoch_local_timePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function(gint64)>>(
          'gst_date_time_new_from_unix_epoch_local_time');
  late final _gst_date_time_new_from_unix_epoch_local_time =
      _gst_date_time_new_from_unix_epoch_local_timePtr
          .asFunction<ffi.Pointer<GstDateTime> Function(int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_from_unix_epoch_utc(
    int secs,
  ) {
    return _gst_date_time_new_from_unix_epoch_utc(
      secs,
    );
  }

  late final _gst_date_time_new_from_unix_epoch_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function(gint64)>>(
          'gst_date_time_new_from_unix_epoch_utc');
  late final _gst_date_time_new_from_unix_epoch_utc =
      _gst_date_time_new_from_unix_epoch_utcPtr
          .asFunction<ffi.Pointer<GstDateTime> Function(int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_from_unix_epoch_local_time_usecs(
    int usecs,
  ) {
    return _gst_date_time_new_from_unix_epoch_local_time_usecs(
      usecs,
    );
  }

  late final _gst_date_time_new_from_unix_epoch_local_time_usecsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function(gint64)>>(
          'gst_date_time_new_from_unix_epoch_local_time_usecs');
  late final _gst_date_time_new_from_unix_epoch_local_time_usecs =
      _gst_date_time_new_from_unix_epoch_local_time_usecsPtr
          .asFunction<ffi.Pointer<GstDateTime> Function(int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_from_unix_epoch_utc_usecs(
    int usecs,
  ) {
    return _gst_date_time_new_from_unix_epoch_utc_usecs(
      usecs,
    );
  }

  late final _gst_date_time_new_from_unix_epoch_utc_usecsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function(gint64)>>(
          'gst_date_time_new_from_unix_epoch_utc_usecs');
  late final _gst_date_time_new_from_unix_epoch_utc_usecs =
      _gst_date_time_new_from_unix_epoch_utc_usecsPtr
          .asFunction<ffi.Pointer<GstDateTime> Function(int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_local_time(
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _gst_date_time_new_local_time(
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _gst_date_time_new_local_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDateTime> Function(gint, gint, gint, gint, gint,
              gdouble)>>('gst_date_time_new_local_time');
  late final _gst_date_time_new_local_time =
      _gst_date_time_new_local_timePtr.asFunction<
          ffi.Pointer<GstDateTime> Function(int, int, int, int, int, double)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_y(
    int year,
  ) {
    return _gst_date_time_new_y(
      year,
    );
  }

  late final _gst_date_time_new_yPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function(gint)>>(
          'gst_date_time_new_y');
  late final _gst_date_time_new_y = _gst_date_time_new_yPtr
      .asFunction<ffi.Pointer<GstDateTime> Function(int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_ym(
    int year,
    int month,
  ) {
    return _gst_date_time_new_ym(
      year,
      month,
    );
  }

  late final _gst_date_time_new_ymPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GstDateTime> Function(gint, gint)>>(
      'gst_date_time_new_ym');
  late final _gst_date_time_new_ym = _gst_date_time_new_ymPtr
      .asFunction<ffi.Pointer<GstDateTime> Function(int, int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_ymd(
    int year,
    int month,
    int day,
  ) {
    return _gst_date_time_new_ymd(
      year,
      month,
      day,
    );
  }

  late final _gst_date_time_new_ymdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstDateTime> Function(gint, gint, gint)>>(
      'gst_date_time_new_ymd');
  late final _gst_date_time_new_ymd = _gst_date_time_new_ymdPtr
      .asFunction<ffi.Pointer<GstDateTime> Function(int, int, int)>();

  ffi.Pointer<GstDateTime> gst_date_time_new(
    double tzoffset,
    int year,
    int month,
    int day,
    int hour,
    int minute,
    double seconds,
  ) {
    return _gst_date_time_new(
      tzoffset,
      year,
      month,
      day,
      hour,
      minute,
      seconds,
    );
  }

  late final _gst_date_time_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDateTime> Function(gfloat, gint, gint, gint, gint,
              gint, gdouble)>>('gst_date_time_new');
  late final _gst_date_time_new = _gst_date_time_newPtr.asFunction<
      ffi.Pointer<GstDateTime> Function(
          double, int, int, int, int, int, double)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_now_local_time() {
    return _gst_date_time_new_now_local_time();
  }

  late final _gst_date_time_new_now_local_timePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function()>>(
          'gst_date_time_new_now_local_time');
  late final _gst_date_time_new_now_local_time =
      _gst_date_time_new_now_local_timePtr
          .asFunction<ffi.Pointer<GstDateTime> Function()>();

  ffi.Pointer<GstDateTime> gst_date_time_new_now_utc() {
    return _gst_date_time_new_now_utc();
  }

  late final _gst_date_time_new_now_utcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDateTime> Function()>>(
          'gst_date_time_new_now_utc');
  late final _gst_date_time_new_now_utc = _gst_date_time_new_now_utcPtr
      .asFunction<ffi.Pointer<GstDateTime> Function()>();

  ffi.Pointer<ffi.Char> gst_date_time_to_iso8601_string(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_to_iso8601_string(
      datetime,
    );
  }

  late final _gst_date_time_to_iso8601_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDateTime>)>>('gst_date_time_to_iso8601_string');
  late final _gst_date_time_to_iso8601_string =
      _gst_date_time_to_iso8601_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDateTime>)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_from_iso8601_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _gst_date_time_new_from_iso8601_string(
      string,
    );
  }

  late final _gst_date_time_new_from_iso8601_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDateTime> Function(
              ffi.Pointer<ffi.Char>)>>('gst_date_time_new_from_iso8601_string');
  late final _gst_date_time_new_from_iso8601_string =
      _gst_date_time_new_from_iso8601_stringPtr.asFunction<
          ffi.Pointer<GstDateTime> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GDateTime> gst_date_time_to_g_date_time(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_to_g_date_time(
      datetime,
    );
  }

  late final _gst_date_time_to_g_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GDateTime> Function(
              ffi.Pointer<GstDateTime>)>>('gst_date_time_to_g_date_time');
  late final _gst_date_time_to_g_date_time = _gst_date_time_to_g_date_timePtr
      .asFunction<ffi.Pointer<GDateTime> Function(ffi.Pointer<GstDateTime>)>();

  ffi.Pointer<GstDateTime> gst_date_time_new_from_g_date_time(
    ffi.Pointer<GDateTime> dt,
  ) {
    return _gst_date_time_new_from_g_date_time(
      dt,
    );
  }

  late final _gst_date_time_new_from_g_date_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDateTime> Function(
              ffi.Pointer<GDateTime>)>>('gst_date_time_new_from_g_date_time');
  late final _gst_date_time_new_from_g_date_time =
      _gst_date_time_new_from_g_date_timePtr.asFunction<
          ffi.Pointer<GstDateTime> Function(ffi.Pointer<GDateTime>)>();

  ffi.Pointer<GstDateTime> gst_date_time_ref(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_ref(
      datetime,
    );
  }

  late final _gst_date_time_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDateTime> Function(
              ffi.Pointer<GstDateTime>)>>('gst_date_time_ref');
  late final _gst_date_time_ref = _gst_date_time_refPtr.asFunction<
      ffi.Pointer<GstDateTime> Function(ffi.Pointer<GstDateTime>)>();

  void gst_date_time_unref(
    ffi.Pointer<GstDateTime> datetime,
  ) {
    return _gst_date_time_unref(
      datetime,
    );
  }

  late final _gst_date_time_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstDateTime>)>>(
          'gst_date_time_unref');
  late final _gst_date_time_unref = _gst_date_time_unrefPtr
      .asFunction<void Function(ffi.Pointer<GstDateTime>)>();

  late final ffi.Pointer<GType> __gst_structure_type =
      _lookup<GType>('_gst_structure_type');

  int get _gst_structure_type => __gst_structure_type.value;

  set _gst_structure_type(int value) => __gst_structure_type.value = value;

  int gst_structure_get_type() {
    return _gst_structure_get_type();
  }

  late final _gst_structure_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_structure_get_type');
  late final _gst_structure_get_type =
      _gst_structure_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstStructure> gst_structure_new_empty(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_structure_new_empty(
      name,
    );
  }

  late final _gst_structure_new_emptyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<ffi.Char>)>>('gst_structure_new_empty');
  late final _gst_structure_new_empty = _gst_structure_new_emptyPtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstStructure> gst_structure_new_id_empty(
    int quark,
  ) {
    return _gst_structure_new_id_empty(
      quark,
    );
  }

  late final _gst_structure_new_id_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstStructure> Function(GQuark)>>(
          'gst_structure_new_id_empty');
  late final _gst_structure_new_id_empty = _gst_structure_new_id_emptyPtr
      .asFunction<ffi.Pointer<GstStructure> Function(int)>();

  ffi.Pointer<GstStructure> gst_structure_new(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> firstfield,
  ) {
    return _gst_structure_new(
      name,
      firstfield,
    );
  }

  late final _gst_structure_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_new');
  late final _gst_structure_new = _gst_structure_newPtr.asFunction<
      ffi.Pointer<GstStructure> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstStructure> gst_structure_new_valist(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> firstfield,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_structure_new_valist(
      name,
      firstfield,
      varargs,
    );
  }

  late final _gst_structure_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_structure_new_valist');
  late final _gst_structure_new_valist =
      _gst_structure_new_valistPtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<GstStructure> gst_structure_new_id(
    int name_quark,
    int field_quark,
  ) {
    return _gst_structure_new_id(
      name_quark,
      field_quark,
    );
  }

  late final _gst_structure_new_idPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstStructure> Function(GQuark, GQuark)>>(
      'gst_structure_new_id');
  late final _gst_structure_new_id = _gst_structure_new_idPtr
      .asFunction<ffi.Pointer<GstStructure> Function(int, int)>();

  ffi.Pointer<GstStructure> gst_structure_new_from_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _gst_structure_new_from_string(
      string,
    );
  }

  late final _gst_structure_new_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<ffi.Char>)>>('gst_structure_new_from_string');
  late final _gst_structure_new_from_string = _gst_structure_new_from_stringPtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstStructure> gst_structure_copy(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_copy(
      structure,
    );
  }

  late final _gst_structure_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstStructure>)>>('gst_structure_copy');
  late final _gst_structure_copy = _gst_structure_copyPtr.asFunction<
      ffi.Pointer<GstStructure> Function(ffi.Pointer<GstStructure>)>();

  int gst_structure_set_parent_refcount(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<gint> refcount,
  ) {
    return _gst_structure_set_parent_refcount(
      structure,
      refcount,
    );
  }

  late final _gst_structure_set_parent_refcountPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<gint>)>>('gst_structure_set_parent_refcount');
  late final _gst_structure_set_parent_refcount =
      _gst_structure_set_parent_refcountPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<gint>)>();

  void gst_structure_free(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_free(
      structure,
    );
  }

  late final _gst_structure_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstStructure>)>>(
          'gst_structure_free');
  late final _gst_structure_free = _gst_structure_freePtr
      .asFunction<void Function(ffi.Pointer<GstStructure>)>();

  void gst_clear_structure(
    ffi.Pointer<ffi.Pointer<GstStructure>> structure_ptr,
  ) {
    return _gst_clear_structure(
      structure_ptr,
    );
  }

  late final _gst_clear_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<GstStructure>>)>>('gst_clear_structure');
  late final _gst_clear_structure = _gst_clear_structurePtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<GstStructure>>)>();

  int gst_structure_take(
    ffi.Pointer<ffi.Pointer<GstStructure>> oldstr_ptr,
    ffi.Pointer<GstStructure> newstr,
  ) {
    return _gst_structure_take(
      oldstr_ptr,
      newstr,
    );
  }

  late final _gst_structure_takePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Pointer<GstStructure>>,
              ffi.Pointer<GstStructure>)>>('gst_structure_take');
  late final _gst_structure_take = _gst_structure_takePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<GstStructure>>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<ffi.Char> gst_structure_get_name(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_get_name(
      structure,
    );
  }

  late final _gst_structure_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstStructure>)>>('gst_structure_get_name');
  late final _gst_structure_get_name = _gst_structure_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>)>();

  int gst_structure_get_name_id(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_get_name_id(
      structure,
    );
  }

  late final _gst_structure_get_name_idPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Pointer<GstStructure>)>>(
          'gst_structure_get_name_id');
  late final _gst_structure_get_name_id = _gst_structure_get_name_idPtr
      .asFunction<int Function(ffi.Pointer<GstStructure>)>();

  int gst_structure_has_name(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_structure_has_name(
      structure,
      name,
    );
  }

  late final _gst_structure_has_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_has_name');
  late final _gst_structure_has_name = _gst_structure_has_namePtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_set_name(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_structure_set_name(
      structure,
      name,
    );
  }

  late final _gst_structure_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_set_name');
  late final _gst_structure_set_name = _gst_structure_set_namePtr.asFunction<
      void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_id_set_value(
    ffi.Pointer<GstStructure> structure,
    int field,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_structure_id_set_value(
      structure,
      field,
      value,
    );
  }

  late final _gst_structure_id_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, GQuark,
              ffi.Pointer<GValue>)>>('gst_structure_id_set_value');
  late final _gst_structure_id_set_value =
      _gst_structure_id_set_valuePtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, int, ffi.Pointer<GValue>)>();

  void gst_structure_set_value(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_structure_set_value(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_structure_set_value');
  late final _gst_structure_set_value = _gst_structure_set_valuePtr.asFunction<
      void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GValue>)>();

  void gst_structure_set_array(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<GValueArray> array,
  ) {
    return _gst_structure_set_array(
      structure,
      fieldname,
      array,
    );
  }

  late final _gst_structure_set_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValueArray>)>>('gst_structure_set_array');
  late final _gst_structure_set_array = _gst_structure_set_arrayPtr.asFunction<
      void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GValueArray>)>();

  void gst_structure_set_list(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<GValueArray> array,
  ) {
    return _gst_structure_set_list(
      structure,
      fieldname,
      array,
    );
  }

  late final _gst_structure_set_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValueArray>)>>('gst_structure_set_list');
  late final _gst_structure_set_list = _gst_structure_set_listPtr.asFunction<
      void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GValueArray>)>();

  void gst_structure_id_take_value(
    ffi.Pointer<GstStructure> structure,
    int field,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_structure_id_take_value(
      structure,
      field,
      value,
    );
  }

  late final _gst_structure_id_take_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, GQuark,
              ffi.Pointer<GValue>)>>('gst_structure_id_take_value');
  late final _gst_structure_id_take_value =
      _gst_structure_id_take_valuePtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, int, ffi.Pointer<GValue>)>();

  void gst_structure_take_value(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_structure_take_value(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_take_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_structure_take_value');
  late final _gst_structure_take_value =
      _gst_structure_take_valuePtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>();

  void gst_structure_set(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_set(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_set');
  late final _gst_structure_set = _gst_structure_setPtr.asFunction<
      void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_set_valist(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_structure_set_valist(
      structure,
      fieldname,
      varargs,
    );
  }

  late final _gst_structure_set_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_structure_set_valist');
  late final _gst_structure_set_valist =
      _gst_structure_set_valistPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_structure_id_set(
    ffi.Pointer<GstStructure> structure,
    int fieldname,
  ) {
    return _gst_structure_id_set(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_id_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstStructure>, GQuark)>>('gst_structure_id_set');
  late final _gst_structure_id_set = _gst_structure_id_setPtr
      .asFunction<void Function(ffi.Pointer<GstStructure>, int)>();

  void gst_structure_id_set_valist(
    ffi.Pointer<GstStructure> structure,
    int fieldname,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_structure_id_set_valist(
      structure,
      fieldname,
      varargs,
    );
  }

  late final _gst_structure_id_set_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, GQuark,
              ffi.Pointer<__va_list_tag>)>>('gst_structure_id_set_valist');
  late final _gst_structure_id_set_valist =
      _gst_structure_id_set_valistPtr.asFunction<
          void Function(
              ffi.Pointer<GstStructure>, int, ffi.Pointer<__va_list_tag>)>();

  int gst_structure_get_valist(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> first_fieldname,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gst_structure_get_valist(
      structure,
      first_fieldname,
      args,
    );
  }

  late final _gst_structure_get_valistPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_structure_get_valist');
  late final _gst_structure_get_valist =
      _gst_structure_get_valistPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int gst_structure_get(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> first_fieldname,
  ) {
    return _gst_structure_get(
      structure,
      first_fieldname,
    );
  }

  late final _gst_structure_getPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_get');
  late final _gst_structure_get = _gst_structure_getPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  int gst_structure_id_get_valist(
    ffi.Pointer<GstStructure> structure,
    int first_field_id,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gst_structure_id_get_valist(
      structure,
      first_field_id,
      args,
    );
  }

  late final _gst_structure_id_get_valistPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, GQuark,
              ffi.Pointer<__va_list_tag>)>>('gst_structure_id_get_valist');
  late final _gst_structure_id_get_valist =
      _gst_structure_id_get_valistPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, int, ffi.Pointer<__va_list_tag>)>();

  int gst_structure_id_get(
    ffi.Pointer<GstStructure> structure,
    int first_field_id,
  ) {
    return _gst_structure_id_get(
      structure,
      first_field_id,
    );
  }

  late final _gst_structure_id_getPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstStructure>, GQuark)>>('gst_structure_id_get');
  late final _gst_structure_id_get = _gst_structure_id_getPtr
      .asFunction<int Function(ffi.Pointer<GstStructure>, int)>();

  ffi.Pointer<GValue> gst_structure_id_get_value(
    ffi.Pointer<GstStructure> structure,
    int field,
  ) {
    return _gst_structure_id_get_value(
      structure,
      field,
    );
  }

  late final _gst_structure_id_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstStructure>,
              GQuark)>>('gst_structure_id_get_value');
  late final _gst_structure_id_get_value =
      _gst_structure_id_get_valuePtr.asFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstStructure>, int)>();

  ffi.Pointer<GValue> gst_structure_get_value(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_get_value(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_get_value');
  late final _gst_structure_get_value = _gst_structure_get_valuePtr.asFunction<
      ffi.Pointer<GValue> Function(
          ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_remove_field(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_remove_field(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_remove_fieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_remove_field');
  late final _gst_structure_remove_field =
      _gst_structure_remove_fieldPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_remove_fields(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_remove_fields(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_remove_fieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_remove_fields');
  late final _gst_structure_remove_fields =
      _gst_structure_remove_fieldsPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_remove_fields_valist(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_structure_remove_fields_valist(
      structure,
      fieldname,
      varargs,
    );
  }

  late final _gst_structure_remove_fields_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstStructure>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'gst_structure_remove_fields_valist');
  late final _gst_structure_remove_fields_valist =
      _gst_structure_remove_fields_valistPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_structure_remove_all_fields(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_remove_all_fields(
      structure,
    );
  }

  late final _gst_structure_remove_all_fieldsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstStructure>)>>(
          'gst_structure_remove_all_fields');
  late final _gst_structure_remove_all_fields =
      _gst_structure_remove_all_fieldsPtr
          .asFunction<void Function(ffi.Pointer<GstStructure>)>();

  int gst_structure_get_field_type(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_get_field_type(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_get_field_typePtr = _lookup<
      ffi.NativeFunction<
          GType Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_get_field_type');
  late final _gst_structure_get_field_type =
      _gst_structure_get_field_typePtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  int gst_structure_foreach(
    ffi.Pointer<GstStructure> structure,
    GstStructureForeachFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_structure_foreach(
      structure,
      func,
      user_data,
    );
  }

  late final _gst_structure_foreachPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, GstStructureForeachFunc,
              ffi.Pointer)>>('gst_structure_foreach');
  late final _gst_structure_foreach = _gst_structure_foreachPtr.asFunction<
      int Function(
          ffi.Pointer<GstStructure>, GstStructureForeachFunc, ffi.Pointer)>();

  int gst_structure_map_in_place(
    ffi.Pointer<GstStructure> structure,
    GstStructureMapFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_structure_map_in_place(
      structure,
      func,
      user_data,
    );
  }

  late final _gst_structure_map_in_placePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, GstStructureMapFunc,
              ffi.Pointer)>>('gst_structure_map_in_place');
  late final _gst_structure_map_in_place =
      _gst_structure_map_in_placePtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, GstStructureMapFunc, ffi.Pointer)>();

  void gst_structure_filter_and_map_in_place(
    ffi.Pointer<GstStructure> structure,
    GstStructureFilterMapFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_structure_filter_and_map_in_place(
      structure,
      func,
      user_data,
    );
  }

  late final _gst_structure_filter_and_map_in_placePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstStructure>,
              GstStructureFilterMapFunc,
              ffi.Pointer)>>('gst_structure_filter_and_map_in_place');
  late final _gst_structure_filter_and_map_in_place =
      _gst_structure_filter_and_map_in_placePtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, GstStructureFilterMapFunc,
              ffi.Pointer)>();

  int gst_structure_n_fields(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_n_fields(
      structure,
    );
  }

  late final _gst_structure_n_fieldsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstStructure>)>>(
          'gst_structure_n_fields');
  late final _gst_structure_n_fields = _gst_structure_n_fieldsPtr
      .asFunction<int Function(ffi.Pointer<GstStructure>)>();

  ffi.Pointer<ffi.Char> gst_structure_nth_field_name(
    ffi.Pointer<GstStructure> structure,
    int index,
  ) {
    return _gst_structure_nth_field_name(
      structure,
      index,
    );
  }

  late final _gst_structure_nth_field_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>,
              guint)>>('gst_structure_nth_field_name');
  late final _gst_structure_nth_field_name =
      _gst_structure_nth_field_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>, int)>();

  int gst_structure_id_has_field(
    ffi.Pointer<GstStructure> structure,
    int field,
  ) {
    return _gst_structure_id_has_field(
      structure,
      field,
    );
  }

  late final _gst_structure_id_has_fieldPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              GQuark)>>('gst_structure_id_has_field');
  late final _gst_structure_id_has_field = _gst_structure_id_has_fieldPtr
      .asFunction<int Function(ffi.Pointer<GstStructure>, int)>();

  int gst_structure_id_has_field_typed(
    ffi.Pointer<GstStructure> structure,
    int field,
    int type,
  ) {
    return _gst_structure_id_has_field_typed(
      structure,
      field,
      type,
    );
  }

  late final _gst_structure_id_has_field_typedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, GQuark,
              GType)>>('gst_structure_id_has_field_typed');
  late final _gst_structure_id_has_field_typed =
      _gst_structure_id_has_field_typedPtr
          .asFunction<int Function(ffi.Pointer<GstStructure>, int, int)>();

  int gst_structure_has_field(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_has_field(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_has_fieldPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_has_field');
  late final _gst_structure_has_field = _gst_structure_has_fieldPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  int gst_structure_has_field_typed(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    int type,
  ) {
    return _gst_structure_has_field_typed(
      structure,
      fieldname,
      type,
    );
  }

  late final _gst_structure_has_field_typedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              GType)>>('gst_structure_has_field_typed');
  late final _gst_structure_has_field_typed =
      _gst_structure_has_field_typedPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, int)>();

  int gst_structure_get_boolean(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<gboolean> value,
  ) {
    return _gst_structure_get_boolean(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gboolean>)>>('gst_structure_get_boolean');
  late final _gst_structure_get_boolean =
      _gst_structure_get_booleanPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gboolean>)>();

  int gst_structure_get_int(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<gint> value,
  ) {
    return _gst_structure_get_int(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_intPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>)>>('gst_structure_get_int');
  late final _gst_structure_get_int = _gst_structure_get_intPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<gint>)>();

  int gst_structure_get_uint(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<guint> value,
  ) {
    return _gst_structure_get_uint(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_uintPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint>)>>('gst_structure_get_uint');
  late final _gst_structure_get_uint = _gst_structure_get_uintPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<guint>)>();

  int gst_structure_get_int64(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<gint64> value,
  ) {
    return _gst_structure_get_int64(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint64>)>>('gst_structure_get_int64');
  late final _gst_structure_get_int64 = _gst_structure_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<gint64>)>();

  int gst_structure_get_uint64(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<guint64> value,
  ) {
    return _gst_structure_get_uint64(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint64>)>>('gst_structure_get_uint64');
  late final _gst_structure_get_uint64 =
      _gst_structure_get_uint64Ptr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint64>)>();

  int gst_structure_get_double(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<gdouble> value,
  ) {
    return _gst_structure_get_double(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_doublePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gdouble>)>>('gst_structure_get_double');
  late final _gst_structure_get_double =
      _gst_structure_get_doublePtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gdouble>)>();

  int gst_structure_get_date(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<ffi.Pointer<GDate>> value,
  ) {
    return _gst_structure_get_date(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_datePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GDate>>)>>('gst_structure_get_date');
  late final _gst_structure_get_date = _gst_structure_get_datePtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GDate>>)>();

  int gst_structure_get_date_time(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<ffi.Pointer<GstDateTime>> value,
  ) {
    return _gst_structure_get_date_time(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_date_timePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstStructure>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GstDateTime>>)>>(
      'gst_structure_get_date_time');
  late final _gst_structure_get_date_time =
      _gst_structure_get_date_timePtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GstDateTime>>)>();

  int gst_structure_get_clock_time(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<GstClockTime> value,
  ) {
    return _gst_structure_get_clock_time(
      structure,
      fieldname,
      value,
    );
  }

  late final _gst_structure_get_clock_timePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstClockTime>)>>('gst_structure_get_clock_time');
  late final _gst_structure_get_clock_time =
      _gst_structure_get_clock_timePtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<ffi.Char> gst_structure_get_string(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_structure_get_string(
      structure,
      fieldname,
    );
  }

  late final _gst_structure_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_get_string');
  late final _gst_structure_get_string =
      _gst_structure_get_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  int gst_structure_get_enum(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    int enumtype,
    ffi.Pointer<gint> value,
  ) {
    return _gst_structure_get_enum(
      structure,
      fieldname,
      enumtype,
      value,
    );
  }

  late final _gst_structure_get_enumPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              GType, ffi.Pointer<gint>)>>('gst_structure_get_enum');
  late final _gst_structure_get_enum = _gst_structure_get_enumPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<gint>)>();

  int gst_structure_get_fraction(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<gint> value_numerator,
    ffi.Pointer<gint> value_denominator,
  ) {
    return _gst_structure_get_fraction(
      structure,
      fieldname,
      value_numerator,
      value_denominator,
    );
  }

  late final _gst_structure_get_fractionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gst_structure_get_fraction');
  late final _gst_structure_get_fraction =
      _gst_structure_get_fractionPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int gst_structure_get_flagset(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<guint> value_flags,
    ffi.Pointer<guint> value_mask,
  ) {
    return _gst_structure_get_flagset(
      structure,
      fieldname,
      value_flags,
      value_mask,
    );
  }

  late final _gst_structure_get_flagsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>)>>('gst_structure_get_flagset');
  late final _gst_structure_get_flagset =
      _gst_structure_get_flagsetPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint>, ffi.Pointer<guint>)>();

  int gst_structure_get_array(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<ffi.Pointer<GValueArray>> array,
  ) {
    return _gst_structure_get_array(
      structure,
      fieldname,
      array,
    );
  }

  late final _gst_structure_get_arrayPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstStructure>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GValueArray>>)>>(
      'gst_structure_get_array');
  late final _gst_structure_get_array = _gst_structure_get_arrayPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GValueArray>>)>();

  int gst_structure_get_list(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    ffi.Pointer<ffi.Pointer<GValueArray>> array,
  ) {
    return _gst_structure_get_list(
      structure,
      fieldname,
      array,
    );
  }

  late final _gst_structure_get_listPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstStructure>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GValueArray>>)>>(
      'gst_structure_get_list');
  late final _gst_structure_get_list = _gst_structure_get_listPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GValueArray>>)>();

  int gst_structure_get_flags(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> fieldname,
    int flags_type,
    ffi.Pointer<guint> value,
  ) {
    return _gst_structure_get_flags(
      structure,
      fieldname,
      flags_type,
      value,
    );
  }

  late final _gst_structure_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              GType, ffi.Pointer<guint>)>>('gst_structure_get_flags');
  late final _gst_structure_get_flags = _gst_structure_get_flagsPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<guint>)>();

  ffi.Pointer<ffi.Char> gst_structure_to_string(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_to_string(
      structure,
    );
  }

  late final _gst_structure_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstStructure>)>>('gst_structure_to_string');
  late final _gst_structure_to_string = _gst_structure_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>)>();

  ffi.Pointer<ffi.Char> gst_structure_serialize(
    ffi.Pointer<GstStructure> structure,
    int flags,
  ) {
    return _gst_structure_serialize(
      structure,
      flags,
    );
  }

  late final _gst_structure_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>,
              ffi.Int32)>>('gst_structure_serialize');
  late final _gst_structure_serialize = _gst_structure_serializePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>, int)>();

  ffi.Pointer<ffi.Char> gst_structure_serialize_full(
    ffi.Pointer<GstStructure> structure,
    int flags,
  ) {
    return _gst_structure_serialize_full(
      structure,
      flags,
    );
  }

  late final _gst_structure_serialize_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>,
              ffi.Int32)>>('gst_structure_serialize_full');
  late final _gst_structure_serialize_full =
      _gst_structure_serialize_fullPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>, int)>();

  ffi.Pointer<GstStructure> gst_structure_from_string(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end,
  ) {
    return _gst_structure_from_string(
      string,
      end,
    );
  }

  late final _gst_structure_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstStructure> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_structure_from_string');
  late final _gst_structure_from_string =
      _gst_structure_from_stringPtr.asFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_structure_fixate_field_nearest_int(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> field_name,
    int target,
  ) {
    return _gst_structure_fixate_field_nearest_int(
      structure,
      field_name,
      target,
    );
  }

  late final _gst_structure_fixate_field_nearest_intPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('gst_structure_fixate_field_nearest_int');
  late final _gst_structure_fixate_field_nearest_int =
      _gst_structure_fixate_field_nearest_intPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, int)>();

  int gst_structure_fixate_field_nearest_double(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> field_name,
    double target,
  ) {
    return _gst_structure_fixate_field_nearest_double(
      structure,
      field_name,
      target,
    );
  }

  late final _gst_structure_fixate_field_nearest_doublePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Double)>>('gst_structure_fixate_field_nearest_double');
  late final _gst_structure_fixate_field_nearest_double =
      _gst_structure_fixate_field_nearest_doublePtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, double)>();

  int gst_structure_fixate_field_boolean(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> field_name,
    int target,
  ) {
    return _gst_structure_fixate_field_boolean(
      structure,
      field_name,
      target,
    );
  }

  late final _gst_structure_fixate_field_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              gboolean)>>('gst_structure_fixate_field_boolean');
  late final _gst_structure_fixate_field_boolean =
      _gst_structure_fixate_field_booleanPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, int)>();

  int gst_structure_fixate_field_string(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> field_name,
    ffi.Pointer<ffi.Char> target,
  ) {
    return _gst_structure_fixate_field_string(
      structure,
      field_name,
      target,
    );
  }

  late final _gst_structure_fixate_field_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_fixate_field_string');
  late final _gst_structure_fixate_field_string =
      _gst_structure_fixate_field_stringPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int gst_structure_fixate_field_nearest_fraction(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> field_name,
    int target_numerator,
    int target_denominator,
  ) {
    return _gst_structure_fixate_field_nearest_fraction(
      structure,
      field_name,
      target_numerator,
      target_denominator,
    );
  }

  late final _gst_structure_fixate_field_nearest_fractionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>,
              gint, gint)>>('gst_structure_fixate_field_nearest_fraction');
  late final _gst_structure_fixate_field_nearest_fraction =
      _gst_structure_fixate_field_nearest_fractionPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>, int, int)>();

  int gst_structure_fixate_field(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<ffi.Char> field_name,
  ) {
    return _gst_structure_fixate_field(
      structure,
      field_name,
    );
  }

  late final _gst_structure_fixate_fieldPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_structure_fixate_field');
  late final _gst_structure_fixate_field =
      _gst_structure_fixate_fieldPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  void gst_structure_fixate(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_structure_fixate(
      structure,
    );
  }

  late final _gst_structure_fixatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstStructure>)>>(
          'gst_structure_fixate');
  late final _gst_structure_fixate = _gst_structure_fixatePtr
      .asFunction<void Function(ffi.Pointer<GstStructure>)>();

  int gst_structure_is_equal(
    ffi.Pointer<GstStructure> structure1,
    ffi.Pointer<GstStructure> structure2,
  ) {
    return _gst_structure_is_equal(
      structure1,
      structure2,
    );
  }

  late final _gst_structure_is_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<GstStructure>)>>('gst_structure_is_equal');
  late final _gst_structure_is_equal = _gst_structure_is_equalPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstStructure>)>();

  int gst_structure_is_subset(
    ffi.Pointer<GstStructure> subset,
    ffi.Pointer<GstStructure> superset,
  ) {
    return _gst_structure_is_subset(
      subset,
      superset,
    );
  }

  late final _gst_structure_is_subsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<GstStructure>)>>('gst_structure_is_subset');
  late final _gst_structure_is_subset = _gst_structure_is_subsetPtr.asFunction<
      int Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstStructure>)>();

  int gst_structure_can_intersect(
    ffi.Pointer<GstStructure> struct1,
    ffi.Pointer<GstStructure> struct2,
  ) {
    return _gst_structure_can_intersect(
      struct1,
      struct2,
    );
  }

  late final _gst_structure_can_intersectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<GstStructure>)>>('gst_structure_can_intersect');
  late final _gst_structure_can_intersect =
      _gst_structure_can_intersectPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstStructure> gst_structure_intersect(
    ffi.Pointer<GstStructure> struct1,
    ffi.Pointer<GstStructure> struct2,
  ) {
    return _gst_structure_intersect(
      struct1,
      struct2,
    );
  }

  late final _gst_structure_intersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<GstStructure>)>>('gst_structure_intersect');
  late final _gst_structure_intersect = _gst_structure_intersectPtr.asFunction<
      ffi.Pointer<GstStructure> Function(
          ffi.Pointer<GstStructure>, ffi.Pointer<GstStructure>)>();

  late final ffi.Pointer<GType> __gst_caps_features_type =
      _lookup<GType>('_gst_caps_features_type');

  int get _gst_caps_features_type => __gst_caps_features_type.value;

  set _gst_caps_features_type(int value) =>
      __gst_caps_features_type.value = value;

  late final ffi.Pointer<ffi.Pointer<GstCapsFeatures>> __gst_caps_features_any =
      _lookup<ffi.Pointer<GstCapsFeatures>>('_gst_caps_features_any');

  ffi.Pointer<GstCapsFeatures> get _gst_caps_features_any =>
      __gst_caps_features_any.value;

  set _gst_caps_features_any(ffi.Pointer<GstCapsFeatures> value) =>
      __gst_caps_features_any.value = value;

  late final ffi.Pointer<ffi.Pointer<GstCapsFeatures>>
      __gst_caps_features_memory_system_memory =
      _lookup<ffi.Pointer<GstCapsFeatures>>(
          '_gst_caps_features_memory_system_memory');

  ffi.Pointer<GstCapsFeatures> get _gst_caps_features_memory_system_memory =>
      __gst_caps_features_memory_system_memory.value;

  set _gst_caps_features_memory_system_memory(
          ffi.Pointer<GstCapsFeatures> value) =>
      __gst_caps_features_memory_system_memory.value = value;

  int gst_caps_features_get_type() {
    return _gst_caps_features_get_type();
  }

  late final _gst_caps_features_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_caps_features_get_type');
  late final _gst_caps_features_get_type =
      _gst_caps_features_get_typePtr.asFunction<int Function()>();

  int gst_is_caps_features(
    gconstpointer obj,
  ) {
    return _gst_is_caps_features(
      obj,
    );
  }

  late final _gst_is_caps_featuresPtr =
      _lookup<ffi.NativeFunction<gboolean Function(gconstpointer)>>(
          'gst_is_caps_features');
  late final _gst_is_caps_features =
      _gst_is_caps_featuresPtr.asFunction<int Function(gconstpointer)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new_empty() {
    return _gst_caps_features_new_empty();
  }

  late final _gst_caps_features_new_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstCapsFeatures> Function()>>(
          'gst_caps_features_new_empty');
  late final _gst_caps_features_new_empty = _gst_caps_features_new_emptyPtr
      .asFunction<ffi.Pointer<GstCapsFeatures> Function()>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new_any() {
    return _gst_caps_features_new_any();
  }

  late final _gst_caps_features_new_anyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstCapsFeatures> Function()>>(
          'gst_caps_features_new_any');
  late final _gst_caps_features_new_any = _gst_caps_features_new_anyPtr
      .asFunction<ffi.Pointer<GstCapsFeatures> Function()>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new_single(
    ffi.Pointer<ffi.Char> feature,
  ) {
    return _gst_caps_features_new_single(
      feature,
    );
  }

  late final _gst_caps_features_new_singlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<ffi.Char>)>>('gst_caps_features_new_single');
  late final _gst_caps_features_new_single =
      _gst_caps_features_new_singlePtr.asFunction<
          ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new(
    ffi.Pointer<ffi.Char> feature1,
  ) {
    return _gst_caps_features_new(
      feature1,
    );
  }

  late final _gst_caps_features_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<ffi.Char>)>>('gst_caps_features_new');
  late final _gst_caps_features_new = _gst_caps_features_newPtr.asFunction<
      ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new_valist(
    ffi.Pointer<ffi.Char> feature1,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_caps_features_new_valist(
      feature1,
      varargs,
    );
  }

  late final _gst_caps_features_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_caps_features_new_valist');
  late final _gst_caps_features_new_valist =
      _gst_caps_features_new_valistPtr.asFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new_id(
    int feature1,
  ) {
    return _gst_caps_features_new_id(
      feature1,
    );
  }

  late final _gst_caps_features_new_idPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GstCapsFeatures> Function(GQuark)>>(
      'gst_caps_features_new_id');
  late final _gst_caps_features_new_id = _gst_caps_features_new_idPtr
      .asFunction<ffi.Pointer<GstCapsFeatures> Function(int)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_new_id_valist(
    int feature1,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_caps_features_new_id_valist(
      feature1,
      varargs,
    );
  }

  late final _gst_caps_features_new_id_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(GQuark,
              ffi.Pointer<__va_list_tag>)>>('gst_caps_features_new_id_valist');
  late final _gst_caps_features_new_id_valist =
      _gst_caps_features_new_id_valistPtr.asFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              int, ffi.Pointer<__va_list_tag>)>();

  int gst_caps_features_set_parent_refcount(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<gint> refcount,
  ) {
    return _gst_caps_features_set_parent_refcount(
      features,
      refcount,
    );
  }

  late final _gst_caps_features_set_parent_refcountPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCapsFeatures>,
              ffi.Pointer<gint>)>>('gst_caps_features_set_parent_refcount');
  late final _gst_caps_features_set_parent_refcount =
      _gst_caps_features_set_parent_refcountPtr.asFunction<
          int Function(ffi.Pointer<GstCapsFeatures>, ffi.Pointer<gint>)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_copy(
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_features_copy(
      features,
    );
  }

  late final _gst_caps_features_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_features_copy');
  late final _gst_caps_features_copy = _gst_caps_features_copyPtr.asFunction<
      ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<GstCapsFeatures>)>();

  void gst_caps_features_free(
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_features_free(
      features,
    );
  }

  late final _gst_caps_features_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstCapsFeatures>)>>(
      'gst_caps_features_free');
  late final _gst_caps_features_free = _gst_caps_features_freePtr
      .asFunction<void Function(ffi.Pointer<GstCapsFeatures>)>();

  ffi.Pointer<ffi.Char> gst_caps_features_to_string(
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_features_to_string(
      features,
    );
  }

  late final _gst_caps_features_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_features_to_string');
  late final _gst_caps_features_to_string =
      _gst_caps_features_to_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstCapsFeatures>)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_features_from_string(
    ffi.Pointer<ffi.Char> features,
  ) {
    return _gst_caps_features_from_string(
      features,
    );
  }

  late final _gst_caps_features_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<ffi.Char>)>>('gst_caps_features_from_string');
  late final _gst_caps_features_from_string =
      _gst_caps_features_from_stringPtr.asFunction<
          ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<ffi.Char>)>();

  int gst_caps_features_get_size(
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_features_get_size(
      features,
    );
  }

  late final _gst_caps_features_get_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstCapsFeatures>)>>(
          'gst_caps_features_get_size');
  late final _gst_caps_features_get_size = _gst_caps_features_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GstCapsFeatures>)>();

  ffi.Pointer<ffi.Char> gst_caps_features_get_nth(
    ffi.Pointer<GstCapsFeatures> features,
    int i,
  ) {
    return _gst_caps_features_get_nth(
      features,
      i,
    );
  }

  late final _gst_caps_features_get_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstCapsFeatures>,
              guint)>>('gst_caps_features_get_nth');
  late final _gst_caps_features_get_nth =
      _gst_caps_features_get_nthPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstCapsFeatures>, int)>();

  int gst_caps_features_get_nth_id(
    ffi.Pointer<GstCapsFeatures> features,
    int i,
  ) {
    return _gst_caps_features_get_nth_id(
      features,
      i,
    );
  }

  late final _gst_caps_features_get_nth_idPtr = _lookup<
      ffi.NativeFunction<
          GQuark Function(ffi.Pointer<GstCapsFeatures>,
              guint)>>('gst_caps_features_get_nth_id');
  late final _gst_caps_features_get_nth_id = _gst_caps_features_get_nth_idPtr
      .asFunction<int Function(ffi.Pointer<GstCapsFeatures>, int)>();

  int gst_caps_features_contains(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<ffi.Char> feature,
  ) {
    return _gst_caps_features_contains(
      features,
      feature,
    );
  }

  late final _gst_caps_features_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCapsFeatures>,
              ffi.Pointer<ffi.Char>)>>('gst_caps_features_contains');
  late final _gst_caps_features_contains =
      _gst_caps_features_containsPtr.asFunction<
          int Function(ffi.Pointer<GstCapsFeatures>, ffi.Pointer<ffi.Char>)>();

  int gst_caps_features_contains_id(
    ffi.Pointer<GstCapsFeatures> features,
    int feature,
  ) {
    return _gst_caps_features_contains_id(
      features,
      feature,
    );
  }

  late final _gst_caps_features_contains_idPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCapsFeatures>,
              GQuark)>>('gst_caps_features_contains_id');
  late final _gst_caps_features_contains_id = _gst_caps_features_contains_idPtr
      .asFunction<int Function(ffi.Pointer<GstCapsFeatures>, int)>();

  int gst_caps_features_is_equal(
    ffi.Pointer<GstCapsFeatures> features1,
    ffi.Pointer<GstCapsFeatures> features2,
  ) {
    return _gst_caps_features_is_equal(
      features1,
      features2,
    );
  }

  late final _gst_caps_features_is_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCapsFeatures>,
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_features_is_equal');
  late final _gst_caps_features_is_equal =
      _gst_caps_features_is_equalPtr.asFunction<
          int Function(
              ffi.Pointer<GstCapsFeatures>, ffi.Pointer<GstCapsFeatures>)>();

  int gst_caps_features_is_any(
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_features_is_any(
      features,
    );
  }

  late final _gst_caps_features_is_anyPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstCapsFeatures>)>>(
      'gst_caps_features_is_any');
  late final _gst_caps_features_is_any = _gst_caps_features_is_anyPtr
      .asFunction<int Function(ffi.Pointer<GstCapsFeatures>)>();

  void gst_caps_features_add(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<ffi.Char> feature,
  ) {
    return _gst_caps_features_add(
      features,
      feature,
    );
  }

  late final _gst_caps_features_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCapsFeatures>,
              ffi.Pointer<ffi.Char>)>>('gst_caps_features_add');
  late final _gst_caps_features_add = _gst_caps_features_addPtr.asFunction<
      void Function(ffi.Pointer<GstCapsFeatures>, ffi.Pointer<ffi.Char>)>();

  void gst_caps_features_add_id(
    ffi.Pointer<GstCapsFeatures> features,
    int feature,
  ) {
    return _gst_caps_features_add_id(
      features,
      feature,
    );
  }

  late final _gst_caps_features_add_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCapsFeatures>,
              GQuark)>>('gst_caps_features_add_id');
  late final _gst_caps_features_add_id = _gst_caps_features_add_idPtr
      .asFunction<void Function(ffi.Pointer<GstCapsFeatures>, int)>();

  void gst_caps_features_remove(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<ffi.Char> feature,
  ) {
    return _gst_caps_features_remove(
      features,
      feature,
    );
  }

  late final _gst_caps_features_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCapsFeatures>,
              ffi.Pointer<ffi.Char>)>>('gst_caps_features_remove');
  late final _gst_caps_features_remove =
      _gst_caps_features_removePtr.asFunction<
          void Function(ffi.Pointer<GstCapsFeatures>, ffi.Pointer<ffi.Char>)>();

  void gst_caps_features_remove_id(
    ffi.Pointer<GstCapsFeatures> features,
    int feature,
  ) {
    return _gst_caps_features_remove_id(
      features,
      feature,
    );
  }

  late final _gst_caps_features_remove_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCapsFeatures>,
              GQuark)>>('gst_caps_features_remove_id');
  late final _gst_caps_features_remove_id = _gst_caps_features_remove_idPtr
      .asFunction<void Function(ffi.Pointer<GstCapsFeatures>, int)>();

  late final ffi.Pointer<GType> __gst_caps_type =
      _lookup<GType>('_gst_caps_type');

  int get _gst_caps_type => __gst_caps_type.value;

  set _gst_caps_type(int value) => __gst_caps_type.value = value;

  late final ffi.Pointer<ffi.Pointer<GstCaps>> __gst_caps_any =
      _lookup<ffi.Pointer<GstCaps>>('_gst_caps_any');

  ffi.Pointer<GstCaps> get _gst_caps_any => __gst_caps_any.value;

  set _gst_caps_any(ffi.Pointer<GstCaps> value) => __gst_caps_any.value = value;

  late final ffi.Pointer<ffi.Pointer<GstCaps>> __gst_caps_none =
      _lookup<ffi.Pointer<GstCaps>>('_gst_caps_none');

  ffi.Pointer<GstCaps> get _gst_caps_none => __gst_caps_none.value;

  set _gst_caps_none(ffi.Pointer<GstCaps> value) =>
      __gst_caps_none.value = value;

  ffi.Pointer<GstCaps> gst_caps_copy(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_copy(
      caps,
    );
  }

  late final _gst_caps_copyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>>(
      'gst_caps_copy');
  late final _gst_caps_copy = _gst_caps_copyPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>();

  int gst_caps_get_type() {
    return _gst_caps_get_type();
  }

  late final _gst_caps_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_caps_get_type');
  late final _gst_caps_get_type =
      _gst_caps_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstCaps> gst_caps_new_empty() {
    return _gst_caps_new_empty();
  }

  late final _gst_caps_new_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstCaps> Function()>>(
          'gst_caps_new_empty');
  late final _gst_caps_new_empty =
      _gst_caps_new_emptyPtr.asFunction<ffi.Pointer<GstCaps> Function()>();

  ffi.Pointer<GstCaps> gst_caps_new_any() {
    return _gst_caps_new_any();
  }

  late final _gst_caps_new_anyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstCaps> Function()>>(
          'gst_caps_new_any');
  late final _gst_caps_new_any =
      _gst_caps_new_anyPtr.asFunction<ffi.Pointer<GstCaps> Function()>();

  ffi.Pointer<GstCaps> gst_caps_new_empty_simple(
    ffi.Pointer<ffi.Char> media_type,
  ) {
    return _gst_caps_new_empty_simple(
      media_type,
    );
  }

  late final _gst_caps_new_empty_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<ffi.Char>)>>('gst_caps_new_empty_simple');
  late final _gst_caps_new_empty_simple = _gst_caps_new_empty_simplePtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstCaps> gst_caps_new_simple(
    ffi.Pointer<ffi.Char> media_type,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_caps_new_simple(
      media_type,
      fieldname,
    );
  }

  late final _gst_caps_new_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_caps_new_simple');
  late final _gst_caps_new_simple = _gst_caps_new_simplePtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstCaps> gst_caps_new_full(
    ffi.Pointer<GstStructure> struct1,
  ) {
    return _gst_caps_new_full(
      struct1,
    );
  }

  late final _gst_caps_new_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstStructure>)>>('gst_caps_new_full');
  late final _gst_caps_new_full = _gst_caps_new_fullPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstCaps> gst_caps_new_full_valist(
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_caps_new_full_valist(
      structure,
      var_args,
    );
  }

  late final _gst_caps_new_full_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<__va_list_tag>)>>('gst_caps_new_full_valist');
  late final _gst_caps_new_full_valist =
      _gst_caps_new_full_valistPtr.asFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstStructure>, ffi.Pointer<__va_list_tag>)>();

  /// gst_static_caps_get_type: (attributes doc.skip=true)
  int gst_static_caps_get_type() {
    return _gst_static_caps_get_type();
  }

  late final _gst_static_caps_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_static_caps_get_type');
  late final _gst_static_caps_get_type =
      _gst_static_caps_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstCaps> gst_static_caps_get(
    ffi.Pointer<GstStaticCaps> static_caps,
  ) {
    return _gst_static_caps_get(
      static_caps,
    );
  }

  late final _gst_static_caps_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstStaticCaps>)>>('gst_static_caps_get');
  late final _gst_static_caps_get = _gst_static_caps_getPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstStaticCaps>)>();

  void gst_static_caps_cleanup(
    ffi.Pointer<GstStaticCaps> static_caps,
  ) {
    return _gst_static_caps_cleanup(
      static_caps,
    );
  }

  late final _gst_static_caps_cleanupPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstStaticCaps>)>>(
      'gst_static_caps_cleanup');
  late final _gst_static_caps_cleanup = _gst_static_caps_cleanupPtr
      .asFunction<void Function(ffi.Pointer<GstStaticCaps>)>();

  void gst_caps_append(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_append(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>>('gst_caps_append');
  late final _gst_caps_append = _gst_caps_appendPtr
      .asFunction<void Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  void gst_caps_append_structure(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_caps_append_structure(
      caps,
      structure,
    );
  }

  late final _gst_caps_append_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstStructure>)>>('gst_caps_append_structure');
  late final _gst_caps_append_structure =
      _gst_caps_append_structurePtr.asFunction<
          void Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>)>();

  void gst_caps_append_structure_full(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_append_structure_full(
      caps,
      structure,
      features,
    );
  }

  late final _gst_caps_append_structure_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>,
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_append_structure_full');
  late final _gst_caps_append_structure_full =
      _gst_caps_append_structure_fullPtr.asFunction<
          void Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>,
              ffi.Pointer<GstCapsFeatures>)>();

  void gst_caps_remove_structure(
    ffi.Pointer<GstCaps> caps,
    int idx,
  ) {
    return _gst_caps_remove_structure(
      caps,
      idx,
    );
  }

  late final _gst_caps_remove_structurePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstCaps>, guint)>>(
      'gst_caps_remove_structure');
  late final _gst_caps_remove_structure = _gst_caps_remove_structurePtr
      .asFunction<void Function(ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstCaps> gst_caps_merge(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_merge(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>>('gst_caps_merge');
  late final _gst_caps_merge = _gst_caps_mergePtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_caps_merge_structure(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_caps_merge_structure(
      caps,
      structure,
    );
  }

  late final _gst_caps_merge_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstStructure>)>>('gst_caps_merge_structure');
  late final _gst_caps_merge_structure =
      _gst_caps_merge_structurePtr.asFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstCaps> gst_caps_merge_structure_full(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_merge_structure_full(
      caps,
      structure,
      features,
    );
  }

  late final _gst_caps_merge_structure_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstCaps>,
              ffi.Pointer<GstStructure>,
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_merge_structure_full');
  late final _gst_caps_merge_structure_full =
      _gst_caps_merge_structure_fullPtr.asFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstStructure>, ffi.Pointer<GstCapsFeatures>)>();

  int gst_caps_get_size(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_get_size(
      caps,
    );
  }

  late final _gst_caps_get_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstCaps>)>>(
          'gst_caps_get_size');
  late final _gst_caps_get_size =
      _gst_caps_get_sizePtr.asFunction<int Function(ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstStructure> gst_caps_get_structure(
    ffi.Pointer<GstCaps> caps,
    int index,
  ) {
    return _gst_caps_get_structure(
      caps,
      index,
    );
  }

  late final _gst_caps_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstCaps>, guint)>>('gst_caps_get_structure');
  late final _gst_caps_get_structure = _gst_caps_get_structurePtr.asFunction<
      ffi.Pointer<GstStructure> Function(ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstStructure> gst_caps_steal_structure(
    ffi.Pointer<GstCaps> caps,
    int index,
  ) {
    return _gst_caps_steal_structure(
      caps,
      index,
    );
  }

  late final _gst_caps_steal_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstCaps>, guint)>>('gst_caps_steal_structure');
  late final _gst_caps_steal_structure =
      _gst_caps_steal_structurePtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstCaps>, int)>();

  void gst_caps_set_features(
    ffi.Pointer<GstCaps> caps,
    int index,
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_set_features(
      caps,
      index,
      features,
    );
  }

  late final _gst_caps_set_featuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>, guint,
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_set_features');
  late final _gst_caps_set_features = _gst_caps_set_featuresPtr.asFunction<
      void Function(ffi.Pointer<GstCaps>, int, ffi.Pointer<GstCapsFeatures>)>();

  void gst_caps_set_features_simple(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_set_features_simple(
      caps,
      features,
    );
  }

  late final _gst_caps_set_features_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCapsFeatures>)>>('gst_caps_set_features_simple');
  late final _gst_caps_set_features_simple =
      _gst_caps_set_features_simplePtr.asFunction<
          void Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCapsFeatures>)>();

  ffi.Pointer<GstCapsFeatures> gst_caps_get_features(
    ffi.Pointer<GstCaps> caps,
    int index,
  ) {
    return _gst_caps_get_features(
      caps,
      index,
    );
  }

  late final _gst_caps_get_featuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<GstCaps>, guint)>>('gst_caps_get_features');
  late final _gst_caps_get_features = _gst_caps_get_featuresPtr.asFunction<
      ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstCaps> gst_caps_copy_nth(
    ffi.Pointer<GstCaps> caps,
    int nth,
  ) {
    return _gst_caps_copy_nth(
      caps,
      nth,
    );
  }

  late final _gst_caps_copy_nthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstCaps>, guint)>>('gst_caps_copy_nth');
  late final _gst_caps_copy_nth = _gst_caps_copy_nthPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstCaps> gst_caps_truncate(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_truncate(
      caps,
    );
  }

  late final _gst_caps_truncatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>>(
      'gst_caps_truncate');
  late final _gst_caps_truncate = _gst_caps_truncatePtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>();

  void gst_caps_set_value(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<ffi.Char> field,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_caps_set_value(
      caps,
      field,
      value,
    );
  }

  late final _gst_caps_set_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_caps_set_value');
  late final _gst_caps_set_value = _gst_caps_set_valuePtr.asFunction<
      void Function(
          ffi.Pointer<GstCaps>, ffi.Pointer<ffi.Char>, ffi.Pointer<GValue>)>();

  void gst_caps_set_simple(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<ffi.Char> field,
  ) {
    return _gst_caps_set_simple(
      caps,
      field,
    );
  }

  late final _gst_caps_set_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<ffi.Char>)>>('gst_caps_set_simple');
  late final _gst_caps_set_simple = _gst_caps_set_simplePtr
      .asFunction<void Function(ffi.Pointer<GstCaps>, ffi.Pointer<ffi.Char>)>();

  void gst_caps_set_simple_valist(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<ffi.Char> field,
    ffi.Pointer<__va_list_tag> varargs,
  ) {
    return _gst_caps_set_simple_valist(
      caps,
      field,
      varargs,
    );
  }

  late final _gst_caps_set_simple_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_caps_set_simple_valist');
  late final _gst_caps_set_simple_valist =
      _gst_caps_set_simple_valistPtr.asFunction<
          void Function(ffi.Pointer<GstCaps>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int gst_caps_foreach(
    ffi.Pointer<GstCaps> caps,
    GstCapsForeachFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_caps_foreach(
      caps,
      func,
      user_data,
    );
  }

  late final _gst_caps_foreachPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>, GstCapsForeachFunc,
              ffi.Pointer)>>('gst_caps_foreach');
  late final _gst_caps_foreach = _gst_caps_foreachPtr.asFunction<
      int Function(ffi.Pointer<GstCaps>, GstCapsForeachFunc, ffi.Pointer)>();

  int gst_caps_map_in_place(
    ffi.Pointer<GstCaps> caps,
    GstCapsMapFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_caps_map_in_place(
      caps,
      func,
      user_data,
    );
  }

  late final _gst_caps_map_in_placePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>, GstCapsMapFunc,
              ffi.Pointer)>>('gst_caps_map_in_place');
  late final _gst_caps_map_in_place = _gst_caps_map_in_placePtr.asFunction<
      int Function(ffi.Pointer<GstCaps>, GstCapsMapFunc, ffi.Pointer)>();

  void gst_caps_filter_and_map_in_place(
    ffi.Pointer<GstCaps> caps,
    GstCapsFilterMapFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_caps_filter_and_map_in_place(
      caps,
      func,
      user_data,
    );
  }

  late final _gst_caps_filter_and_map_in_placePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstCaps>, GstCapsFilterMapFunc,
              ffi.Pointer)>>('gst_caps_filter_and_map_in_place');
  late final _gst_caps_filter_and_map_in_place =
      _gst_caps_filter_and_map_in_placePtr.asFunction<
          void Function(
              ffi.Pointer<GstCaps>, GstCapsFilterMapFunc, ffi.Pointer)>();

  int gst_caps_is_any(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_is_any(
      caps,
    );
  }

  late final _gst_caps_is_anyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstCaps>)>>(
          'gst_caps_is_any');
  late final _gst_caps_is_any =
      _gst_caps_is_anyPtr.asFunction<int Function(ffi.Pointer<GstCaps>)>();

  int gst_caps_is_empty(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_is_empty(
      caps,
    );
  }

  late final _gst_caps_is_emptyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstCaps>)>>(
          'gst_caps_is_empty');
  late final _gst_caps_is_empty =
      _gst_caps_is_emptyPtr.asFunction<int Function(ffi.Pointer<GstCaps>)>();

  int gst_caps_is_fixed(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_is_fixed(
      caps,
    );
  }

  late final _gst_caps_is_fixedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstCaps>)>>(
          'gst_caps_is_fixed');
  late final _gst_caps_is_fixed =
      _gst_caps_is_fixedPtr.asFunction<int Function(ffi.Pointer<GstCaps>)>();

  int gst_caps_is_always_compatible(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_is_always_compatible(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_is_always_compatiblePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_is_always_compatible');
  late final _gst_caps_is_always_compatible = _gst_caps_is_always_compatiblePtr
      .asFunction<int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  int gst_caps_is_subset(
    ffi.Pointer<GstCaps> subset,
    ffi.Pointer<GstCaps> superset,
  ) {
    return _gst_caps_is_subset(
      subset,
      superset,
    );
  }

  late final _gst_caps_is_subsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_is_subset');
  late final _gst_caps_is_subset = _gst_caps_is_subsetPtr
      .asFunction<int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  int gst_caps_is_subset_structure(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_caps_is_subset_structure(
      caps,
      structure,
    );
  }

  late final _gst_caps_is_subset_structurePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstStructure>)>>('gst_caps_is_subset_structure');
  late final _gst_caps_is_subset_structure =
      _gst_caps_is_subset_structurePtr.asFunction<
          int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>)>();

  int gst_caps_is_subset_structure_full(
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_caps_is_subset_structure_full(
      caps,
      structure,
      features,
    );
  }

  late final _gst_caps_is_subset_structure_fullPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>,
                  ffi.Pointer<GstCapsFeatures>)>>(
      'gst_caps_is_subset_structure_full');
  late final _gst_caps_is_subset_structure_full =
      _gst_caps_is_subset_structure_fullPtr.asFunction<
          int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstStructure>,
              ffi.Pointer<GstCapsFeatures>)>();

  int gst_caps_is_equal(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_is_equal(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_is_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_is_equal');
  late final _gst_caps_is_equal = _gst_caps_is_equalPtr
      .asFunction<int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  int gst_caps_is_equal_fixed(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_is_equal_fixed(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_is_equal_fixedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_is_equal_fixed');
  late final _gst_caps_is_equal_fixed = _gst_caps_is_equal_fixedPtr
      .asFunction<int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  int gst_caps_can_intersect(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_can_intersect(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_can_intersectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_can_intersect');
  late final _gst_caps_can_intersect = _gst_caps_can_intersectPtr
      .asFunction<int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  int gst_caps_is_strictly_equal(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_is_strictly_equal(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_is_strictly_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_is_strictly_equal');
  late final _gst_caps_is_strictly_equal = _gst_caps_is_strictly_equalPtr
      .asFunction<int Function(ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_caps_intersect(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
  ) {
    return _gst_caps_intersect(
      caps1,
      caps2,
    );
  }

  late final _gst_caps_intersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_intersect');
  late final _gst_caps_intersect = _gst_caps_intersectPtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_caps_intersect_full(
    ffi.Pointer<GstCaps> caps1,
    ffi.Pointer<GstCaps> caps2,
    int mode,
  ) {
    return _gst_caps_intersect_full(
      caps1,
      caps2,
      mode,
    );
  }

  late final _gst_caps_intersect_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>, ffi.Int32)>>('gst_caps_intersect_full');
  late final _gst_caps_intersect_full = _gst_caps_intersect_fullPtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstCaps> gst_caps_subtract(
    ffi.Pointer<GstCaps> minuend,
    ffi.Pointer<GstCaps> subtrahend,
  ) {
    return _gst_caps_subtract(
      minuend,
      subtrahend,
    );
  }

  late final _gst_caps_subtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>,
              ffi.Pointer<GstCaps>)>>('gst_caps_subtract');
  late final _gst_caps_subtract = _gst_caps_subtractPtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<GstCaps>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_caps_normalize(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_normalize(
      caps,
    );
  }

  late final _gst_caps_normalizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>>(
      'gst_caps_normalize');
  late final _gst_caps_normalize = _gst_caps_normalizePtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_caps_simplify(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_simplify(
      caps,
    );
  }

  late final _gst_caps_simplifyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>>(
      'gst_caps_simplify');
  late final _gst_caps_simplify = _gst_caps_simplifyPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_caps_fixate(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_fixate(
      caps,
    );
  }

  late final _gst_caps_fixatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>>(
      'gst_caps_fixate');
  late final _gst_caps_fixate = _gst_caps_fixatePtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstCaps>)>();

  ffi.Pointer<ffi.Char> gst_caps_to_string(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_caps_to_string(
      caps,
    );
  }

  late final _gst_caps_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstCaps>)>>('gst_caps_to_string');
  late final _gst_caps_to_string = _gst_caps_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstCaps>)>();

  ffi.Pointer<ffi.Char> gst_caps_serialize(
    ffi.Pointer<GstCaps> caps,
    int flags,
  ) {
    return _gst_caps_serialize(
      caps,
      flags,
    );
  }

  late final _gst_caps_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstCaps>, ffi.Int32)>>('gst_caps_serialize');
  late final _gst_caps_serialize = _gst_caps_serializePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstCaps> gst_caps_from_string(
    ffi.Pointer<ffi.Char> string,
  ) {
    return _gst_caps_from_string(
      string,
    );
  }

  late final _gst_caps_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<ffi.Char>)>>('gst_caps_from_string');
  late final _gst_caps_from_string = _gst_caps_from_stringPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<GType> __gst_buffer_type =
      _lookup<GType>('_gst_buffer_type');

  int get _gst_buffer_type => __gst_buffer_type.value;

  set _gst_buffer_type(int value) => __gst_buffer_type.value = value;

  /// gst_meta_transform_copy:
  ///
  /// GQuark for the "gst-copy" transform.
  late final ffi.Pointer<GQuark> __gst_meta_transform_copy =
      _lookup<GQuark>('_gst_meta_transform_copy');

  int get _gst_meta_transform_copy => __gst_meta_transform_copy.value;

  set _gst_meta_transform_copy(int value) =>
      __gst_meta_transform_copy.value = value;

  int gst_meta_api_type_register(
    ffi.Pointer<ffi.Char> api,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tags,
  ) {
    return _gst_meta_api_type_register(
      api,
      tags,
    );
  }

  late final _gst_meta_api_type_registerPtr = _lookup<
          ffi.NativeFunction<
              GType Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_meta_api_type_register');
  late final _gst_meta_api_type_register =
      _gst_meta_api_type_registerPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_meta_api_type_has_tag(
    int api,
    int tag,
  ) {
    return _gst_meta_api_type_has_tag(
      api,
      tag,
    );
  }

  late final _gst_meta_api_type_has_tagPtr =
      _lookup<ffi.NativeFunction<gboolean Function(GType, GQuark)>>(
          'gst_meta_api_type_has_tag');
  late final _gst_meta_api_type_has_tag =
      _gst_meta_api_type_has_tagPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<GstMetaInfo> gst_meta_register(
    int api,
    ffi.Pointer<ffi.Char> impl,
    int size,
    GstMetaInitFunction init_func,
    GstMetaFreeFunction free_func,
    GstMetaTransformFunction transform_func,
  ) {
    return _gst_meta_register(
      api,
      impl,
      size,
      init_func,
      free_func,
      transform_func,
    );
  }

  late final _gst_meta_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMetaInfo> Function(
              GType,
              ffi.Pointer<ffi.Char>,
              gsize,
              GstMetaInitFunction,
              GstMetaFreeFunction,
              GstMetaTransformFunction)>>('gst_meta_register');
  late final _gst_meta_register = _gst_meta_registerPtr.asFunction<
      ffi.Pointer<GstMetaInfo> Function(
          int,
          ffi.Pointer<ffi.Char>,
          int,
          GstMetaInitFunction,
          GstMetaFreeFunction,
          GstMetaTransformFunction)>();

  ffi.Pointer<GstMetaInfo> gst_meta_info_new(
    int api,
    ffi.Pointer<ffi.Char> impl,
    int size,
  ) {
    return _gst_meta_info_new(
      api,
      impl,
      size,
    );
  }

  late final _gst_meta_info_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMetaInfo> Function(
              GType, ffi.Pointer<ffi.Char>, gsize)>>('gst_meta_info_new');
  late final _gst_meta_info_new = _gst_meta_info_newPtr.asFunction<
      ffi.Pointer<GstMetaInfo> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GstMetaInfo> gst_meta_info_register(
    ffi.Pointer<GstMetaInfo> info,
  ) {
    return _gst_meta_info_register(
      info,
    );
  }

  late final _gst_meta_info_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMetaInfo> Function(
              ffi.Pointer<GstMetaInfo>)>>('gst_meta_info_register');
  late final _gst_meta_info_register = _gst_meta_info_registerPtr.asFunction<
      ffi.Pointer<GstMetaInfo> Function(ffi.Pointer<GstMetaInfo>)>();

  ffi.Pointer<GstMetaInfo> gst_meta_register_custom(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> tags,
    GstCustomMetaTransformFunction transform_func,
    ffi.Pointer user_data,
    GDestroyNotify destroy_data,
  ) {
    return _gst_meta_register_custom(
      name,
      tags,
      transform_func,
      user_data,
      destroy_data,
    );
  }

  late final _gst_meta_register_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMetaInfo> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              GstCustomMetaTransformFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_meta_register_custom');
  late final _gst_meta_register_custom =
      _gst_meta_register_customPtr.asFunction<
          ffi.Pointer<GstMetaInfo> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              GstCustomMetaTransformFunction,
              ffi.Pointer,
              GDestroyNotify)>();

  ffi.Pointer<GstMetaInfo> gst_meta_register_custom_simple(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_meta_register_custom_simple(
      name,
    );
  }

  late final _gst_meta_register_custom_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMetaInfo> Function(
              ffi.Pointer<ffi.Char>)>>('gst_meta_register_custom_simple');
  late final _gst_meta_register_custom_simple =
      _gst_meta_register_custom_simplePtr.asFunction<
          ffi.Pointer<GstMetaInfo> Function(ffi.Pointer<ffi.Char>)>();

  int gst_meta_info_is_custom(
    ffi.Pointer<GstMetaInfo> info,
  ) {
    return _gst_meta_info_is_custom(
      info,
    );
  }

  late final _gst_meta_info_is_customPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstMetaInfo>)>>(
          'gst_meta_info_is_custom');
  late final _gst_meta_info_is_custom = _gst_meta_info_is_customPtr
      .asFunction<int Function(ffi.Pointer<GstMetaInfo>)>();

  ffi.Pointer<GstStructure> gst_custom_meta_get_structure(
    ffi.Pointer<GstCustomMeta> meta,
  ) {
    return _gst_custom_meta_get_structure(
      meta,
    );
  }

  late final _gst_custom_meta_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstCustomMeta>)>>('gst_custom_meta_get_structure');
  late final _gst_custom_meta_get_structure =
      _gst_custom_meta_get_structurePtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstCustomMeta>)>();

  int gst_custom_meta_has_name(
    ffi.Pointer<GstCustomMeta> meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_custom_meta_has_name(
      meta,
      name,
    );
  }

  late final _gst_custom_meta_has_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstCustomMeta>,
              ffi.Pointer<ffi.Char>)>>('gst_custom_meta_has_name');
  late final _gst_custom_meta_has_name =
      _gst_custom_meta_has_namePtr.asFunction<
          int Function(ffi.Pointer<GstCustomMeta>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstMetaInfo> gst_meta_get_info(
    ffi.Pointer<ffi.Char> impl,
  ) {
    return _gst_meta_get_info(
      impl,
    );
  }

  late final _gst_meta_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMetaInfo> Function(
              ffi.Pointer<ffi.Char>)>>('gst_meta_get_info');
  late final _gst_meta_get_info = _gst_meta_get_infoPtr
      .asFunction<ffi.Pointer<GstMetaInfo> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_meta_api_type_get_tags(
    int api,
  ) {
    return _gst_meta_api_type_get_tags(
      api,
    );
  }

  late final _gst_meta_api_type_get_tagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function(GType)>>(
      'gst_meta_api_type_get_tags');
  late final _gst_meta_api_type_get_tags = _gst_meta_api_type_get_tagsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function(int)>();

  int gst_meta_get_seqnum(
    ffi.Pointer<GstMeta> meta,
  ) {
    return _gst_meta_get_seqnum(
      meta,
    );
  }

  late final _gst_meta_get_seqnumPtr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GstMeta>)>>(
          'gst_meta_get_seqnum');
  late final _gst_meta_get_seqnum =
      _gst_meta_get_seqnumPtr.asFunction<int Function(ffi.Pointer<GstMeta>)>();

  int gst_meta_compare_seqnum(
    ffi.Pointer<GstMeta> meta1,
    ffi.Pointer<GstMeta> meta2,
  ) {
    return _gst_meta_compare_seqnum(
      meta1,
      meta2,
    );
  }

  late final _gst_meta_compare_seqnumPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GstMeta>,
              ffi.Pointer<GstMeta>)>>('gst_meta_compare_seqnum');
  late final _gst_meta_compare_seqnum = _gst_meta_compare_seqnumPtr
      .asFunction<int Function(ffi.Pointer<GstMeta>, ffi.Pointer<GstMeta>)>();

  int gst_meta_serialize(
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer<GstByteArrayInterface> data,
  ) {
    return _gst_meta_serialize(
      meta,
      data,
    );
  }

  late final _gst_meta_serializePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMeta>,
              ffi.Pointer<GstByteArrayInterface>)>>('gst_meta_serialize');
  late final _gst_meta_serialize = _gst_meta_serializePtr.asFunction<
      int Function(ffi.Pointer<GstMeta>, ffi.Pointer<GstByteArrayInterface>)>();

  int gst_meta_serialize_simple(
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer<GByteArray> data,
  ) {
    return _gst_meta_serialize_simple(
      meta,
      data,
    );
  }

  late final _gst_meta_serialize_simplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMeta>,
              ffi.Pointer<GByteArray>)>>('gst_meta_serialize_simple');
  late final _gst_meta_serialize_simple =
      _gst_meta_serialize_simplePtr.asFunction<
          int Function(ffi.Pointer<GstMeta>, ffi.Pointer<GByteArray>)>();

  ffi.Pointer<GstMeta> gst_meta_deserialize(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<guint8> data,
    int size,
    ffi.Pointer<guint32> consumed,
  ) {
    return _gst_meta_deserialize(
      buffer,
      data,
      size,
      consumed,
    );
  }

  late final _gst_meta_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMeta> Function(
              ffi.Pointer<GstBuffer>,
              ffi.Pointer<guint8>,
              gsize,
              ffi.Pointer<guint32>)>>('gst_meta_deserialize');
  late final _gst_meta_deserialize = _gst_meta_deserializePtr.asFunction<
      ffi.Pointer<GstMeta> Function(ffi.Pointer<GstBuffer>, ffi.Pointer<guint8>,
          int, ffi.Pointer<guint32>)>();

  late final ffi.Pointer<GQuark> __gst_meta_tag_memory =
      _lookup<GQuark>('_gst_meta_tag_memory');

  int get _gst_meta_tag_memory => __gst_meta_tag_memory.value;

  set _gst_meta_tag_memory(int value) => __gst_meta_tag_memory.value = value;

  late final ffi.Pointer<GQuark> __gst_meta_tag_memory_reference =
      _lookup<GQuark>('_gst_meta_tag_memory_reference');

  int get _gst_meta_tag_memory_reference =>
      __gst_meta_tag_memory_reference.value;

  set _gst_meta_tag_memory_reference(int value) =>
      __gst_meta_tag_memory_reference.value = value;

  int gst_buffer_get_type() {
    return _gst_buffer_get_type();
  }

  late final _gst_buffer_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_buffer_get_type');
  late final _gst_buffer_get_type =
      _gst_buffer_get_typePtr.asFunction<int Function()>();

  int gst_buffer_get_max_memory() {
    return _gst_buffer_get_max_memory();
  }

  late final _gst_buffer_get_max_memoryPtr =
      _lookup<ffi.NativeFunction<guint Function()>>(
          'gst_buffer_get_max_memory');
  late final _gst_buffer_get_max_memory =
      _gst_buffer_get_max_memoryPtr.asFunction<int Function()>();

  ffi.Pointer<GstBuffer> gst_buffer_new() {
    return _gst_buffer_new();
  }

  late final _gst_buffer_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstBuffer> Function()>>(
          'gst_buffer_new');
  late final _gst_buffer_new =
      _gst_buffer_newPtr.asFunction<ffi.Pointer<GstBuffer> Function()>();

  ffi.Pointer<GstBuffer> gst_buffer_new_allocate(
    ffi.Pointer<GstAllocator> allocator,
    int size,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_buffer_new_allocate(
      allocator,
      size,
      params,
    );
  }

  late final _gst_buffer_new_allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstAllocator>, gsize,
              ffi.Pointer<GstAllocationParams>)>>('gst_buffer_new_allocate');
  late final _gst_buffer_new_allocate = _gst_buffer_new_allocatePtr.asFunction<
      ffi.Pointer<GstBuffer> Function(
          ffi.Pointer<GstAllocator>, int, ffi.Pointer<GstAllocationParams>)>();

  ffi.Pointer<GstBuffer> gst_buffer_new_wrapped_full(
    int flags,
    ffi.Pointer data,
    int maxsize,
    int offset,
    int size,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_buffer_new_wrapped_full(
      flags,
      data,
      maxsize,
      offset,
      size,
      user_data,
      notify,
    );
  }

  late final _gst_buffer_new_wrapped_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Int32,
              ffi.Pointer,
              gsize,
              gsize,
              gsize,
              ffi.Pointer,
              GDestroyNotify)>>('gst_buffer_new_wrapped_full');
  late final _gst_buffer_new_wrapped_full =
      _gst_buffer_new_wrapped_fullPtr.asFunction<
          ffi.Pointer<GstBuffer> Function(
              int, ffi.Pointer, int, int, int, ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer<GstBuffer> gst_buffer_new_wrapped(
    ffi.Pointer data,
    int size,
  ) {
    return _gst_buffer_new_wrapped(
      data,
      size,
    );
  }

  late final _gst_buffer_new_wrappedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstBuffer> Function(ffi.Pointer, gsize)>>(
      'gst_buffer_new_wrapped');
  late final _gst_buffer_new_wrapped = _gst_buffer_new_wrappedPtr
      .asFunction<ffi.Pointer<GstBuffer> Function(ffi.Pointer, int)>();

  ffi.Pointer<GstBuffer> gst_buffer_new_wrapped_bytes(
    ffi.Pointer<GBytes> bytes,
  ) {
    return _gst_buffer_new_wrapped_bytes(
      bytes,
    );
  }

  late final _gst_buffer_new_wrapped_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GBytes>)>>('gst_buffer_new_wrapped_bytes');
  late final _gst_buffer_new_wrapped_bytes = _gst_buffer_new_wrapped_bytesPtr
      .asFunction<ffi.Pointer<GstBuffer> Function(ffi.Pointer<GBytes>)>();

  ffi.Pointer<GstBuffer> gst_buffer_new_memdup(
    gconstpointer data,
    int size,
  ) {
    return _gst_buffer_new_memdup(
      data,
      size,
    );
  }

  late final _gst_buffer_new_memdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              gconstpointer, gsize)>>('gst_buffer_new_memdup');
  late final _gst_buffer_new_memdup = _gst_buffer_new_memdupPtr
      .asFunction<ffi.Pointer<GstBuffer> Function(gconstpointer, int)>();

  int gst_buffer_n_memory(
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_n_memory(
      buffer,
    );
  }

  late final _gst_buffer_n_memoryPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstBuffer>)>>(
          'gst_buffer_n_memory');
  late final _gst_buffer_n_memory = _gst_buffer_n_memoryPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>)>();

  void gst_buffer_insert_memory(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    ffi.Pointer<GstMemory> mem,
  ) {
    return _gst_buffer_insert_memory(
      buffer,
      idx,
      mem,
    );
  }

  late final _gst_buffer_insert_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>, gint,
              ffi.Pointer<GstMemory>)>>('gst_buffer_insert_memory');
  late final _gst_buffer_insert_memory =
      _gst_buffer_insert_memoryPtr.asFunction<
          void Function(ffi.Pointer<GstBuffer>, int, ffi.Pointer<GstMemory>)>();

  void gst_buffer_replace_memory_range(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
    ffi.Pointer<GstMemory> mem,
  ) {
    return _gst_buffer_replace_memory_range(
      buffer,
      idx,
      length,
      mem,
    );
  }

  late final _gst_buffer_replace_memory_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>, guint, gint,
              ffi.Pointer<GstMemory>)>>('gst_buffer_replace_memory_range');
  late final _gst_buffer_replace_memory_range =
      _gst_buffer_replace_memory_rangePtr.asFunction<
          void Function(
              ffi.Pointer<GstBuffer>, int, int, ffi.Pointer<GstMemory>)>();

  ffi.Pointer<GstMemory> gst_buffer_peek_memory(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
  ) {
    return _gst_buffer_peek_memory(
      buffer,
      idx,
    );
  }

  late final _gst_buffer_peek_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(
              ffi.Pointer<GstBuffer>, guint)>>('gst_buffer_peek_memory');
  late final _gst_buffer_peek_memory = _gst_buffer_peek_memoryPtr.asFunction<
      ffi.Pointer<GstMemory> Function(ffi.Pointer<GstBuffer>, int)>();

  ffi.Pointer<GstMemory> gst_buffer_get_memory_range(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
  ) {
    return _gst_buffer_get_memory_range(
      buffer,
      idx,
      length,
    );
  }

  late final _gst_buffer_get_memory_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(ffi.Pointer<GstBuffer>, guint,
              gint)>>('gst_buffer_get_memory_range');
  late final _gst_buffer_get_memory_range =
      _gst_buffer_get_memory_rangePtr.asFunction<
          ffi.Pointer<GstMemory> Function(ffi.Pointer<GstBuffer>, int, int)>();

  void gst_buffer_remove_memory_range(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
  ) {
    return _gst_buffer_remove_memory_range(
      buffer,
      idx,
      length,
    );
  }

  late final _gst_buffer_remove_memory_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>, guint,
              gint)>>('gst_buffer_remove_memory_range');
  late final _gst_buffer_remove_memory_range =
      _gst_buffer_remove_memory_rangePtr
          .asFunction<void Function(ffi.Pointer<GstBuffer>, int, int)>();

  void gst_buffer_prepend_memory(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMemory> mem,
  ) {
    return _gst_buffer_prepend_memory(
      buffer,
      mem,
    );
  }

  late final _gst_buffer_prepend_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstMemory>)>>('gst_buffer_prepend_memory');
  late final _gst_buffer_prepend_memory =
      _gst_buffer_prepend_memoryPtr.asFunction<
          void Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMemory>)>();

  void gst_buffer_append_memory(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMemory> mem,
  ) {
    return _gst_buffer_append_memory(
      buffer,
      mem,
    );
  }

  late final _gst_buffer_append_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstMemory>)>>('gst_buffer_append_memory');
  late final _gst_buffer_append_memory =
      _gst_buffer_append_memoryPtr.asFunction<
          void Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMemory>)>();

  void gst_buffer_replace_memory(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    ffi.Pointer<GstMemory> mem,
  ) {
    return _gst_buffer_replace_memory(
      buffer,
      idx,
      mem,
    );
  }

  late final _gst_buffer_replace_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>, guint,
              ffi.Pointer<GstMemory>)>>('gst_buffer_replace_memory');
  late final _gst_buffer_replace_memory =
      _gst_buffer_replace_memoryPtr.asFunction<
          void Function(ffi.Pointer<GstBuffer>, int, ffi.Pointer<GstMemory>)>();

  void gst_buffer_replace_all_memory(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMemory> mem,
  ) {
    return _gst_buffer_replace_all_memory(
      buffer,
      mem,
    );
  }

  late final _gst_buffer_replace_all_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstMemory>)>>('gst_buffer_replace_all_memory');
  late final _gst_buffer_replace_all_memory =
      _gst_buffer_replace_all_memoryPtr.asFunction<
          void Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMemory>)>();

  ffi.Pointer<GstMemory> gst_buffer_get_memory(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
  ) {
    return _gst_buffer_get_memory(
      buffer,
      idx,
    );
  }

  late final _gst_buffer_get_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(
              ffi.Pointer<GstBuffer>, guint)>>('gst_buffer_get_memory');
  late final _gst_buffer_get_memory = _gst_buffer_get_memoryPtr.asFunction<
      ffi.Pointer<GstMemory> Function(ffi.Pointer<GstBuffer>, int)>();

  ffi.Pointer<GstMemory> gst_buffer_get_all_memory(
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_get_all_memory(
      buffer,
    );
  }

  late final _gst_buffer_get_all_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(
              ffi.Pointer<GstBuffer>)>>('gst_buffer_get_all_memory');
  late final _gst_buffer_get_all_memory = _gst_buffer_get_all_memoryPtr
      .asFunction<ffi.Pointer<GstMemory> Function(ffi.Pointer<GstBuffer>)>();

  void gst_buffer_remove_memory(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
  ) {
    return _gst_buffer_remove_memory(
      buffer,
      idx,
    );
  }

  late final _gst_buffer_remove_memoryPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBuffer>, guint)>>(
      'gst_buffer_remove_memory');
  late final _gst_buffer_remove_memory = _gst_buffer_remove_memoryPtr
      .asFunction<void Function(ffi.Pointer<GstBuffer>, int)>();

  void gst_buffer_remove_all_memory(
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_remove_all_memory(
      buffer,
    );
  }

  late final _gst_buffer_remove_all_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBuffer>)>>(
          'gst_buffer_remove_all_memory');
  late final _gst_buffer_remove_all_memory = _gst_buffer_remove_all_memoryPtr
      .asFunction<void Function(ffi.Pointer<GstBuffer>)>();

  int gst_buffer_find_memory(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    int size,
    ffi.Pointer<guint> idx,
    ffi.Pointer<guint> length,
    ffi.Pointer<gsize> skip,
  ) {
    return _gst_buffer_find_memory(
      buffer,
      offset,
      size,
      idx,
      length,
      skip,
    );
  }

  late final _gst_buffer_find_memoryPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBuffer>,
              gsize,
              gsize,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>,
              ffi.Pointer<gsize>)>>('gst_buffer_find_memory');
  late final _gst_buffer_find_memory = _gst_buffer_find_memoryPtr.asFunction<
      int Function(ffi.Pointer<GstBuffer>, int, int, ffi.Pointer<guint>,
          ffi.Pointer<guint>, ffi.Pointer<gsize>)>();

  int gst_buffer_is_memory_range_writable(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
  ) {
    return _gst_buffer_is_memory_range_writable(
      buffer,
      idx,
      length,
    );
  }

  late final _gst_buffer_is_memory_range_writablePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>, guint,
              gint)>>('gst_buffer_is_memory_range_writable');
  late final _gst_buffer_is_memory_range_writable =
      _gst_buffer_is_memory_range_writablePtr
          .asFunction<int Function(ffi.Pointer<GstBuffer>, int, int)>();

  int gst_buffer_is_all_memory_writable(
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_is_all_memory_writable(
      buffer,
    );
  }

  late final _gst_buffer_is_all_memory_writablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBuffer>)>>(
          'gst_buffer_is_all_memory_writable');
  late final _gst_buffer_is_all_memory_writable =
      _gst_buffer_is_all_memory_writablePtr
          .asFunction<int Function(ffi.Pointer<GstBuffer>)>();

  int gst_buffer_fill(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    gconstpointer src,
    int size,
  ) {
    return _gst_buffer_fill(
      buffer,
      offset,
      src,
      size,
    );
  }

  late final _gst_buffer_fillPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GstBuffer>, gsize, gconstpointer,
              gsize)>>('gst_buffer_fill');
  late final _gst_buffer_fill = _gst_buffer_fillPtr.asFunction<
      int Function(ffi.Pointer<GstBuffer>, int, gconstpointer, int)>();

  int gst_buffer_extract(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    ffi.Pointer dest,
    int size,
  ) {
    return _gst_buffer_extract(
      buffer,
      offset,
      dest,
      size,
    );
  }

  late final _gst_buffer_extractPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GstBuffer>, gsize, ffi.Pointer,
              gsize)>>('gst_buffer_extract');
  late final _gst_buffer_extract = _gst_buffer_extractPtr.asFunction<
      int Function(ffi.Pointer<GstBuffer>, int, ffi.Pointer, int)>();

  int gst_buffer_memcmp(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    gconstpointer mem,
    int size,
  ) {
    return _gst_buffer_memcmp(
      buffer,
      offset,
      mem,
      size,
    );
  }

  late final _gst_buffer_memcmpPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GstBuffer>, gsize, gconstpointer,
              gsize)>>('gst_buffer_memcmp');
  late final _gst_buffer_memcmp = _gst_buffer_memcmpPtr.asFunction<
      int Function(ffi.Pointer<GstBuffer>, int, gconstpointer, int)>();

  int gst_buffer_memset(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    int val,
    int size,
  ) {
    return _gst_buffer_memset(
      buffer,
      offset,
      val,
      size,
    );
  }

  late final _gst_buffer_memsetPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GstBuffer>, gsize, guint8,
              gsize)>>('gst_buffer_memset');
  late final _gst_buffer_memset = _gst_buffer_memsetPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, int, int, int)>();

  int gst_buffer_get_sizes_range(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
    ffi.Pointer<gsize> offset,
    ffi.Pointer<gsize> maxsize,
  ) {
    return _gst_buffer_get_sizes_range(
      buffer,
      idx,
      length,
      offset,
      maxsize,
    );
  }

  late final _gst_buffer_get_sizes_rangePtr = _lookup<
      ffi.NativeFunction<
          gsize Function(
              ffi.Pointer<GstBuffer>,
              guint,
              gint,
              ffi.Pointer<gsize>,
              ffi.Pointer<gsize>)>>('gst_buffer_get_sizes_range');
  late final _gst_buffer_get_sizes_range =
      _gst_buffer_get_sizes_rangePtr.asFunction<
          int Function(ffi.Pointer<GstBuffer>, int, int, ffi.Pointer<gsize>,
              ffi.Pointer<gsize>)>();

  int gst_buffer_resize_range(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
    int offset,
    int size,
  ) {
    return _gst_buffer_resize_range(
      buffer,
      idx,
      length,
      offset,
      size,
    );
  }

  late final _gst_buffer_resize_rangePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>, guint, gint, gssize,
              gssize)>>('gst_buffer_resize_range');
  late final _gst_buffer_resize_range = _gst_buffer_resize_rangePtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, int, int, int, int)>();

  int gst_buffer_get_sizes(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<gsize> offset,
    ffi.Pointer<gsize> maxsize,
  ) {
    return _gst_buffer_get_sizes(
      buffer,
      offset,
      maxsize,
    );
  }

  late final _gst_buffer_get_sizesPtr = _lookup<
      ffi.NativeFunction<
          gsize Function(ffi.Pointer<GstBuffer>, ffi.Pointer<gsize>,
              ffi.Pointer<gsize>)>>('gst_buffer_get_sizes');
  late final _gst_buffer_get_sizes = _gst_buffer_get_sizesPtr.asFunction<
      int Function(
          ffi.Pointer<GstBuffer>, ffi.Pointer<gsize>, ffi.Pointer<gsize>)>();

  int gst_buffer_get_size(
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_get_size(
      buffer,
    );
  }

  late final _gst_buffer_get_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GstBuffer>)>>(
          'gst_buffer_get_size');
  late final _gst_buffer_get_size = _gst_buffer_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>)>();

  void gst_buffer_resize(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    int size,
  ) {
    return _gst_buffer_resize(
      buffer,
      offset,
      size,
    );
  }

  late final _gst_buffer_resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstBuffer>, gssize, gssize)>>('gst_buffer_resize');
  late final _gst_buffer_resize = _gst_buffer_resizePtr
      .asFunction<void Function(ffi.Pointer<GstBuffer>, int, int)>();

  void gst_buffer_set_size(
    ffi.Pointer<GstBuffer> buffer,
    int size,
  ) {
    return _gst_buffer_set_size(
      buffer,
      size,
    );
  }

  late final _gst_buffer_set_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstBuffer>, gssize)>>(
      'gst_buffer_set_size');
  late final _gst_buffer_set_size = _gst_buffer_set_sizePtr
      .asFunction<void Function(ffi.Pointer<GstBuffer>, int)>();

  int gst_buffer_map_range(
    ffi.Pointer<GstBuffer> buffer,
    int idx,
    int length,
    ffi.Pointer<GstMapInfo> info,
    int flags,
  ) {
    return _gst_buffer_map_range(
      buffer,
      idx,
      length,
      info,
      flags,
    );
  }

  late final _gst_buffer_map_rangePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>, guint, gint,
              ffi.Pointer<GstMapInfo>, ffi.Int32)>>('gst_buffer_map_range');
  late final _gst_buffer_map_range = _gst_buffer_map_rangePtr.asFunction<
      int Function(
          ffi.Pointer<GstBuffer>, int, int, ffi.Pointer<GstMapInfo>, int)>();

  int gst_buffer_map(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMapInfo> info,
    int flags,
  ) {
    return _gst_buffer_map(
      buffer,
      info,
      flags,
    );
  }

  late final _gst_buffer_mapPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMapInfo>,
              ffi.Int32)>>('gst_buffer_map');
  late final _gst_buffer_map = _gst_buffer_mapPtr.asFunction<
      int Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMapInfo>, int)>();

  void gst_buffer_unmap(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMapInfo> info,
  ) {
    return _gst_buffer_unmap(
      buffer,
      info,
    );
  }

  late final _gst_buffer_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstMapInfo>)>>('gst_buffer_unmap');
  late final _gst_buffer_unmap = _gst_buffer_unmapPtr.asFunction<
      void Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMapInfo>)>();

  void gst_buffer_extract_dup(
    ffi.Pointer<GstBuffer> buffer,
    int offset,
    int size,
    ffi.Pointer<ffi.Pointer> dest,
    ffi.Pointer<gsize> dest_size,
  ) {
    return _gst_buffer_extract_dup(
      buffer,
      offset,
      size,
      dest,
      dest_size,
    );
  }

  late final _gst_buffer_extract_dupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstBuffer>,
              gsize,
              gsize,
              ffi.Pointer<ffi.Pointer>,
              ffi.Pointer<gsize>)>>('gst_buffer_extract_dup');
  late final _gst_buffer_extract_dup = _gst_buffer_extract_dupPtr.asFunction<
      void Function(ffi.Pointer<GstBuffer>, int, int, ffi.Pointer<ffi.Pointer>,
          ffi.Pointer<gsize>)>();

  int gst_buffer_get_flags(
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_get_flags(
      buffer,
    );
  }

  late final _gst_buffer_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstBuffer>)>>(
          'gst_buffer_get_flags');
  late final _gst_buffer_get_flags = _gst_buffer_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>)>();

  int gst_buffer_has_flags(
    ffi.Pointer<GstBuffer> buffer,
    int flags,
  ) {
    return _gst_buffer_has_flags(
      buffer,
      flags,
    );
  }

  late final _gst_buffer_has_flagsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBuffer>, ffi.Int32)>>('gst_buffer_has_flags');
  late final _gst_buffer_has_flags = _gst_buffer_has_flagsPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, int)>();

  int gst_buffer_set_flags(
    ffi.Pointer<GstBuffer> buffer,
    int flags,
  ) {
    return _gst_buffer_set_flags(
      buffer,
      flags,
    );
  }

  late final _gst_buffer_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBuffer>, ffi.Int32)>>('gst_buffer_set_flags');
  late final _gst_buffer_set_flags = _gst_buffer_set_flagsPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, int)>();

  int gst_buffer_unset_flags(
    ffi.Pointer<GstBuffer> buffer,
    int flags,
  ) {
    return _gst_buffer_unset_flags(
      buffer,
      flags,
    );
  }

  late final _gst_buffer_unset_flagsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBuffer>, ffi.Int32)>>('gst_buffer_unset_flags');
  late final _gst_buffer_unset_flags = _gst_buffer_unset_flagsPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, int)>();

  ffi.Pointer<GstBuffer> gst_buffer_copy_deep(
    ffi.Pointer<GstBuffer> buf,
  ) {
    return _gst_buffer_copy_deep(
      buf,
    );
  }

  late final _gst_buffer_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GstBuffer>)>>('gst_buffer_copy_deep');
  late final _gst_buffer_copy_deep = _gst_buffer_copy_deepPtr
      .asFunction<ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBuffer>)>();

  int gst_buffer_copy_into(
    ffi.Pointer<GstBuffer> dest,
    ffi.Pointer<GstBuffer> src,
    int flags,
    int offset,
    int size,
  ) {
    return _gst_buffer_copy_into(
      dest,
      src,
      flags,
      offset,
      size,
    );
  }

  late final _gst_buffer_copy_intoPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstBuffer>,
              ffi.Int32, gsize, gsize)>>('gst_buffer_copy_into');
  late final _gst_buffer_copy_into = _gst_buffer_copy_intoPtr.asFunction<
      int Function(
          ffi.Pointer<GstBuffer>, ffi.Pointer<GstBuffer>, int, int, int)>();

  ffi.Pointer<GstBuffer> gst_buffer_copy_region(
    ffi.Pointer<GstBuffer> parent,
    int flags,
    int offset,
    int size,
  ) {
    return _gst_buffer_copy_region(
      parent,
      flags,
      offset,
      size,
    );
  }

  late final _gst_buffer_copy_regionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBuffer>, ffi.Int32,
              gsize, gsize)>>('gst_buffer_copy_region');
  late final _gst_buffer_copy_region = _gst_buffer_copy_regionPtr.asFunction<
      ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBuffer>, int, int, int)>();

  ffi.Pointer<GstBuffer> gst_buffer_append_region(
    ffi.Pointer<GstBuffer> buf1,
    ffi.Pointer<GstBuffer> buf2,
    int offset,
    int size,
  ) {
    return _gst_buffer_append_region(
      buf1,
      buf2,
      offset,
      size,
    );
  }

  late final _gst_buffer_append_regionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstBuffer>,
              gssize,
              gssize)>>('gst_buffer_append_region');
  late final _gst_buffer_append_region =
      _gst_buffer_append_regionPtr.asFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<GstBuffer>, int, int)>();

  ffi.Pointer<GstBuffer> gst_buffer_append(
    ffi.Pointer<GstBuffer> buf1,
    ffi.Pointer<GstBuffer> buf2,
  ) {
    return _gst_buffer_append(
      buf1,
      buf2,
    );
  }

  late final _gst_buffer_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstBuffer>)>>('gst_buffer_append');
  late final _gst_buffer_append = _gst_buffer_appendPtr.asFunction<
      ffi.Pointer<GstBuffer> Function(
          ffi.Pointer<GstBuffer>, ffi.Pointer<GstBuffer>)>();

  ffi.Pointer<GstMeta> gst_buffer_get_meta(
    ffi.Pointer<GstBuffer> buffer,
    int api,
  ) {
    return _gst_buffer_get_meta(
      buffer,
      api,
    );
  }

  late final _gst_buffer_get_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMeta> Function(
              ffi.Pointer<GstBuffer>, GType)>>('gst_buffer_get_meta');
  late final _gst_buffer_get_meta = _gst_buffer_get_metaPtr
      .asFunction<ffi.Pointer<GstMeta> Function(ffi.Pointer<GstBuffer>, int)>();

  int gst_buffer_get_n_meta(
    ffi.Pointer<GstBuffer> buffer,
    int api_type,
  ) {
    return _gst_buffer_get_n_meta(
      buffer,
      api_type,
    );
  }

  late final _gst_buffer_get_n_metaPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstBuffer>, GType)>>(
      'gst_buffer_get_n_meta');
  late final _gst_buffer_get_n_meta = _gst_buffer_get_n_metaPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, int)>();

  ffi.Pointer<GstMeta> gst_buffer_add_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMetaInfo> info,
    ffi.Pointer params,
  ) {
    return _gst_buffer_add_meta(
      buffer,
      info,
      params,
    );
  }

  late final _gst_buffer_add_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMeta> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstMetaInfo>, ffi.Pointer)>>('gst_buffer_add_meta');
  late final _gst_buffer_add_meta = _gst_buffer_add_metaPtr.asFunction<
      ffi.Pointer<GstMeta> Function(
          ffi.Pointer<GstBuffer>, ffi.Pointer<GstMetaInfo>, ffi.Pointer)>();

  int gst_buffer_remove_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstMeta> meta,
  ) {
    return _gst_buffer_remove_meta(
      buffer,
      meta,
    );
  }

  late final _gst_buffer_remove_metaPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstMeta>)>>('gst_buffer_remove_meta');
  late final _gst_buffer_remove_meta = _gst_buffer_remove_metaPtr
      .asFunction<int Function(ffi.Pointer<GstBuffer>, ffi.Pointer<GstMeta>)>();

  ffi.Pointer<GstMeta> gst_buffer_iterate_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<ffi.Pointer> state,
  ) {
    return _gst_buffer_iterate_meta(
      buffer,
      state,
    );
  }

  late final _gst_buffer_iterate_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMeta> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<ffi.Pointer>)>>('gst_buffer_iterate_meta');
  late final _gst_buffer_iterate_meta = _gst_buffer_iterate_metaPtr.asFunction<
      ffi.Pointer<GstMeta> Function(
          ffi.Pointer<GstBuffer>, ffi.Pointer<ffi.Pointer>)>();

  ffi.Pointer<GstMeta> gst_buffer_iterate_meta_filtered(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<ffi.Pointer> state,
    int meta_api_type,
  ) {
    return _gst_buffer_iterate_meta_filtered(
      buffer,
      state,
      meta_api_type,
    );
  }

  late final _gst_buffer_iterate_meta_filteredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMeta> Function(
              ffi.Pointer<GstBuffer>,
              ffi.Pointer<ffi.Pointer>,
              GType)>>('gst_buffer_iterate_meta_filtered');
  late final _gst_buffer_iterate_meta_filtered =
      _gst_buffer_iterate_meta_filteredPtr.asFunction<
          ffi.Pointer<GstMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<ffi.Pointer>, int)>();

  int gst_buffer_foreach_meta(
    ffi.Pointer<GstBuffer> buffer,
    GstBufferForeachMetaFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_buffer_foreach_meta(
      buffer,
      func,
      user_data,
    );
  }

  late final _gst_buffer_foreach_metaPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBuffer>, GstBufferForeachMetaFunc,
              ffi.Pointer)>>('gst_buffer_foreach_meta');
  late final _gst_buffer_foreach_meta = _gst_buffer_foreach_metaPtr.asFunction<
      int Function(
          ffi.Pointer<GstBuffer>, GstBufferForeachMetaFunc, ffi.Pointer)>();

  ffi.Pointer<GstCustomMeta> gst_buffer_add_custom_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_buffer_add_custom_meta(
      buffer,
      name,
    );
  }

  late final _gst_buffer_add_custom_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCustomMeta> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<ffi.Char>)>>('gst_buffer_add_custom_meta');
  late final _gst_buffer_add_custom_meta =
      _gst_buffer_add_custom_metaPtr.asFunction<
          ffi.Pointer<GstCustomMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstCustomMeta> gst_buffer_get_custom_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_buffer_get_custom_meta(
      buffer,
      name,
    );
  }

  late final _gst_buffer_get_custom_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCustomMeta> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<ffi.Char>)>>('gst_buffer_get_custom_meta');
  late final _gst_buffer_get_custom_meta =
      _gst_buffer_get_custom_metaPtr.asFunction<
          ffi.Pointer<GstCustomMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<ffi.Char>)>();

  int gst_parent_buffer_meta_api_get_type() {
    return _gst_parent_buffer_meta_api_get_type();
  }

  late final _gst_parent_buffer_meta_api_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_parent_buffer_meta_api_get_type');
  late final _gst_parent_buffer_meta_api_get_type =
      _gst_parent_buffer_meta_api_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstMetaInfo> gst_parent_buffer_meta_get_info() {
    return _gst_parent_buffer_meta_get_info();
  }

  late final _gst_parent_buffer_meta_get_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstMetaInfo> Function()>>(
          'gst_parent_buffer_meta_get_info');
  late final _gst_parent_buffer_meta_get_info =
      _gst_parent_buffer_meta_get_infoPtr
          .asFunction<ffi.Pointer<GstMetaInfo> Function()>();

  ffi.Pointer<GstParentBufferMeta> gst_buffer_add_parent_buffer_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstBuffer> ref,
  ) {
    return _gst_buffer_add_parent_buffer_meta(
      buffer,
      ref,
    );
  }

  late final _gst_buffer_add_parent_buffer_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstParentBufferMeta> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstBuffer>)>>('gst_buffer_add_parent_buffer_meta');
  late final _gst_buffer_add_parent_buffer_meta =
      _gst_buffer_add_parent_buffer_metaPtr.asFunction<
          ffi.Pointer<GstParentBufferMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<GstBuffer>)>();

  int gst_reference_timestamp_meta_api_get_type() {
    return _gst_reference_timestamp_meta_api_get_type();
  }

  late final _gst_reference_timestamp_meta_api_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_reference_timestamp_meta_api_get_type');
  late final _gst_reference_timestamp_meta_api_get_type =
      _gst_reference_timestamp_meta_api_get_typePtr
          .asFunction<int Function()>();

  ffi.Pointer<GstMetaInfo> gst_reference_timestamp_meta_get_info() {
    return _gst_reference_timestamp_meta_get_info();
  }

  late final _gst_reference_timestamp_meta_get_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstMetaInfo> Function()>>(
          'gst_reference_timestamp_meta_get_info');
  late final _gst_reference_timestamp_meta_get_info =
      _gst_reference_timestamp_meta_get_infoPtr
          .asFunction<ffi.Pointer<GstMetaInfo> Function()>();

  ffi.Pointer<GstReferenceTimestampMeta>
      gst_buffer_add_reference_timestamp_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstCaps> reference,
    int timestamp,
    int duration,
  ) {
    return _gst_buffer_add_reference_timestamp_meta(
      buffer,
      reference,
      timestamp,
      duration,
    );
  }

  late final _gst_buffer_add_reference_timestamp_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstReferenceTimestampMeta> Function(
              ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstCaps>,
              GstClockTime,
              GstClockTime)>>('gst_buffer_add_reference_timestamp_meta');
  late final _gst_buffer_add_reference_timestamp_meta =
      _gst_buffer_add_reference_timestamp_metaPtr.asFunction<
          ffi.Pointer<GstReferenceTimestampMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<GstCaps>, int, int)>();

  ffi.Pointer<GstReferenceTimestampMeta>
      gst_buffer_get_reference_timestamp_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstCaps> reference,
  ) {
    return _gst_buffer_get_reference_timestamp_meta(
      buffer,
      reference,
    );
  }

  late final _gst_buffer_get_reference_timestamp_metaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstReferenceTimestampMeta> Function(
                  ffi.Pointer<GstBuffer>, ffi.Pointer<GstCaps>)>>(
      'gst_buffer_get_reference_timestamp_meta');
  late final _gst_buffer_get_reference_timestamp_meta =
      _gst_buffer_get_reference_timestamp_metaPtr.asFunction<
          ffi.Pointer<GstReferenceTimestampMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<GstCaps>)>();

  late final ffi.Pointer<GType> __gst_buffer_list_type =
      _lookup<GType>('_gst_buffer_list_type');

  int get _gst_buffer_list_type => __gst_buffer_list_type.value;

  set _gst_buffer_list_type(int value) => __gst_buffer_list_type.value = value;

  int gst_buffer_list_get_type() {
    return _gst_buffer_list_get_type();
  }

  late final _gst_buffer_list_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_buffer_list_get_type');
  late final _gst_buffer_list_get_type =
      _gst_buffer_list_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstBufferList> gst_buffer_list_new() {
    return _gst_buffer_list_new();
  }

  late final _gst_buffer_list_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstBufferList> Function()>>(
          'gst_buffer_list_new');
  late final _gst_buffer_list_new = _gst_buffer_list_newPtr
      .asFunction<ffi.Pointer<GstBufferList> Function()>();

  ffi.Pointer<GstBufferList> gst_buffer_list_new_sized(
    int size,
  ) {
    return _gst_buffer_list_new_sized(
      size,
    );
  }

  late final _gst_buffer_list_new_sizedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstBufferList> Function(guint)>>(
          'gst_buffer_list_new_sized');
  late final _gst_buffer_list_new_sized = _gst_buffer_list_new_sizedPtr
      .asFunction<ffi.Pointer<GstBufferList> Function(int)>();

  int gst_buffer_list_length(
    ffi.Pointer<GstBufferList> list,
  ) {
    return _gst_buffer_list_length(
      list,
    );
  }

  late final _gst_buffer_list_lengthPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstBufferList>)>>(
          'gst_buffer_list_length');
  late final _gst_buffer_list_length = _gst_buffer_list_lengthPtr
      .asFunction<int Function(ffi.Pointer<GstBufferList>)>();

  ffi.Pointer<GstBuffer> gst_buffer_list_get(
    ffi.Pointer<GstBufferList> list,
    int idx,
  ) {
    return _gst_buffer_list_get(
      list,
      idx,
    );
  }

  late final _gst_buffer_list_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GstBufferList>, guint)>>('gst_buffer_list_get');
  late final _gst_buffer_list_get = _gst_buffer_list_getPtr.asFunction<
      ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBufferList>, int)>();

  ffi.Pointer<GstBuffer> gst_buffer_list_get_writable(
    ffi.Pointer<GstBufferList> list,
    int idx,
  ) {
    return _gst_buffer_list_get_writable(
      list,
      idx,
    );
  }

  late final _gst_buffer_list_get_writablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBufferList>,
              guint)>>('gst_buffer_list_get_writable');
  late final _gst_buffer_list_get_writable =
      _gst_buffer_list_get_writablePtr.asFunction<
          ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstBufferList>, int)>();

  void gst_buffer_list_insert(
    ffi.Pointer<GstBufferList> list,
    int idx,
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_list_insert(
      list,
      idx,
      buffer,
    );
  }

  late final _gst_buffer_list_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferList>, gint,
              ffi.Pointer<GstBuffer>)>>('gst_buffer_list_insert');
  late final _gst_buffer_list_insert = _gst_buffer_list_insertPtr.asFunction<
      void Function(ffi.Pointer<GstBufferList>, int, ffi.Pointer<GstBuffer>)>();

  void gst_buffer_list_remove(
    ffi.Pointer<GstBufferList> list,
    int idx,
    int length,
  ) {
    return _gst_buffer_list_remove(
      list,
      idx,
      length,
    );
  }

  late final _gst_buffer_list_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferList>, guint,
              guint)>>('gst_buffer_list_remove');
  late final _gst_buffer_list_remove = _gst_buffer_list_removePtr
      .asFunction<void Function(ffi.Pointer<GstBufferList>, int, int)>();

  int gst_buffer_list_foreach(
    ffi.Pointer<GstBufferList> list,
    GstBufferListFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_buffer_list_foreach(
      list,
      func,
      user_data,
    );
  }

  late final _gst_buffer_list_foreachPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBufferList>, GstBufferListFunc,
              ffi.Pointer)>>('gst_buffer_list_foreach');
  late final _gst_buffer_list_foreach = _gst_buffer_list_foreachPtr.asFunction<
      int Function(
          ffi.Pointer<GstBufferList>, GstBufferListFunc, ffi.Pointer)>();

  ffi.Pointer<GstBufferList> gst_buffer_list_copy_deep(
    ffi.Pointer<GstBufferList> list,
  ) {
    return _gst_buffer_list_copy_deep(
      list,
    );
  }

  late final _gst_buffer_list_copy_deepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBufferList> Function(
              ffi.Pointer<GstBufferList>)>>('gst_buffer_list_copy_deep');
  late final _gst_buffer_list_copy_deep =
      _gst_buffer_list_copy_deepPtr.asFunction<
          ffi.Pointer<GstBufferList> Function(ffi.Pointer<GstBufferList>)>();

  int gst_buffer_list_calculate_size(
    ffi.Pointer<GstBufferList> list,
  ) {
    return _gst_buffer_list_calculate_size(
      list,
    );
  }

  late final _gst_buffer_list_calculate_sizePtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GstBufferList>)>>(
          'gst_buffer_list_calculate_size');
  late final _gst_buffer_list_calculate_size =
      _gst_buffer_list_calculate_sizePtr
          .asFunction<int Function(ffi.Pointer<GstBufferList>)>();

  int gst_iterator_get_type() {
    return _gst_iterator_get_type();
  }

  late final _gst_iterator_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_iterator_get_type');
  late final _gst_iterator_get_type =
      _gst_iterator_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstIterator1> gst_iterator_new(
    int size,
    int type,
    ffi.Pointer<GMutex> lock,
    ffi.Pointer<guint32> master_cookie,
    GstIteratorCopyFunction copy,
    GstIteratorNextFunction next,
    GstIteratorItemFunction item,
    GstIteratorResyncFunction resync,
    GstIteratorFreeFunction free,
  ) {
    return _gst_iterator_new(
      size,
      type,
      lock,
      master_cookie,
      copy,
      next,
      item,
      resync,
      free,
    );
  }

  late final _gst_iterator_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              guint,
              GType,
              ffi.Pointer<GMutex>,
              ffi.Pointer<guint32>,
              GstIteratorCopyFunction,
              GstIteratorNextFunction,
              GstIteratorItemFunction,
              GstIteratorResyncFunction,
              GstIteratorFreeFunction)>>('gst_iterator_new');
  late final _gst_iterator_new = _gst_iterator_newPtr.asFunction<
      ffi.Pointer<GstIterator1> Function(
          int,
          int,
          ffi.Pointer<GMutex>,
          ffi.Pointer<guint32>,
          GstIteratorCopyFunction,
          GstIteratorNextFunction,
          GstIteratorItemFunction,
          GstIteratorResyncFunction,
          GstIteratorFreeFunction)>();

  ffi.Pointer<GstIterator1> gst_iterator_new_list(
    int type,
    ffi.Pointer<GMutex> lock,
    ffi.Pointer<guint32> master_cookie,
    ffi.Pointer<ffi.Pointer<GList>> list,
    ffi.Pointer<GObject> owner,
    GstIteratorItemFunction item,
  ) {
    return _gst_iterator_new_list(
      type,
      lock,
      master_cookie,
      list,
      owner,
      item,
    );
  }

  late final _gst_iterator_new_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              GType,
              ffi.Pointer<GMutex>,
              ffi.Pointer<guint32>,
              ffi.Pointer<ffi.Pointer<GList>>,
              ffi.Pointer<GObject>,
              GstIteratorItemFunction)>>('gst_iterator_new_list');
  late final _gst_iterator_new_list = _gst_iterator_new_listPtr.asFunction<
      ffi.Pointer<GstIterator1> Function(
          int,
          ffi.Pointer<GMutex>,
          ffi.Pointer<guint32>,
          ffi.Pointer<ffi.Pointer<GList>>,
          ffi.Pointer<GObject>,
          GstIteratorItemFunction)>();

  ffi.Pointer<GstIterator1> gst_iterator_new_single(
    int type,
    ffi.Pointer<GValue> object,
  ) {
    return _gst_iterator_new_single(
      type,
      object,
    );
  }

  late final _gst_iterator_new_singlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              GType, ffi.Pointer<GValue>)>>('gst_iterator_new_single');
  late final _gst_iterator_new_single = _gst_iterator_new_singlePtr.asFunction<
      ffi.Pointer<GstIterator1> Function(int, ffi.Pointer<GValue>)>();

  ffi.Pointer<GstIterator1> gst_iterator_copy(
    ffi.Pointer<GstIterator1> it,
  ) {
    return _gst_iterator_copy(
      it,
    );
  }

  late final _gst_iterator_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstIterator1>)>>('gst_iterator_copy');
  late final _gst_iterator_copy = _gst_iterator_copyPtr.asFunction<
      ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstIterator1>)>();

  int gst_iterator_next(
    ffi.Pointer<GstIterator1> it,
    ffi.Pointer<GValue> elem,
  ) {
    return _gst_iterator_next(
      it,
      elem,
    );
  }

  late final _gst_iterator_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstIterator1>,
              ffi.Pointer<GValue>)>>('gst_iterator_next');
  late final _gst_iterator_next = _gst_iterator_nextPtr.asFunction<
      int Function(ffi.Pointer<GstIterator1>, ffi.Pointer<GValue>)>();

  void gst_iterator_resync(
    ffi.Pointer<GstIterator1> it,
  ) {
    return _gst_iterator_resync(
      it,
    );
  }

  late final _gst_iterator_resyncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstIterator1>)>>(
          'gst_iterator_resync');
  late final _gst_iterator_resync = _gst_iterator_resyncPtr
      .asFunction<void Function(ffi.Pointer<GstIterator1>)>();

  void gst_iterator_free(
    ffi.Pointer<GstIterator1> it,
  ) {
    return _gst_iterator_free(
      it,
    );
  }

  late final _gst_iterator_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstIterator1>)>>(
          'gst_iterator_free');
  late final _gst_iterator_free = _gst_iterator_freePtr
      .asFunction<void Function(ffi.Pointer<GstIterator1>)>();

  void gst_iterator_push(
    ffi.Pointer<GstIterator1> it,
    ffi.Pointer<GstIterator1> other,
  ) {
    return _gst_iterator_push(
      it,
      other,
    );
  }

  late final _gst_iterator_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstIterator1>,
              ffi.Pointer<GstIterator1>)>>('gst_iterator_push');
  late final _gst_iterator_push = _gst_iterator_pushPtr.asFunction<
      void Function(ffi.Pointer<GstIterator1>, ffi.Pointer<GstIterator1>)>();

  ffi.Pointer<GstIterator1> gst_iterator_filter(
    ffi.Pointer<GstIterator1> it,
    GCompareFunc func,
    ffi.Pointer<GValue> user_data,
  ) {
    return _gst_iterator_filter(
      it,
      func,
      user_data,
    );
  }

  late final _gst_iterator_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstIterator1>,
              GCompareFunc, ffi.Pointer<GValue>)>>('gst_iterator_filter');
  late final _gst_iterator_filter = _gst_iterator_filterPtr.asFunction<
      ffi.Pointer<GstIterator1> Function(
          ffi.Pointer<GstIterator1>, GCompareFunc, ffi.Pointer<GValue>)>();

  int gst_iterator_fold(
    ffi.Pointer<GstIterator1> it,
    GstIteratorFoldFunction func,
    ffi.Pointer<GValue> ret,
    ffi.Pointer user_data,
  ) {
    return _gst_iterator_fold(
      it,
      func,
      ret,
      user_data,
    );
  }

  late final _gst_iterator_foldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstIterator1>, GstIteratorFoldFunction,
              ffi.Pointer<GValue>, ffi.Pointer)>>('gst_iterator_fold');
  late final _gst_iterator_fold = _gst_iterator_foldPtr.asFunction<
      int Function(ffi.Pointer<GstIterator1>, GstIteratorFoldFunction,
          ffi.Pointer<GValue>, ffi.Pointer)>();

  int gst_iterator_foreach(
    ffi.Pointer<GstIterator1> it,
    GstIteratorForeachFunction func,
    ffi.Pointer user_data,
  ) {
    return _gst_iterator_foreach(
      it,
      func,
      user_data,
    );
  }

  late final _gst_iterator_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstIterator1>,
              GstIteratorForeachFunction,
              ffi.Pointer)>>('gst_iterator_foreach');
  late final _gst_iterator_foreach = _gst_iterator_foreachPtr.asFunction<
      int Function(ffi.Pointer<GstIterator1>, GstIteratorForeachFunction,
          ffi.Pointer)>();

  int gst_iterator_find_custom(
    ffi.Pointer<GstIterator1> it,
    GCompareFunc func,
    ffi.Pointer<GValue> elem,
    ffi.Pointer user_data,
  ) {
    return _gst_iterator_find_custom(
      it,
      func,
      elem,
      user_data,
    );
  }

  late final _gst_iterator_find_customPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstIterator1>, GCompareFunc,
              ffi.Pointer<GValue>, ffi.Pointer)>>('gst_iterator_find_custom');
  late final _gst_iterator_find_custom =
      _gst_iterator_find_customPtr.asFunction<
          int Function(ffi.Pointer<GstIterator1>, GCompareFunc,
              ffi.Pointer<GValue>, ffi.Pointer)>();

  ffi.Pointer<ffi.Char> gst_format_get_name(
    int format,
  ) {
    return _gst_format_get_name(
      format,
    );
  }

  late final _gst_format_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_format_get_name');
  late final _gst_format_get_name =
      _gst_format_get_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_format_to_quark(
    int format,
  ) {
    return _gst_format_to_quark(
      format,
    );
  }

  late final _gst_format_to_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Int32)>>(
          'gst_format_to_quark');
  late final _gst_format_to_quark =
      _gst_format_to_quarkPtr.asFunction<int Function(int)>();

  int gst_format_register(
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _gst_format_register(
      nick,
      description,
    );
  }

  late final _gst_format_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_format_register');
  late final _gst_format_register = _gst_format_registerPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int gst_format_get_by_nick(
    ffi.Pointer<ffi.Char> nick,
  ) {
    return _gst_format_get_by_nick(
      nick,
    );
  }

  late final _gst_format_get_by_nickPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'gst_format_get_by_nick');
  late final _gst_format_get_by_nick = _gst_format_get_by_nickPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gst_formats_contains(
    ffi.Pointer<ffi.Int32> formats,
    int format,
  ) {
    return _gst_formats_contains(
      formats,
      format,
    );
  }

  late final _gst_formats_containsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Int32>, ffi.Int32)>>('gst_formats_contains');
  late final _gst_formats_contains = _gst_formats_containsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int)>();

  ffi.Pointer<GstFormatDefinition> gst_format_get_details(
    int format,
  ) {
    return _gst_format_get_details(
      format,
    );
  }

  late final _gst_format_get_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstFormatDefinition> Function(
              ffi.Int32)>>('gst_format_get_details');
  late final _gst_format_get_details = _gst_format_get_detailsPtr
      .asFunction<ffi.Pointer<GstFormatDefinition> Function(int)>();

  ffi.Pointer<GstIterator1> gst_format_iterate_definitions() {
    return _gst_format_iterate_definitions();
  }

  late final _gst_format_iterate_definitionsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstIterator1> Function()>>(
          'gst_format_iterate_definitions');
  late final _gst_format_iterate_definitions =
      _gst_format_iterate_definitionsPtr
          .asFunction<ffi.Pointer<GstIterator1> Function()>();

  int gst_segment_get_type() {
    return _gst_segment_get_type();
  }

  late final _gst_segment_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_segment_get_type');
  late final _gst_segment_get_type =
      _gst_segment_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstSegment> gst_segment_new() {
    return _gst_segment_new();
  }

  late final _gst_segment_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstSegment> Function()>>(
          'gst_segment_new');
  late final _gst_segment_new =
      _gst_segment_newPtr.asFunction<ffi.Pointer<GstSegment> Function()>();

  ffi.Pointer<GstSegment> gst_segment_copy(
    ffi.Pointer<GstSegment> segment,
  ) {
    return _gst_segment_copy(
      segment,
    );
  }

  late final _gst_segment_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstSegment> Function(
              ffi.Pointer<GstSegment>)>>('gst_segment_copy');
  late final _gst_segment_copy = _gst_segment_copyPtr
      .asFunction<ffi.Pointer<GstSegment> Function(ffi.Pointer<GstSegment>)>();

  void gst_segment_copy_into(
    ffi.Pointer<GstSegment> src,
    ffi.Pointer<GstSegment> dest,
  ) {
    return _gst_segment_copy_into(
      src,
      dest,
    );
  }

  late final _gst_segment_copy_intoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstSegment>,
              ffi.Pointer<GstSegment>)>>('gst_segment_copy_into');
  late final _gst_segment_copy_into = _gst_segment_copy_intoPtr.asFunction<
      void Function(ffi.Pointer<GstSegment>, ffi.Pointer<GstSegment>)>();

  void gst_segment_free(
    ffi.Pointer<GstSegment> segment,
  ) {
    return _gst_segment_free(
      segment,
    );
  }

  late final _gst_segment_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstSegment>)>>(
          'gst_segment_free');
  late final _gst_segment_free =
      _gst_segment_freePtr.asFunction<void Function(ffi.Pointer<GstSegment>)>();

  void gst_segment_init(
    ffi.Pointer<GstSegment> segment,
    int format,
  ) {
    return _gst_segment_init(
      segment,
      format,
    );
  }

  late final _gst_segment_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstSegment>, ffi.Int32)>>('gst_segment_init');
  late final _gst_segment_init = _gst_segment_initPtr
      .asFunction<void Function(ffi.Pointer<GstSegment>, int)>();

  int gst_segment_to_stream_time_full(
    ffi.Pointer<GstSegment> segment,
    int format,
    int position,
    ffi.Pointer<guint64> stream_time,
  ) {
    return _gst_segment_to_stream_time_full(
      segment,
      format,
      position,
      stream_time,
    );
  }

  late final _gst_segment_to_stream_time_fullPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GstSegment>, ffi.Int32, guint64,
              ffi.Pointer<guint64>)>>('gst_segment_to_stream_time_full');
  late final _gst_segment_to_stream_time_full =
      _gst_segment_to_stream_time_fullPtr.asFunction<
          int Function(
              ffi.Pointer<GstSegment>, int, int, ffi.Pointer<guint64>)>();

  int gst_segment_to_stream_time(
    ffi.Pointer<GstSegment> segment,
    int format,
    int position,
  ) {
    return _gst_segment_to_stream_time(
      segment,
      format,
      position,
    );
  }

  late final _gst_segment_to_stream_timePtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GstSegment>, ffi.Int32,
              guint64)>>('gst_segment_to_stream_time');
  late final _gst_segment_to_stream_time = _gst_segment_to_stream_timePtr
      .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_position_from_stream_time_full(
    ffi.Pointer<GstSegment> segment,
    int format,
    int stream_time,
    ffi.Pointer<guint64> position,
  ) {
    return _gst_segment_position_from_stream_time_full(
      segment,
      format,
      stream_time,
      position,
    );
  }

  late final _gst_segment_position_from_stream_time_fullPtr = _lookup<
          ffi.NativeFunction<
              gint Function(ffi.Pointer<GstSegment>, ffi.Int32, guint64,
                  ffi.Pointer<guint64>)>>(
      'gst_segment_position_from_stream_time_full');
  late final _gst_segment_position_from_stream_time_full =
      _gst_segment_position_from_stream_time_fullPtr.asFunction<
          int Function(
              ffi.Pointer<GstSegment>, int, int, ffi.Pointer<guint64>)>();

  int gst_segment_position_from_stream_time(
    ffi.Pointer<GstSegment> segment,
    int format,
    int stream_time,
  ) {
    return _gst_segment_position_from_stream_time(
      segment,
      format,
      stream_time,
    );
  }

  late final _gst_segment_position_from_stream_timePtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GstSegment>, ffi.Int32,
              guint64)>>('gst_segment_position_from_stream_time');
  late final _gst_segment_position_from_stream_time =
      _gst_segment_position_from_stream_timePtr
          .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_to_running_time(
    ffi.Pointer<GstSegment> segment,
    int format,
    int position,
  ) {
    return _gst_segment_to_running_time(
      segment,
      format,
      position,
    );
  }

  late final _gst_segment_to_running_timePtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GstSegment>, ffi.Int32,
              guint64)>>('gst_segment_to_running_time');
  late final _gst_segment_to_running_time = _gst_segment_to_running_timePtr
      .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_to_running_time_full(
    ffi.Pointer<GstSegment> segment,
    int format,
    int position,
    ffi.Pointer<guint64> running_time,
  ) {
    return _gst_segment_to_running_time_full(
      segment,
      format,
      position,
      running_time,
    );
  }

  late final _gst_segment_to_running_time_fullPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GstSegment>, ffi.Int32, guint64,
              ffi.Pointer<guint64>)>>('gst_segment_to_running_time_full');
  late final _gst_segment_to_running_time_full =
      _gst_segment_to_running_time_fullPtr.asFunction<
          int Function(
              ffi.Pointer<GstSegment>, int, int, ffi.Pointer<guint64>)>();

  int gst_segment_to_position(
    ffi.Pointer<GstSegment> segment,
    int format,
    int running_time,
  ) {
    return _gst_segment_to_position(
      segment,
      format,
      running_time,
    );
  }

  late final _gst_segment_to_positionPtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GstSegment>, ffi.Int32,
              guint64)>>('gst_segment_to_position');
  late final _gst_segment_to_position = _gst_segment_to_positionPtr
      .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_position_from_running_time_full(
    ffi.Pointer<GstSegment> segment,
    int format,
    int running_time,
    ffi.Pointer<guint64> position,
  ) {
    return _gst_segment_position_from_running_time_full(
      segment,
      format,
      running_time,
      position,
    );
  }

  late final _gst_segment_position_from_running_time_fullPtr = _lookup<
          ffi.NativeFunction<
              gint Function(ffi.Pointer<GstSegment>, ffi.Int32, guint64,
                  ffi.Pointer<guint64>)>>(
      'gst_segment_position_from_running_time_full');
  late final _gst_segment_position_from_running_time_full =
      _gst_segment_position_from_running_time_fullPtr.asFunction<
          int Function(
              ffi.Pointer<GstSegment>, int, int, ffi.Pointer<guint64>)>();

  int gst_segment_position_from_running_time(
    ffi.Pointer<GstSegment> segment,
    int format,
    int running_time,
  ) {
    return _gst_segment_position_from_running_time(
      segment,
      format,
      running_time,
    );
  }

  late final _gst_segment_position_from_running_timePtr = _lookup<
      ffi.NativeFunction<
          guint64 Function(ffi.Pointer<GstSegment>, ffi.Int32,
              guint64)>>('gst_segment_position_from_running_time');
  late final _gst_segment_position_from_running_time =
      _gst_segment_position_from_running_timePtr
          .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_set_running_time(
    ffi.Pointer<GstSegment> segment,
    int format,
    int running_time,
  ) {
    return _gst_segment_set_running_time(
      segment,
      format,
      running_time,
    );
  }

  late final _gst_segment_set_running_timePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstSegment>, ffi.Int32,
              guint64)>>('gst_segment_set_running_time');
  late final _gst_segment_set_running_time = _gst_segment_set_running_timePtr
      .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_offset_running_time(
    ffi.Pointer<GstSegment> segment,
    int format,
    int offset,
  ) {
    return _gst_segment_offset_running_time(
      segment,
      format,
      offset,
    );
  }

  late final _gst_segment_offset_running_timePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstSegment>, ffi.Int32,
              gint64)>>('gst_segment_offset_running_time');
  late final _gst_segment_offset_running_time =
      _gst_segment_offset_running_timePtr
          .asFunction<int Function(ffi.Pointer<GstSegment>, int, int)>();

  int gst_segment_clip(
    ffi.Pointer<GstSegment> segment,
    int format,
    int start,
    int stop,
    ffi.Pointer<guint64> clip_start,
    ffi.Pointer<guint64> clip_stop,
  ) {
    return _gst_segment_clip(
      segment,
      format,
      start,
      stop,
      clip_start,
      clip_stop,
    );
  }

  late final _gst_segment_clipPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstSegment>,
              ffi.Int32,
              guint64,
              guint64,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>)>>('gst_segment_clip');
  late final _gst_segment_clip = _gst_segment_clipPtr.asFunction<
      int Function(ffi.Pointer<GstSegment>, int, int, int, ffi.Pointer<guint64>,
          ffi.Pointer<guint64>)>();

  int gst_segment_do_seek(
    ffi.Pointer<GstSegment> segment,
    double rate,
    int format,
    int flags,
    int start_type,
    int start,
    int stop_type,
    int stop,
    ffi.Pointer<gboolean> update,
  ) {
    return _gst_segment_do_seek(
      segment,
      rate,
      format,
      flags,
      start_type,
      start,
      stop_type,
      stop,
      update,
    );
  }

  late final _gst_segment_do_seekPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstSegment>,
              gdouble,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              guint64,
              ffi.Int32,
              guint64,
              ffi.Pointer<gboolean>)>>('gst_segment_do_seek');
  late final _gst_segment_do_seek = _gst_segment_do_seekPtr.asFunction<
      int Function(ffi.Pointer<GstSegment>, double, int, int, int, int, int,
          int, ffi.Pointer<gboolean>)>();

  int gst_segment_is_equal(
    ffi.Pointer<GstSegment> s0,
    ffi.Pointer<GstSegment> s1,
  ) {
    return _gst_segment_is_equal(
      s0,
      s1,
    );
  }

  late final _gst_segment_is_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstSegment>,
              ffi.Pointer<GstSegment>)>>('gst_segment_is_equal');
  late final _gst_segment_is_equal = _gst_segment_is_equalPtr.asFunction<
      int Function(ffi.Pointer<GstSegment>, ffi.Pointer<GstSegment>)>();

  late final ffi.Pointer<GType> __gst_sample_type =
      _lookup<GType>('_gst_sample_type');

  int get _gst_sample_type => __gst_sample_type.value;

  set _gst_sample_type(int value) => __gst_sample_type.value = value;

  int gst_sample_get_type() {
    return _gst_sample_get_type();
  }

  late final _gst_sample_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_sample_get_type');
  late final _gst_sample_get_type =
      _gst_sample_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstSample> gst_sample_new(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstCaps> caps,
    ffi.Pointer<GstSegment> segment,
    ffi.Pointer<GstStructure> info,
  ) {
    return _gst_sample_new(
      buffer,
      caps,
      segment,
      info,
    );
  }

  late final _gst_sample_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstSample> Function(
              ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstCaps>,
              ffi.Pointer<GstSegment>,
              ffi.Pointer<GstStructure>)>>('gst_sample_new');
  late final _gst_sample_new = _gst_sample_newPtr.asFunction<
      ffi.Pointer<GstSample> Function(
          ffi.Pointer<GstBuffer>,
          ffi.Pointer<GstCaps>,
          ffi.Pointer<GstSegment>,
          ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstBuffer> gst_sample_get_buffer(
    ffi.Pointer<GstSample> sample,
  ) {
    return _gst_sample_get_buffer(
      sample,
    );
  }

  late final _gst_sample_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GstSample>)>>('gst_sample_get_buffer');
  late final _gst_sample_get_buffer = _gst_sample_get_bufferPtr
      .asFunction<ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstSample>)>();

  ffi.Pointer<GstCaps> gst_sample_get_caps(
    ffi.Pointer<GstSample> sample,
  ) {
    return _gst_sample_get_caps(
      sample,
    );
  }

  late final _gst_sample_get_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstSample>)>>('gst_sample_get_caps');
  late final _gst_sample_get_caps = _gst_sample_get_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstSample>)>();

  ffi.Pointer<GstSegment> gst_sample_get_segment(
    ffi.Pointer<GstSample> sample,
  ) {
    return _gst_sample_get_segment(
      sample,
    );
  }

  late final _gst_sample_get_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstSegment> Function(
              ffi.Pointer<GstSample>)>>('gst_sample_get_segment');
  late final _gst_sample_get_segment = _gst_sample_get_segmentPtr
      .asFunction<ffi.Pointer<GstSegment> Function(ffi.Pointer<GstSample>)>();

  ffi.Pointer<GstStructure> gst_sample_get_info(
    ffi.Pointer<GstSample> sample,
  ) {
    return _gst_sample_get_info(
      sample,
    );
  }

  late final _gst_sample_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstSample>)>>('gst_sample_get_info');
  late final _gst_sample_get_info = _gst_sample_get_infoPtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstSample>)>();

  ffi.Pointer<GstBufferList> gst_sample_get_buffer_list(
    ffi.Pointer<GstSample> sample,
  ) {
    return _gst_sample_get_buffer_list(
      sample,
    );
  }

  late final _gst_sample_get_buffer_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBufferList> Function(
              ffi.Pointer<GstSample>)>>('gst_sample_get_buffer_list');
  late final _gst_sample_get_buffer_list =
      _gst_sample_get_buffer_listPtr.asFunction<
          ffi.Pointer<GstBufferList> Function(ffi.Pointer<GstSample>)>();

  void gst_sample_set_buffer_list(
    ffi.Pointer<GstSample> sample,
    ffi.Pointer<GstBufferList> buffer_list,
  ) {
    return _gst_sample_set_buffer_list(
      sample,
      buffer_list,
    );
  }

  late final _gst_sample_set_buffer_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstSample>,
              ffi.Pointer<GstBufferList>)>>('gst_sample_set_buffer_list');
  late final _gst_sample_set_buffer_list =
      _gst_sample_set_buffer_listPtr.asFunction<
          void Function(ffi.Pointer<GstSample>, ffi.Pointer<GstBufferList>)>();

  void gst_sample_set_buffer(
    ffi.Pointer<GstSample> sample,
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_sample_set_buffer(
      sample,
      buffer,
    );
  }

  late final _gst_sample_set_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstSample>,
              ffi.Pointer<GstBuffer>)>>('gst_sample_set_buffer');
  late final _gst_sample_set_buffer = _gst_sample_set_bufferPtr.asFunction<
      void Function(ffi.Pointer<GstSample>, ffi.Pointer<GstBuffer>)>();

  void gst_sample_set_caps(
    ffi.Pointer<GstSample> sample,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_sample_set_caps(
      sample,
      caps,
    );
  }

  late final _gst_sample_set_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstSample>,
              ffi.Pointer<GstCaps>)>>('gst_sample_set_caps');
  late final _gst_sample_set_caps = _gst_sample_set_capsPtr.asFunction<
      void Function(ffi.Pointer<GstSample>, ffi.Pointer<GstCaps>)>();

  void gst_sample_set_segment(
    ffi.Pointer<GstSample> sample,
    ffi.Pointer<GstSegment> segment,
  ) {
    return _gst_sample_set_segment(
      sample,
      segment,
    );
  }

  late final _gst_sample_set_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstSample>,
              ffi.Pointer<GstSegment>)>>('gst_sample_set_segment');
  late final _gst_sample_set_segment = _gst_sample_set_segmentPtr.asFunction<
      void Function(ffi.Pointer<GstSample>, ffi.Pointer<GstSegment>)>();

  int gst_sample_set_info(
    ffi.Pointer<GstSample> sample,
    ffi.Pointer<GstStructure> info,
  ) {
    return _gst_sample_set_info(
      sample,
      info,
    );
  }

  late final _gst_sample_set_infoPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstSample>,
              ffi.Pointer<GstStructure>)>>('gst_sample_set_info');
  late final _gst_sample_set_info = _gst_sample_set_infoPtr.asFunction<
      int Function(ffi.Pointer<GstSample>, ffi.Pointer<GstStructure>)>();

  late final ffi.Pointer<GType> __gst_tag_list_type =
      _lookup<GType>('_gst_tag_list_type');

  int get _gst_tag_list_type => __gst_tag_list_type.value;

  set _gst_tag_list_type(int value) => __gst_tag_list_type.value = value;

  int gst_tag_list_get_type() {
    return _gst_tag_list_get_type();
  }

  late final _gst_tag_list_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_tag_list_get_type');
  late final _gst_tag_list_get_type =
      _gst_tag_list_get_typePtr.asFunction<int Function()>();

  void gst_tag_register(
    ffi.Pointer<ffi.Char> name,
    int flag,
    int type,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    GstTagMergeFunc func,
  ) {
    return _gst_tag_register(
      name,
      flag,
      type,
      nick,
      blurb,
      func,
    );
  }

  late final _gst_tag_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              GType,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GstTagMergeFunc)>>('gst_tag_register');
  late final _gst_tag_register = _gst_tag_registerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, GstTagMergeFunc)>();

  void gst_tag_register_static(
    ffi.Pointer<ffi.Char> name,
    int flag,
    int type,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    GstTagMergeFunc func,
  ) {
    return _gst_tag_register_static(
      name,
      flag,
      type,
      nick,
      blurb,
      func,
    );
  }

  late final _gst_tag_register_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              GType,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GstTagMergeFunc)>>('gst_tag_register_static');
  late final _gst_tag_register_static = _gst_tag_register_staticPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, GstTagMergeFunc)>();

  void gst_tag_merge_use_first(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> src,
  ) {
    return _gst_tag_merge_use_first(
      dest,
      src,
    );
  }

  late final _gst_tag_merge_use_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_tag_merge_use_first');
  late final _gst_tag_merge_use_first = _gst_tag_merge_use_firstPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_tag_merge_strings_with_comma(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> src,
  ) {
    return _gst_tag_merge_strings_with_comma(
      dest,
      src,
    );
  }

  late final _gst_tag_merge_strings_with_commaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_tag_merge_strings_with_comma');
  late final _gst_tag_merge_strings_with_comma =
      _gst_tag_merge_strings_with_commaPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_tag_exists(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_exists(
      tag,
    );
  }

  late final _gst_tag_existsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'gst_tag_exists');
  late final _gst_tag_exists =
      _gst_tag_existsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gst_tag_get_type(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_get_type(
      tag,
    );
  }

  late final _gst_tag_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<ffi.Char>)>>(
          'gst_tag_get_type');
  late final _gst_tag_get_type =
      _gst_tag_get_typePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_tag_get_nick(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_get_nick(
      tag,
    );
  }

  late final _gst_tag_get_nickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('gst_tag_get_nick');
  late final _gst_tag_get_nick = _gst_tag_get_nickPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_tag_get_description(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_get_description(
      tag,
    );
  }

  late final _gst_tag_get_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('gst_tag_get_description');
  late final _gst_tag_get_description = _gst_tag_get_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int gst_tag_get_flag(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_get_flag(
      tag,
    );
  }

  late final _gst_tag_get_flagPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'gst_tag_get_flag');
  late final _gst_tag_get_flag =
      _gst_tag_get_flagPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gst_tag_is_fixed(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_is_fixed(
      tag,
    );
  }

  late final _gst_tag_is_fixedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'gst_tag_is_fixed');
  late final _gst_tag_is_fixed =
      _gst_tag_is_fixedPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstTagList> gst_tag_list_new_empty() {
    return _gst_tag_list_new_empty();
  }

  late final _gst_tag_list_new_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstTagList> Function()>>(
          'gst_tag_list_new_empty');
  late final _gst_tag_list_new_empty = _gst_tag_list_new_emptyPtr
      .asFunction<ffi.Pointer<GstTagList> Function()>();

  ffi.Pointer<GstTagList> gst_tag_list_new(
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_list_new(
      tag,
    );
  }

  late final _gst_tag_list_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_new');
  late final _gst_tag_list_new = _gst_tag_list_newPtr
      .asFunction<ffi.Pointer<GstTagList> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstTagList> gst_tag_list_new_valist(
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_tag_list_new_valist(
      var_args,
    );
  }

  late final _gst_tag_list_new_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<__va_list_tag>)>>('gst_tag_list_new_valist');
  late final _gst_tag_list_new_valist = _gst_tag_list_new_valistPtr.asFunction<
      ffi.Pointer<GstTagList> Function(ffi.Pointer<__va_list_tag>)>();

  void gst_tag_list_set_scope(
    ffi.Pointer<GstTagList> list,
    int scope,
  ) {
    return _gst_tag_list_set_scope(
      list,
      scope,
    );
  }

  late final _gst_tag_list_set_scopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTagList>, ffi.Int32)>>('gst_tag_list_set_scope');
  late final _gst_tag_list_set_scope = _gst_tag_list_set_scopePtr
      .asFunction<void Function(ffi.Pointer<GstTagList>, int)>();

  int gst_tag_list_get_scope(
    ffi.Pointer<GstTagList> list,
  ) {
    return _gst_tag_list_get_scope(
      list,
    );
  }

  late final _gst_tag_list_get_scopePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstTagList>)>>(
          'gst_tag_list_get_scope');
  late final _gst_tag_list_get_scope = _gst_tag_list_get_scopePtr
      .asFunction<int Function(ffi.Pointer<GstTagList>)>();

  ffi.Pointer<ffi.Char> gst_tag_list_to_string(
    ffi.Pointer<GstTagList> list,
  ) {
    return _gst_tag_list_to_string(
      list,
    );
  }

  late final _gst_tag_list_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstTagList>)>>('gst_tag_list_to_string');
  late final _gst_tag_list_to_string = _gst_tag_list_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstTagList>)>();

  ffi.Pointer<GstTagList> gst_tag_list_new_from_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _gst_tag_list_new_from_string(
      str,
    );
  }

  late final _gst_tag_list_new_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_new_from_string');
  late final _gst_tag_list_new_from_string = _gst_tag_list_new_from_stringPtr
      .asFunction<ffi.Pointer<GstTagList> Function(ffi.Pointer<ffi.Char>)>();

  int gst_tag_list_n_tags(
    ffi.Pointer<GstTagList> list,
  ) {
    return _gst_tag_list_n_tags(
      list,
    );
  }

  late final _gst_tag_list_n_tagsPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GstTagList>)>>(
          'gst_tag_list_n_tags');
  late final _gst_tag_list_n_tags = _gst_tag_list_n_tagsPtr
      .asFunction<int Function(ffi.Pointer<GstTagList>)>();

  ffi.Pointer<ffi.Char> gst_tag_list_nth_tag_name(
    ffi.Pointer<GstTagList> list,
    int index,
  ) {
    return _gst_tag_list_nth_tag_name(
      list,
      index,
    );
  }

  late final _gst_tag_list_nth_tag_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstTagList>, guint)>>('gst_tag_list_nth_tag_name');
  late final _gst_tag_list_nth_tag_name =
      _gst_tag_list_nth_tag_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstTagList>, int)>();

  int gst_tag_list_is_empty(
    ffi.Pointer<GstTagList> list,
  ) {
    return _gst_tag_list_is_empty(
      list,
    );
  }

  late final _gst_tag_list_is_emptyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTagList>)>>(
          'gst_tag_list_is_empty');
  late final _gst_tag_list_is_empty = _gst_tag_list_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<GstTagList>)>();

  int gst_tag_list_is_equal(
    ffi.Pointer<GstTagList> list1,
    ffi.Pointer<GstTagList> list2,
  ) {
    return _gst_tag_list_is_equal(
      list1,
      list2,
    );
  }

  late final _gst_tag_list_is_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>,
              ffi.Pointer<GstTagList>)>>('gst_tag_list_is_equal');
  late final _gst_tag_list_is_equal = _gst_tag_list_is_equalPtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<GstTagList>)>();

  void gst_tag_list_insert(
    ffi.Pointer<GstTagList> into,
    ffi.Pointer<GstTagList> from,
    int mode,
  ) {
    return _gst_tag_list_insert(
      into,
      from,
      mode,
    );
  }

  late final _gst_tag_list_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagList>, ffi.Pointer<GstTagList>,
              ffi.Int32)>>('gst_tag_list_insert');
  late final _gst_tag_list_insert = _gst_tag_list_insertPtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, ffi.Pointer<GstTagList>, int)>();

  ffi.Pointer<GstTagList> gst_tag_list_merge(
    ffi.Pointer<GstTagList> list1,
    ffi.Pointer<GstTagList> list2,
    int mode,
  ) {
    return _gst_tag_list_merge(
      list1,
      list2,
      mode,
    );
  }

  late final _gst_tag_list_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(ffi.Pointer<GstTagList>,
              ffi.Pointer<GstTagList>, ffi.Int32)>>('gst_tag_list_merge');
  late final _gst_tag_list_merge = _gst_tag_list_mergePtr.asFunction<
      ffi.Pointer<GstTagList> Function(
          ffi.Pointer<GstTagList>, ffi.Pointer<GstTagList>, int)>();

  int gst_tag_list_get_tag_size(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_list_get_tag_size(
      list,
      tag,
    );
  }

  late final _gst_tag_list_get_tag_sizePtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GstTagList>,
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_get_tag_size');
  late final _gst_tag_list_get_tag_size =
      _gst_tag_list_get_tag_sizePtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>)>();

  void gst_tag_list_add(
    ffi.Pointer<GstTagList> list,
    int mode,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_list_add(
      list,
      mode,
      tag,
    );
  }

  late final _gst_tag_list_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagList>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_add');
  late final _gst_tag_list_add = _gst_tag_list_addPtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, int, ffi.Pointer<ffi.Char>)>();

  void gst_tag_list_add_values(
    ffi.Pointer<GstTagList> list,
    int mode,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_list_add_values(
      list,
      mode,
      tag,
    );
  }

  late final _gst_tag_list_add_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagList>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_add_values');
  late final _gst_tag_list_add_values = _gst_tag_list_add_valuesPtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, int, ffi.Pointer<ffi.Char>)>();

  void gst_tag_list_add_valist(
    ffi.Pointer<GstTagList> list,
    int mode,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_tag_list_add_valist(
      list,
      mode,
      tag,
      var_args,
    );
  }

  late final _gst_tag_list_add_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTagList>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_tag_list_add_valist');
  late final _gst_tag_list_add_valist = _gst_tag_list_add_valistPtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void gst_tag_list_add_valist_values(
    ffi.Pointer<GstTagList> list,
    int mode,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_tag_list_add_valist_values(
      list,
      mode,
      tag,
      var_args,
    );
  }

  late final _gst_tag_list_add_valist_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTagList>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_tag_list_add_valist_values');
  late final _gst_tag_list_add_valist_values =
      _gst_tag_list_add_valist_valuesPtr.asFunction<
          void Function(ffi.Pointer<GstTagList>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_tag_list_add_value(
    ffi.Pointer<GstTagList> list,
    int mode,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_tag_list_add_value(
      list,
      mode,
      tag,
      value,
    );
  }

  late final _gst_tag_list_add_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTagList>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_tag_list_add_value');
  late final _gst_tag_list_add_value = _gst_tag_list_add_valuePtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GValue>)>();

  void gst_tag_list_remove_tag(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_list_remove_tag(
      list,
      tag,
    );
  }

  late final _gst_tag_list_remove_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagList>,
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_remove_tag');
  late final _gst_tag_list_remove_tag = _gst_tag_list_remove_tagPtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>)>();

  void gst_tag_list_foreach(
    ffi.Pointer<GstTagList> list,
    GstTagForeachFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_tag_list_foreach(
      list,
      func,
      user_data,
    );
  }

  late final _gst_tag_list_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagList>, GstTagForeachFunc,
              ffi.Pointer)>>('gst_tag_list_foreach');
  late final _gst_tag_list_foreach = _gst_tag_list_foreachPtr.asFunction<
      void Function(ffi.Pointer<GstTagList>, GstTagForeachFunc, ffi.Pointer)>();

  ffi.Pointer<GValue> gst_tag_list_get_value_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
  ) {
    return _gst_tag_list_get_value_index(
      list,
      tag,
      index,
    );
  }

  late final _gst_tag_list_get_value_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstTagList>,
              ffi.Pointer<ffi.Char>, guint)>>('gst_tag_list_get_value_index');
  late final _gst_tag_list_get_value_index =
      _gst_tag_list_get_value_indexPtr.asFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int)>();

  int gst_tag_list_copy_value(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_list_copy_value(
      dest,
      list,
      tag,
    );
  }

  late final _gst_tag_list_copy_valuePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<GstTagList>,
              ffi.Pointer<ffi.Char>)>>('gst_tag_list_copy_value');
  late final _gst_tag_list_copy_value = _gst_tag_list_copy_valuePtr.asFunction<
      int Function(ffi.Pointer<GValue>, ffi.Pointer<GstTagList>,
          ffi.Pointer<ffi.Char>)>();

  int gst_tag_list_get_boolean(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<gboolean> value,
  ) {
    return _gst_tag_list_get_boolean(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_booleanPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gboolean>)>>('gst_tag_list_get_boolean');
  late final _gst_tag_list_get_boolean =
      _gst_tag_list_get_booleanPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gboolean>)>();

  int gst_tag_list_get_boolean_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<gboolean> value,
  ) {
    return _gst_tag_list_get_boolean_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_boolean_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<gboolean>)>>('gst_tag_list_get_boolean_index');
  late final _gst_tag_list_get_boolean_index =
      _gst_tag_list_get_boolean_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<gboolean>)>();

  int gst_tag_list_get_int(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<gint> value,
  ) {
    return _gst_tag_list_get_int(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_intPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint>)>>('gst_tag_list_get_int');
  late final _gst_tag_list_get_int = _gst_tag_list_get_intPtr.asFunction<
      int Function(
          ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, ffi.Pointer<gint>)>();

  int gst_tag_list_get_int_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<gint> value,
  ) {
    return _gst_tag_list_get_int_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_int_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<gint>)>>('gst_tag_list_get_int_index');
  late final _gst_tag_list_get_int_index =
      _gst_tag_list_get_int_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<gint>)>();

  int gst_tag_list_get_uint(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<guint> value,
  ) {
    return _gst_tag_list_get_uint(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_uintPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint>)>>('gst_tag_list_get_uint');
  late final _gst_tag_list_get_uint = _gst_tag_list_get_uintPtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<guint>)>();

  int gst_tag_list_get_uint_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<guint> value,
  ) {
    return _gst_tag_list_get_uint_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_uint_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<guint>)>>('gst_tag_list_get_uint_index');
  late final _gst_tag_list_get_uint_index =
      _gst_tag_list_get_uint_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<guint>)>();

  int gst_tag_list_get_int64(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<gint64> value,
  ) {
    return _gst_tag_list_get_int64(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gint64>)>>('gst_tag_list_get_int64');
  late final _gst_tag_list_get_int64 = _gst_tag_list_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<gint64>)>();

  int gst_tag_list_get_int64_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<gint64> value,
  ) {
    return _gst_tag_list_get_int64_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_int64_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<gint64>)>>('gst_tag_list_get_int64_index');
  late final _gst_tag_list_get_int64_index =
      _gst_tag_list_get_int64_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<gint64>)>();

  int gst_tag_list_get_uint64(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<guint64> value,
  ) {
    return _gst_tag_list_get_uint64(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint64>)>>('gst_tag_list_get_uint64');
  late final _gst_tag_list_get_uint64 = _gst_tag_list_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<guint64>)>();

  int gst_tag_list_get_uint64_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<guint64> value,
  ) {
    return _gst_tag_list_get_uint64_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_uint64_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<guint64>)>>('gst_tag_list_get_uint64_index');
  late final _gst_tag_list_get_uint64_index =
      _gst_tag_list_get_uint64_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<guint64>)>();

  int gst_tag_list_get_float(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<gfloat> value,
  ) {
    return _gst_tag_list_get_float(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_floatPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gfloat>)>>('gst_tag_list_get_float');
  late final _gst_tag_list_get_float = _gst_tag_list_get_floatPtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<gfloat>)>();

  int gst_tag_list_get_float_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<gfloat> value,
  ) {
    return _gst_tag_list_get_float_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_float_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<gfloat>)>>('gst_tag_list_get_float_index');
  late final _gst_tag_list_get_float_index =
      _gst_tag_list_get_float_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<gfloat>)>();

  int gst_tag_list_get_double(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<gdouble> value,
  ) {
    return _gst_tag_list_get_double(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_doublePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<gdouble>)>>('gst_tag_list_get_double');
  late final _gst_tag_list_get_double = _gst_tag_list_get_doublePtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<gdouble>)>();

  int gst_tag_list_get_double_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<gdouble> value,
  ) {
    return _gst_tag_list_get_double_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_double_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              guint, ffi.Pointer<gdouble>)>>('gst_tag_list_get_double_index');
  late final _gst_tag_list_get_double_index =
      _gst_tag_list_get_double_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<gdouble>)>();

  int gst_tag_list_get_string(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _gst_tag_list_get_string(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('gst_tag_list_get_string');
  late final _gst_tag_list_get_string = _gst_tag_list_get_stringPtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_tag_list_get_string_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _gst_tag_list_get_string_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_string_indexPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
                  guint, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_tag_list_get_string_index');
  late final _gst_tag_list_get_string_index =
      _gst_tag_list_get_string_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_tag_list_peek_string_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _gst_tag_list_peek_string_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_peek_string_indexPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
                  guint, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_tag_list_peek_string_index');
  late final _gst_tag_list_peek_string_index =
      _gst_tag_list_peek_string_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_tag_list_get_pointer(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Pointer> value,
  ) {
    return _gst_tag_list_get_pointer(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_pointerPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer>)>>('gst_tag_list_get_pointer');
  late final _gst_tag_list_get_pointer =
      _gst_tag_list_get_pointerPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer>)>();

  int gst_tag_list_get_pointer_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<ffi.Pointer> value,
  ) {
    return _gst_tag_list_get_pointer_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_pointer_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstTagList>,
              ffi.Pointer<ffi.Char>,
              guint,
              ffi.Pointer<ffi.Pointer>)>>('gst_tag_list_get_pointer_index');
  late final _gst_tag_list_get_pointer_index =
      _gst_tag_list_get_pointer_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer>)>();

  int gst_tag_list_get_date(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Pointer<GDate>> value,
  ) {
    return _gst_tag_list_get_date(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_datePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GDate>>)>>('gst_tag_list_get_date');
  late final _gst_tag_list_get_date = _gst_tag_list_get_datePtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GDate>>)>();

  int gst_tag_list_get_date_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<ffi.Pointer<GDate>> value,
  ) {
    return _gst_tag_list_get_date_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_date_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstTagList>,
              ffi.Pointer<ffi.Char>,
              guint,
              ffi.Pointer<ffi.Pointer<GDate>>)>>('gst_tag_list_get_date_index');
  late final _gst_tag_list_get_date_index =
      _gst_tag_list_get_date_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<GDate>>)>();

  int gst_tag_list_get_date_time(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Pointer<GstDateTime>> value,
  ) {
    return _gst_tag_list_get_date_time(
      list,
      tag,
      value,
    );
  }

  late final _gst_tag_list_get_date_timePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GstDateTime>>)>>(
      'gst_tag_list_get_date_time');
  late final _gst_tag_list_get_date_time =
      _gst_tag_list_get_date_timePtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GstDateTime>>)>();

  int gst_tag_list_get_date_time_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<ffi.Pointer<GstDateTime>> value,
  ) {
    return _gst_tag_list_get_date_time_index(
      list,
      tag,
      index,
      value,
    );
  }

  late final _gst_tag_list_get_date_time_indexPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
                  guint, ffi.Pointer<ffi.Pointer<GstDateTime>>)>>(
      'gst_tag_list_get_date_time_index');
  late final _gst_tag_list_get_date_time_index =
      _gst_tag_list_get_date_time_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<GstDateTime>>)>();

  int gst_tag_list_get_sample(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Pointer<GstSample>> sample,
  ) {
    return _gst_tag_list_get_sample(
      list,
      tag,
      sample,
    );
  }

  late final _gst_tag_list_get_samplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GstSample>>)>>('gst_tag_list_get_sample');
  late final _gst_tag_list_get_sample = _gst_tag_list_get_samplePtr.asFunction<
      int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GstSample>>)>();

  int gst_tag_list_get_sample_index(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    int index,
    ffi.Pointer<ffi.Pointer<GstSample>> sample,
  ) {
    return _gst_tag_list_get_sample_index(
      list,
      tag,
      index,
      sample,
    );
  }

  late final _gst_tag_list_get_sample_indexPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>,
                  guint, ffi.Pointer<ffi.Pointer<GstSample>>)>>(
      'gst_tag_list_get_sample_index');
  late final _gst_tag_list_get_sample_index =
      _gst_tag_list_get_sample_indexPtr.asFunction<
          int Function(ffi.Pointer<GstTagList>, ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<GstSample>>)>();

  ffi.Pointer<GstTagList> gst_tag_list_copy(
    ffi.Pointer<GstTagList> taglist,
  ) {
    return _gst_tag_list_copy(
      taglist,
    );
  }

  late final _gst_tag_list_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<GstTagList>)>>('gst_tag_list_copy');
  late final _gst_tag_list_copy = _gst_tag_list_copyPtr
      .asFunction<ffi.Pointer<GstTagList> Function(ffi.Pointer<GstTagList>)>();

  late final ffi.Pointer<GType> __gst_query_type =
      _lookup<GType>('_gst_query_type');

  int get _gst_query_type => __gst_query_type.value;

  set _gst_query_type(int value) => __gst_query_type.value = value;

  late final ffi.Pointer<GType> __gst_toc_type =
      _lookup<GType>('_gst_toc_type');

  int get _gst_toc_type => __gst_toc_type.value;

  set _gst_toc_type(int value) => __gst_toc_type.value = value;

  late final ffi.Pointer<GType> __gst_toc_entry_type =
      _lookup<GType>('_gst_toc_entry_type');

  int get _gst_toc_entry_type => __gst_toc_entry_type.value;

  set _gst_toc_entry_type(int value) => __gst_toc_entry_type.value = value;

  int gst_toc_get_type() {
    return _gst_toc_get_type();
  }

  late final _gst_toc_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_toc_get_type');
  late final _gst_toc_get_type =
      _gst_toc_get_typePtr.asFunction<int Function()>();

  int gst_toc_entry_get_type() {
    return _gst_toc_entry_get_type();
  }

  late final _gst_toc_entry_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_toc_entry_get_type');
  late final _gst_toc_entry_get_type =
      _gst_toc_entry_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstToc> gst_toc_new(
    int scope,
  ) {
    return _gst_toc_new(
      scope,
    );
  }

  late final _gst_toc_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstToc> Function(ffi.Int32)>>(
          'gst_toc_new');
  late final _gst_toc_new =
      _gst_toc_newPtr.asFunction<ffi.Pointer<GstToc> Function(int)>();

  int gst_toc_get_scope(
    ffi.Pointer<GstToc> toc,
  ) {
    return _gst_toc_get_scope(
      toc,
    );
  }

  late final _gst_toc_get_scopePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstToc>)>>(
          'gst_toc_get_scope');
  late final _gst_toc_get_scope =
      _gst_toc_get_scopePtr.asFunction<int Function(ffi.Pointer<GstToc>)>();

  void gst_toc_set_tags(
    ffi.Pointer<GstToc> toc,
    ffi.Pointer<GstTagList> tags,
  ) {
    return _gst_toc_set_tags(
      toc,
      tags,
    );
  }

  late final _gst_toc_set_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstToc>,
              ffi.Pointer<GstTagList>)>>('gst_toc_set_tags');
  late final _gst_toc_set_tags = _gst_toc_set_tagsPtr.asFunction<
      void Function(ffi.Pointer<GstToc>, ffi.Pointer<GstTagList>)>();

  void gst_toc_merge_tags(
    ffi.Pointer<GstToc> toc,
    ffi.Pointer<GstTagList> tags,
    int mode,
  ) {
    return _gst_toc_merge_tags(
      toc,
      tags,
      mode,
    );
  }

  late final _gst_toc_merge_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstToc>, ffi.Pointer<GstTagList>,
              ffi.Int32)>>('gst_toc_merge_tags');
  late final _gst_toc_merge_tags = _gst_toc_merge_tagsPtr.asFunction<
      void Function(ffi.Pointer<GstToc>, ffi.Pointer<GstTagList>, int)>();

  ffi.Pointer<GstTagList> gst_toc_get_tags(
    ffi.Pointer<GstToc> toc,
  ) {
    return _gst_toc_get_tags(
      toc,
    );
  }

  late final _gst_toc_get_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<GstToc>)>>('gst_toc_get_tags');
  late final _gst_toc_get_tags = _gst_toc_get_tagsPtr
      .asFunction<ffi.Pointer<GstTagList> Function(ffi.Pointer<GstToc>)>();

  void gst_toc_append_entry(
    ffi.Pointer<GstToc> toc,
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_append_entry(
      toc,
      entry,
    );
  }

  late final _gst_toc_append_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstToc>,
              ffi.Pointer<GstTocEntry>)>>('gst_toc_append_entry');
  late final _gst_toc_append_entry = _gst_toc_append_entryPtr.asFunction<
      void Function(ffi.Pointer<GstToc>, ffi.Pointer<GstTocEntry>)>();

  ffi.Pointer<GList> gst_toc_get_entries(
    ffi.Pointer<GstToc> toc,
  ) {
    return _gst_toc_get_entries(
      toc,
    );
  }

  late final _gst_toc_get_entriesPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstToc>)>>(
      'gst_toc_get_entries');
  late final _gst_toc_get_entries = _gst_toc_get_entriesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstToc>)>();

  void gst_toc_dump(
    ffi.Pointer<GstToc> toc,
  ) {
    return _gst_toc_dump(
      toc,
    );
  }

  late final _gst_toc_dumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstToc>)>>(
          'gst_toc_dump');
  late final _gst_toc_dump =
      _gst_toc_dumpPtr.asFunction<void Function(ffi.Pointer<GstToc>)>();

  ffi.Pointer<GstTocEntry> gst_toc_entry_new(
    int type,
    ffi.Pointer<ffi.Char> uid,
  ) {
    return _gst_toc_entry_new(
      type,
      uid,
    );
  }

  late final _gst_toc_entry_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTocEntry> Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('gst_toc_entry_new');
  late final _gst_toc_entry_new = _gst_toc_entry_newPtr.asFunction<
      ffi.Pointer<GstTocEntry> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstTocEntry> gst_toc_find_entry(
    ffi.Pointer<GstToc> toc,
    ffi.Pointer<ffi.Char> uid,
  ) {
    return _gst_toc_find_entry(
      toc,
      uid,
    );
  }

  late final _gst_toc_find_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTocEntry> Function(ffi.Pointer<GstToc>,
              ffi.Pointer<ffi.Char>)>>('gst_toc_find_entry');
  late final _gst_toc_find_entry = _gst_toc_find_entryPtr.asFunction<
      ffi.Pointer<GstTocEntry> Function(
          ffi.Pointer<GstToc>, ffi.Pointer<ffi.Char>)>();

  int gst_toc_entry_get_entry_type(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_get_entry_type(
      entry,
    );
  }

  late final _gst_toc_entry_get_entry_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstTocEntry>)>>(
          'gst_toc_entry_get_entry_type');
  late final _gst_toc_entry_get_entry_type = _gst_toc_entry_get_entry_typePtr
      .asFunction<int Function(ffi.Pointer<GstTocEntry>)>();

  ffi.Pointer<ffi.Char> gst_toc_entry_get_uid(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_get_uid(
      entry,
    );
  }

  late final _gst_toc_entry_get_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstTocEntry>)>>('gst_toc_entry_get_uid');
  late final _gst_toc_entry_get_uid = _gst_toc_entry_get_uidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstTocEntry>)>();

  void gst_toc_entry_append_sub_entry(
    ffi.Pointer<GstTocEntry> entry,
    ffi.Pointer<GstTocEntry> subentry,
  ) {
    return _gst_toc_entry_append_sub_entry(
      entry,
      subentry,
    );
  }

  late final _gst_toc_entry_append_sub_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTocEntry>,
              ffi.Pointer<GstTocEntry>)>>('gst_toc_entry_append_sub_entry');
  late final _gst_toc_entry_append_sub_entry =
      _gst_toc_entry_append_sub_entryPtr.asFunction<
          void Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<GstTocEntry>)>();

  ffi.Pointer<GList> gst_toc_entry_get_sub_entries(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_get_sub_entries(
      entry,
    );
  }

  late final _gst_toc_entry_get_sub_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstTocEntry>)>>('gst_toc_entry_get_sub_entries');
  late final _gst_toc_entry_get_sub_entries = _gst_toc_entry_get_sub_entriesPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstTocEntry>)>();

  void gst_toc_entry_set_tags(
    ffi.Pointer<GstTocEntry> entry,
    ffi.Pointer<GstTagList> tags,
  ) {
    return _gst_toc_entry_set_tags(
      entry,
      tags,
    );
  }

  late final _gst_toc_entry_set_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTocEntry>,
              ffi.Pointer<GstTagList>)>>('gst_toc_entry_set_tags');
  late final _gst_toc_entry_set_tags = _gst_toc_entry_set_tagsPtr.asFunction<
      void Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<GstTagList>)>();

  void gst_toc_entry_merge_tags(
    ffi.Pointer<GstTocEntry> entry,
    ffi.Pointer<GstTagList> tags,
    int mode,
  ) {
    return _gst_toc_entry_merge_tags(
      entry,
      tags,
      mode,
    );
  }

  late final _gst_toc_entry_merge_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<GstTagList>,
              ffi.Int32)>>('gst_toc_entry_merge_tags');
  late final _gst_toc_entry_merge_tags =
      _gst_toc_entry_merge_tagsPtr.asFunction<
          void Function(
              ffi.Pointer<GstTocEntry>, ffi.Pointer<GstTagList>, int)>();

  ffi.Pointer<GstTagList> gst_toc_entry_get_tags(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_get_tags(
      entry,
    );
  }

  late final _gst_toc_entry_get_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<GstTocEntry>)>>('gst_toc_entry_get_tags');
  late final _gst_toc_entry_get_tags = _gst_toc_entry_get_tagsPtr
      .asFunction<ffi.Pointer<GstTagList> Function(ffi.Pointer<GstTocEntry>)>();

  int gst_toc_entry_is_alternative(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_is_alternative(
      entry,
    );
  }

  late final _gst_toc_entry_is_alternativePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTocEntry>)>>(
          'gst_toc_entry_is_alternative');
  late final _gst_toc_entry_is_alternative = _gst_toc_entry_is_alternativePtr
      .asFunction<int Function(ffi.Pointer<GstTocEntry>)>();

  int gst_toc_entry_is_sequence(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_is_sequence(
      entry,
    );
  }

  late final _gst_toc_entry_is_sequencePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTocEntry>)>>(
          'gst_toc_entry_is_sequence');
  late final _gst_toc_entry_is_sequence = _gst_toc_entry_is_sequencePtr
      .asFunction<int Function(ffi.Pointer<GstTocEntry>)>();

  void gst_toc_entry_set_start_stop_times(
    ffi.Pointer<GstTocEntry> entry,
    int start,
    int stop,
  ) {
    return _gst_toc_entry_set_start_stop_times(
      entry,
      start,
      stop,
    );
  }

  late final _gst_toc_entry_set_start_stop_timesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTocEntry>, gint64,
              gint64)>>('gst_toc_entry_set_start_stop_times');
  late final _gst_toc_entry_set_start_stop_times =
      _gst_toc_entry_set_start_stop_timesPtr
          .asFunction<void Function(ffi.Pointer<GstTocEntry>, int, int)>();

  int gst_toc_entry_get_start_stop_times(
    ffi.Pointer<GstTocEntry> entry,
    ffi.Pointer<gint64> start,
    ffi.Pointer<gint64> stop,
  ) {
    return _gst_toc_entry_get_start_stop_times(
      entry,
      start,
      stop,
    );
  }

  late final _gst_toc_entry_get_start_stop_timesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>>('gst_toc_entry_get_start_stop_times');
  late final _gst_toc_entry_get_start_stop_times =
      _gst_toc_entry_get_start_stop_timesPtr.asFunction<
          int Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>();

  void gst_toc_entry_set_loop(
    ffi.Pointer<GstTocEntry> entry,
    int loop_type,
    int repeat_count,
  ) {
    return _gst_toc_entry_set_loop(
      entry,
      loop_type,
      repeat_count,
    );
  }

  late final _gst_toc_entry_set_loopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTocEntry>, ffi.Int32,
              gint)>>('gst_toc_entry_set_loop');
  late final _gst_toc_entry_set_loop = _gst_toc_entry_set_loopPtr
      .asFunction<void Function(ffi.Pointer<GstTocEntry>, int, int)>();

  int gst_toc_entry_get_loop(
    ffi.Pointer<GstTocEntry> entry,
    ffi.Pointer<ffi.Int32> loop_type,
    ffi.Pointer<gint> repeat_count,
  ) {
    return _gst_toc_entry_get_loop(
      entry,
      loop_type,
      repeat_count,
    );
  }

  late final _gst_toc_entry_get_loopPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>)>>('gst_toc_entry_get_loop');
  late final _gst_toc_entry_get_loop = _gst_toc_entry_get_loopPtr.asFunction<
      int Function(ffi.Pointer<GstTocEntry>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gint>)>();

  ffi.Pointer<GstToc> gst_toc_entry_get_toc(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_get_toc(
      entry,
    );
  }

  late final _gst_toc_entry_get_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstToc> Function(
              ffi.Pointer<GstTocEntry>)>>('gst_toc_entry_get_toc');
  late final _gst_toc_entry_get_toc = _gst_toc_entry_get_tocPtr
      .asFunction<ffi.Pointer<GstToc> Function(ffi.Pointer<GstTocEntry>)>();

  ffi.Pointer<GstTocEntry> gst_toc_entry_get_parent(
    ffi.Pointer<GstTocEntry> entry,
  ) {
    return _gst_toc_entry_get_parent(
      entry,
    );
  }

  late final _gst_toc_entry_get_parentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTocEntry> Function(
              ffi.Pointer<GstTocEntry>)>>('gst_toc_entry_get_parent');
  late final _gst_toc_entry_get_parent =
      _gst_toc_entry_get_parentPtr.asFunction<
          ffi.Pointer<GstTocEntry> Function(ffi.Pointer<GstTocEntry>)>();

  ffi.Pointer<ffi.Char> gst_toc_entry_type_get_nick(
    int type,
  ) {
    return _gst_toc_entry_type_get_nick(
      type,
    );
  }

  late final _gst_toc_entry_type_get_nickPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_toc_entry_type_get_nick');
  late final _gst_toc_entry_type_get_nick = _gst_toc_entry_type_get_nickPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  late final ffi.Pointer<GType> __gst_context_type =
      _lookup<GType>('_gst_context_type');

  int get _gst_context_type => __gst_context_type.value;

  set _gst_context_type(int value) => __gst_context_type.value = value;

  int gst_context_get_type() {
    return _gst_context_get_type();
  }

  late final _gst_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_context_get_type');
  late final _gst_context_get_type =
      _gst_context_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstContext> gst_context_new(
    ffi.Pointer<ffi.Char> context_type,
    int persistent,
  ) {
    return _gst_context_new(
      context_type,
      persistent,
    );
  }

  late final _gst_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstContext> Function(
              ffi.Pointer<ffi.Char>, gboolean)>>('gst_context_new');
  late final _gst_context_new = _gst_context_newPtr.asFunction<
      ffi.Pointer<GstContext> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> gst_context_get_context_type(
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_context_get_context_type(
      context,
    );
  }

  late final _gst_context_get_context_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstContext>)>>('gst_context_get_context_type');
  late final _gst_context_get_context_type = _gst_context_get_context_typePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstContext>)>();

  int gst_context_has_context_type(
    ffi.Pointer<GstContext> context,
    ffi.Pointer<ffi.Char> context_type,
  ) {
    return _gst_context_has_context_type(
      context,
      context_type,
    );
  }

  late final _gst_context_has_context_typePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstContext>,
              ffi.Pointer<ffi.Char>)>>('gst_context_has_context_type');
  late final _gst_context_has_context_type =
      _gst_context_has_context_typePtr.asFunction<
          int Function(ffi.Pointer<GstContext>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstStructure> gst_context_get_structure(
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_context_get_structure(
      context,
    );
  }

  late final _gst_context_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstContext>)>>('gst_context_get_structure');
  late final _gst_context_get_structure =
      _gst_context_get_structurePtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstContext>)>();

  ffi.Pointer<GstStructure> gst_context_writable_structure(
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_context_writable_structure(
      context,
    );
  }

  late final _gst_context_writable_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstContext>)>>('gst_context_writable_structure');
  late final _gst_context_writable_structure =
      _gst_context_writable_structurePtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstContext>)>();

  int gst_context_is_persistent(
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_context_is_persistent(
      context,
    );
  }

  late final _gst_context_is_persistentPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstContext>)>>(
          'gst_context_is_persistent');
  late final _gst_context_is_persistent = _gst_context_is_persistentPtr
      .asFunction<int Function(ffi.Pointer<GstContext>)>();

  ffi.Pointer<ffi.Char> gst_query_type_get_name(
    int type,
  ) {
    return _gst_query_type_get_name(
      type,
    );
  }

  late final _gst_query_type_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_query_type_get_name');
  late final _gst_query_type_get_name = _gst_query_type_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_query_type_to_quark(
    int type,
  ) {
    return _gst_query_type_to_quark(
      type,
    );
  }

  late final _gst_query_type_to_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Int32)>>(
          'gst_query_type_to_quark');
  late final _gst_query_type_to_quark =
      _gst_query_type_to_quarkPtr.asFunction<int Function(int)>();

  int gst_query_type_get_flags(
    int type,
  ) {
    return _gst_query_type_get_flags(
      type,
    );
  }

  late final _gst_query_type_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'gst_query_type_get_flags');
  late final _gst_query_type_get_flags =
      _gst_query_type_get_flagsPtr.asFunction<int Function(int)>();

  int gst_query_get_type() {
    return _gst_query_get_type();
  }

  late final _gst_query_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_query_get_type');
  late final _gst_query_get_type =
      _gst_query_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstQuery> gst_query_new_custom(
    int type,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_query_new_custom(
      type,
      structure,
    );
  }

  late final _gst_query_new_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Int32, ffi.Pointer<GstStructure>)>>('gst_query_new_custom');
  late final _gst_query_new_custom = _gst_query_new_customPtr.asFunction<
      ffi.Pointer<GstQuery> Function(int, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstStructure> gst_query_get_structure(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_get_structure(
      query,
    );
  }

  late final _gst_query_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstQuery>)>>('gst_query_get_structure');
  late final _gst_query_get_structure = _gst_query_get_structurePtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstQuery>)>();

  ffi.Pointer<GstStructure> gst_query_writable_structure(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_writable_structure(
      query,
    );
  }

  late final _gst_query_writable_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstQuery>)>>('gst_query_writable_structure');
  late final _gst_query_writable_structure = _gst_query_writable_structurePtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstQuery>)>();

  ffi.Pointer<GstQuery> gst_query_new_position(
    int format,
  ) {
    return _gst_query_new_position(
      format,
    );
  }

  late final _gst_query_new_positionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function(ffi.Int32)>>(
          'gst_query_new_position');
  late final _gst_query_new_position = _gst_query_new_positionPtr
      .asFunction<ffi.Pointer<GstQuery> Function(int)>();

  void gst_query_set_position(
    ffi.Pointer<GstQuery> query,
    int format,
    int cur,
  ) {
    return _gst_query_set_position(
      query,
      format,
      cur,
    );
  }

  late final _gst_query_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32,
              gint64)>>('gst_query_set_position');
  late final _gst_query_set_position = _gst_query_set_positionPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int)>();

  void gst_query_parse_position(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> cur,
  ) {
    return _gst_query_parse_position(
      query,
      format,
      cur,
    );
  }

  late final _gst_query_parse_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_query_parse_position');
  late final _gst_query_parse_position =
      _gst_query_parse_positionPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>();

  ffi.Pointer<GstQuery> gst_query_new_duration(
    int format,
  ) {
    return _gst_query_new_duration(
      format,
    );
  }

  late final _gst_query_new_durationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function(ffi.Int32)>>(
          'gst_query_new_duration');
  late final _gst_query_new_duration = _gst_query_new_durationPtr
      .asFunction<ffi.Pointer<GstQuery> Function(int)>();

  void gst_query_set_duration(
    ffi.Pointer<GstQuery> query,
    int format,
    int duration,
  ) {
    return _gst_query_set_duration(
      query,
      format,
      duration,
    );
  }

  late final _gst_query_set_durationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32,
              gint64)>>('gst_query_set_duration');
  late final _gst_query_set_duration = _gst_query_set_durationPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int)>();

  void gst_query_parse_duration(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> duration,
  ) {
    return _gst_query_parse_duration(
      query,
      format,
      duration,
    );
  }

  late final _gst_query_parse_durationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_query_parse_duration');
  late final _gst_query_parse_duration =
      _gst_query_parse_durationPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>();

  ffi.Pointer<GstQuery> gst_query_new_latency() {
    return _gst_query_new_latency();
  }

  late final _gst_query_new_latencyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_latency');
  late final _gst_query_new_latency =
      _gst_query_new_latencyPtr.asFunction<ffi.Pointer<GstQuery> Function()>();

  void gst_query_set_latency(
    ffi.Pointer<GstQuery> query,
    int live,
    int min_latency,
    int max_latency,
  ) {
    return _gst_query_set_latency(
      query,
      live,
      min_latency,
      max_latency,
    );
  }

  late final _gst_query_set_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, gboolean, GstClockTime,
              GstClockTime)>>('gst_query_set_latency');
  late final _gst_query_set_latency = _gst_query_set_latencyPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int, int)>();

  void gst_query_parse_latency(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<gboolean> live,
    ffi.Pointer<GstClockTime> min_latency,
    ffi.Pointer<GstClockTime> max_latency,
  ) {
    return _gst_query_parse_latency(
      query,
      live,
      min_latency,
      max_latency,
    );
  }

  late final _gst_query_parse_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>)>>('gst_query_parse_latency');
  late final _gst_query_parse_latency = _gst_query_parse_latencyPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>,
          ffi.Pointer<GstClockTime>, ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<GstQuery> gst_query_new_convert(
    int src_format,
    int value,
    int dest_format,
  ) {
    return _gst_query_new_convert(
      src_format,
      value,
      dest_format,
    );
  }

  late final _gst_query_new_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Int32, gint64, ffi.Int32)>>('gst_query_new_convert');
  late final _gst_query_new_convert = _gst_query_new_convertPtr
      .asFunction<ffi.Pointer<GstQuery> Function(int, int, int)>();

  void gst_query_set_convert(
    ffi.Pointer<GstQuery> query,
    int src_format,
    int src_value,
    int dest_format,
    int dest_value,
  ) {
    return _gst_query_set_convert(
      query,
      src_format,
      src_value,
      dest_format,
      dest_value,
    );
  }

  late final _gst_query_set_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32, gint64, ffi.Int32,
              gint64)>>('gst_query_set_convert');
  late final _gst_query_set_convert = _gst_query_set_convertPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int, int, int)>();

  void gst_query_parse_convert(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> src_format,
    ffi.Pointer<gint64> src_value,
    ffi.Pointer<ffi.Int32> dest_format,
    ffi.Pointer<gint64> dest_value,
  ) {
    return _gst_query_parse_convert(
      query,
      src_format,
      src_value,
      dest_format,
      dest_value,
    );
  }

  late final _gst_query_parse_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_query_parse_convert');
  late final _gst_query_parse_convert = _gst_query_parse_convertPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gint64>, ffi.Pointer<ffi.Int32>, ffi.Pointer<gint64>)>();

  ffi.Pointer<GstQuery> gst_query_new_segment(
    int format,
  ) {
    return _gst_query_new_segment(
      format,
    );
  }

  late final _gst_query_new_segmentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function(ffi.Int32)>>(
          'gst_query_new_segment');
  late final _gst_query_new_segment = _gst_query_new_segmentPtr
      .asFunction<ffi.Pointer<GstQuery> Function(int)>();

  void gst_query_set_segment(
    ffi.Pointer<GstQuery> query,
    double rate,
    int format,
    int start_value,
    int stop_value,
  ) {
    return _gst_query_set_segment(
      query,
      rate,
      format,
      start_value,
      stop_value,
    );
  }

  late final _gst_query_set_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, gdouble, ffi.Int32, gint64,
              gint64)>>('gst_query_set_segment');
  late final _gst_query_set_segment = _gst_query_set_segmentPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, double, int, int, int)>();

  void gst_query_parse_segment(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<gdouble> rate,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> start_value,
    ffi.Pointer<gint64> stop_value,
  ) {
    return _gst_query_parse_segment(
      query,
      rate,
      format,
      start_value,
      stop_value,
    );
  }

  late final _gst_query_parse_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>>('gst_query_parse_segment');
  late final _gst_query_parse_segment = _gst_query_parse_segmentPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gdouble>,
          ffi.Pointer<ffi.Int32>, ffi.Pointer<gint64>, ffi.Pointer<gint64>)>();

  ffi.Pointer<GstQuery> gst_query_new_seeking(
    int format,
  ) {
    return _gst_query_new_seeking(
      format,
    );
  }

  late final _gst_query_new_seekingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function(ffi.Int32)>>(
          'gst_query_new_seeking');
  late final _gst_query_new_seeking = _gst_query_new_seekingPtr
      .asFunction<ffi.Pointer<GstQuery> Function(int)>();

  void gst_query_set_seeking(
    ffi.Pointer<GstQuery> query,
    int format,
    int seekable,
    int segment_start,
    int segment_end,
  ) {
    return _gst_query_set_seeking(
      query,
      format,
      seekable,
      segment_start,
      segment_end,
    );
  }

  late final _gst_query_set_seekingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32, gboolean, gint64,
              gint64)>>('gst_query_set_seeking');
  late final _gst_query_set_seeking = _gst_query_set_seekingPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int, int, int)>();

  void gst_query_parse_seeking(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gboolean> seekable,
    ffi.Pointer<gint64> segment_start,
    ffi.Pointer<gint64> segment_end,
  ) {
    return _gst_query_parse_seeking(
      query,
      format,
      seekable,
      segment_start,
      segment_end,
    );
  }

  late final _gst_query_parse_seekingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>>('gst_query_parse_seeking');
  late final _gst_query_parse_seeking = _gst_query_parse_seekingPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gboolean>, ffi.Pointer<gint64>, ffi.Pointer<gint64>)>();

  ffi.Pointer<GstQuery> gst_query_new_formats() {
    return _gst_query_new_formats();
  }

  late final _gst_query_new_formatsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_formats');
  late final _gst_query_new_formats =
      _gst_query_new_formatsPtr.asFunction<ffi.Pointer<GstQuery> Function()>();

  void gst_query_set_formats(
    ffi.Pointer<GstQuery> query,
    int n_formats,
  ) {
    return _gst_query_set_formats(
      query,
      n_formats,
    );
  }

  late final _gst_query_set_formatsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, gint)>>(
      'gst_query_set_formats');
  late final _gst_query_set_formats = _gst_query_set_formatsPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  void gst_query_set_formatsv(
    ffi.Pointer<GstQuery> query,
    int n_formats,
    ffi.Pointer<ffi.Int32> formats,
  ) {
    return _gst_query_set_formatsv(
      query,
      n_formats,
      formats,
    );
  }

  late final _gst_query_set_formatsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, gint,
              ffi.Pointer<ffi.Int32>)>>('gst_query_set_formatsv');
  late final _gst_query_set_formatsv = _gst_query_set_formatsvPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, int, ffi.Pointer<ffi.Int32>)>();

  void gst_query_parse_n_formats(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<guint> n_formats,
  ) {
    return _gst_query_parse_n_formats(
      query,
      n_formats,
    );
  }

  late final _gst_query_parse_n_formatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<guint>)>>('gst_query_parse_n_formats');
  late final _gst_query_parse_n_formats = _gst_query_parse_n_formatsPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, ffi.Pointer<guint>)>();

  void gst_query_parse_nth_format(
    ffi.Pointer<GstQuery> query,
    int nth,
    ffi.Pointer<ffi.Int32> format,
  ) {
    return _gst_query_parse_nth_format(
      query,
      nth,
      format,
    );
  }

  late final _gst_query_parse_nth_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, guint,
              ffi.Pointer<ffi.Int32>)>>('gst_query_parse_nth_format');
  late final _gst_query_parse_nth_format =
      _gst_query_parse_nth_formatPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, int, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<GstQuery> gst_query_new_buffering(
    int format,
  ) {
    return _gst_query_new_buffering(
      format,
    );
  }

  late final _gst_query_new_bufferingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function(ffi.Int32)>>(
          'gst_query_new_buffering');
  late final _gst_query_new_buffering = _gst_query_new_bufferingPtr
      .asFunction<ffi.Pointer<GstQuery> Function(int)>();

  void gst_query_set_buffering_percent(
    ffi.Pointer<GstQuery> query,
    int busy,
    int percent,
  ) {
    return _gst_query_set_buffering_percent(
      query,
      busy,
      percent,
    );
  }

  late final _gst_query_set_buffering_percentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, gboolean,
              gint)>>('gst_query_set_buffering_percent');
  late final _gst_query_set_buffering_percent =
      _gst_query_set_buffering_percentPtr
          .asFunction<void Function(ffi.Pointer<GstQuery>, int, int)>();

  void gst_query_parse_buffering_percent(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<gboolean> busy,
    ffi.Pointer<gint> percent,
  ) {
    return _gst_query_parse_buffering_percent(
      query,
      busy,
      percent,
    );
  }

  late final _gst_query_parse_buffering_percentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>,
              ffi.Pointer<gint>)>>('gst_query_parse_buffering_percent');
  late final _gst_query_parse_buffering_percent =
      _gst_query_parse_buffering_percentPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>,
              ffi.Pointer<gint>)>();

  void gst_query_set_buffering_stats(
    ffi.Pointer<GstQuery> query,
    int mode,
    int avg_in,
    int avg_out,
    int buffering_left,
  ) {
    return _gst_query_set_buffering_stats(
      query,
      mode,
      avg_in,
      avg_out,
      buffering_left,
    );
  }

  late final _gst_query_set_buffering_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32, gint, gint,
              gint64)>>('gst_query_set_buffering_stats');
  late final _gst_query_set_buffering_stats = _gst_query_set_buffering_statsPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int, int, int)>();

  void gst_query_parse_buffering_stats(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> mode,
    ffi.Pointer<gint> avg_in,
    ffi.Pointer<gint> avg_out,
    ffi.Pointer<gint64> buffering_left,
  ) {
    return _gst_query_parse_buffering_stats(
      query,
      mode,
      avg_in,
      avg_out,
      buffering_left,
    );
  }

  late final _gst_query_parse_buffering_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint64>)>>('gst_query_parse_buffering_stats');
  late final _gst_query_parse_buffering_stats =
      _gst_query_parse_buffering_statsPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>, ffi.Pointer<gint>, ffi.Pointer<gint64>)>();

  void gst_query_set_buffering_range(
    ffi.Pointer<GstQuery> query,
    int format,
    int start,
    int stop,
    int estimated_total,
  ) {
    return _gst_query_set_buffering_range(
      query,
      format,
      start,
      stop,
      estimated_total,
    );
  }

  late final _gst_query_set_buffering_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32, gint64, gint64,
              gint64)>>('gst_query_set_buffering_range');
  late final _gst_query_set_buffering_range = _gst_query_set_buffering_rangePtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int, int, int)>();

  void gst_query_parse_buffering_range(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> start,
    ffi.Pointer<gint64> stop,
    ffi.Pointer<gint64> estimated_total,
  ) {
    return _gst_query_parse_buffering_range(
      query,
      format,
      start,
      stop,
      estimated_total,
    );
  }

  late final _gst_query_parse_buffering_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>>('gst_query_parse_buffering_range');
  late final _gst_query_parse_buffering_range =
      _gst_query_parse_buffering_rangePtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>, ffi.Pointer<gint64>, ffi.Pointer<gint64>)>();

  int gst_query_add_buffering_range(
    ffi.Pointer<GstQuery> query,
    int start,
    int stop,
  ) {
    return _gst_query_add_buffering_range(
      query,
      start,
      stop,
    );
  }

  late final _gst_query_add_buffering_rangePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstQuery>, gint64,
              gint64)>>('gst_query_add_buffering_range');
  late final _gst_query_add_buffering_range = _gst_query_add_buffering_rangePtr
      .asFunction<int Function(ffi.Pointer<GstQuery>, int, int)>();

  int gst_query_get_n_buffering_ranges(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_get_n_buffering_ranges(
      query,
    );
  }

  late final _gst_query_get_n_buffering_rangesPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstQuery>)>>(
          'gst_query_get_n_buffering_ranges');
  late final _gst_query_get_n_buffering_ranges =
      _gst_query_get_n_buffering_rangesPtr
          .asFunction<int Function(ffi.Pointer<GstQuery>)>();

  int gst_query_parse_nth_buffering_range(
    ffi.Pointer<GstQuery> query,
    int index,
    ffi.Pointer<gint64> start,
    ffi.Pointer<gint64> stop,
  ) {
    return _gst_query_parse_nth_buffering_range(
      query,
      index,
      start,
      stop,
    );
  }

  late final _gst_query_parse_nth_buffering_rangePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstQuery>, guint, ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>>('gst_query_parse_nth_buffering_range');
  late final _gst_query_parse_nth_buffering_range =
      _gst_query_parse_nth_buffering_rangePtr.asFunction<
          int Function(ffi.Pointer<GstQuery>, int, ffi.Pointer<gint64>,
              ffi.Pointer<gint64>)>();

  ffi.Pointer<GstQuery> gst_query_new_uri() {
    return _gst_query_new_uri();
  }

  late final _gst_query_new_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_uri');
  late final _gst_query_new_uri =
      _gst_query_new_uriPtr.asFunction<ffi.Pointer<GstQuery> Function()>();

  void gst_query_parse_uri(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<ffi.Char>> uri,
  ) {
    return _gst_query_parse_uri(
      query,
      uri,
    );
  }

  late final _gst_query_parse_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('gst_query_parse_uri');
  late final _gst_query_parse_uri = _gst_query_parse_uriPtr.asFunction<
      void Function(
          ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_query_set_uri(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_query_set_uri(
      query,
      uri,
    );
  }

  late final _gst_query_set_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Char>)>>('gst_query_set_uri');
  late final _gst_query_set_uri = _gst_query_set_uriPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Char>)>();

  void gst_query_parse_uri_redirection(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<ffi.Char>> uri,
  ) {
    return _gst_query_parse_uri_redirection(
      query,
      uri,
    );
  }

  late final _gst_query_parse_uri_redirectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_query_parse_uri_redirection');
  late final _gst_query_parse_uri_redirection =
      _gst_query_parse_uri_redirectionPtr.asFunction<
          void Function(
              ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_query_set_uri_redirection(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_query_set_uri_redirection(
      query,
      uri,
    );
  }

  late final _gst_query_set_uri_redirectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Char>)>>('gst_query_set_uri_redirection');
  late final _gst_query_set_uri_redirection =
      _gst_query_set_uri_redirectionPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Char>)>();

  void gst_query_parse_uri_redirection_permanent(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<gboolean> permanent,
  ) {
    return _gst_query_parse_uri_redirection_permanent(
      query,
      permanent,
    );
  }

  late final _gst_query_parse_uri_redirection_permanentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>)>>(
      'gst_query_parse_uri_redirection_permanent');
  late final _gst_query_parse_uri_redirection_permanent =
      _gst_query_parse_uri_redirection_permanentPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>)>();

  void gst_query_set_uri_redirection_permanent(
    ffi.Pointer<GstQuery> query,
    int permanent,
  ) {
    return _gst_query_set_uri_redirection_permanent(
      query,
      permanent,
    );
  }

  late final _gst_query_set_uri_redirection_permanentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, gboolean)>>(
      'gst_query_set_uri_redirection_permanent');
  late final _gst_query_set_uri_redirection_permanent =
      _gst_query_set_uri_redirection_permanentPtr
          .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  ffi.Pointer<GstQuery> gst_query_new_allocation(
    ffi.Pointer<GstCaps> caps,
    int need_pool,
  ) {
    return _gst_query_new_allocation(
      caps,
      need_pool,
    );
  }

  late final _gst_query_new_allocationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Pointer<GstCaps>, gboolean)>>('gst_query_new_allocation');
  late final _gst_query_new_allocation = _gst_query_new_allocationPtr
      .asFunction<ffi.Pointer<GstQuery> Function(ffi.Pointer<GstCaps>, int)>();

  void gst_query_parse_allocation(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<GstCaps>> caps,
    ffi.Pointer<gboolean> need_pool,
  ) {
    return _gst_query_parse_allocation(
      query,
      caps,
      need_pool,
    );
  }

  late final _gst_query_parse_allocationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Pointer<GstCaps>>,
              ffi.Pointer<gboolean>)>>('gst_query_parse_allocation');
  late final _gst_query_parse_allocation =
      _gst_query_parse_allocationPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Pointer<GstCaps>>, ffi.Pointer<gboolean>)>();

  void gst_query_add_allocation_pool(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<GstBufferPool> pool,
    int size,
    int min_buffers,
    int max_buffers,
  ) {
    return _gst_query_add_allocation_pool(
      query,
      pool,
      size,
      min_buffers,
      max_buffers,
    );
  }

  late final _gst_query_add_allocation_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Pointer<GstBufferPool>,
              guint, guint, guint)>>('gst_query_add_allocation_pool');
  late final _gst_query_add_allocation_pool =
      _gst_query_add_allocation_poolPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<GstBufferPool>, int,
              int, int)>();

  int gst_query_get_n_allocation_pools(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_get_n_allocation_pools(
      query,
    );
  }

  late final _gst_query_get_n_allocation_poolsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstQuery>)>>(
          'gst_query_get_n_allocation_pools');
  late final _gst_query_get_n_allocation_pools =
      _gst_query_get_n_allocation_poolsPtr
          .asFunction<int Function(ffi.Pointer<GstQuery>)>();

  void gst_query_parse_nth_allocation_pool(
    ffi.Pointer<GstQuery> query,
    int index,
    ffi.Pointer<ffi.Pointer<GstBufferPool>> pool,
    ffi.Pointer<guint> size,
    ffi.Pointer<guint> min_buffers,
    ffi.Pointer<guint> max_buffers,
  ) {
    return _gst_query_parse_nth_allocation_pool(
      query,
      index,
      pool,
      size,
      min_buffers,
      max_buffers,
    );
  }

  late final _gst_query_parse_nth_allocation_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              guint,
              ffi.Pointer<ffi.Pointer<GstBufferPool>>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>)>>('gst_query_parse_nth_allocation_pool');
  late final _gst_query_parse_nth_allocation_pool =
      _gst_query_parse_nth_allocation_poolPtr.asFunction<
          void Function(
              ffi.Pointer<GstQuery>,
              int,
              ffi.Pointer<ffi.Pointer<GstBufferPool>>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>)>();

  void gst_query_set_nth_allocation_pool(
    ffi.Pointer<GstQuery> query,
    int index,
    ffi.Pointer<GstBufferPool> pool,
    int size,
    int min_buffers,
    int max_buffers,
  ) {
    return _gst_query_set_nth_allocation_pool(
      query,
      index,
      pool,
      size,
      min_buffers,
      max_buffers,
    );
  }

  late final _gst_query_set_nth_allocation_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              guint,
              ffi.Pointer<GstBufferPool>,
              guint,
              guint,
              guint)>>('gst_query_set_nth_allocation_pool');
  late final _gst_query_set_nth_allocation_pool =
      _gst_query_set_nth_allocation_poolPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, int, ffi.Pointer<GstBufferPool>,
              int, int, int)>();

  void gst_query_remove_nth_allocation_pool(
    ffi.Pointer<GstQuery> query,
    int index,
  ) {
    return _gst_query_remove_nth_allocation_pool(
      query,
      index,
    );
  }

  late final _gst_query_remove_nth_allocation_poolPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, guint)>>(
      'gst_query_remove_nth_allocation_pool');
  late final _gst_query_remove_nth_allocation_pool =
      _gst_query_remove_nth_allocation_poolPtr
          .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  void gst_query_add_allocation_param(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<GstAllocator> allocator,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_query_add_allocation_param(
      query,
      allocator,
      params,
    );
  }

  late final _gst_query_add_allocation_paramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstQuery>,
                  ffi.Pointer<GstAllocator>,
                  ffi.Pointer<GstAllocationParams>)>>(
      'gst_query_add_allocation_param');
  late final _gst_query_add_allocation_param =
      _gst_query_add_allocation_paramPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<GstAllocator>,
              ffi.Pointer<GstAllocationParams>)>();

  int gst_query_get_n_allocation_params(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_get_n_allocation_params(
      query,
    );
  }

  late final _gst_query_get_n_allocation_paramsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstQuery>)>>(
          'gst_query_get_n_allocation_params');
  late final _gst_query_get_n_allocation_params =
      _gst_query_get_n_allocation_paramsPtr
          .asFunction<int Function(ffi.Pointer<GstQuery>)>();

  void gst_query_parse_nth_allocation_param(
    ffi.Pointer<GstQuery> query,
    int index,
    ffi.Pointer<ffi.Pointer<GstAllocator>> allocator,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_query_parse_nth_allocation_param(
      query,
      index,
      allocator,
      params,
    );
  }

  late final _gst_query_parse_nth_allocation_paramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstQuery>,
                  guint,
                  ffi.Pointer<ffi.Pointer<GstAllocator>>,
                  ffi.Pointer<GstAllocationParams>)>>(
      'gst_query_parse_nth_allocation_param');
  late final _gst_query_parse_nth_allocation_param =
      _gst_query_parse_nth_allocation_paramPtr.asFunction<
          void Function(
              ffi.Pointer<GstQuery>,
              int,
              ffi.Pointer<ffi.Pointer<GstAllocator>>,
              ffi.Pointer<GstAllocationParams>)>();

  void gst_query_set_nth_allocation_param(
    ffi.Pointer<GstQuery> query,
    int index,
    ffi.Pointer<GstAllocator> allocator,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_query_set_nth_allocation_param(
      query,
      index,
      allocator,
      params,
    );
  }

  late final _gst_query_set_nth_allocation_paramPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstQuery>,
                  guint,
                  ffi.Pointer<GstAllocator>,
                  ffi.Pointer<GstAllocationParams>)>>(
      'gst_query_set_nth_allocation_param');
  late final _gst_query_set_nth_allocation_param =
      _gst_query_set_nth_allocation_paramPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, int, ffi.Pointer<GstAllocator>,
              ffi.Pointer<GstAllocationParams>)>();

  void gst_query_remove_nth_allocation_param(
    ffi.Pointer<GstQuery> query,
    int index,
  ) {
    return _gst_query_remove_nth_allocation_param(
      query,
      index,
    );
  }

  late final _gst_query_remove_nth_allocation_paramPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, guint)>>(
      'gst_query_remove_nth_allocation_param');
  late final _gst_query_remove_nth_allocation_param =
      _gst_query_remove_nth_allocation_paramPtr
          .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  void gst_query_add_allocation_meta(
    ffi.Pointer<GstQuery> query,
    int api,
    ffi.Pointer<GstStructure> params,
  ) {
    return _gst_query_add_allocation_meta(
      query,
      api,
      params,
    );
  }

  late final _gst_query_add_allocation_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, GType,
              ffi.Pointer<GstStructure>)>>('gst_query_add_allocation_meta');
  late final _gst_query_add_allocation_meta =
      _gst_query_add_allocation_metaPtr.asFunction<
          void Function(
              ffi.Pointer<GstQuery>, int, ffi.Pointer<GstStructure>)>();

  int gst_query_get_n_allocation_metas(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_get_n_allocation_metas(
      query,
    );
  }

  late final _gst_query_get_n_allocation_metasPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstQuery>)>>(
          'gst_query_get_n_allocation_metas');
  late final _gst_query_get_n_allocation_metas =
      _gst_query_get_n_allocation_metasPtr
          .asFunction<int Function(ffi.Pointer<GstQuery>)>();

  int gst_query_parse_nth_allocation_meta(
    ffi.Pointer<GstQuery> query,
    int index,
    ffi.Pointer<ffi.Pointer<GstStructure>> params,
  ) {
    return _gst_query_parse_nth_allocation_meta(
      query,
      index,
      params,
    );
  }

  late final _gst_query_parse_nth_allocation_metaPtr = _lookup<
          ffi.NativeFunction<
              GType Function(ffi.Pointer<GstQuery>, guint,
                  ffi.Pointer<ffi.Pointer<GstStructure>>)>>(
      'gst_query_parse_nth_allocation_meta');
  late final _gst_query_parse_nth_allocation_meta =
      _gst_query_parse_nth_allocation_metaPtr.asFunction<
          int Function(ffi.Pointer<GstQuery>, int,
              ffi.Pointer<ffi.Pointer<GstStructure>>)>();

  void gst_query_remove_nth_allocation_meta(
    ffi.Pointer<GstQuery> query,
    int index,
  ) {
    return _gst_query_remove_nth_allocation_meta(
      query,
      index,
    );
  }

  late final _gst_query_remove_nth_allocation_metaPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, guint)>>(
      'gst_query_remove_nth_allocation_meta');
  late final _gst_query_remove_nth_allocation_meta =
      _gst_query_remove_nth_allocation_metaPtr
          .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  int gst_query_find_allocation_meta(
    ffi.Pointer<GstQuery> query,
    int api,
    ffi.Pointer<guint> index,
  ) {
    return _gst_query_find_allocation_meta(
      query,
      api,
      index,
    );
  }

  late final _gst_query_find_allocation_metaPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstQuery>, GType,
              ffi.Pointer<guint>)>>('gst_query_find_allocation_meta');
  late final _gst_query_find_allocation_meta =
      _gst_query_find_allocation_metaPtr.asFunction<
          int Function(ffi.Pointer<GstQuery>, int, ffi.Pointer<guint>)>();

  ffi.Pointer<GstQuery> gst_query_new_scheduling() {
    return _gst_query_new_scheduling();
  }

  late final _gst_query_new_schedulingPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_scheduling');
  late final _gst_query_new_scheduling = _gst_query_new_schedulingPtr
      .asFunction<ffi.Pointer<GstQuery> Function()>();

  void gst_query_set_scheduling(
    ffi.Pointer<GstQuery> query,
    int flags,
    int minsize,
    int maxsize,
    int align,
  ) {
    return _gst_query_set_scheduling(
      query,
      flags,
      minsize,
      maxsize,
      align,
    );
  }

  late final _gst_query_set_schedulingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32, gint, gint,
              gint)>>('gst_query_set_scheduling');
  late final _gst_query_set_scheduling = _gst_query_set_schedulingPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int, int, int, int)>();

  void gst_query_parse_scheduling(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Int32> flags,
    ffi.Pointer<gint> minsize,
    ffi.Pointer<gint> maxsize,
    ffi.Pointer<gint> align,
  ) {
    return _gst_query_parse_scheduling(
      query,
      flags,
      minsize,
      maxsize,
      align,
    );
  }

  late final _gst_query_parse_schedulingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gst_query_parse_scheduling');
  late final _gst_query_parse_scheduling =
      _gst_query_parse_schedulingPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  void gst_query_add_scheduling_mode(
    ffi.Pointer<GstQuery> query,
    int mode,
  ) {
    return _gst_query_add_scheduling_mode(
      query,
      mode,
    );
  }

  late final _gst_query_add_scheduling_modePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, ffi.Int32)>>(
      'gst_query_add_scheduling_mode');
  late final _gst_query_add_scheduling_mode = _gst_query_add_scheduling_modePtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  int gst_query_get_n_scheduling_modes(
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_query_get_n_scheduling_modes(
      query,
    );
  }

  late final _gst_query_get_n_scheduling_modesPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstQuery>)>>(
          'gst_query_get_n_scheduling_modes');
  late final _gst_query_get_n_scheduling_modes =
      _gst_query_get_n_scheduling_modesPtr
          .asFunction<int Function(ffi.Pointer<GstQuery>)>();

  int gst_query_parse_nth_scheduling_mode(
    ffi.Pointer<GstQuery> query,
    int index,
  ) {
    return _gst_query_parse_nth_scheduling_mode(
      query,
      index,
    );
  }

  late final _gst_query_parse_nth_scheduling_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstQuery>, guint)>>(
      'gst_query_parse_nth_scheduling_mode');
  late final _gst_query_parse_nth_scheduling_mode =
      _gst_query_parse_nth_scheduling_modePtr
          .asFunction<int Function(ffi.Pointer<GstQuery>, int)>();

  int gst_query_has_scheduling_mode(
    ffi.Pointer<GstQuery> query,
    int mode,
  ) {
    return _gst_query_has_scheduling_mode(
      query,
      mode,
    );
  }

  late final _gst_query_has_scheduling_modePtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstQuery>, ffi.Int32)>>(
      'gst_query_has_scheduling_mode');
  late final _gst_query_has_scheduling_mode = _gst_query_has_scheduling_modePtr
      .asFunction<int Function(ffi.Pointer<GstQuery>, int)>();

  int gst_query_has_scheduling_mode_with_flags(
    ffi.Pointer<GstQuery> query,
    int mode,
    int flags,
  ) {
    return _gst_query_has_scheduling_mode_with_flags(
      query,
      mode,
      flags,
    );
  }

  late final _gst_query_has_scheduling_mode_with_flagsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstQuery>, ffi.Int32,
              ffi.Int32)>>('gst_query_has_scheduling_mode_with_flags');
  late final _gst_query_has_scheduling_mode_with_flags =
      _gst_query_has_scheduling_mode_with_flagsPtr
          .asFunction<int Function(ffi.Pointer<GstQuery>, int, int)>();

  ffi.Pointer<GstQuery> gst_query_new_accept_caps(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_query_new_accept_caps(
      caps,
    );
  }

  late final _gst_query_new_accept_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Pointer<GstCaps>)>>('gst_query_new_accept_caps');
  late final _gst_query_new_accept_caps = _gst_query_new_accept_capsPtr
      .asFunction<ffi.Pointer<GstQuery> Function(ffi.Pointer<GstCaps>)>();

  void gst_query_parse_accept_caps(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<GstCaps>> caps,
  ) {
    return _gst_query_parse_accept_caps(
      query,
      caps,
    );
  }

  late final _gst_query_parse_accept_capsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<GstCaps>>)>>(
      'gst_query_parse_accept_caps');
  late final _gst_query_parse_accept_caps =
      _gst_query_parse_accept_capsPtr.asFunction<
          void Function(
              ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<GstCaps>>)>();

  void gst_query_set_accept_caps_result(
    ffi.Pointer<GstQuery> query,
    int result,
  ) {
    return _gst_query_set_accept_caps_result(
      query,
      result,
    );
  }

  late final _gst_query_set_accept_caps_resultPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, gboolean)>>(
      'gst_query_set_accept_caps_result');
  late final _gst_query_set_accept_caps_result =
      _gst_query_set_accept_caps_resultPtr
          .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  void gst_query_parse_accept_caps_result(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<gboolean> result,
  ) {
    return _gst_query_parse_accept_caps_result(
      query,
      result,
    );
  }

  late final _gst_query_parse_accept_caps_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<gboolean>)>>('gst_query_parse_accept_caps_result');
  late final _gst_query_parse_accept_caps_result =
      _gst_query_parse_accept_caps_resultPtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstQuery> gst_query_new_caps(
    ffi.Pointer<GstCaps> filter,
  ) {
    return _gst_query_new_caps(
      filter,
    );
  }

  late final _gst_query_new_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Pointer<GstCaps>)>>('gst_query_new_caps');
  late final _gst_query_new_caps = _gst_query_new_capsPtr
      .asFunction<ffi.Pointer<GstQuery> Function(ffi.Pointer<GstCaps>)>();

  void gst_query_parse_caps(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<GstCaps>> filter,
  ) {
    return _gst_query_parse_caps(
      query,
      filter,
    );
  }

  late final _gst_query_parse_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<ffi.Pointer<GstCaps>>)>>('gst_query_parse_caps');
  late final _gst_query_parse_caps = _gst_query_parse_capsPtr.asFunction<
      void Function(
          ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<GstCaps>>)>();

  void gst_query_set_caps_result(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_query_set_caps_result(
      query,
      caps,
    );
  }

  late final _gst_query_set_caps_resultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<GstCaps>)>>('gst_query_set_caps_result');
  late final _gst_query_set_caps_result = _gst_query_set_caps_resultPtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, ffi.Pointer<GstCaps>)>();

  void gst_query_parse_caps_result(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<GstCaps>> caps,
  ) {
    return _gst_query_parse_caps_result(
      query,
      caps,
    );
  }

  late final _gst_query_parse_caps_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<GstCaps>>)>>(
      'gst_query_parse_caps_result');
  late final _gst_query_parse_caps_result =
      _gst_query_parse_caps_resultPtr.asFunction<
          void Function(
              ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<GstCaps>>)>();

  ffi.Pointer<GstQuery> gst_query_new_drain() {
    return _gst_query_new_drain();
  }

  late final _gst_query_new_drainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_drain');
  late final _gst_query_new_drain =
      _gst_query_new_drainPtr.asFunction<ffi.Pointer<GstQuery> Function()>();

  ffi.Pointer<GstQuery> gst_query_new_context(
    ffi.Pointer<ffi.Char> context_type,
  ) {
    return _gst_query_new_context(
      context_type,
    );
  }

  late final _gst_query_new_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Pointer<ffi.Char>)>>('gst_query_new_context');
  late final _gst_query_new_context = _gst_query_new_contextPtr
      .asFunction<ffi.Pointer<GstQuery> Function(ffi.Pointer<ffi.Char>)>();

  int gst_query_parse_context_type(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<ffi.Char>> context_type,
  ) {
    return _gst_query_parse_context_type(
      query,
      context_type,
    );
  }

  late final _gst_query_parse_context_typePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_query_parse_context_type');
  late final _gst_query_parse_context_type =
      _gst_query_parse_context_typePtr.asFunction<
          int Function(
              ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_query_set_context(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_query_set_context(
      query,
      context,
    );
  }

  late final _gst_query_set_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<GstContext>)>>('gst_query_set_context');
  late final _gst_query_set_context = _gst_query_set_contextPtr.asFunction<
      void Function(ffi.Pointer<GstQuery>, ffi.Pointer<GstContext>)>();

  void gst_query_parse_context(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<ffi.Pointer<GstContext>> context,
  ) {
    return _gst_query_parse_context(
      query,
      context,
    );
  }

  late final _gst_query_parse_contextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstQuery>,
                  ffi.Pointer<ffi.Pointer<GstContext>>)>>(
      'gst_query_parse_context');
  late final _gst_query_parse_context = _gst_query_parse_contextPtr.asFunction<
      void Function(
          ffi.Pointer<GstQuery>, ffi.Pointer<ffi.Pointer<GstContext>>)>();

  ffi.Pointer<GstQuery> gst_query_new_bitrate() {
    return _gst_query_new_bitrate();
  }

  late final _gst_query_new_bitratePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_bitrate');
  late final _gst_query_new_bitrate =
      _gst_query_new_bitratePtr.asFunction<ffi.Pointer<GstQuery> Function()>();

  void gst_query_set_bitrate(
    ffi.Pointer<GstQuery> query,
    int nominal_bitrate,
  ) {
    return _gst_query_set_bitrate(
      query,
      nominal_bitrate,
    );
  }

  late final _gst_query_set_bitratePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, guint)>>(
      'gst_query_set_bitrate');
  late final _gst_query_set_bitrate = _gst_query_set_bitratePtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  void gst_query_parse_bitrate(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<guint> nominal_bitrate,
  ) {
    return _gst_query_parse_bitrate(
      query,
      nominal_bitrate,
    );
  }

  late final _gst_query_parse_bitratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<guint>)>>('gst_query_parse_bitrate');
  late final _gst_query_parse_bitrate = _gst_query_parse_bitratePtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, ffi.Pointer<guint>)>();

  ffi.Pointer<GstQuery> gst_query_new_selectable() {
    return _gst_query_new_selectable();
  }

  late final _gst_query_new_selectablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstQuery> Function()>>(
          'gst_query_new_selectable');
  late final _gst_query_new_selectable = _gst_query_new_selectablePtr
      .asFunction<ffi.Pointer<GstQuery> Function()>();

  void gst_query_set_selectable(
    ffi.Pointer<GstQuery> query,
    int selectable,
  ) {
    return _gst_query_set_selectable(
      query,
      selectable,
    );
  }

  late final _gst_query_set_selectablePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstQuery>, gboolean)>>(
      'gst_query_set_selectable');
  late final _gst_query_set_selectable = _gst_query_set_selectablePtr
      .asFunction<void Function(ffi.Pointer<GstQuery>, int)>();

  void gst_query_parse_selectable(
    ffi.Pointer<GstQuery> query,
    ffi.Pointer<gboolean> selectable,
  ) {
    return _gst_query_parse_selectable(
      query,
      selectable,
    );
  }

  late final _gst_query_parse_selectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstQuery>,
              ffi.Pointer<gboolean>)>>('gst_query_parse_selectable');
  late final _gst_query_parse_selectable =
      _gst_query_parse_selectablePtr.asFunction<
          void Function(ffi.Pointer<GstQuery>, ffi.Pointer<gboolean>)>();

  int gst_device_get_type() {
    return _gst_device_get_type();
  }

  late final _gst_device_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_device_get_type');
  late final _gst_device_get_type =
      _gst_device_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstElement> gst_device_create_element(
    ffi.Pointer<GstDevice> device,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_device_create_element(
      device,
      name,
    );
  }

  late final _gst_device_create_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstDevice>,
              ffi.Pointer<ffi.Char>)>>('gst_device_create_element');
  late final _gst_device_create_element =
      _gst_device_create_elementPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<GstDevice>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstCaps> gst_device_get_caps(
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_device_get_caps(
      device,
    );
  }

  late final _gst_device_get_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstDevice>)>>('gst_device_get_caps');
  late final _gst_device_get_caps = _gst_device_get_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstDevice>)>();

  ffi.Pointer<ffi.Char> gst_device_get_display_name(
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_device_get_display_name(
      device,
    );
  }

  late final _gst_device_get_display_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDevice>)>>('gst_device_get_display_name');
  late final _gst_device_get_display_name = _gst_device_get_display_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDevice>)>();

  ffi.Pointer<ffi.Char> gst_device_get_device_class(
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_device_get_device_class(
      device,
    );
  }

  late final _gst_device_get_device_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDevice>)>>('gst_device_get_device_class');
  late final _gst_device_get_device_class = _gst_device_get_device_classPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDevice>)>();

  ffi.Pointer<GstStructure> gst_device_get_properties(
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_device_get_properties(
      device,
    );
  }

  late final _gst_device_get_propertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstDevice>)>>('gst_device_get_properties');
  late final _gst_device_get_properties = _gst_device_get_propertiesPtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstDevice>)>();

  int gst_device_reconfigure_element(
    ffi.Pointer<GstDevice> device,
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_device_reconfigure_element(
      device,
      element,
    );
  }

  late final _gst_device_reconfigure_elementPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstDevice>,
              ffi.Pointer<GstElement>)>>('gst_device_reconfigure_element');
  late final _gst_device_reconfigure_element =
      _gst_device_reconfigure_elementPtr.asFunction<
          int Function(ffi.Pointer<GstDevice>, ffi.Pointer<GstElement>)>();

  int gst_device_has_classesv(
    ffi.Pointer<GstDevice> device,
    ffi.Pointer<ffi.Pointer<ffi.Char>> classes,
  ) {
    return _gst_device_has_classesv(
      device,
      classes,
    );
  }

  late final _gst_device_has_classesvPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstDevice>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('gst_device_has_classesv');
  late final _gst_device_has_classesv = _gst_device_has_classesvPtr.asFunction<
      int Function(
          ffi.Pointer<GstDevice>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_device_has_classes(
    ffi.Pointer<GstDevice> device,
    ffi.Pointer<ffi.Char> classes,
  ) {
    return _gst_device_has_classes(
      device,
      classes,
    );
  }

  late final _gst_device_has_classesPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstDevice>,
              ffi.Pointer<ffi.Char>)>>('gst_device_has_classes');
  late final _gst_device_has_classes = _gst_device_has_classesPtr.asFunction<
      int Function(ffi.Pointer<GstDevice>, ffi.Pointer<ffi.Char>)>();

  int gst_stream_get_type() {
    return _gst_stream_get_type();
  }

  late final _gst_stream_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_stream_get_type');
  late final _gst_stream_get_type =
      _gst_stream_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstStream> gst_stream_new(
    ffi.Pointer<ffi.Char> stream_id,
    ffi.Pointer<GstCaps> caps,
    int type,
    int flags,
  ) {
    return _gst_stream_new(
      stream_id,
      caps,
      type,
      flags,
    );
  }

  late final _gst_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStream> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>, ffi.Int32, ffi.Int32)>>('gst_stream_new');
  late final _gst_stream_new = _gst_stream_newPtr.asFunction<
      ffi.Pointer<GstStream> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<GstCaps>, int, int)>();

  ffi.Pointer<ffi.Char> gst_stream_get_stream_id(
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_stream_get_stream_id(
      stream,
    );
  }

  late final _gst_stream_get_stream_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstStream>)>>('gst_stream_get_stream_id');
  late final _gst_stream_get_stream_id = _gst_stream_get_stream_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStream>)>();

  void gst_stream_set_stream_flags(
    ffi.Pointer<GstStream> stream,
    int flags,
  ) {
    return _gst_stream_set_stream_flags(
      stream,
      flags,
    );
  }

  late final _gst_stream_set_stream_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStream>,
              ffi.Int32)>>('gst_stream_set_stream_flags');
  late final _gst_stream_set_stream_flags = _gst_stream_set_stream_flagsPtr
      .asFunction<void Function(ffi.Pointer<GstStream>, int)>();

  int gst_stream_get_stream_flags(
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_stream_get_stream_flags(
      stream,
    );
  }

  late final _gst_stream_get_stream_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstStream>)>>(
          'gst_stream_get_stream_flags');
  late final _gst_stream_get_stream_flags = _gst_stream_get_stream_flagsPtr
      .asFunction<int Function(ffi.Pointer<GstStream>)>();

  void gst_stream_set_stream_type(
    ffi.Pointer<GstStream> stream,
    int stream_type,
  ) {
    return _gst_stream_set_stream_type(
      stream,
      stream_type,
    );
  }

  late final _gst_stream_set_stream_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStream>,
              ffi.Int32)>>('gst_stream_set_stream_type');
  late final _gst_stream_set_stream_type = _gst_stream_set_stream_typePtr
      .asFunction<void Function(ffi.Pointer<GstStream>, int)>();

  int gst_stream_get_stream_type(
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_stream_get_stream_type(
      stream,
    );
  }

  late final _gst_stream_get_stream_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstStream>)>>(
          'gst_stream_get_stream_type');
  late final _gst_stream_get_stream_type = _gst_stream_get_stream_typePtr
      .asFunction<int Function(ffi.Pointer<GstStream>)>();

  void gst_stream_set_tags(
    ffi.Pointer<GstStream> stream,
    ffi.Pointer<GstTagList> tags,
  ) {
    return _gst_stream_set_tags(
      stream,
      tags,
    );
  }

  late final _gst_stream_set_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStream>,
              ffi.Pointer<GstTagList>)>>('gst_stream_set_tags');
  late final _gst_stream_set_tags = _gst_stream_set_tagsPtr.asFunction<
      void Function(ffi.Pointer<GstStream>, ffi.Pointer<GstTagList>)>();

  ffi.Pointer<GstTagList> gst_stream_get_tags(
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_stream_get_tags(
      stream,
    );
  }

  late final _gst_stream_get_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<GstStream>)>>('gst_stream_get_tags');
  late final _gst_stream_get_tags = _gst_stream_get_tagsPtr
      .asFunction<ffi.Pointer<GstTagList> Function(ffi.Pointer<GstStream>)>();

  void gst_stream_set_caps(
    ffi.Pointer<GstStream> stream,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_stream_set_caps(
      stream,
      caps,
    );
  }

  late final _gst_stream_set_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStream>,
              ffi.Pointer<GstCaps>)>>('gst_stream_set_caps');
  late final _gst_stream_set_caps = _gst_stream_set_capsPtr.asFunction<
      void Function(ffi.Pointer<GstStream>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_stream_get_caps(
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_stream_get_caps(
      stream,
    );
  }

  late final _gst_stream_get_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstStream>)>>('gst_stream_get_caps');
  late final _gst_stream_get_caps = _gst_stream_get_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstStream>)>();

  ffi.Pointer<ffi.Char> gst_stream_type_get_name(
    int stype,
  ) {
    return _gst_stream_type_get_name(
      stype,
    );
  }

  late final _gst_stream_type_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_stream_type_get_name');
  late final _gst_stream_type_get_name = _gst_stream_type_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_stream_collection_get_type() {
    return _gst_stream_collection_get_type();
  }

  late final _gst_stream_collection_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_stream_collection_get_type');
  late final _gst_stream_collection_get_type =
      _gst_stream_collection_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstStreamCollection> gst_stream_collection_new(
    ffi.Pointer<ffi.Char> upstream_id,
  ) {
    return _gst_stream_collection_new(
      upstream_id,
    );
  }

  late final _gst_stream_collection_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStreamCollection> Function(
              ffi.Pointer<ffi.Char>)>>('gst_stream_collection_new');
  late final _gst_stream_collection_new =
      _gst_stream_collection_newPtr.asFunction<
          ffi.Pointer<GstStreamCollection> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_stream_collection_get_upstream_id(
    ffi.Pointer<GstStreamCollection> collection,
  ) {
    return _gst_stream_collection_get_upstream_id(
      collection,
    );
  }

  late final _gst_stream_collection_get_upstream_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GstStreamCollection>)>>(
      'gst_stream_collection_get_upstream_id');
  late final _gst_stream_collection_get_upstream_id =
      _gst_stream_collection_get_upstream_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStreamCollection>)>();

  int gst_stream_collection_get_size(
    ffi.Pointer<GstStreamCollection> collection,
  ) {
    return _gst_stream_collection_get_size(
      collection,
    );
  }

  late final _gst_stream_collection_get_sizePtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstStreamCollection>)>>(
      'gst_stream_collection_get_size');
  late final _gst_stream_collection_get_size =
      _gst_stream_collection_get_sizePtr
          .asFunction<int Function(ffi.Pointer<GstStreamCollection>)>();

  ffi.Pointer<GstStream> gst_stream_collection_get_stream(
    ffi.Pointer<GstStreamCollection> collection,
    int index,
  ) {
    return _gst_stream_collection_get_stream(
      collection,
      index,
    );
  }

  late final _gst_stream_collection_get_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStream> Function(ffi.Pointer<GstStreamCollection>,
              guint)>>('gst_stream_collection_get_stream');
  late final _gst_stream_collection_get_stream =
      _gst_stream_collection_get_streamPtr.asFunction<
          ffi.Pointer<GstStream> Function(
              ffi.Pointer<GstStreamCollection>, int)>();

  int gst_stream_collection_add_stream(
    ffi.Pointer<GstStreamCollection> collection,
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_stream_collection_add_stream(
      collection,
      stream,
    );
  }

  late final _gst_stream_collection_add_streamPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStreamCollection>,
              ffi.Pointer<GstStream>)>>('gst_stream_collection_add_stream');
  late final _gst_stream_collection_add_stream =
      _gst_stream_collection_add_streamPtr.asFunction<
          int Function(
              ffi.Pointer<GstStreamCollection>, ffi.Pointer<GstStream>)>();

  late final ffi.Pointer<GType> __gst_message_type =
      _lookup<GType>('_gst_message_type');

  int get _gst_message_type => __gst_message_type.value;

  set _gst_message_type(int value) => __gst_message_type.value = value;

  int gst_message_get_type() {
    return _gst_message_get_type();
  }

  late final _gst_message_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_message_get_type');
  late final _gst_message_get_type =
      _gst_message_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gst_message_type_get_name(
    int type,
  ) {
    return _gst_message_type_get_name(
      type,
    );
  }

  late final _gst_message_type_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_message_type_get_name');
  late final _gst_message_type_get_name = _gst_message_type_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_message_type_to_quark(
    int type,
  ) {
    return _gst_message_type_to_quark(
      type,
    );
  }

  late final _gst_message_type_to_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Int32)>>(
          'gst_message_type_to_quark');
  late final _gst_message_type_to_quark =
      _gst_message_type_to_quarkPtr.asFunction<int Function(int)>();

  ffi.Pointer<GstMessage> gst_message_new_custom(
    int type,
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_message_new_custom(
      type,
      src,
      structure,
    );
  }

  late final _gst_message_new_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Int32, ffi.Pointer<GstObject>,
              ffi.Pointer<GstStructure>)>>('gst_message_new_custom');
  late final _gst_message_new_custom = _gst_message_new_customPtr.asFunction<
      ffi.Pointer<GstMessage> Function(
          int, ffi.Pointer<GstObject>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstStructure> gst_message_get_structure(
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_message_get_structure(
      message,
    );
  }

  late final _gst_message_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstMessage>)>>('gst_message_get_structure');
  late final _gst_message_get_structure =
      _gst_message_get_structurePtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstMessage>)>();

  ffi.Pointer<GstStructure> gst_message_writable_structure(
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_message_writable_structure(
      message,
    );
  }

  late final _gst_message_writable_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstMessage>)>>('gst_message_writable_structure');
  late final _gst_message_writable_structure =
      _gst_message_writable_structurePtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstMessage>)>();

  int gst_message_has_name(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_message_has_name(
      message,
      name,
    );
  }

  late final _gst_message_has_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Char>)>>('gst_message_has_name');
  late final _gst_message_has_name = _gst_message_has_namePtr.asFunction<
      int Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Char>)>();

  int gst_message_get_seqnum(
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_message_get_seqnum(
      message,
    );
  }

  late final _gst_message_get_seqnumPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GstMessage>)>>(
          'gst_message_get_seqnum');
  late final _gst_message_get_seqnum = _gst_message_get_seqnumPtr
      .asFunction<int Function(ffi.Pointer<GstMessage>)>();

  void gst_message_set_seqnum(
    ffi.Pointer<GstMessage> message,
    int seqnum,
  ) {
    return _gst_message_set_seqnum(
      message,
      seqnum,
    );
  }

  late final _gst_message_set_seqnumPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstMessage>, guint32)>>(
      'gst_message_set_seqnum');
  late final _gst_message_set_seqnum = _gst_message_set_seqnumPtr
      .asFunction<void Function(ffi.Pointer<GstMessage>, int)>();

  ffi.Pointer<GstMessage> gst_message_new_eos(
    ffi.Pointer<GstObject> src,
  ) {
    return _gst_message_new_eos(
      src,
    );
  }

  late final _gst_message_new_eosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>)>>('gst_message_new_eos');
  late final _gst_message_new_eos = _gst_message_new_eosPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstMessage> gst_message_new_error(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
  ) {
    return _gst_message_new_error(
      src,
      error,
      debug,
    );
  }

  late final _gst_message_new_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>>('gst_message_new_error');
  late final _gst_message_new_error = _gst_message_new_errorPtr.asFunction<
      ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
          ffi.Pointer<GError>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstMessage> gst_message_new_error_with_details(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
    ffi.Pointer<GstStructure> details,
  ) {
    return _gst_message_new_error_with_details(
      src,
      error,
      debug,
      details,
    );
  }

  late final _gst_message_new_error_with_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstMessage> Function(
                  ffi.Pointer<GstObject>,
                  ffi.Pointer<GError>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GstStructure>)>>(
      'gst_message_new_error_with_details');
  late final _gst_message_new_error_with_details =
      _gst_message_new_error_with_detailsPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstStructure>)>();

  void gst_message_parse_error(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GError>> gerror,
    ffi.Pointer<ffi.Pointer<ffi.Char>> debug,
  ) {
    return _gst_message_parse_error(
      message,
      gerror,
      debug,
    );
  }

  late final _gst_message_parse_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('gst_message_parse_error');
  late final _gst_message_parse_error = _gst_message_parse_errorPtr.asFunction<
      void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GError>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_message_parse_error_details(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstStructure>> structure,
  ) {
    return _gst_message_parse_error_details(
      message,
      structure,
    );
  }

  late final _gst_message_parse_error_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstStructure>>)>>(
      'gst_message_parse_error_details');
  late final _gst_message_parse_error_details =
      _gst_message_parse_error_detailsPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstStructure>>)>();

  ffi.Pointer<GstMessage> gst_message_new_warning(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
  ) {
    return _gst_message_new_warning(
      src,
      error,
      debug,
    );
  }

  late final _gst_message_new_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>>('gst_message_new_warning');
  late final _gst_message_new_warning = _gst_message_new_warningPtr.asFunction<
      ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
          ffi.Pointer<GError>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstMessage> gst_message_new_warning_with_details(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
    ffi.Pointer<GstStructure> details,
  ) {
    return _gst_message_new_warning_with_details(
      src,
      error,
      debug,
      details,
    );
  }

  late final _gst_message_new_warning_with_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstMessage> Function(
                  ffi.Pointer<GstObject>,
                  ffi.Pointer<GError>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<GstStructure>)>>(
      'gst_message_new_warning_with_details');
  late final _gst_message_new_warning_with_details =
      _gst_message_new_warning_with_detailsPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstStructure>)>();

  void gst_message_parse_warning(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GError>> gerror,
    ffi.Pointer<ffi.Pointer<ffi.Char>> debug,
  ) {
    return _gst_message_parse_warning(
      message,
      gerror,
      debug,
    );
  }

  late final _gst_message_parse_warningPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GError>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_message_parse_warning');
  late final _gst_message_parse_warning =
      _gst_message_parse_warningPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_message_parse_warning_details(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstStructure>> structure,
  ) {
    return _gst_message_parse_warning_details(
      message,
      structure,
    );
  }

  late final _gst_message_parse_warning_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstStructure>>)>>(
      'gst_message_parse_warning_details');
  late final _gst_message_parse_warning_details =
      _gst_message_parse_warning_detailsPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstStructure>>)>();

  ffi.Pointer<GstMessage> gst_message_new_info(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
  ) {
    return _gst_message_new_info(
      src,
      error,
      debug,
    );
  }

  late final _gst_message_new_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>>('gst_message_new_info');
  late final _gst_message_new_info = _gst_message_new_infoPtr.asFunction<
      ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
          ffi.Pointer<GError>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstMessage> gst_message_new_info_with_details(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
    ffi.Pointer<GstStructure> details,
  ) {
    return _gst_message_new_info_with_details(
      src,
      error,
      debug,
      details,
    );
  }

  late final _gst_message_new_info_with_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstStructure>)>>('gst_message_new_info_with_details');
  late final _gst_message_new_info_with_details =
      _gst_message_new_info_with_detailsPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstStructure>)>();

  void gst_message_parse_info(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GError>> gerror,
    ffi.Pointer<ffi.Pointer<ffi.Char>> debug,
  ) {
    return _gst_message_parse_info(
      message,
      gerror,
      debug,
    );
  }

  late final _gst_message_parse_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GError>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('gst_message_parse_info');
  late final _gst_message_parse_info = _gst_message_parse_infoPtr.asFunction<
      void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GError>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_message_parse_info_details(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstStructure>> structure,
  ) {
    return _gst_message_parse_info_details(
      message,
      structure,
    );
  }

  late final _gst_message_parse_info_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstStructure>>)>>(
      'gst_message_parse_info_details');
  late final _gst_message_parse_info_details =
      _gst_message_parse_info_detailsPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstStructure>>)>();

  ffi.Pointer<GstMessage> gst_message_new_tag(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstTagList> tag_list,
  ) {
    return _gst_message_new_tag(
      src,
      tag_list,
    );
  }

  late final _gst_message_new_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstTagList>)>>('gst_message_new_tag');
  late final _gst_message_new_tag = _gst_message_new_tagPtr.asFunction<
      ffi.Pointer<GstMessage> Function(
          ffi.Pointer<GstObject>, ffi.Pointer<GstTagList>)>();

  void gst_message_parse_tag(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstTagList>> tag_list,
  ) {
    return _gst_message_parse_tag(
      message,
      tag_list,
    );
  }

  late final _gst_message_parse_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstTagList>>)>>('gst_message_parse_tag');
  late final _gst_message_parse_tag = _gst_message_parse_tagPtr.asFunction<
      void Function(
          ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstTagList>>)>();

  ffi.Pointer<GstMessage> gst_message_new_buffering(
    ffi.Pointer<GstObject> src,
    int percent,
  ) {
    return _gst_message_new_buffering(
      src,
      percent,
    );
  }

  late final _gst_message_new_bufferingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, gint)>>('gst_message_new_buffering');
  late final _gst_message_new_buffering =
      _gst_message_new_bufferingPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int)>();

  void gst_message_parse_buffering(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<gint> percent,
  ) {
    return _gst_message_parse_buffering(
      message,
      percent,
    );
  }

  late final _gst_message_parse_bufferingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<gint>)>>('gst_message_parse_buffering');
  late final _gst_message_parse_buffering = _gst_message_parse_bufferingPtr
      .asFunction<void Function(ffi.Pointer<GstMessage>, ffi.Pointer<gint>)>();

  void gst_message_set_buffering_stats(
    ffi.Pointer<GstMessage> message,
    int mode,
    int avg_in,
    int avg_out,
    int buffering_left,
  ) {
    return _gst_message_set_buffering_stats(
      message,
      mode,
      avg_in,
      avg_out,
      buffering_left,
    );
  }

  late final _gst_message_set_buffering_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>, ffi.Int32, gint, gint,
              gint64)>>('gst_message_set_buffering_stats');
  late final _gst_message_set_buffering_stats =
      _gst_message_set_buffering_statsPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, int, int, int, int)>();

  void gst_message_parse_buffering_stats(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> mode,
    ffi.Pointer<gint> avg_in,
    ffi.Pointer<gint> avg_out,
    ffi.Pointer<gint64> buffering_left,
  ) {
    return _gst_message_parse_buffering_stats(
      message,
      mode,
      avg_in,
      avg_out,
      buffering_left,
    );
  }

  late final _gst_message_parse_buffering_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint>,
              ffi.Pointer<gint64>)>>('gst_message_parse_buffering_stats');
  late final _gst_message_parse_buffering_stats =
      _gst_message_parse_buffering_statsPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint>, ffi.Pointer<gint>, ffi.Pointer<gint64>)>();

  ffi.Pointer<GstMessage> gst_message_new_state_changed(
    ffi.Pointer<GstObject> src,
    int oldstate,
    int newstate,
    int pending,
  ) {
    return _gst_message_new_state_changed(
      src,
      oldstate,
      newstate,
      pending,
    );
  }

  late final _gst_message_new_state_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('gst_message_new_state_changed');
  late final _gst_message_new_state_changed =
      _gst_message_new_state_changedPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, int, int, int)>();

  void gst_message_parse_state_changed(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> oldstate,
    ffi.Pointer<ffi.Int32> newstate,
    ffi.Pointer<ffi.Int32> pending,
  ) {
    return _gst_message_parse_state_changed(
      message,
      oldstate,
      newstate,
      pending,
    );
  }

  late final _gst_message_parse_state_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gst_message_parse_state_changed');
  late final _gst_message_parse_state_changed =
      _gst_message_parse_state_changedPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<GstMessage> gst_message_new_state_dirty(
    ffi.Pointer<GstObject> src,
  ) {
    return _gst_message_new_state_dirty(
      src,
    );
  }

  late final _gst_message_new_state_dirtyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>)>>('gst_message_new_state_dirty');
  late final _gst_message_new_state_dirty = _gst_message_new_state_dirtyPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstMessage> gst_message_new_step_done(
    ffi.Pointer<GstObject> src,
    int format,
    int amount,
    double rate,
    int flush,
    int intermediate,
    int duration,
    int eos,
  ) {
    return _gst_message_new_step_done(
      src,
      format,
      amount,
      rate,
      flush,
      intermediate,
      duration,
      eos,
    );
  }

  late final _gst_message_new_step_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Int32,
              guint64,
              gdouble,
              gboolean,
              gboolean,
              guint64,
              gboolean)>>('gst_message_new_step_done');
  late final _gst_message_new_step_done =
      _gst_message_new_step_donePtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, int, int, double, int, int, int, int)>();

  void gst_message_parse_step_done(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<guint64> amount,
    ffi.Pointer<gdouble> rate,
    ffi.Pointer<gboolean> flush,
    ffi.Pointer<gboolean> intermediate,
    ffi.Pointer<guint64> duration,
    ffi.Pointer<gboolean> eos,
  ) {
    return _gst_message_parse_step_done(
      message,
      format,
      amount,
      rate,
      flush,
      intermediate,
      duration,
      eos,
    );
  }

  late final _gst_message_parse_step_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gboolean>)>>('gst_message_parse_step_done');
  late final _gst_message_parse_step_done =
      _gst_message_parse_step_donePtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstMessage> gst_message_new_clock_provide(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstClock> clock,
    int ready,
  ) {
    return _gst_message_new_clock_provide(
      src,
      clock,
      ready,
    );
  }

  late final _gst_message_new_clock_providePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GstClock>,
              gboolean)>>('gst_message_new_clock_provide');
  late final _gst_message_new_clock_provide =
      _gst_message_new_clock_providePtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstClock>, int)>();

  void gst_message_parse_clock_provide(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstClock>> clock,
    ffi.Pointer<gboolean> ready,
  ) {
    return _gst_message_parse_clock_provide(
      message,
      clock,
      ready,
    );
  }

  late final _gst_message_parse_clock_providePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstClock>>,
              ffi.Pointer<gboolean>)>>('gst_message_parse_clock_provide');
  late final _gst_message_parse_clock_provide =
      _gst_message_parse_clock_providePtr.asFunction<
          void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstClock>>, ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstMessage> gst_message_new_clock_lost(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_message_new_clock_lost(
      src,
      clock,
    );
  }

  late final _gst_message_new_clock_lostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstClock>)>>('gst_message_new_clock_lost');
  late final _gst_message_new_clock_lost =
      _gst_message_new_clock_lostPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstClock>)>();

  void gst_message_parse_clock_lost(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstClock>> clock,
  ) {
    return _gst_message_parse_clock_lost(
      message,
      clock,
    );
  }

  late final _gst_message_parse_clock_lostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstClock>>)>>(
      'gst_message_parse_clock_lost');
  late final _gst_message_parse_clock_lost =
      _gst_message_parse_clock_lostPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstClock>>)>();

  ffi.Pointer<GstMessage> gst_message_new_new_clock(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_message_new_new_clock(
      src,
      clock,
    );
  }

  late final _gst_message_new_new_clockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstClock>)>>('gst_message_new_new_clock');
  late final _gst_message_new_new_clock =
      _gst_message_new_new_clockPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstClock>)>();

  void gst_message_parse_new_clock(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstClock>> clock,
  ) {
    return _gst_message_parse_new_clock(
      message,
      clock,
    );
  }

  late final _gst_message_parse_new_clockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstClock>>)>>(
      'gst_message_parse_new_clock');
  late final _gst_message_parse_new_clock =
      _gst_message_parse_new_clockPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstClock>>)>();

  ffi.Pointer<GstMessage> gst_message_new_application(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_message_new_application(
      src,
      structure,
    );
  }

  late final _gst_message_new_applicationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstStructure>)>>('gst_message_new_application');
  late final _gst_message_new_application =
      _gst_message_new_applicationPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstMessage> gst_message_new_element(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_message_new_element(
      src,
      structure,
    );
  }

  late final _gst_message_new_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstStructure>)>>('gst_message_new_element');
  late final _gst_message_new_element = _gst_message_new_elementPtr.asFunction<
      ffi.Pointer<GstMessage> Function(
          ffi.Pointer<GstObject>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstMessage> gst_message_new_segment_start(
    ffi.Pointer<GstObject> src,
    int format,
    int position,
  ) {
    return _gst_message_new_segment_start(
      src,
      format,
      position,
    );
  }

  late final _gst_message_new_segment_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, ffi.Int32,
              gint64)>>('gst_message_new_segment_start');
  late final _gst_message_new_segment_start =
      _gst_message_new_segment_startPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int, int)>();

  void gst_message_parse_segment_start(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> position,
  ) {
    return _gst_message_parse_segment_start(
      message,
      format,
      position,
    );
  }

  late final _gst_message_parse_segment_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_message_parse_segment_start');
  late final _gst_message_parse_segment_start =
      _gst_message_parse_segment_startPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>();

  ffi.Pointer<GstMessage> gst_message_new_segment_done(
    ffi.Pointer<GstObject> src,
    int format,
    int position,
  ) {
    return _gst_message_new_segment_done(
      src,
      format,
      position,
    );
  }

  late final _gst_message_new_segment_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, ffi.Int32,
              gint64)>>('gst_message_new_segment_done');
  late final _gst_message_new_segment_done =
      _gst_message_new_segment_donePtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int, int)>();

  void gst_message_parse_segment_done(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> position,
  ) {
    return _gst_message_parse_segment_done(
      message,
      format,
      position,
    );
  }

  late final _gst_message_parse_segment_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_message_parse_segment_done');
  late final _gst_message_parse_segment_done =
      _gst_message_parse_segment_donePtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>();

  ffi.Pointer<GstMessage> gst_message_new_duration_changed(
    ffi.Pointer<GstObject> src,
  ) {
    return _gst_message_new_duration_changed(
      src,
    );
  }

  late final _gst_message_new_duration_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>)>>('gst_message_new_duration_changed');
  late final _gst_message_new_duration_changed =
      _gst_message_new_duration_changedPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstMessage> gst_message_new_latency(
    ffi.Pointer<GstObject> src,
  ) {
    return _gst_message_new_latency(
      src,
    );
  }

  late final _gst_message_new_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>)>>('gst_message_new_latency');
  late final _gst_message_new_latency = _gst_message_new_latencyPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstMessage> gst_message_new_async_start(
    ffi.Pointer<GstObject> src,
  ) {
    return _gst_message_new_async_start(
      src,
    );
  }

  late final _gst_message_new_async_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>)>>('gst_message_new_async_start');
  late final _gst_message_new_async_start = _gst_message_new_async_startPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstMessage> gst_message_new_async_done(
    ffi.Pointer<GstObject> src,
    int running_time,
  ) {
    return _gst_message_new_async_done(
      src,
      running_time,
    );
  }

  late final _gst_message_new_async_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              GstClockTime)>>('gst_message_new_async_done');
  late final _gst_message_new_async_done =
      _gst_message_new_async_donePtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int)>();

  void gst_message_parse_async_done(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<GstClockTime> running_time,
  ) {
    return _gst_message_parse_async_done(
      message,
      running_time,
    );
  }

  late final _gst_message_parse_async_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<GstClockTime>)>>('gst_message_parse_async_done');
  late final _gst_message_parse_async_done =
      _gst_message_parse_async_donePtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<GstMessage> gst_message_new_structure_change(
    ffi.Pointer<GstObject> src,
    int type,
    ffi.Pointer<GstElement> owner,
    int busy,
  ) {
    return _gst_message_new_structure_change(
      src,
      type,
      owner,
      busy,
    );
  }

  late final _gst_message_new_structure_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Int32,
              ffi.Pointer<GstElement>,
              gboolean)>>('gst_message_new_structure_change');
  late final _gst_message_new_structure_change =
      _gst_message_new_structure_changePtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, int, ffi.Pointer<GstElement>, int)>();

  void gst_message_parse_structure_change(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Pointer<GstElement>> owner,
    ffi.Pointer<gboolean> busy,
  ) {
    return _gst_message_parse_structure_change(
      message,
      type,
      owner,
      busy,
    );
  }

  late final _gst_message_parse_structure_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<GstElement>>,
              ffi.Pointer<gboolean>)>>('gst_message_parse_structure_change');
  late final _gst_message_parse_structure_change =
      _gst_message_parse_structure_changePtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<GstElement>>, ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstMessage> gst_message_new_stream_status(
    ffi.Pointer<GstObject> src,
    int type,
    ffi.Pointer<GstElement> owner,
  ) {
    return _gst_message_new_stream_status(
      src,
      type,
      owner,
    );
  }

  late final _gst_message_new_stream_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, ffi.Int32,
              ffi.Pointer<GstElement>)>>('gst_message_new_stream_status');
  late final _gst_message_new_stream_status =
      _gst_message_new_stream_statusPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, int, ffi.Pointer<GstElement>)>();

  void gst_message_parse_stream_status(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Pointer<GstElement>> owner,
  ) {
    return _gst_message_parse_stream_status(
      message,
      type,
      owner,
    );
  }

  late final _gst_message_parse_stream_statusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<GstElement>>)>>(
      'gst_message_parse_stream_status');
  late final _gst_message_parse_stream_status =
      _gst_message_parse_stream_statusPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<GstElement>>)>();

  void gst_message_set_stream_status_object(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<GValue> object,
  ) {
    return _gst_message_set_stream_status_object(
      message,
      object,
    );
  }

  late final _gst_message_set_stream_status_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<GValue>)>>('gst_message_set_stream_status_object');
  late final _gst_message_set_stream_status_object =
      _gst_message_set_stream_status_objectPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> gst_message_get_stream_status_object(
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_message_get_stream_status_object(
      message,
    );
  }

  late final _gst_message_get_stream_status_objectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GValue> Function(ffi.Pointer<GstMessage>)>>(
      'gst_message_get_stream_status_object');
  late final _gst_message_get_stream_status_object =
      _gst_message_get_stream_status_objectPtr
          .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GstMessage>)>();

  ffi.Pointer<GstMessage> gst_message_new_request_state(
    ffi.Pointer<GstObject> src,
    int state,
  ) {
    return _gst_message_new_request_state(
      src,
      state,
    );
  }

  late final _gst_message_new_request_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Int32)>>('gst_message_new_request_state');
  late final _gst_message_new_request_state =
      _gst_message_new_request_statePtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int)>();

  void gst_message_parse_request_state(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _gst_message_parse_request_state(
      message,
      state,
    );
  }

  late final _gst_message_parse_request_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>)>>('gst_message_parse_request_state');
  late final _gst_message_parse_request_state =
      _gst_message_parse_request_statePtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<GstMessage> gst_message_new_step_start(
    ffi.Pointer<GstObject> src,
    int active,
    int format,
    int amount,
    double rate,
    int flush,
    int intermediate,
  ) {
    return _gst_message_new_step_start(
      src,
      active,
      format,
      amount,
      rate,
      flush,
      intermediate,
    );
  }

  late final _gst_message_new_step_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              gboolean,
              ffi.Int32,
              guint64,
              gdouble,
              gboolean,
              gboolean)>>('gst_message_new_step_start');
  late final _gst_message_new_step_start =
      _gst_message_new_step_startPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, int, int, int, double, int, int)>();

  void gst_message_parse_step_start(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<gboolean> active,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<guint64> amount,
    ffi.Pointer<gdouble> rate,
    ffi.Pointer<gboolean> flush,
    ffi.Pointer<gboolean> intermediate,
  ) {
    return _gst_message_parse_step_start(
      message,
      active,
      format,
      amount,
      rate,
      flush,
      intermediate,
    );
  }

  late final _gst_message_parse_step_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<gboolean>)>>('gst_message_parse_step_start');
  late final _gst_message_parse_step_start =
      _gst_message_parse_step_startPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstMessage> gst_message_new_qos(
    ffi.Pointer<GstObject> src,
    int live,
    int running_time,
    int stream_time,
    int timestamp,
    int duration,
  ) {
    return _gst_message_new_qos(
      src,
      live,
      running_time,
      stream_time,
      timestamp,
      duration,
    );
  }

  late final _gst_message_new_qosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, gboolean,
              guint64, guint64, guint64, guint64)>>('gst_message_new_qos');
  late final _gst_message_new_qos = _gst_message_new_qosPtr.asFunction<
      ffi.Pointer<GstMessage> Function(
          ffi.Pointer<GstObject>, int, int, int, int, int)>();

  void gst_message_set_qos_values(
    ffi.Pointer<GstMessage> message,
    int jitter,
    double proportion,
    int quality,
  ) {
    return _gst_message_set_qos_values(
      message,
      jitter,
      proportion,
      quality,
    );
  }

  late final _gst_message_set_qos_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>, gint64, gdouble,
              gint)>>('gst_message_set_qos_values');
  late final _gst_message_set_qos_values = _gst_message_set_qos_valuesPtr
      .asFunction<void Function(ffi.Pointer<GstMessage>, int, double, int)>();

  void gst_message_set_qos_stats(
    ffi.Pointer<GstMessage> message,
    int format,
    int processed,
    int dropped,
  ) {
    return _gst_message_set_qos_stats(
      message,
      format,
      processed,
      dropped,
    );
  }

  late final _gst_message_set_qos_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>, ffi.Int32, guint64,
              guint64)>>('gst_message_set_qos_stats');
  late final _gst_message_set_qos_stats = _gst_message_set_qos_statsPtr
      .asFunction<void Function(ffi.Pointer<GstMessage>, int, int, int)>();

  void gst_message_parse_qos(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<gboolean> live,
    ffi.Pointer<guint64> running_time,
    ffi.Pointer<guint64> stream_time,
    ffi.Pointer<guint64> timestamp,
    ffi.Pointer<guint64> duration,
  ) {
    return _gst_message_parse_qos(
      message,
      live,
      running_time,
      stream_time,
      timestamp,
      duration,
    );
  }

  late final _gst_message_parse_qosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>)>>('gst_message_parse_qos');
  late final _gst_message_parse_qos = _gst_message_parse_qosPtr.asFunction<
      void Function(
          ffi.Pointer<GstMessage>,
          ffi.Pointer<gboolean>,
          ffi.Pointer<guint64>,
          ffi.Pointer<guint64>,
          ffi.Pointer<guint64>,
          ffi.Pointer<guint64>)>();

  void gst_message_parse_qos_values(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<gint64> jitter,
    ffi.Pointer<gdouble> proportion,
    ffi.Pointer<gint> quality,
  ) {
    return _gst_message_parse_qos_values(
      message,
      jitter,
      proportion,
      quality,
    );
  }

  late final _gst_message_parse_qos_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<gint>)>>('gst_message_parse_qos_values');
  late final _gst_message_parse_qos_values =
      _gst_message_parse_qos_valuesPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<gint64>,
              ffi.Pointer<gdouble>, ffi.Pointer<gint>)>();

  void gst_message_parse_qos_stats(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<guint64> processed,
    ffi.Pointer<guint64> dropped,
  ) {
    return _gst_message_parse_qos_stats(
      message,
      format,
      processed,
      dropped,
    );
  }

  late final _gst_message_parse_qos_statsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>,
              ffi.Pointer<guint64>)>>('gst_message_parse_qos_stats');
  late final _gst_message_parse_qos_stats =
      _gst_message_parse_qos_statsPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>, ffi.Pointer<guint64>)>();

  ffi.Pointer<GstMessage> gst_message_new_progress(
    ffi.Pointer<GstObject> src,
    int type,
    ffi.Pointer<ffi.Char> code,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _gst_message_new_progress(
      src,
      type,
      code,
      text,
    );
  }

  late final _gst_message_new_progressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_message_new_progress');
  late final _gst_message_new_progress =
      _gst_message_new_progressPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void gst_message_parse_progress(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Pointer<ffi.Char>> code,
    ffi.Pointer<ffi.Pointer<ffi.Char>> text,
  ) {
    return _gst_message_parse_progress(
      message,
      type,
      code,
      text,
    );
  }

  late final _gst_message_parse_progressPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_message_parse_progress');
  late final _gst_message_parse_progress =
      _gst_message_parse_progressPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<GstMessage> gst_message_new_toc(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstToc> toc,
    int updated,
  ) {
    return _gst_message_new_toc(
      src,
      toc,
      updated,
    );
  }

  late final _gst_message_new_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstToc>, gboolean)>>('gst_message_new_toc');
  late final _gst_message_new_toc = _gst_message_new_tocPtr.asFunction<
      ffi.Pointer<GstMessage> Function(
          ffi.Pointer<GstObject>, ffi.Pointer<GstToc>, int)>();

  void gst_message_parse_toc(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstToc>> toc,
    ffi.Pointer<gboolean> updated,
  ) {
    return _gst_message_parse_toc(
      message,
      toc,
      updated,
    );
  }

  late final _gst_message_parse_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstToc>>,
              ffi.Pointer<gboolean>)>>('gst_message_parse_toc');
  late final _gst_message_parse_toc = _gst_message_parse_tocPtr.asFunction<
      void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstToc>>,
          ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstMessage> gst_message_new_reset_time(
    ffi.Pointer<GstObject> src,
    int running_time,
  ) {
    return _gst_message_new_reset_time(
      src,
      running_time,
    );
  }

  late final _gst_message_new_reset_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              GstClockTime)>>('gst_message_new_reset_time');
  late final _gst_message_new_reset_time =
      _gst_message_new_reset_timePtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, int)>();

  void gst_message_parse_reset_time(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<GstClockTime> running_time,
  ) {
    return _gst_message_parse_reset_time(
      message,
      running_time,
    );
  }

  late final _gst_message_parse_reset_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<GstClockTime>)>>('gst_message_parse_reset_time');
  late final _gst_message_parse_reset_time =
      _gst_message_parse_reset_timePtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<GstMessage> gst_message_new_stream_start(
    ffi.Pointer<GstObject> src,
  ) {
    return _gst_message_new_stream_start(
      src,
    );
  }

  late final _gst_message_new_stream_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>)>>('gst_message_new_stream_start');
  late final _gst_message_new_stream_start = _gst_message_new_stream_startPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>)>();

  void gst_message_set_group_id(
    ffi.Pointer<GstMessage> message,
    int group_id,
  ) {
    return _gst_message_set_group_id(
      message,
      group_id,
    );
  }

  late final _gst_message_set_group_idPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstMessage>, guint)>>(
      'gst_message_set_group_id');
  late final _gst_message_set_group_id = _gst_message_set_group_idPtr
      .asFunction<void Function(ffi.Pointer<GstMessage>, int)>();

  int gst_message_parse_group_id(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<guint> group_id,
  ) {
    return _gst_message_parse_group_id(
      message,
      group_id,
    );
  }

  late final _gst_message_parse_group_idPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<guint>)>>('gst_message_parse_group_id');
  late final _gst_message_parse_group_id = _gst_message_parse_group_idPtr
      .asFunction<int Function(ffi.Pointer<GstMessage>, ffi.Pointer<guint>)>();

  ffi.Pointer<GstMessage> gst_message_new_need_context(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<ffi.Char> context_type,
  ) {
    return _gst_message_new_need_context(
      src,
      context_type,
    );
  }

  late final _gst_message_new_need_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>)>>('gst_message_new_need_context');
  late final _gst_message_new_need_context =
      _gst_message_new_need_contextPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<ffi.Char>)>();

  int gst_message_parse_context_type(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<ffi.Char>> context_type,
  ) {
    return _gst_message_parse_context_type(
      message,
      context_type,
    );
  }

  late final _gst_message_parse_context_typePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_message_parse_context_type');
  late final _gst_message_parse_context_type =
      _gst_message_parse_context_typePtr.asFunction<
          int Function(
              ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<GstMessage> gst_message_new_have_context(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_message_new_have_context(
      src,
      context,
    );
  }

  late final _gst_message_new_have_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstContext>)>>('gst_message_new_have_context');
  late final _gst_message_new_have_context =
      _gst_message_new_have_contextPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstContext>)>();

  void gst_message_parse_have_context(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstContext>> context,
  ) {
    return _gst_message_parse_have_context(
      message,
      context,
    );
  }

  late final _gst_message_parse_have_contextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstContext>>)>>(
      'gst_message_parse_have_context');
  late final _gst_message_parse_have_context =
      _gst_message_parse_have_contextPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstContext>>)>();

  ffi.Pointer<GstMessage> gst_message_new_device_added(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_message_new_device_added(
      src,
      device,
    );
  }

  late final _gst_message_new_device_addedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstDevice>)>>('gst_message_new_device_added');
  late final _gst_message_new_device_added =
      _gst_message_new_device_addedPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstDevice>)>();

  void gst_message_parse_device_added(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstDevice>> device,
  ) {
    return _gst_message_parse_device_added(
      message,
      device,
    );
  }

  late final _gst_message_parse_device_addedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstDevice>>)>>(
      'gst_message_parse_device_added');
  late final _gst_message_parse_device_added =
      _gst_message_parse_device_addedPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstDevice>>)>();

  ffi.Pointer<GstMessage> gst_message_new_device_removed(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_message_new_device_removed(
      src,
      device,
    );
  }

  late final _gst_message_new_device_removedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstDevice>)>>('gst_message_new_device_removed');
  late final _gst_message_new_device_removed =
      _gst_message_new_device_removedPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstDevice>)>();

  void gst_message_parse_device_removed(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstDevice>> device,
  ) {
    return _gst_message_parse_device_removed(
      message,
      device,
    );
  }

  late final _gst_message_parse_device_removedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstDevice>>)>>(
      'gst_message_parse_device_removed');
  late final _gst_message_parse_device_removed =
      _gst_message_parse_device_removedPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Pointer<GstDevice>>)>();

  ffi.Pointer<GstMessage> gst_message_new_device_changed(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstDevice> device,
    ffi.Pointer<GstDevice> changed_device,
  ) {
    return _gst_message_new_device_changed(
      src,
      device,
      changed_device,
    );
  }

  late final _gst_message_new_device_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<GstDevice>,
              ffi.Pointer<GstDevice>)>>('gst_message_new_device_changed');
  late final _gst_message_new_device_changed =
      _gst_message_new_device_changedPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<GstDevice>, ffi.Pointer<GstDevice>)>();

  void gst_message_parse_device_changed(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstDevice>> device,
    ffi.Pointer<ffi.Pointer<GstDevice>> changed_device,
  ) {
    return _gst_message_parse_device_changed(
      message,
      device,
      changed_device,
    );
  }

  late final _gst_message_parse_device_changedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstDevice>>,
                  ffi.Pointer<ffi.Pointer<GstDevice>>)>>(
      'gst_message_parse_device_changed');
  late final _gst_message_parse_device_changed =
      _gst_message_parse_device_changedPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstDevice>>,
              ffi.Pointer<ffi.Pointer<GstDevice>>)>();

  ffi.Pointer<GstMessage> gst_message_new_property_notify(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<ffi.Char> property_name,
    ffi.Pointer<GValue> val,
  ) {
    return _gst_message_new_property_notify(
      src,
      property_name,
      val,
    );
  }

  late final _gst_message_new_property_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_message_new_property_notify');
  late final _gst_message_new_property_notify =
      _gst_message_new_property_notifyPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<GValue>)>();

  void gst_message_parse_property_notify(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstObject>> object,
    ffi.Pointer<ffi.Pointer<ffi.Char>> property_name,
    ffi.Pointer<ffi.Pointer<GValue>> property_value,
  ) {
    return _gst_message_parse_property_notify(
      message,
      object,
      property_name,
      property_value,
    );
  }

  late final _gst_message_parse_property_notifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstObject>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GValue>>)>>(
      'gst_message_parse_property_notify');
  late final _gst_message_parse_property_notify =
      _gst_message_parse_property_notifyPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstObject>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GValue>>)>();

  ffi.Pointer<GstMessage> gst_message_new_stream_collection(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstStreamCollection> collection,
  ) {
    return _gst_message_new_stream_collection(
      src,
      collection,
    );
  }

  late final _gst_message_new_stream_collectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstMessage> Function(
                  ffi.Pointer<GstObject>, ffi.Pointer<GstStreamCollection>)>>(
      'gst_message_new_stream_collection');
  late final _gst_message_new_stream_collection =
      _gst_message_new_stream_collectionPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstStreamCollection>)>();

  void gst_message_parse_stream_collection(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstStreamCollection>> collection,
  ) {
    return _gst_message_parse_stream_collection(
      message,
      collection,
    );
  }

  late final _gst_message_parse_stream_collectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstStreamCollection>>)>>(
      'gst_message_parse_stream_collection');
  late final _gst_message_parse_stream_collection =
      _gst_message_parse_stream_collectionPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstStreamCollection>>)>();

  ffi.Pointer<GstMessage> gst_message_new_streams_selected(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<GstStreamCollection> collection,
  ) {
    return _gst_message_new_streams_selected(
      src,
      collection,
    );
  }

  late final _gst_message_new_streams_selectedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstMessage> Function(
                  ffi.Pointer<GstObject>, ffi.Pointer<GstStreamCollection>)>>(
      'gst_message_new_streams_selected');
  late final _gst_message_new_streams_selected =
      _gst_message_new_streams_selectedPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>, ffi.Pointer<GstStreamCollection>)>();

  void gst_message_streams_selected_add(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_message_streams_selected_add(
      message,
      stream,
    );
  }

  late final _gst_message_streams_selected_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<GstStream>)>>('gst_message_streams_selected_add');
  late final _gst_message_streams_selected_add =
      _gst_message_streams_selected_addPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<GstStream>)>();

  void gst_message_parse_streams_selected(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Pointer<GstStreamCollection>> collection,
  ) {
    return _gst_message_parse_streams_selected(
      message,
      collection,
    );
  }

  late final _gst_message_parse_streams_selectedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstMessage>,
                  ffi.Pointer<ffi.Pointer<GstStreamCollection>>)>>(
      'gst_message_parse_streams_selected');
  late final _gst_message_parse_streams_selected =
      _gst_message_parse_streams_selectedPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Pointer<GstStreamCollection>>)>();

  int gst_message_streams_selected_get_size(
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_message_streams_selected_get_size(
      message,
    );
  }

  late final _gst_message_streams_selected_get_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstMessage>)>>(
          'gst_message_streams_selected_get_size');
  late final _gst_message_streams_selected_get_size =
      _gst_message_streams_selected_get_sizePtr
          .asFunction<int Function(ffi.Pointer<GstMessage>)>();

  ffi.Pointer<GstStream> gst_message_streams_selected_get_stream(
    ffi.Pointer<GstMessage> message,
    int idx,
  ) {
    return _gst_message_streams_selected_get_stream(
      message,
      idx,
    );
  }

  late final _gst_message_streams_selected_get_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStream> Function(ffi.Pointer<GstMessage>,
              guint)>>('gst_message_streams_selected_get_stream');
  late final _gst_message_streams_selected_get_stream =
      _gst_message_streams_selected_get_streamPtr.asFunction<
          ffi.Pointer<GstStream> Function(ffi.Pointer<GstMessage>, int)>();

  ffi.Pointer<GstMessage> gst_message_new_redirect(
    ffi.Pointer<GstObject> src,
    ffi.Pointer<ffi.Char> location,
    ffi.Pointer<GstTagList> tag_list,
    ffi.Pointer<GstStructure> entry_struct,
  ) {
    return _gst_message_new_redirect(
      src,
      location,
      tag_list,
      entry_struct,
    );
  }

  late final _gst_message_new_redirectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstTagList>,
              ffi.Pointer<GstStructure>)>>('gst_message_new_redirect');
  late final _gst_message_new_redirect =
      _gst_message_new_redirectPtr.asFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstTagList>,
              ffi.Pointer<GstStructure>)>();

  void gst_message_add_redirect_entry(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<ffi.Char> location,
    ffi.Pointer<GstTagList> tag_list,
    ffi.Pointer<GstStructure> entry_struct,
  ) {
    return _gst_message_add_redirect_entry(
      message,
      location,
      tag_list,
      entry_struct,
    );
  }

  late final _gst_message_add_redirect_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstMessage>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstTagList>,
              ffi.Pointer<GstStructure>)>>('gst_message_add_redirect_entry');
  late final _gst_message_add_redirect_entry =
      _gst_message_add_redirect_entryPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstTagList>, ffi.Pointer<GstStructure>)>();

  void gst_message_parse_redirect_entry(
    ffi.Pointer<GstMessage> message,
    int entry_index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> location,
    ffi.Pointer<ffi.Pointer<GstTagList>> tag_list,
    ffi.Pointer<ffi.Pointer<GstStructure>> entry_struct,
  ) {
    return _gst_message_parse_redirect_entry(
      message,
      entry_index,
      location,
      tag_list,
      entry_struct,
    );
  }

  late final _gst_message_parse_redirect_entryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstMessage>,
                  gsize,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GstTagList>>,
                  ffi.Pointer<ffi.Pointer<GstStructure>>)>>(
      'gst_message_parse_redirect_entry');
  late final _gst_message_parse_redirect_entry =
      _gst_message_parse_redirect_entryPtr.asFunction<
          void Function(
              ffi.Pointer<GstMessage>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GstTagList>>,
              ffi.Pointer<ffi.Pointer<GstStructure>>)>();

  int gst_message_get_num_redirect_entries(
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_message_get_num_redirect_entries(
      message,
    );
  }

  late final _gst_message_get_num_redirect_entriesPtr =
      _lookup<ffi.NativeFunction<gsize Function(ffi.Pointer<GstMessage>)>>(
          'gst_message_get_num_redirect_entries');
  late final _gst_message_get_num_redirect_entries =
      _gst_message_get_num_redirect_entriesPtr
          .asFunction<int Function(ffi.Pointer<GstMessage>)>();

  ffi.Pointer<GstMessage> gst_message_new_instant_rate_request(
    ffi.Pointer<GstObject> src,
    double rate_multiplier,
  ) {
    return _gst_message_new_instant_rate_request(
      src,
      rate_multiplier,
    );
  }

  late final _gst_message_new_instant_rate_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>,
              gdouble)>>('gst_message_new_instant_rate_request');
  late final _gst_message_new_instant_rate_request =
      _gst_message_new_instant_rate_requestPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstObject>, double)>();

  void gst_message_parse_instant_rate_request(
    ffi.Pointer<GstMessage> message,
    ffi.Pointer<gdouble> rate_multiplier,
  ) {
    return _gst_message_parse_instant_rate_request(
      message,
      rate_multiplier,
    );
  }

  late final _gst_message_parse_instant_rate_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstMessage>,
              ffi.Pointer<gdouble>)>>('gst_message_parse_instant_rate_request');
  late final _gst_message_parse_instant_rate_request =
      _gst_message_parse_instant_rate_requestPtr.asFunction<
          void Function(ffi.Pointer<GstMessage>, ffi.Pointer<gdouble>)>();

  late final ffi.Pointer<GType> __gst_event_type =
      _lookup<GType>('_gst_event_type');

  int get _gst_event_type => __gst_event_type.value;

  set _gst_event_type(int value) => __gst_event_type.value = value;

  ffi.Pointer<ffi.Char> gst_event_type_get_name(
    int type,
  ) {
    return _gst_event_type_get_name(
      type,
    );
  }

  late final _gst_event_type_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_event_type_get_name');
  late final _gst_event_type_get_name = _gst_event_type_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_event_type_to_quark(
    int type,
  ) {
    return _gst_event_type_to_quark(
      type,
    );
  }

  late final _gst_event_type_to_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Int32)>>(
          'gst_event_type_to_quark');
  late final _gst_event_type_to_quark =
      _gst_event_type_to_quarkPtr.asFunction<int Function(int)>();

  int gst_event_type_get_flags(
    int type,
  ) {
    return _gst_event_type_get_flags(
      type,
    );
  }

  late final _gst_event_type_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'gst_event_type_get_flags');
  late final _gst_event_type_get_flags =
      _gst_event_type_get_flagsPtr.asFunction<int Function(int)>();

  int gst_event_type_to_sticky_ordering(
    int type,
  ) {
    return _gst_event_type_to_sticky_ordering(
      type,
    );
  }

  late final _gst_event_type_to_sticky_orderingPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Int32)>>(
          'gst_event_type_to_sticky_ordering');
  late final _gst_event_type_to_sticky_ordering =
      _gst_event_type_to_sticky_orderingPtr.asFunction<int Function(int)>();

  int gst_event_get_type() {
    return _gst_event_get_type();
  }

  late final _gst_event_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_event_get_type');
  late final _gst_event_get_type =
      _gst_event_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstEvent> gst_event_new_custom(
    int type,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_event_new_custom(
      type,
      structure,
    );
  }

  late final _gst_event_new_customPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Int32, ffi.Pointer<GstStructure>)>>('gst_event_new_custom');
  late final _gst_event_new_custom = _gst_event_new_customPtr.asFunction<
      ffi.Pointer<GstEvent> Function(int, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstStructure> gst_event_get_structure(
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_event_get_structure(
      event,
    );
  }

  late final _gst_event_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstEvent>)>>('gst_event_get_structure');
  late final _gst_event_get_structure = _gst_event_get_structurePtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstEvent>)>();

  ffi.Pointer<GstStructure> gst_event_writable_structure(
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_event_writable_structure(
      event,
    );
  }

  late final _gst_event_writable_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstEvent>)>>('gst_event_writable_structure');
  late final _gst_event_writable_structure = _gst_event_writable_structurePtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstEvent>)>();

  int gst_event_has_name(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_event_has_name(
      event,
      name,
    );
  }

  late final _gst_event_has_namePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Char>)>>('gst_event_has_name');
  late final _gst_event_has_name = _gst_event_has_namePtr
      .asFunction<int Function(ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Char>)>();

  int gst_event_has_name_id(
    ffi.Pointer<GstEvent> event,
    int name,
  ) {
    return _gst_event_has_name_id(
      event,
      name,
    );
  }

  late final _gst_event_has_name_idPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstEvent>, GQuark)>>(
      'gst_event_has_name_id');
  late final _gst_event_has_name_id = _gst_event_has_name_idPtr
      .asFunction<int Function(ffi.Pointer<GstEvent>, int)>();

  int gst_event_get_seqnum(
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_event_get_seqnum(
      event,
    );
  }

  late final _gst_event_get_seqnumPtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GstEvent>)>>(
          'gst_event_get_seqnum');
  late final _gst_event_get_seqnum = _gst_event_get_seqnumPtr
      .asFunction<int Function(ffi.Pointer<GstEvent>)>();

  void gst_event_set_seqnum(
    ffi.Pointer<GstEvent> event,
    int seqnum,
  ) {
    return _gst_event_set_seqnum(
      event,
      seqnum,
    );
  }

  late final _gst_event_set_seqnumPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstEvent>, guint32)>>(
      'gst_event_set_seqnum');
  late final _gst_event_set_seqnum = _gst_event_set_seqnumPtr
      .asFunction<void Function(ffi.Pointer<GstEvent>, int)>();

  int gst_event_get_running_time_offset(
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_event_get_running_time_offset(
      event,
    );
  }

  late final _gst_event_get_running_time_offsetPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GstEvent>)>>(
          'gst_event_get_running_time_offset');
  late final _gst_event_get_running_time_offset =
      _gst_event_get_running_time_offsetPtr
          .asFunction<int Function(ffi.Pointer<GstEvent>)>();

  void gst_event_set_running_time_offset(
    ffi.Pointer<GstEvent> event,
    int offset,
  ) {
    return _gst_event_set_running_time_offset(
      event,
      offset,
    );
  }

  late final _gst_event_set_running_time_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstEvent>, gint64)>>(
      'gst_event_set_running_time_offset');
  late final _gst_event_set_running_time_offset =
      _gst_event_set_running_time_offsetPtr
          .asFunction<void Function(ffi.Pointer<GstEvent>, int)>();

  ffi.Pointer<GstEvent> gst_event_new_stream_start(
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _gst_event_new_stream_start(
      stream_id,
    );
  }

  late final _gst_event_new_stream_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<ffi.Char>)>>('gst_event_new_stream_start');
  late final _gst_event_new_stream_start = _gst_event_new_stream_startPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<ffi.Char>)>();

  void gst_event_parse_stream_start(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stream_id,
  ) {
    return _gst_event_parse_stream_start(
      event,
      stream_id,
    );
  }

  late final _gst_event_parse_stream_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_event_parse_stream_start');
  late final _gst_event_parse_stream_start =
      _gst_event_parse_stream_startPtr.asFunction<
          void Function(
              ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void gst_event_set_stream(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<GstStream> stream,
  ) {
    return _gst_event_set_stream(
      event,
      stream,
    );
  }

  late final _gst_event_set_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<GstStream>)>>('gst_event_set_stream');
  late final _gst_event_set_stream = _gst_event_set_streamPtr.asFunction<
      void Function(ffi.Pointer<GstEvent>, ffi.Pointer<GstStream>)>();

  void gst_event_parse_stream(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstStream>> stream,
  ) {
    return _gst_event_parse_stream(
      event,
      stream,
    );
  }

  late final _gst_event_parse_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Pointer<GstStream>>)>>('gst_event_parse_stream');
  late final _gst_event_parse_stream = _gst_event_parse_streamPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GstStream>>)>();

  void gst_event_set_stream_flags(
    ffi.Pointer<GstEvent> event,
    int flags,
  ) {
    return _gst_event_set_stream_flags(
      event,
      flags,
    );
  }

  late final _gst_event_set_stream_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstEvent>, ffi.Int32)>>(
      'gst_event_set_stream_flags');
  late final _gst_event_set_stream_flags = _gst_event_set_stream_flagsPtr
      .asFunction<void Function(ffi.Pointer<GstEvent>, int)>();

  void gst_event_parse_stream_flags(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Int32> flags,
  ) {
    return _gst_event_parse_stream_flags(
      event,
      flags,
    );
  }

  late final _gst_event_parse_stream_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Int32>)>>('gst_event_parse_stream_flags');
  late final _gst_event_parse_stream_flags =
      _gst_event_parse_stream_flagsPtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Int32>)>();

  void gst_event_set_group_id(
    ffi.Pointer<GstEvent> event,
    int group_id,
  ) {
    return _gst_event_set_group_id(
      event,
      group_id,
    );
  }

  late final _gst_event_set_group_idPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstEvent>, guint)>>(
      'gst_event_set_group_id');
  late final _gst_event_set_group_id = _gst_event_set_group_idPtr
      .asFunction<void Function(ffi.Pointer<GstEvent>, int)>();

  int gst_event_parse_group_id(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<guint> group_id,
  ) {
    return _gst_event_parse_group_id(
      event,
      group_id,
    );
  }

  late final _gst_event_parse_group_idPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<guint>)>>('gst_event_parse_group_id');
  late final _gst_event_parse_group_id = _gst_event_parse_group_idPtr
      .asFunction<int Function(ffi.Pointer<GstEvent>, ffi.Pointer<guint>)>();

  ffi.Pointer<GstEvent> gst_event_new_flush_start() {
    return _gst_event_new_flush_start();
  }

  late final _gst_event_new_flush_startPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstEvent> Function()>>(
          'gst_event_new_flush_start');
  late final _gst_event_new_flush_start = _gst_event_new_flush_startPtr
      .asFunction<ffi.Pointer<GstEvent> Function()>();

  ffi.Pointer<GstEvent> gst_event_new_flush_stop(
    int reset_time,
  ) {
    return _gst_event_new_flush_stop(
      reset_time,
    );
  }

  late final _gst_event_new_flush_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstEvent> Function(gboolean)>>(
          'gst_event_new_flush_stop');
  late final _gst_event_new_flush_stop = _gst_event_new_flush_stopPtr
      .asFunction<ffi.Pointer<GstEvent> Function(int)>();

  void gst_event_parse_flush_stop(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<gboolean> reset_time,
  ) {
    return _gst_event_parse_flush_stop(
      event,
      reset_time,
    );
  }

  late final _gst_event_parse_flush_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<gboolean>)>>('gst_event_parse_flush_stop');
  late final _gst_event_parse_flush_stop =
      _gst_event_parse_flush_stopPtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstEvent> gst_event_new_stream_collection(
    ffi.Pointer<GstStreamCollection> collection,
  ) {
    return _gst_event_new_stream_collection(
      collection,
    );
  }

  late final _gst_event_new_stream_collectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstEvent> Function(
                  ffi.Pointer<GstStreamCollection>)>>(
      'gst_event_new_stream_collection');
  late final _gst_event_new_stream_collection =
      _gst_event_new_stream_collectionPtr.asFunction<
          ffi.Pointer<GstEvent> Function(ffi.Pointer<GstStreamCollection>)>();

  void gst_event_parse_stream_collection(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstStreamCollection>> collection,
  ) {
    return _gst_event_parse_stream_collection(
      event,
      collection,
    );
  }

  late final _gst_event_parse_stream_collectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstEvent>,
                  ffi.Pointer<ffi.Pointer<GstStreamCollection>>)>>(
      'gst_event_parse_stream_collection');
  late final _gst_event_parse_stream_collection =
      _gst_event_parse_stream_collectionPtr.asFunction<
          void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Pointer<GstStreamCollection>>)>();

  ffi.Pointer<GstEvent> gst_event_new_select_streams(
    ffi.Pointer<GList> streams,
  ) {
    return _gst_event_new_select_streams(
      streams,
    );
  }

  late final _gst_event_new_select_streamsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GList>)>>(
      'gst_event_new_select_streams');
  late final _gst_event_new_select_streams = _gst_event_new_select_streamsPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GList>)>();

  void gst_event_parse_select_streams(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GList>> streams,
  ) {
    return _gst_event_parse_select_streams(
      event,
      streams,
    );
  }

  late final _gst_event_parse_select_streamsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GList>>)>>(
      'gst_event_parse_select_streams');
  late final _gst_event_parse_select_streams =
      _gst_event_parse_select_streamsPtr.asFunction<
          void Function(
              ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GList>>)>();

  ffi.Pointer<GstEvent> gst_event_new_stream_group_done(
    int group_id,
  ) {
    return _gst_event_new_stream_group_done(
      group_id,
    );
  }

  late final _gst_event_new_stream_group_donePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstEvent> Function(guint)>>(
          'gst_event_new_stream_group_done');
  late final _gst_event_new_stream_group_done =
      _gst_event_new_stream_group_donePtr
          .asFunction<ffi.Pointer<GstEvent> Function(int)>();

  void gst_event_parse_stream_group_done(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<guint> group_id,
  ) {
    return _gst_event_parse_stream_group_done(
      event,
      group_id,
    );
  }

  late final _gst_event_parse_stream_group_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<guint>)>>('gst_event_parse_stream_group_done');
  late final _gst_event_parse_stream_group_done =
      _gst_event_parse_stream_group_donePtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<guint>)>();

  ffi.Pointer<GstEvent> gst_event_new_eos() {
    return _gst_event_new_eos();
  }

  late final _gst_event_new_eosPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstEvent> Function()>>(
          'gst_event_new_eos');
  late final _gst_event_new_eos =
      _gst_event_new_eosPtr.asFunction<ffi.Pointer<GstEvent> Function()>();

  ffi.Pointer<GstEvent> gst_event_new_gap(
    int timestamp,
    int duration,
  ) {
    return _gst_event_new_gap(
      timestamp,
      duration,
    );
  }

  late final _gst_event_new_gapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              GstClockTime, GstClockTime)>>('gst_event_new_gap');
  late final _gst_event_new_gap = _gst_event_new_gapPtr
      .asFunction<ffi.Pointer<GstEvent> Function(int, int)>();

  void gst_event_parse_gap(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<GstClockTime> timestamp,
    ffi.Pointer<GstClockTime> duration,
  ) {
    return _gst_event_parse_gap(
      event,
      timestamp,
      duration,
    );
  }

  late final _gst_event_parse_gapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>, ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>)>>('gst_event_parse_gap');
  late final _gst_event_parse_gap = _gst_event_parse_gapPtr.asFunction<
      void Function(ffi.Pointer<GstEvent>, ffi.Pointer<GstClockTime>,
          ffi.Pointer<GstClockTime>)>();

  void gst_event_set_gap_flags(
    ffi.Pointer<GstEvent> event,
    int flags,
  ) {
    return _gst_event_set_gap_flags(
      event,
      flags,
    );
  }

  late final _gst_event_set_gap_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstEvent>, ffi.Int32)>>(
      'gst_event_set_gap_flags');
  late final _gst_event_set_gap_flags = _gst_event_set_gap_flagsPtr
      .asFunction<void Function(ffi.Pointer<GstEvent>, int)>();

  void gst_event_parse_gap_flags(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Int32> flags,
  ) {
    return _gst_event_parse_gap_flags(
      event,
      flags,
    );
  }

  late final _gst_event_parse_gap_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Int32>)>>('gst_event_parse_gap_flags');
  late final _gst_event_parse_gap_flags =
      _gst_event_parse_gap_flagsPtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<GstEvent> gst_event_new_caps(
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_event_new_caps(
      caps,
    );
  }

  late final _gst_event_new_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<GstCaps>)>>('gst_event_new_caps');
  late final _gst_event_new_caps = _gst_event_new_capsPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GstCaps>)>();

  void gst_event_parse_caps(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstCaps>> caps,
  ) {
    return _gst_event_parse_caps(
      event,
      caps,
    );
  }

  late final _gst_event_parse_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Pointer<GstCaps>>)>>('gst_event_parse_caps');
  late final _gst_event_parse_caps = _gst_event_parse_capsPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GstCaps>>)>();

  ffi.Pointer<GstEvent> gst_event_new_segment(
    ffi.Pointer<GstSegment> segment,
  ) {
    return _gst_event_new_segment(
      segment,
    );
  }

  late final _gst_event_new_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<GstSegment>)>>('gst_event_new_segment');
  late final _gst_event_new_segment = _gst_event_new_segmentPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GstSegment>)>();

  void gst_event_parse_segment(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstSegment>> segment,
  ) {
    return _gst_event_parse_segment(
      event,
      segment,
    );
  }

  late final _gst_event_parse_segmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstEvent>,
                  ffi.Pointer<ffi.Pointer<GstSegment>>)>>(
      'gst_event_parse_segment');
  late final _gst_event_parse_segment = _gst_event_parse_segmentPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GstSegment>>)>();

  void gst_event_copy_segment(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<GstSegment> segment,
  ) {
    return _gst_event_copy_segment(
      event,
      segment,
    );
  }

  late final _gst_event_copy_segmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<GstSegment>)>>('gst_event_copy_segment');
  late final _gst_event_copy_segment = _gst_event_copy_segmentPtr.asFunction<
      void Function(ffi.Pointer<GstEvent>, ffi.Pointer<GstSegment>)>();

  ffi.Pointer<GstEvent> gst_event_new_tag(
    ffi.Pointer<GstTagList> taglist,
  ) {
    return _gst_event_new_tag(
      taglist,
    );
  }

  late final _gst_event_new_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<GstTagList>)>>('gst_event_new_tag');
  late final _gst_event_new_tag = _gst_event_new_tagPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GstTagList>)>();

  void gst_event_parse_tag(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstTagList>> taglist,
  ) {
    return _gst_event_parse_tag(
      event,
      taglist,
    );
  }

  late final _gst_event_parse_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Pointer<GstTagList>>)>>('gst_event_parse_tag');
  late final _gst_event_parse_tag = _gst_event_parse_tagPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GstTagList>>)>();

  ffi.Pointer<GstEvent> gst_event_new_toc(
    ffi.Pointer<GstToc> toc,
    int updated,
  ) {
    return _gst_event_new_toc(
      toc,
      updated,
    );
  }

  late final _gst_event_new_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<GstToc>, gboolean)>>('gst_event_new_toc');
  late final _gst_event_new_toc = _gst_event_new_tocPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GstToc>, int)>();

  void gst_event_parse_toc(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstToc>> toc,
    ffi.Pointer<gboolean> updated,
  ) {
    return _gst_event_parse_toc(
      event,
      toc,
      updated,
    );
  }

  late final _gst_event_parse_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Pointer<GstToc>>,
              ffi.Pointer<gboolean>)>>('gst_event_parse_toc');
  late final _gst_event_parse_toc = _gst_event_parse_tocPtr.asFunction<
      void Function(ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GstToc>>,
          ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstEvent> gst_event_new_protection(
    ffi.Pointer<ffi.Char> system_id,
    ffi.Pointer<GstBuffer> data,
    ffi.Pointer<ffi.Char> origin,
  ) {
    return _gst_event_new_protection(
      system_id,
      data,
      origin,
    );
  }

  late final _gst_event_new_protectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstBuffer>,
              ffi.Pointer<ffi.Char>)>>('gst_event_new_protection');
  late final _gst_event_new_protection =
      _gst_event_new_protectionPtr.asFunction<
          ffi.Pointer<GstEvent> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstBuffer>, ffi.Pointer<ffi.Char>)>();

  void gst_event_parse_protection(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<ffi.Char>> system_id,
    ffi.Pointer<ffi.Pointer<GstBuffer>> data,
    ffi.Pointer<ffi.Pointer<ffi.Char>> origin,
  ) {
    return _gst_event_parse_protection(
      event,
      system_id,
      data,
      origin,
    );
  }

  late final _gst_event_parse_protectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstEvent>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<GstBuffer>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_event_parse_protection');
  late final _gst_event_parse_protection =
      _gst_event_parse_protectionPtr.asFunction<
          void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GstBuffer>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<GstEvent> gst_event_new_buffer_size(
    int format,
    int minsize,
    int maxsize,
    int async1,
  ) {
    return _gst_event_new_buffer_size(
      format,
      minsize,
      maxsize,
      async1,
    );
  }

  late final _gst_event_new_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(ffi.Int32, gint64, gint64,
              gboolean)>>('gst_event_new_buffer_size');
  late final _gst_event_new_buffer_size = _gst_event_new_buffer_sizePtr
      .asFunction<ffi.Pointer<GstEvent> Function(int, int, int, int)>();

  void gst_event_parse_buffer_size(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> minsize,
    ffi.Pointer<gint64> maxsize,
    ffi.Pointer<gboolean> async1,
  ) {
    return _gst_event_parse_buffer_size(
      event,
      format,
      minsize,
      maxsize,
      async1,
    );
  }

  late final _gst_event_parse_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gboolean>)>>('gst_event_parse_buffer_size');
  late final _gst_event_parse_buffer_size =
      _gst_event_parse_buffer_sizePtr.asFunction<
          void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gint64>,
              ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstEvent> gst_event_new_sink_message(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GstMessage> msg,
  ) {
    return _gst_event_new_sink_message(
      name,
      msg,
    );
  }

  late final _gst_event_new_sink_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstMessage>)>>('gst_event_new_sink_message');
  late final _gst_event_new_sink_message =
      _gst_event_new_sink_messagePtr.asFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<GstMessage>)>();

  void gst_event_parse_sink_message(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<GstMessage>> msg,
  ) {
    return _gst_event_parse_sink_message(
      event,
      msg,
    );
  }

  late final _gst_event_parse_sink_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstEvent>,
                  ffi.Pointer<ffi.Pointer<GstMessage>>)>>(
      'gst_event_parse_sink_message');
  late final _gst_event_parse_sink_message =
      _gst_event_parse_sink_messagePtr.asFunction<
          void Function(
              ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<GstMessage>>)>();

  ffi.Pointer<GstEvent> gst_event_new_qos(
    int type,
    double proportion,
    int diff,
    int timestamp,
  ) {
    return _gst_event_new_qos(
      type,
      proportion,
      diff,
      timestamp,
    );
  }

  late final _gst_event_new_qosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(ffi.Int32, gdouble, GstClockTimeDiff,
              GstClockTime)>>('gst_event_new_qos');
  late final _gst_event_new_qos = _gst_event_new_qosPtr
      .asFunction<ffi.Pointer<GstEvent> Function(int, double, int, int)>();

  void gst_event_parse_qos(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<gdouble> proportion,
    ffi.Pointer<GstClockTimeDiff> diff,
    ffi.Pointer<GstClockTime> timestamp,
  ) {
    return _gst_event_parse_qos(
      event,
      type,
      proportion,
      diff,
      timestamp,
    );
  }

  late final _gst_event_parse_qosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<GstClockTimeDiff>,
              ffi.Pointer<GstClockTime>)>>('gst_event_parse_qos');
  late final _gst_event_parse_qos = _gst_event_parse_qosPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gdouble>,
          ffi.Pointer<GstClockTimeDiff>,
          ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<GstEvent> gst_event_new_seek(
    double rate,
    int format,
    int flags,
    int start_type,
    int start,
    int stop_type,
    int stop,
  ) {
    return _gst_event_new_seek(
      rate,
      format,
      flags,
      start_type,
      start,
      stop_type,
      stop,
    );
  }

  late final _gst_event_new_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(gdouble, ffi.Int32, ffi.Int32,
              ffi.Int32, gint64, ffi.Int32, gint64)>>('gst_event_new_seek');
  late final _gst_event_new_seek = _gst_event_new_seekPtr.asFunction<
      ffi.Pointer<GstEvent> Function(double, int, int, int, int, int, int)>();

  void gst_event_parse_seek(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<gdouble> rate,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<ffi.Int32> flags,
    ffi.Pointer<ffi.Int32> start_type,
    ffi.Pointer<gint64> start,
    ffi.Pointer<ffi.Int32> stop_type,
    ffi.Pointer<gint64> stop,
  ) {
    return _gst_event_parse_seek(
      event,
      rate,
      format,
      flags,
      start_type,
      start,
      stop_type,
      stop,
    );
  }

  late final _gst_event_parse_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_event_parse_seek');
  late final _gst_event_parse_seek = _gst_event_parse_seekPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>,
          ffi.Pointer<gdouble>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gint64>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gint64>)>();

  void gst_event_set_seek_trickmode_interval(
    ffi.Pointer<GstEvent> event,
    int interval,
  ) {
    return _gst_event_set_seek_trickmode_interval(
      event,
      interval,
    );
  }

  late final _gst_event_set_seek_trickmode_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              GstClockTime)>>('gst_event_set_seek_trickmode_interval');
  late final _gst_event_set_seek_trickmode_interval =
      _gst_event_set_seek_trickmode_intervalPtr
          .asFunction<void Function(ffi.Pointer<GstEvent>, int)>();

  void gst_event_parse_seek_trickmode_interval(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<GstClockTime> interval,
  ) {
    return _gst_event_parse_seek_trickmode_interval(
      event,
      interval,
    );
  }

  late final _gst_event_parse_seek_trickmode_intervalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstEvent>, ffi.Pointer<GstClockTime>)>>(
      'gst_event_parse_seek_trickmode_interval');
  late final _gst_event_parse_seek_trickmode_interval =
      _gst_event_parse_seek_trickmode_intervalPtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<GstEvent> gst_event_new_navigation(
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_event_new_navigation(
      structure,
    );
  }

  late final _gst_event_new_navigationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<GstStructure>)>>('gst_event_new_navigation');
  late final _gst_event_new_navigation = _gst_event_new_navigationPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstEvent> gst_event_new_latency(
    int latency,
  ) {
    return _gst_event_new_latency(
      latency,
    );
  }

  late final _gst_event_new_latencyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstEvent> Function(GstClockTime)>>(
          'gst_event_new_latency');
  late final _gst_event_new_latency = _gst_event_new_latencyPtr
      .asFunction<ffi.Pointer<GstEvent> Function(int)>();

  void gst_event_parse_latency(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<GstClockTime> latency,
  ) {
    return _gst_event_parse_latency(
      event,
      latency,
    );
  }

  late final _gst_event_parse_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>,
              ffi.Pointer<GstClockTime>)>>('gst_event_parse_latency');
  late final _gst_event_parse_latency = _gst_event_parse_latencyPtr.asFunction<
      void Function(ffi.Pointer<GstEvent>, ffi.Pointer<GstClockTime>)>();

  ffi.Pointer<GstEvent> gst_event_new_step(
    int format,
    int amount,
    double rate,
    int flush,
    int intermediate,
  ) {
    return _gst_event_new_step(
      format,
      amount,
      rate,
      flush,
      intermediate,
    );
  }

  late final _gst_event_new_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(ffi.Int32, guint64, gdouble, gboolean,
              gboolean)>>('gst_event_new_step');
  late final _gst_event_new_step = _gst_event_new_stepPtr
      .asFunction<ffi.Pointer<GstEvent> Function(int, int, double, int, int)>();

  void gst_event_parse_step(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<guint64> amount,
    ffi.Pointer<gdouble> rate,
    ffi.Pointer<gboolean> flush,
    ffi.Pointer<gboolean> intermediate,
  ) {
    return _gst_event_parse_step(
      event,
      format,
      amount,
      rate,
      flush,
      intermediate,
    );
  }

  late final _gst_event_parse_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstEvent>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<guint64>,
              ffi.Pointer<gdouble>,
              ffi.Pointer<gboolean>,
              ffi.Pointer<gboolean>)>>('gst_event_parse_step');
  late final _gst_event_parse_step = _gst_event_parse_stepPtr.asFunction<
      void Function(
          ffi.Pointer<GstEvent>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<guint64>,
          ffi.Pointer<gdouble>,
          ffi.Pointer<gboolean>,
          ffi.Pointer<gboolean>)>();

  ffi.Pointer<GstEvent> gst_event_new_reconfigure() {
    return _gst_event_new_reconfigure();
  }

  late final _gst_event_new_reconfigurePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstEvent> Function()>>(
          'gst_event_new_reconfigure');
  late final _gst_event_new_reconfigure = _gst_event_new_reconfigurePtr
      .asFunction<ffi.Pointer<GstEvent> Function()>();

  ffi.Pointer<GstEvent> gst_event_new_toc_select(
    ffi.Pointer<ffi.Char> uid,
  ) {
    return _gst_event_new_toc_select(
      uid,
    );
  }

  late final _gst_event_new_toc_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<ffi.Char>)>>('gst_event_new_toc_select');
  late final _gst_event_new_toc_select = _gst_event_new_toc_selectPtr
      .asFunction<ffi.Pointer<GstEvent> Function(ffi.Pointer<ffi.Char>)>();

  void gst_event_parse_toc_select(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Pointer<ffi.Char>> uid,
  ) {
    return _gst_event_parse_toc_select(
      event,
      uid,
    );
  }

  late final _gst_event_parse_toc_selectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_event_parse_toc_select');
  late final _gst_event_parse_toc_select =
      _gst_event_parse_toc_selectPtr.asFunction<
          void Function(
              ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<GstEvent> gst_event_new_segment_done(
    int format,
    int position,
  ) {
    return _gst_event_new_segment_done(
      format,
      position,
    );
  }

  late final _gst_event_new_segment_donePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstEvent> Function(ffi.Int32, gint64)>>(
      'gst_event_new_segment_done');
  late final _gst_event_new_segment_done = _gst_event_new_segment_donePtr
      .asFunction<ffi.Pointer<GstEvent> Function(int, int)>();

  void gst_event_parse_segment_done(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<gint64> position,
  ) {
    return _gst_event_parse_segment_done(
      event,
      format,
      position,
    );
  }

  late final _gst_event_parse_segment_donePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>>('gst_event_parse_segment_done');
  late final _gst_event_parse_segment_done =
      _gst_event_parse_segment_donePtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gint64>)>();

  ffi.Pointer<GstEvent> gst_event_new_instant_rate_change(
    double rate_multiplier,
    int new_flags,
  ) {
    return _gst_event_new_instant_rate_change(
      rate_multiplier,
      new_flags,
    );
  }

  late final _gst_event_new_instant_rate_changePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstEvent> Function(gdouble, ffi.Int32)>>(
      'gst_event_new_instant_rate_change');
  late final _gst_event_new_instant_rate_change =
      _gst_event_new_instant_rate_changePtr
          .asFunction<ffi.Pointer<GstEvent> Function(double, int)>();

  void gst_event_parse_instant_rate_change(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<gdouble> rate_multiplier,
    ffi.Pointer<ffi.Int32> new_flags,
  ) {
    return _gst_event_parse_instant_rate_change(
      event,
      rate_multiplier,
      new_flags,
    );
  }

  late final _gst_event_parse_instant_rate_changePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstEvent>, ffi.Pointer<gdouble>,
              ffi.Pointer<ffi.Int32>)>>('gst_event_parse_instant_rate_change');
  late final _gst_event_parse_instant_rate_change =
      _gst_event_parse_instant_rate_changePtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<gdouble>,
              ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<GstEvent> gst_event_new_instant_rate_sync_time(
    double rate_multiplier,
    int running_time,
    int upstream_running_time,
  ) {
    return _gst_event_new_instant_rate_sync_time(
      rate_multiplier,
      running_time,
      upstream_running_time,
    );
  }

  late final _gst_event_new_instant_rate_sync_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(gdouble, GstClockTime,
              GstClockTime)>>('gst_event_new_instant_rate_sync_time');
  late final _gst_event_new_instant_rate_sync_time =
      _gst_event_new_instant_rate_sync_timePtr
          .asFunction<ffi.Pointer<GstEvent> Function(double, int, int)>();

  void gst_event_parse_instant_rate_sync_time(
    ffi.Pointer<GstEvent> event,
    ffi.Pointer<gdouble> rate_multiplier,
    ffi.Pointer<GstClockTime> running_time,
    ffi.Pointer<GstClockTime> upstream_running_time,
  ) {
    return _gst_event_parse_instant_rate_sync_time(
      event,
      rate_multiplier,
      running_time,
      upstream_running_time,
    );
  }

  late final _gst_event_parse_instant_rate_sync_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstEvent>, ffi.Pointer<gdouble>,
                  ffi.Pointer<GstClockTime>, ffi.Pointer<GstClockTime>)>>(
      'gst_event_parse_instant_rate_sync_time');
  late final _gst_event_parse_instant_rate_sync_time =
      _gst_event_parse_instant_rate_sync_timePtr.asFunction<
          void Function(ffi.Pointer<GstEvent>, ffi.Pointer<gdouble>,
              ffi.Pointer<GstClockTime>, ffi.Pointer<GstClockTime>)>();

  int gst_task_pool_get_type() {
    return _gst_task_pool_get_type();
  }

  late final _gst_task_pool_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_task_pool_get_type');
  late final _gst_task_pool_get_type =
      _gst_task_pool_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstTaskPool> gst_task_pool_new() {
    return _gst_task_pool_new();
  }

  late final _gst_task_pool_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstTaskPool> Function()>>(
          'gst_task_pool_new');
  late final _gst_task_pool_new =
      _gst_task_pool_newPtr.asFunction<ffi.Pointer<GstTaskPool> Function()>();

  void gst_task_pool_prepare(
    ffi.Pointer<GstTaskPool> pool,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_task_pool_prepare(
      pool,
      error,
    );
  }

  late final _gst_task_pool_preparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTaskPool>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_task_pool_prepare');
  late final _gst_task_pool_prepare = _gst_task_pool_preparePtr.asFunction<
      void Function(
          ffi.Pointer<GstTaskPool>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer gst_task_pool_push(
    ffi.Pointer<GstTaskPool> pool,
    GstTaskPoolFunction func,
    ffi.Pointer user_data,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_task_pool_push(
      pool,
      func,
      user_data,
      error,
    );
  }

  late final _gst_task_pool_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GstTaskPool>,
              GstTaskPoolFunction,
              ffi.Pointer,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_task_pool_push');
  late final _gst_task_pool_push = _gst_task_pool_pushPtr.asFunction<
      ffi.Pointer Function(ffi.Pointer<GstTaskPool>, GstTaskPoolFunction,
          ffi.Pointer, ffi.Pointer<ffi.Pointer<GError>>)>();

  void gst_task_pool_join(
    ffi.Pointer<GstTaskPool> pool,
    ffi.Pointer id,
  ) {
    return _gst_task_pool_join(
      pool,
      id,
    );
  }

  late final _gst_task_pool_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTaskPool>, ffi.Pointer)>>('gst_task_pool_join');
  late final _gst_task_pool_join = _gst_task_pool_joinPtr
      .asFunction<void Function(ffi.Pointer<GstTaskPool>, ffi.Pointer)>();

  void gst_task_pool_dispose_handle(
    ffi.Pointer<GstTaskPool> pool,
    ffi.Pointer id,
  ) {
    return _gst_task_pool_dispose_handle(
      pool,
      id,
    );
  }

  late final _gst_task_pool_dispose_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTaskPool>,
              ffi.Pointer)>>('gst_task_pool_dispose_handle');
  late final _gst_task_pool_dispose_handle = _gst_task_pool_dispose_handlePtr
      .asFunction<void Function(ffi.Pointer<GstTaskPool>, ffi.Pointer)>();

  void gst_task_pool_cleanup(
    ffi.Pointer<GstTaskPool> pool,
  ) {
    return _gst_task_pool_cleanup(
      pool,
    );
  }

  late final _gst_task_pool_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstTaskPool>)>>(
          'gst_task_pool_cleanup');
  late final _gst_task_pool_cleanup = _gst_task_pool_cleanupPtr
      .asFunction<void Function(ffi.Pointer<GstTaskPool>)>();

  int gst_shared_task_pool_get_type() {
    return _gst_shared_task_pool_get_type();
  }

  late final _gst_shared_task_pool_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_shared_task_pool_get_type');
  late final _gst_shared_task_pool_get_type =
      _gst_shared_task_pool_get_typePtr.asFunction<int Function()>();

  void gst_shared_task_pool_set_max_threads(
    ffi.Pointer<GstSharedTaskPool> pool,
    int max_threads,
  ) {
    return _gst_shared_task_pool_set_max_threads(
      pool,
      max_threads,
    );
  }

  late final _gst_shared_task_pool_set_max_threadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstSharedTaskPool>,
              guint)>>('gst_shared_task_pool_set_max_threads');
  late final _gst_shared_task_pool_set_max_threads =
      _gst_shared_task_pool_set_max_threadsPtr
          .asFunction<void Function(ffi.Pointer<GstSharedTaskPool>, int)>();

  int gst_shared_task_pool_get_max_threads(
    ffi.Pointer<GstSharedTaskPool> pool,
  ) {
    return _gst_shared_task_pool_get_max_threads(
      pool,
    );
  }

  late final _gst_shared_task_pool_get_max_threadsPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstSharedTaskPool>)>>(
      'gst_shared_task_pool_get_max_threads');
  late final _gst_shared_task_pool_get_max_threads =
      _gst_shared_task_pool_get_max_threadsPtr
          .asFunction<int Function(ffi.Pointer<GstSharedTaskPool>)>();

  ffi.Pointer<GstTaskPool> gst_shared_task_pool_new() {
    return _gst_shared_task_pool_new();
  }

  late final _gst_shared_task_pool_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstTaskPool> Function()>>(
          'gst_shared_task_pool_new');
  late final _gst_shared_task_pool_new = _gst_shared_task_pool_newPtr
      .asFunction<ffi.Pointer<GstTaskPool> Function()>();

  void gst_task_cleanup_all() {
    return _gst_task_cleanup_all();
  }

  late final _gst_task_cleanup_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gst_task_cleanup_all');
  late final _gst_task_cleanup_all =
      _gst_task_cleanup_allPtr.asFunction<void Function()>();

  int gst_task_get_type() {
    return _gst_task_get_type();
  }

  late final _gst_task_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_task_get_type');
  late final _gst_task_get_type =
      _gst_task_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstTask> gst_task_new(
    GstTaskFunction func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_task_new(
      func,
      user_data,
      notify,
    );
  }

  late final _gst_task_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTask> Function(
              GstTaskFunction, ffi.Pointer, GDestroyNotify)>>('gst_task_new');
  late final _gst_task_new = _gst_task_newPtr.asFunction<
      ffi.Pointer<GstTask> Function(
          GstTaskFunction, ffi.Pointer, GDestroyNotify)>();

  void gst_task_set_lock(
    ffi.Pointer<GstTask> task,
    ffi.Pointer<GRecMutex> mutex,
  ) {
    return _gst_task_set_lock(
      task,
      mutex,
    );
  }

  late final _gst_task_set_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTask>,
              ffi.Pointer<GRecMutex>)>>('gst_task_set_lock');
  late final _gst_task_set_lock = _gst_task_set_lockPtr.asFunction<
      void Function(ffi.Pointer<GstTask>, ffi.Pointer<GRecMutex>)>();

  ffi.Pointer<GstTaskPool> gst_task_get_pool(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_get_pool(
      task,
    );
  }

  late final _gst_task_get_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTaskPool> Function(
              ffi.Pointer<GstTask>)>>('gst_task_get_pool');
  late final _gst_task_get_pool = _gst_task_get_poolPtr
      .asFunction<ffi.Pointer<GstTaskPool> Function(ffi.Pointer<GstTask>)>();

  void gst_task_set_pool(
    ffi.Pointer<GstTask> task,
    ffi.Pointer<GstTaskPool> pool,
  ) {
    return _gst_task_set_pool(
      task,
      pool,
    );
  }

  late final _gst_task_set_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTask>,
              ffi.Pointer<GstTaskPool>)>>('gst_task_set_pool');
  late final _gst_task_set_pool = _gst_task_set_poolPtr.asFunction<
      void Function(ffi.Pointer<GstTask>, ffi.Pointer<GstTaskPool>)>();

  void gst_task_set_enter_callback(
    ffi.Pointer<GstTask> task,
    GstTaskThreadFunc enter_func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_task_set_enter_callback(
      task,
      enter_func,
      user_data,
      notify,
    );
  }

  late final _gst_task_set_enter_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTask>, GstTaskThreadFunc,
              ffi.Pointer, GDestroyNotify)>>('gst_task_set_enter_callback');
  late final _gst_task_set_enter_callback =
      _gst_task_set_enter_callbackPtr.asFunction<
          void Function(ffi.Pointer<GstTask>, GstTaskThreadFunc, ffi.Pointer,
              GDestroyNotify)>();

  void gst_task_set_leave_callback(
    ffi.Pointer<GstTask> task,
    GstTaskThreadFunc leave_func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_task_set_leave_callback(
      task,
      leave_func,
      user_data,
      notify,
    );
  }

  late final _gst_task_set_leave_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTask>, GstTaskThreadFunc,
              ffi.Pointer, GDestroyNotify)>>('gst_task_set_leave_callback');
  late final _gst_task_set_leave_callback =
      _gst_task_set_leave_callbackPtr.asFunction<
          void Function(ffi.Pointer<GstTask>, GstTaskThreadFunc, ffi.Pointer,
              GDestroyNotify)>();

  int gst_task_get_state(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_get_state(
      task,
    );
  }

  late final _gst_task_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstTask>)>>(
          'gst_task_get_state');
  late final _gst_task_get_state =
      _gst_task_get_statePtr.asFunction<int Function(ffi.Pointer<GstTask>)>();

  int gst_task_set_state(
    ffi.Pointer<GstTask> task,
    int state,
  ) {
    return _gst_task_set_state(
      task,
      state,
    );
  }

  late final _gst_task_set_statePtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstTask>, ffi.Int32)>>(
      'gst_task_set_state');
  late final _gst_task_set_state = _gst_task_set_statePtr
      .asFunction<int Function(ffi.Pointer<GstTask>, int)>();

  int gst_task_start(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_start(
      task,
    );
  }

  late final _gst_task_startPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTask>)>>(
          'gst_task_start');
  late final _gst_task_start =
      _gst_task_startPtr.asFunction<int Function(ffi.Pointer<GstTask>)>();

  int gst_task_stop(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_stop(
      task,
    );
  }

  late final _gst_task_stopPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTask>)>>(
          'gst_task_stop');
  late final _gst_task_stop =
      _gst_task_stopPtr.asFunction<int Function(ffi.Pointer<GstTask>)>();

  int gst_task_pause(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_pause(
      task,
    );
  }

  late final _gst_task_pausePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTask>)>>(
          'gst_task_pause');
  late final _gst_task_pause =
      _gst_task_pausePtr.asFunction<int Function(ffi.Pointer<GstTask>)>();

  int gst_task_resume(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_resume(
      task,
    );
  }

  late final _gst_task_resumePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTask>)>>(
          'gst_task_resume');
  late final _gst_task_resume =
      _gst_task_resumePtr.asFunction<int Function(ffi.Pointer<GstTask>)>();

  int gst_task_join(
    ffi.Pointer<GstTask> task,
  ) {
    return _gst_task_join(
      task,
    );
  }

  late final _gst_task_joinPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstTask>)>>(
          'gst_task_join');
  late final _gst_task_join =
      _gst_task_joinPtr.asFunction<int Function(ffi.Pointer<GstTask>)>();

  int gst_pad_template_get_type() {
    return _gst_pad_template_get_type();
  }

  late final _gst_pad_template_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_pad_template_get_type');
  late final _gst_pad_template_get_type =
      _gst_pad_template_get_typePtr.asFunction<int Function()>();

  /// gst_static_pad_template_get_type: (attributes doc.skip=true)
  int gst_static_pad_template_get_type() {
    return _gst_static_pad_template_get_type();
  }

  late final _gst_static_pad_template_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_static_pad_template_get_type');
  late final _gst_static_pad_template_get_type =
      _gst_static_pad_template_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstPadTemplate> gst_pad_template_new(
    ffi.Pointer<ffi.Char> name_template,
    int direction,
    int presence,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_pad_template_new(
      name_template,
      direction,
      presence,
      caps,
    );
  }

  late final _gst_pad_template_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPadTemplate> Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Int32, ffi.Pointer<GstCaps>)>>('gst_pad_template_new');
  late final _gst_pad_template_new = _gst_pad_template_newPtr.asFunction<
      ffi.Pointer<GstPadTemplate> Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstPadTemplate> gst_pad_template_new_with_gtype(
    ffi.Pointer<ffi.Char> name_template,
    int direction,
    int presence,
    ffi.Pointer<GstCaps> caps,
    int pad_type,
  ) {
    return _gst_pad_template_new_with_gtype(
      name_template,
      direction,
      presence,
      caps,
      pad_type,
    );
  }

  late final _gst_pad_template_new_with_gtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<GstCaps>,
              GType)>>('gst_pad_template_new_with_gtype');
  late final _gst_pad_template_new_with_gtype =
      _gst_pad_template_new_with_gtypePtr.asFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<GstCaps>, int)>();

  ffi.Pointer<GstPadTemplate> gst_static_pad_template_get(
    ffi.Pointer<GstStaticPadTemplate> pad_template,
  ) {
    return _gst_static_pad_template_get(
      pad_template,
    );
  }

  late final _gst_static_pad_template_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstPadTemplate> Function(
                  ffi.Pointer<GstStaticPadTemplate>)>>(
      'gst_static_pad_template_get');
  late final _gst_static_pad_template_get =
      _gst_static_pad_template_getPtr.asFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<GstStaticPadTemplate>)>();

  ffi.Pointer<GstPadTemplate>
      gst_pad_template_new_from_static_pad_template_with_gtype(
    ffi.Pointer<GstStaticPadTemplate> pad_template,
    int pad_type,
  ) {
    return _gst_pad_template_new_from_static_pad_template_with_gtype(
      pad_template,
      pad_type,
    );
  }

  late final _gst_pad_template_new_from_static_pad_template_with_gtypePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<GstPadTemplate> Function(
                      ffi.Pointer<GstStaticPadTemplate>, GType)>>(
          'gst_pad_template_new_from_static_pad_template_with_gtype');
  late final _gst_pad_template_new_from_static_pad_template_with_gtype =
      _gst_pad_template_new_from_static_pad_template_with_gtypePtr.asFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<GstStaticPadTemplate>, int)>();

  ffi.Pointer<GstCaps> gst_static_pad_template_get_caps(
    ffi.Pointer<GstStaticPadTemplate> templ,
  ) {
    return _gst_static_pad_template_get_caps(
      templ,
    );
  }

  late final _gst_static_pad_template_get_capsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstCaps> Function(
                  ffi.Pointer<GstStaticPadTemplate>)>>(
      'gst_static_pad_template_get_caps');
  late final _gst_static_pad_template_get_caps =
      _gst_static_pad_template_get_capsPtr.asFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstStaticPadTemplate>)>();

  ffi.Pointer<GstCaps> gst_pad_template_get_caps(
    ffi.Pointer<GstPadTemplate> templ,
  ) {
    return _gst_pad_template_get_caps(
      templ,
    );
  }

  late final _gst_pad_template_get_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(
              ffi.Pointer<GstPadTemplate>)>>('gst_pad_template_get_caps');
  late final _gst_pad_template_get_caps = _gst_pad_template_get_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPadTemplate>)>();

  void gst_pad_template_set_documentation_caps(
    ffi.Pointer<GstPadTemplate> templ,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_pad_template_set_documentation_caps(
      templ,
      caps,
    );
  }

  late final _gst_pad_template_set_documentation_capsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstPadTemplate>, ffi.Pointer<GstCaps>)>>(
      'gst_pad_template_set_documentation_caps');
  late final _gst_pad_template_set_documentation_caps =
      _gst_pad_template_set_documentation_capsPtr.asFunction<
          void Function(ffi.Pointer<GstPadTemplate>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstCaps> gst_pad_template_get_documentation_caps(
    ffi.Pointer<GstPadTemplate> templ,
  ) {
    return _gst_pad_template_get_documentation_caps(
      templ,
    );
  }

  late final _gst_pad_template_get_documentation_capsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPadTemplate>)>>(
      'gst_pad_template_get_documentation_caps');
  late final _gst_pad_template_get_documentation_caps =
      _gst_pad_template_get_documentation_capsPtr.asFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPadTemplate>)>();

  void gst_pad_template_pad_created(
    ffi.Pointer<GstPadTemplate> templ,
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_template_pad_created(
      templ,
      pad,
    );
  }

  late final _gst_pad_template_pad_createdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPadTemplate>,
              ffi.Pointer<GstPad>)>>('gst_pad_template_pad_created');
  late final _gst_pad_template_pad_created =
      _gst_pad_template_pad_createdPtr.asFunction<
          void Function(ffi.Pointer<GstPadTemplate>, ffi.Pointer<GstPad>)>();

  ffi.Pointer<ffi.Char> gst_flow_get_name(
    int ret,
  ) {
    return _gst_flow_get_name(
      ret,
    );
  }

  late final _gst_flow_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_flow_get_name');
  late final _gst_flow_get_name =
      _gst_flow_get_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_flow_to_quark(
    int ret,
  ) {
    return _gst_flow_to_quark(
      ret,
    );
  }

  late final _gst_flow_to_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function(ffi.Int32)>>(
          'gst_flow_to_quark');
  late final _gst_flow_to_quark =
      _gst_flow_to_quarkPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> gst_pad_link_get_name(
    int ret,
  ) {
    return _gst_pad_link_get_name(
      ret,
    );
  }

  late final _gst_pad_link_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_pad_link_get_name');
  late final _gst_pad_link_get_name = _gst_pad_link_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<GstEvent> gst_pad_probe_info_get_event(
    ffi.Pointer<GstPadProbeInfo> info,
  ) {
    return _gst_pad_probe_info_get_event(
      info,
    );
  }

  late final _gst_pad_probe_info_get_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(
              ffi.Pointer<GstPadProbeInfo>)>>('gst_pad_probe_info_get_event');
  late final _gst_pad_probe_info_get_event =
      _gst_pad_probe_info_get_eventPtr.asFunction<
          ffi.Pointer<GstEvent> Function(ffi.Pointer<GstPadProbeInfo>)>();

  ffi.Pointer<GstQuery> gst_pad_probe_info_get_query(
    ffi.Pointer<GstPadProbeInfo> info,
  ) {
    return _gst_pad_probe_info_get_query(
      info,
    );
  }

  late final _gst_pad_probe_info_get_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstQuery> Function(
              ffi.Pointer<GstPadProbeInfo>)>>('gst_pad_probe_info_get_query');
  late final _gst_pad_probe_info_get_query =
      _gst_pad_probe_info_get_queryPtr.asFunction<
          ffi.Pointer<GstQuery> Function(ffi.Pointer<GstPadProbeInfo>)>();

  ffi.Pointer<GstBuffer> gst_pad_probe_info_get_buffer(
    ffi.Pointer<GstPadProbeInfo> info,
  ) {
    return _gst_pad_probe_info_get_buffer(
      info,
    );
  }

  late final _gst_pad_probe_info_get_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBuffer> Function(
              ffi.Pointer<GstPadProbeInfo>)>>('gst_pad_probe_info_get_buffer');
  late final _gst_pad_probe_info_get_buffer =
      _gst_pad_probe_info_get_bufferPtr.asFunction<
          ffi.Pointer<GstBuffer> Function(ffi.Pointer<GstPadProbeInfo>)>();

  ffi.Pointer<GstBufferList> gst_pad_probe_info_get_buffer_list(
    ffi.Pointer<GstPadProbeInfo> info,
  ) {
    return _gst_pad_probe_info_get_buffer_list(
      info,
    );
  }

  late final _gst_pad_probe_info_get_buffer_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstBufferList> Function(
                  ffi.Pointer<GstPadProbeInfo>)>>(
      'gst_pad_probe_info_get_buffer_list');
  late final _gst_pad_probe_info_get_buffer_list =
      _gst_pad_probe_info_get_buffer_listPtr.asFunction<
          ffi.Pointer<GstBufferList> Function(ffi.Pointer<GstPadProbeInfo>)>();

  int gst_pad_get_type() {
    return _gst_pad_get_type();
  }

  late final _gst_pad_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_pad_get_type');
  late final _gst_pad_get_type =
      _gst_pad_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstPad> gst_pad_new(
    ffi.Pointer<ffi.Char> name,
    int direction,
  ) {
    return _gst_pad_new(
      name,
      direction,
    );
  }

  late final _gst_pad_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('gst_pad_new');
  late final _gst_pad_new = _gst_pad_newPtr
      .asFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GstPad> gst_pad_new_from_template(
    ffi.Pointer<GstPadTemplate> templ,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_pad_new_from_template(
      templ,
      name,
    );
  }

  late final _gst_pad_new_from_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<GstPadTemplate>,
              ffi.Pointer<ffi.Char>)>>('gst_pad_new_from_template');
  late final _gst_pad_new_from_template =
      _gst_pad_new_from_templatePtr.asFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstPadTemplate>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstPad> gst_pad_new_from_static_template(
    ffi.Pointer<GstStaticPadTemplate> templ,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_pad_new_from_static_template(
      templ,
      name,
    );
  }

  late final _gst_pad_new_from_static_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<GstStaticPadTemplate>,
              ffi.Pointer<ffi.Char>)>>('gst_pad_new_from_static_template');
  late final _gst_pad_new_from_static_template =
      _gst_pad_new_from_static_templatePtr.asFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstStaticPadTemplate>, ffi.Pointer<ffi.Char>)>();

  int gst_pad_get_direction(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_direction(
      pad,
    );
  }

  late final _gst_pad_get_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_get_direction');
  late final _gst_pad_get_direction =
      _gst_pad_get_directionPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_set_active(
    ffi.Pointer<GstPad> pad,
    int active,
  ) {
    return _gst_pad_set_active(
      pad,
      active,
    );
  }

  late final _gst_pad_set_activePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>, gboolean)>>(
      'gst_pad_set_active');
  late final _gst_pad_set_active = _gst_pad_set_activePtr
      .asFunction<int Function(ffi.Pointer<GstPad>, int)>();

  int gst_pad_is_active(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_is_active(
      pad,
    );
  }

  late final _gst_pad_is_activePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_is_active');
  late final _gst_pad_is_active =
      _gst_pad_is_activePtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_activate_mode(
    ffi.Pointer<GstPad> pad,
    int mode,
    int active,
  ) {
    return _gst_pad_activate_mode(
      pad,
      mode,
      active,
    );
  }

  late final _gst_pad_activate_modePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32,
              gboolean)>>('gst_pad_activate_mode');
  late final _gst_pad_activate_mode = _gst_pad_activate_modePtr
      .asFunction<int Function(ffi.Pointer<GstPad>, int, int)>();

  int gst_pad_add_probe(
    ffi.Pointer<GstPad> pad,
    int mask,
    GstPadProbeCallback callback,
    ffi.Pointer user_data,
    GDestroyNotify destroy_data,
  ) {
    return _gst_pad_add_probe(
      pad,
      mask,
      callback,
      user_data,
      destroy_data,
    );
  }

  late final _gst_pad_add_probePtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer<GstPad>, ffi.Int32, GstPadProbeCallback,
              ffi.Pointer, GDestroyNotify)>>('gst_pad_add_probe');
  late final _gst_pad_add_probe = _gst_pad_add_probePtr.asFunction<
      int Function(ffi.Pointer<GstPad>, int, GstPadProbeCallback, ffi.Pointer,
          GDestroyNotify)>();

  void gst_pad_remove_probe(
    ffi.Pointer<GstPad> pad,
    int id,
  ) {
    return _gst_pad_remove_probe(
      pad,
      id,
    );
  }

  late final _gst_pad_remove_probePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPad>, gulong)>>(
      'gst_pad_remove_probe');
  late final _gst_pad_remove_probe = _gst_pad_remove_probePtr
      .asFunction<void Function(ffi.Pointer<GstPad>, int)>();

  int gst_pad_is_blocked(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_is_blocked(
      pad,
    );
  }

  late final _gst_pad_is_blockedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_is_blocked');
  late final _gst_pad_is_blocked =
      _gst_pad_is_blockedPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_is_blocking(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_is_blocking(
      pad,
    );
  }

  late final _gst_pad_is_blockingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_is_blocking');
  late final _gst_pad_is_blocking =
      _gst_pad_is_blockingPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  void gst_pad_mark_reconfigure(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_mark_reconfigure(
      pad,
    );
  }

  late final _gst_pad_mark_reconfigurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_mark_reconfigure');
  late final _gst_pad_mark_reconfigure = _gst_pad_mark_reconfigurePtr
      .asFunction<void Function(ffi.Pointer<GstPad>)>();

  int gst_pad_needs_reconfigure(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_needs_reconfigure(
      pad,
    );
  }

  late final _gst_pad_needs_reconfigurePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_needs_reconfigure');
  late final _gst_pad_needs_reconfigure = _gst_pad_needs_reconfigurePtr
      .asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_check_reconfigure(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_check_reconfigure(
      pad,
    );
  }

  late final _gst_pad_check_reconfigurePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_check_reconfigure');
  late final _gst_pad_check_reconfigure = _gst_pad_check_reconfigurePtr
      .asFunction<int Function(ffi.Pointer<GstPad>)>();

  void gst_pad_set_element_private(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer priv,
  ) {
    return _gst_pad_set_element_private(
      pad,
      priv,
    );
  }

  late final _gst_pad_set_element_privatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstPad>, ffi.Pointer)>>(
      'gst_pad_set_element_private');
  late final _gst_pad_set_element_private = _gst_pad_set_element_privatePtr
      .asFunction<void Function(ffi.Pointer<GstPad>, ffi.Pointer)>();

  ffi.Pointer gst_pad_get_element_private(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_element_private(
      pad,
    );
  }

  late final _gst_pad_get_element_privatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_get_element_private');
  late final _gst_pad_get_element_private = _gst_pad_get_element_privatePtr
      .asFunction<ffi.Pointer Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstPadTemplate> gst_pad_get_pad_template(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_pad_template(
      pad,
    );
  }

  late final _gst_pad_get_pad_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<GstPad>)>>('gst_pad_get_pad_template');
  late final _gst_pad_get_pad_template = _gst_pad_get_pad_templatePtr
      .asFunction<ffi.Pointer<GstPadTemplate> Function(ffi.Pointer<GstPad>)>();

  int gst_pad_store_sticky_event(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_pad_store_sticky_event(
      pad,
      event,
    );
  }

  late final _gst_pad_store_sticky_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstEvent>)>>('gst_pad_store_sticky_event');
  late final _gst_pad_store_sticky_event = _gst_pad_store_sticky_eventPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstEvent>)>();

  ffi.Pointer<GstEvent> gst_pad_get_sticky_event(
    ffi.Pointer<GstPad> pad,
    int event_type,
    int idx,
  ) {
    return _gst_pad_get_sticky_event(
      pad,
      event_type,
      idx,
    );
  }

  late final _gst_pad_get_sticky_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstEvent> Function(ffi.Pointer<GstPad>, ffi.Int32,
              guint)>>('gst_pad_get_sticky_event');
  late final _gst_pad_get_sticky_event =
      _gst_pad_get_sticky_eventPtr.asFunction<
          ffi.Pointer<GstEvent> Function(ffi.Pointer<GstPad>, int, int)>();

  void gst_pad_sticky_events_foreach(
    ffi.Pointer<GstPad> pad,
    GstPadStickyEventsForeachFunction foreach_func,
    ffi.Pointer user_data,
  ) {
    return _gst_pad_sticky_events_foreach(
      pad,
      foreach_func,
      user_data,
    );
  }

  late final _gst_pad_sticky_events_foreachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadStickyEventsForeachFunction,
              ffi.Pointer)>>('gst_pad_sticky_events_foreach');
  late final _gst_pad_sticky_events_foreach =
      _gst_pad_sticky_events_foreachPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadStickyEventsForeachFunction,
              ffi.Pointer)>();

  void gst_pad_set_activate_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadActivateFunction activate,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_activate_function_full(
      pad,
      activate,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_activate_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadActivateFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_pad_set_activate_function_full');
  late final _gst_pad_set_activate_function_full =
      _gst_pad_set_activate_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadActivateFunction,
              ffi.Pointer, GDestroyNotify)>();

  void gst_pad_set_activatemode_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadActivateModeFunction activatemode,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_activatemode_function_full(
      pad,
      activatemode,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_activatemode_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadActivateModeFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_pad_set_activatemode_function_full');
  late final _gst_pad_set_activatemode_function_full =
      _gst_pad_set_activatemode_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadActivateModeFunction,
              ffi.Pointer, GDestroyNotify)>();

  void gst_pad_set_chain_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadChainFunction chain,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_chain_function_full(
      pad,
      chain,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_chain_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPad>, GstPadChainFunction,
              ffi.Pointer, GDestroyNotify)>>('gst_pad_set_chain_function_full');
  late final _gst_pad_set_chain_function_full =
      _gst_pad_set_chain_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadChainFunction, ffi.Pointer,
              GDestroyNotify)>();

  void gst_pad_set_chain_list_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadChainListFunction chainlist,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_chain_list_function_full(
      pad,
      chainlist,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_chain_list_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadChainListFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_pad_set_chain_list_function_full');
  late final _gst_pad_set_chain_list_function_full =
      _gst_pad_set_chain_list_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadChainListFunction,
              ffi.Pointer, GDestroyNotify)>();

  void gst_pad_set_getrange_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadGetRangeFunction get1,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_getrange_function_full(
      pad,
      get1,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_getrange_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadGetRangeFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_pad_set_getrange_function_full');
  late final _gst_pad_set_getrange_function_full =
      _gst_pad_set_getrange_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadGetRangeFunction,
              ffi.Pointer, GDestroyNotify)>();

  void gst_pad_set_event_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadEventFunction event,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_event_function_full(
      pad,
      event,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_event_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPad>, GstPadEventFunction,
              ffi.Pointer, GDestroyNotify)>>('gst_pad_set_event_function_full');
  late final _gst_pad_set_event_function_full =
      _gst_pad_set_event_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadEventFunction, ffi.Pointer,
              GDestroyNotify)>();

  void gst_pad_set_event_full_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadEventFullFunction event,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_event_full_function_full(
      pad,
      event,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_event_full_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadEventFullFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_pad_set_event_full_function_full');
  late final _gst_pad_set_event_full_function_full =
      _gst_pad_set_event_full_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadEventFullFunction,
              ffi.Pointer, GDestroyNotify)>();

  void gst_pad_set_link_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadLinkFunction link,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_link_function_full(
      pad,
      link,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_link_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPad>, GstPadLinkFunction,
              ffi.Pointer, GDestroyNotify)>>('gst_pad_set_link_function_full');
  late final _gst_pad_set_link_function_full =
      _gst_pad_set_link_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadLinkFunction, ffi.Pointer,
              GDestroyNotify)>();

  void gst_pad_set_unlink_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadUnlinkFunction unlink,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_unlink_function_full(
      pad,
      unlink,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_unlink_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad>,
              GstPadUnlinkFunction,
              ffi.Pointer,
              GDestroyNotify)>>('gst_pad_set_unlink_function_full');
  late final _gst_pad_set_unlink_function_full =
      _gst_pad_set_unlink_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadUnlinkFunction, ffi.Pointer,
              GDestroyNotify)>();

  int gst_pad_can_link(
    ffi.Pointer<GstPad> srcpad,
    ffi.Pointer<GstPad> sinkpad,
  ) {
    return _gst_pad_can_link(
      srcpad,
      sinkpad,
    );
  }

  late final _gst_pad_can_linkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>>('gst_pad_can_link');
  late final _gst_pad_can_link = _gst_pad_can_linkPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>();

  int gst_pad_link(
    ffi.Pointer<GstPad> srcpad,
    ffi.Pointer<GstPad> sinkpad,
  ) {
    return _gst_pad_link(
      srcpad,
      sinkpad,
    );
  }

  late final _gst_pad_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>>('gst_pad_link');
  late final _gst_pad_link = _gst_pad_linkPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>();

  int gst_pad_link_full(
    ffi.Pointer<GstPad> srcpad,
    ffi.Pointer<GstPad> sinkpad,
    int flags,
  ) {
    return _gst_pad_link_full(
      srcpad,
      sinkpad,
      flags,
    );
  }

  late final _gst_pad_link_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>,
              ffi.Int32)>>('gst_pad_link_full');
  late final _gst_pad_link_full = _gst_pad_link_fullPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>, int)>();

  int gst_pad_unlink(
    ffi.Pointer<GstPad> srcpad,
    ffi.Pointer<GstPad> sinkpad,
  ) {
    return _gst_pad_unlink(
      srcpad,
      sinkpad,
    );
  }

  late final _gst_pad_unlinkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>>('gst_pad_unlink');
  late final _gst_pad_unlink = _gst_pad_unlinkPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>();

  int gst_pad_is_linked(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_is_linked(
      pad,
    );
  }

  late final _gst_pad_is_linkedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_is_linked');
  late final _gst_pad_is_linked =
      _gst_pad_is_linkedPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstPad> gst_pad_get_peer(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_peer(
      pad,
    );
  }

  late final _gst_pad_get_peerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<GstPad>)>>(
      'gst_pad_get_peer');
  late final _gst_pad_get_peer = _gst_pad_get_peerPtr
      .asFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstCaps> gst_pad_get_pad_template_caps(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_pad_template_caps(
      pad,
    );
  }

  late final _gst_pad_get_pad_template_capsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>)>>(
      'gst_pad_get_pad_template_caps');
  late final _gst_pad_get_pad_template_caps = _gst_pad_get_pad_template_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstCaps> gst_pad_get_current_caps(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_current_caps(
      pad,
    );
  }

  late final _gst_pad_get_current_capsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>)>>(
      'gst_pad_get_current_caps');
  late final _gst_pad_get_current_caps = _gst_pad_get_current_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>)>();

  int gst_pad_has_current_caps(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_has_current_caps(
      pad,
    );
  }

  late final _gst_pad_has_current_capsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_has_current_caps');
  late final _gst_pad_has_current_caps = _gst_pad_has_current_capsPtr
      .asFunction<int Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstCaps> gst_pad_get_allowed_caps(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_allowed_caps(
      pad,
    );
  }

  late final _gst_pad_get_allowed_capsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>)>>(
      'gst_pad_get_allowed_caps');
  late final _gst_pad_get_allowed_caps = _gst_pad_get_allowed_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>)>();

  int gst_pad_get_offset(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_offset(
      pad,
    );
  }

  late final _gst_pad_get_offsetPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_get_offset');
  late final _gst_pad_get_offset =
      _gst_pad_get_offsetPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  void gst_pad_set_offset(
    ffi.Pointer<GstPad> pad,
    int offset,
  ) {
    return _gst_pad_set_offset(
      pad,
      offset,
    );
  }

  late final _gst_pad_set_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPad>, gint64)>>(
      'gst_pad_set_offset');
  late final _gst_pad_set_offset = _gst_pad_set_offsetPtr
      .asFunction<void Function(ffi.Pointer<GstPad>, int)>();

  int gst_pad_push(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_pad_push(
      pad,
      buffer,
    );
  }

  late final _gst_pad_pushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstBuffer>)>>('gst_pad_push');
  late final _gst_pad_push = _gst_pad_pushPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstBuffer>)>();

  int gst_pad_push_list(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstBufferList> list,
  ) {
    return _gst_pad_push_list(
      pad,
      list,
    );
  }

  late final _gst_pad_push_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstBufferList>)>>('gst_pad_push_list');
  late final _gst_pad_push_list = _gst_pad_push_listPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstBufferList>)>();

  int gst_pad_pull_range(
    ffi.Pointer<GstPad> pad,
    int offset,
    int size,
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
  ) {
    return _gst_pad_pull_range(
      pad,
      offset,
      size,
      buffer,
    );
  }

  late final _gst_pad_pull_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>, guint64, guint,
              ffi.Pointer<ffi.Pointer<GstBuffer>>)>>('gst_pad_pull_range');
  late final _gst_pad_pull_range = _gst_pad_pull_rangePtr.asFunction<
      int Function(ffi.Pointer<GstPad>, int, int,
          ffi.Pointer<ffi.Pointer<GstBuffer>>)>();

  int gst_pad_push_event(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_pad_push_event(
      pad,
      event,
    );
  }

  late final _gst_pad_push_eventPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstEvent>)>>('gst_pad_push_event');
  late final _gst_pad_push_event = _gst_pad_push_eventPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstEvent>)>();

  int gst_pad_event_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_pad_event_default(
      pad,
      parent,
      event,
    );
  }

  late final _gst_pad_event_defaultPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Pointer<GstEvent>)>>('gst_pad_event_default');
  late final _gst_pad_event_default = _gst_pad_event_defaultPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
          ffi.Pointer<GstEvent>)>();

  int gst_pad_get_last_flow_return(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_last_flow_return(
      pad,
    );
  }

  late final _gst_pad_get_last_flow_returnPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_get_last_flow_return');
  late final _gst_pad_get_last_flow_return = _gst_pad_get_last_flow_returnPtr
      .asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_chain(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_pad_chain(
      pad,
      buffer,
    );
  }

  late final _gst_pad_chainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstBuffer>)>>('gst_pad_chain');
  late final _gst_pad_chain = _gst_pad_chainPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstBuffer>)>();

  int gst_pad_chain_list(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstBufferList> list,
  ) {
    return _gst_pad_chain_list(
      pad,
      list,
    );
  }

  late final _gst_pad_chain_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstBufferList>)>>('gst_pad_chain_list');
  late final _gst_pad_chain_list = _gst_pad_chain_listPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstBufferList>)>();

  int gst_pad_get_range(
    ffi.Pointer<GstPad> pad,
    int offset,
    int size,
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
  ) {
    return _gst_pad_get_range(
      pad,
      offset,
      size,
      buffer,
    );
  }

  late final _gst_pad_get_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>, guint64, guint,
              ffi.Pointer<ffi.Pointer<GstBuffer>>)>>('gst_pad_get_range');
  late final _gst_pad_get_range = _gst_pad_get_rangePtr.asFunction<
      int Function(ffi.Pointer<GstPad>, int, int,
          ffi.Pointer<ffi.Pointer<GstBuffer>>)>();

  int gst_pad_send_event(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_pad_send_event(
      pad,
      event,
    );
  }

  late final _gst_pad_send_eventPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstEvent>)>>('gst_pad_send_event');
  late final _gst_pad_send_event = _gst_pad_send_eventPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstEvent>)>();

  int gst_pad_start_task(
    ffi.Pointer<GstPad> pad,
    GstTaskFunction func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_start_task(
      pad,
      func,
      user_data,
      notify,
    );
  }

  late final _gst_pad_start_taskPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, GstTaskFunction, ffi.Pointer,
              GDestroyNotify)>>('gst_pad_start_task');
  late final _gst_pad_start_task = _gst_pad_start_taskPtr.asFunction<
      int Function(
          ffi.Pointer<GstPad>, GstTaskFunction, ffi.Pointer, GDestroyNotify)>();

  int gst_pad_pause_task(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_pause_task(
      pad,
    );
  }

  late final _gst_pad_pause_taskPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_pause_task');
  late final _gst_pad_pause_task =
      _gst_pad_pause_taskPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_stop_task(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_stop_task(
      pad,
    );
  }

  late final _gst_pad_stop_taskPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_stop_task');
  late final _gst_pad_stop_task =
      _gst_pad_stop_taskPtr.asFunction<int Function(ffi.Pointer<GstPad>)>();

  int gst_pad_get_task_state(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_task_state(
      pad,
    );
  }

  late final _gst_pad_get_task_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_get_task_state');
  late final _gst_pad_get_task_state = _gst_pad_get_task_statePtr
      .asFunction<int Function(ffi.Pointer<GstPad>)>();

  void gst_pad_set_iterate_internal_links_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadIterIntLinkFunction iterintlink,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_iterate_internal_links_function_full(
      pad,
      iterintlink,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_iterate_internal_links_function_fullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstPad>, GstPadIterIntLinkFunction,
                  ffi.Pointer, GDestroyNotify)>>(
      'gst_pad_set_iterate_internal_links_function_full');
  late final _gst_pad_set_iterate_internal_links_function_full =
      _gst_pad_set_iterate_internal_links_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadIterIntLinkFunction,
              ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer<GstIterator1> gst_pad_iterate_internal_links(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_iterate_internal_links(
      pad,
    );
  }

  late final _gst_pad_iterate_internal_linksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstPad>)>>('gst_pad_iterate_internal_links');
  late final _gst_pad_iterate_internal_links =
      _gst_pad_iterate_internal_linksPtr.asFunction<
          ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstIterator1> gst_pad_iterate_internal_links_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
  ) {
    return _gst_pad_iterate_internal_links_default(
      pad,
      parent,
    );
  }

  late final _gst_pad_iterate_internal_links_defaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstIterator1> Function(
                  ffi.Pointer<GstPad>, ffi.Pointer<GstObject>)>>(
      'gst_pad_iterate_internal_links_default');
  late final _gst_pad_iterate_internal_links_default =
      _gst_pad_iterate_internal_links_defaultPtr.asFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstObject>)>();

  ffi.Pointer<GstPad> gst_pad_get_single_internal_link(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_single_internal_link(
      pad,
    );
  }

  late final _gst_pad_get_single_internal_linkPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<GstPad>)>>(
      'gst_pad_get_single_internal_link');
  late final _gst_pad_get_single_internal_link =
      _gst_pad_get_single_internal_linkPtr
          .asFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<GstPad>)>();

  int gst_pad_query(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_pad_query(
      pad,
      query,
    );
  }

  late final _gst_pad_queryPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstQuery>)>>('gst_pad_query');
  late final _gst_pad_query = _gst_pad_queryPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstQuery>)>();

  int gst_pad_peer_query(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_pad_peer_query(
      pad,
      query,
    );
  }

  late final _gst_pad_peer_queryPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstQuery>)>>('gst_pad_peer_query');
  late final _gst_pad_peer_query = _gst_pad_peer_queryPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstQuery>)>();

  void gst_pad_set_query_function_full(
    ffi.Pointer<GstPad> pad,
    GstPadQueryFunction query,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_pad_set_query_function_full(
      pad,
      query,
      user_data,
      notify,
    );
  }

  late final _gst_pad_set_query_function_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPad>, GstPadQueryFunction,
              ffi.Pointer, GDestroyNotify)>>('gst_pad_set_query_function_full');
  late final _gst_pad_set_query_function_full =
      _gst_pad_set_query_function_fullPtr.asFunction<
          void Function(ffi.Pointer<GstPad>, GstPadQueryFunction, ffi.Pointer,
              GDestroyNotify)>();

  int gst_pad_query_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_pad_query_default(
      pad,
      parent,
      query,
    );
  }

  late final _gst_pad_query_defaultPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Pointer<GstQuery>)>>('gst_pad_query_default');
  late final _gst_pad_query_default = _gst_pad_query_defaultPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
          ffi.Pointer<GstQuery>)>();

  int gst_pad_forward(
    ffi.Pointer<GstPad> pad,
    GstPadForwardFunction forward,
    ffi.Pointer user_data,
  ) {
    return _gst_pad_forward(
      pad,
      forward,
      user_data,
    );
  }

  late final _gst_pad_forwardPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, GstPadForwardFunction,
              ffi.Pointer)>>('gst_pad_forward');
  late final _gst_pad_forward = _gst_pad_forwardPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, GstPadForwardFunction, ffi.Pointer)>();

  int gst_bus_get_type() {
    return _gst_bus_get_type();
  }

  late final _gst_bus_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_bus_get_type');
  late final _gst_bus_get_type =
      _gst_bus_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstBus> gst_bus_new() {
    return _gst_bus_new();
  }

  late final _gst_bus_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstBus> Function()>>(
          'gst_bus_new');
  late final _gst_bus_new =
      _gst_bus_newPtr.asFunction<ffi.Pointer<GstBus> Function()>();

  int gst_bus_post(
    ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_bus_post(
      bus,
      message,
    );
  }

  late final _gst_bus_postPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBus>, ffi.Pointer<GstMessage>)>>('gst_bus_post');
  late final _gst_bus_post = _gst_bus_postPtr
      .asFunction<int Function(ffi.Pointer<GstBus>, ffi.Pointer<GstMessage>)>();

  int gst_bus_have_pending(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_have_pending(
      bus,
    );
  }

  late final _gst_bus_have_pendingPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBus>)>>(
          'gst_bus_have_pending');
  late final _gst_bus_have_pending =
      _gst_bus_have_pendingPtr.asFunction<int Function(ffi.Pointer<GstBus>)>();

  ffi.Pointer<GstMessage> gst_bus_peek(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_peek(
      bus,
    );
  }

  late final _gst_bus_peekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstBus>)>>('gst_bus_peek');
  late final _gst_bus_peek = _gst_bus_peekPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>)>();

  ffi.Pointer<GstMessage> gst_bus_pop(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_pop(
      bus,
    );
  }

  late final _gst_bus_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstBus>)>>('gst_bus_pop');
  late final _gst_bus_pop = _gst_bus_popPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>)>();

  ffi.Pointer<GstMessage> gst_bus_pop_filtered(
    ffi.Pointer<GstBus> bus,
    int types,
  ) {
    return _gst_bus_pop_filtered(
      bus,
      types,
    );
  }

  late final _gst_bus_pop_filteredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstBus>, ffi.Int32)>>('gst_bus_pop_filtered');
  late final _gst_bus_pop_filtered = _gst_bus_pop_filteredPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>, int)>();

  ffi.Pointer<GstMessage> gst_bus_timed_pop(
    ffi.Pointer<GstBus> bus,
    int timeout,
  ) {
    return _gst_bus_timed_pop(
      bus,
      timeout,
    );
  }

  late final _gst_bus_timed_popPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstBus>, GstClockTime)>>('gst_bus_timed_pop');
  late final _gst_bus_timed_pop = _gst_bus_timed_popPtr
      .asFunction<ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>, int)>();

  ffi.Pointer<GstMessage> gst_bus_timed_pop_filtered(
    ffi.Pointer<GstBus> bus,
    int timeout,
    int types,
  ) {
    return _gst_bus_timed_pop_filtered(
      bus,
      timeout,
      types,
    );
  }

  late final _gst_bus_timed_pop_filteredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>, GstClockTime,
              ffi.Int32)>>('gst_bus_timed_pop_filtered');
  late final _gst_bus_timed_pop_filtered =
      _gst_bus_timed_pop_filteredPtr.asFunction<
          ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>, int, int)>();

  void gst_bus_set_flushing(
    ffi.Pointer<GstBus> bus,
    int flushing,
  ) {
    return _gst_bus_set_flushing(
      bus,
      flushing,
    );
  }

  late final _gst_bus_set_flushingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBus>, gboolean)>>(
      'gst_bus_set_flushing');
  late final _gst_bus_set_flushing = _gst_bus_set_flushingPtr
      .asFunction<void Function(ffi.Pointer<GstBus>, int)>();

  void gst_bus_set_sync_handler(
    ffi.Pointer<GstBus> bus,
    GstBusSyncHandler func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_bus_set_sync_handler(
      bus,
      func,
      user_data,
      notify,
    );
  }

  late final _gst_bus_set_sync_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBus>, GstBusSyncHandler, ffi.Pointer,
              GDestroyNotify)>>('gst_bus_set_sync_handler');
  late final _gst_bus_set_sync_handler =
      _gst_bus_set_sync_handlerPtr.asFunction<
          void Function(ffi.Pointer<GstBus>, GstBusSyncHandler, ffi.Pointer,
              GDestroyNotify)>();

  void gst_bus_get_pollfd(
    ffi.Pointer<GstBus> bus,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _gst_bus_get_pollfd(
      bus,
      fd,
    );
  }

  late final _gst_bus_get_pollfdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBus>,
              ffi.Pointer<GPollFD>)>>('gst_bus_get_pollfd');
  late final _gst_bus_get_pollfd = _gst_bus_get_pollfdPtr
      .asFunction<void Function(ffi.Pointer<GstBus>, ffi.Pointer<GPollFD>)>();

  ffi.Pointer<GSource> gst_bus_create_watch(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_create_watch(
      bus,
    );
  }

  late final _gst_bus_create_watchPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GstBus>)>>(
      'gst_bus_create_watch');
  late final _gst_bus_create_watch = _gst_bus_create_watchPtr
      .asFunction<ffi.Pointer<GSource> Function(ffi.Pointer<GstBus>)>();

  int gst_bus_add_watch_full(
    ffi.Pointer<GstBus> bus,
    int priority,
    GstBusFunc func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_bus_add_watch_full(
      bus,
      priority,
      func,
      user_data,
      notify,
    );
  }

  late final _gst_bus_add_watch_fullPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GstBus>, gint, GstBusFunc, ffi.Pointer,
              GDestroyNotify)>>('gst_bus_add_watch_full');
  late final _gst_bus_add_watch_full = _gst_bus_add_watch_fullPtr.asFunction<
      int Function(
          ffi.Pointer<GstBus>, int, GstBusFunc, ffi.Pointer, GDestroyNotify)>();

  int gst_bus_add_watch(
    ffi.Pointer<GstBus> bus,
    GstBusFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_bus_add_watch(
      bus,
      func,
      user_data,
    );
  }

  late final _gst_bus_add_watchPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GstBus>, GstBusFunc,
              ffi.Pointer)>>('gst_bus_add_watch');
  late final _gst_bus_add_watch = _gst_bus_add_watchPtr
      .asFunction<int Function(ffi.Pointer<GstBus>, GstBusFunc, ffi.Pointer)>();

  int gst_bus_remove_watch(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_remove_watch(
      bus,
    );
  }

  late final _gst_bus_remove_watchPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBus>)>>(
          'gst_bus_remove_watch');
  late final _gst_bus_remove_watch =
      _gst_bus_remove_watchPtr.asFunction<int Function(ffi.Pointer<GstBus>)>();

  ffi.Pointer<GstMessage> gst_bus_poll(
    ffi.Pointer<GstBus> bus,
    int events,
    int timeout,
  ) {
    return _gst_bus_poll(
      bus,
      events,
      timeout,
    );
  }

  late final _gst_bus_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstMessage> Function(
              ffi.Pointer<GstBus>, ffi.Int32, GstClockTime)>>('gst_bus_poll');
  late final _gst_bus_poll = _gst_bus_pollPtr.asFunction<
      ffi.Pointer<GstMessage> Function(ffi.Pointer<GstBus>, int, int)>();

  int gst_bus_async_signal_func(
    ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message,
    ffi.Pointer data,
  ) {
    return _gst_bus_async_signal_func(
      bus,
      message,
      data,
    );
  }

  late final _gst_bus_async_signal_funcPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBus>, ffi.Pointer<GstMessage>,
              ffi.Pointer)>>('gst_bus_async_signal_func');
  late final _gst_bus_async_signal_func =
      _gst_bus_async_signal_funcPtr.asFunction<
          int Function(
              ffi.Pointer<GstBus>, ffi.Pointer<GstMessage>, ffi.Pointer)>();

  int gst_bus_sync_signal_handler(
    ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message,
    ffi.Pointer data,
  ) {
    return _gst_bus_sync_signal_handler(
      bus,
      message,
      data,
    );
  }

  late final _gst_bus_sync_signal_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstBus>, ffi.Pointer<GstMessage>,
              ffi.Pointer)>>('gst_bus_sync_signal_handler');
  late final _gst_bus_sync_signal_handler =
      _gst_bus_sync_signal_handlerPtr.asFunction<
          int Function(
              ffi.Pointer<GstBus>, ffi.Pointer<GstMessage>, ffi.Pointer)>();

  void gst_bus_add_signal_watch(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_add_signal_watch(
      bus,
    );
  }

  late final _gst_bus_add_signal_watchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBus>)>>(
          'gst_bus_add_signal_watch');
  late final _gst_bus_add_signal_watch = _gst_bus_add_signal_watchPtr
      .asFunction<void Function(ffi.Pointer<GstBus>)>();

  void gst_bus_add_signal_watch_full(
    ffi.Pointer<GstBus> bus,
    int priority,
  ) {
    return _gst_bus_add_signal_watch_full(
      bus,
      priority,
    );
  }

  late final _gst_bus_add_signal_watch_fullPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBus>, gint)>>(
          'gst_bus_add_signal_watch_full');
  late final _gst_bus_add_signal_watch_full = _gst_bus_add_signal_watch_fullPtr
      .asFunction<void Function(ffi.Pointer<GstBus>, int)>();

  void gst_bus_remove_signal_watch(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_remove_signal_watch(
      bus,
    );
  }

  late final _gst_bus_remove_signal_watchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBus>)>>(
          'gst_bus_remove_signal_watch');
  late final _gst_bus_remove_signal_watch = _gst_bus_remove_signal_watchPtr
      .asFunction<void Function(ffi.Pointer<GstBus>)>();

  void gst_bus_enable_sync_message_emission(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_enable_sync_message_emission(
      bus,
    );
  }

  late final _gst_bus_enable_sync_message_emissionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBus>)>>(
          'gst_bus_enable_sync_message_emission');
  late final _gst_bus_enable_sync_message_emission =
      _gst_bus_enable_sync_message_emissionPtr
          .asFunction<void Function(ffi.Pointer<GstBus>)>();

  void gst_bus_disable_sync_message_emission(
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_bus_disable_sync_message_emission(
      bus,
    );
  }

  late final _gst_bus_disable_sync_message_emissionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBus>)>>(
          'gst_bus_disable_sync_message_emission');
  late final _gst_bus_disable_sync_message_emission =
      _gst_bus_disable_sync_message_emissionPtr
          .asFunction<void Function(ffi.Pointer<GstBus>)>();

  /// gst_plugin_error_quark:
  ///
  /// Get the error quark.
  ///
  /// Returns: The error quark used in GError messages
  int gst_plugin_error_quark() {
    return _gst_plugin_error_quark();
  }

  late final _gst_plugin_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('gst_plugin_error_quark');
  late final _gst_plugin_error_quark =
      _gst_plugin_error_quarkPtr.asFunction<int Function()>();

  int gst_plugin_get_type() {
    return _gst_plugin_get_type();
  }

  late final _gst_plugin_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_plugin_get_type');
  late final _gst_plugin_get_type =
      _gst_plugin_get_typePtr.asFunction<int Function()>();

  int gst_plugin_register_static(
    int major_version,
    int minor_version,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> description,
    GstPluginInitFunc init_func,
    ffi.Pointer<ffi.Char> version,
    ffi.Pointer<ffi.Char> license,
    ffi.Pointer<ffi.Char> source,
    ffi.Pointer<ffi.Char> package,
    ffi.Pointer<ffi.Char> origin,
  ) {
    return _gst_plugin_register_static(
      major_version,
      minor_version,
      name,
      description,
      init_func,
      version,
      license,
      source,
      package,
      origin,
    );
  }

  late final _gst_plugin_register_staticPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              gint,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GstPluginInitFunc,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_plugin_register_static');
  late final _gst_plugin_register_static =
      _gst_plugin_register_staticPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GstPluginInitFunc,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int gst_plugin_register_static_full(
    int major_version,
    int minor_version,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> description,
    GstPluginInitFullFunc init_full_func,
    ffi.Pointer<ffi.Char> version,
    ffi.Pointer<ffi.Char> license,
    ffi.Pointer<ffi.Char> source,
    ffi.Pointer<ffi.Char> package,
    ffi.Pointer<ffi.Char> origin,
    ffi.Pointer user_data,
  ) {
    return _gst_plugin_register_static_full(
      major_version,
      minor_version,
      name,
      description,
      init_full_func,
      version,
      license,
      source,
      package,
      origin,
      user_data,
    );
  }

  late final _gst_plugin_register_static_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              gint,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GstPluginInitFullFunc,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer)>>('gst_plugin_register_static_full');
  late final _gst_plugin_register_static_full =
      _gst_plugin_register_static_fullPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              GstPluginInitFullFunc,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_name(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_name(
      plugin,
    );
  }

  late final _gst_plugin_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_name');
  late final _gst_plugin_get_name = _gst_plugin_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_description(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_description(
      plugin,
    );
  }

  late final _gst_plugin_get_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_description');
  late final _gst_plugin_get_description = _gst_plugin_get_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_filename(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_filename(
      plugin,
    );
  }

  late final _gst_plugin_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_filename');
  late final _gst_plugin_get_filename = _gst_plugin_get_filenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_version(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_version(
      plugin,
    );
  }

  late final _gst_plugin_get_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_version');
  late final _gst_plugin_get_version = _gst_plugin_get_versionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_license(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_license(
      plugin,
    );
  }

  late final _gst_plugin_get_licensePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_license');
  late final _gst_plugin_get_license = _gst_plugin_get_licensePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_source(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_source(
      plugin,
    );
  }

  late final _gst_plugin_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_source');
  late final _gst_plugin_get_source = _gst_plugin_get_sourcePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_package(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_package(
      plugin,
    );
  }

  late final _gst_plugin_get_packagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_package');
  late final _gst_plugin_get_package = _gst_plugin_get_packagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_origin(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_origin(
      plugin,
    );
  }

  late final _gst_plugin_get_originPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_origin');
  late final _gst_plugin_get_origin = _gst_plugin_get_originPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Char> gst_plugin_get_release_date_string(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_release_date_string(
      plugin,
    );
  }

  late final _gst_plugin_get_release_date_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_release_date_string');
  late final _gst_plugin_get_release_date_string =
      _gst_plugin_get_release_date_stringPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<GstStructure> gst_plugin_get_cache_data(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_cache_data(
      plugin,
    );
  }

  late final _gst_plugin_get_cache_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_cache_data');
  late final _gst_plugin_get_cache_data = _gst_plugin_get_cache_dataPtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GstPlugin>)>();

  void gst_plugin_set_cache_data(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<GstStructure> cache_data,
  ) {
    return _gst_plugin_set_cache_data(
      plugin,
      cache_data,
    );
  }

  late final _gst_plugin_set_cache_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPlugin>,
              ffi.Pointer<GstStructure>)>>('gst_plugin_set_cache_data');
  late final _gst_plugin_set_cache_data =
      _gst_plugin_set_cache_dataPtr.asFunction<
          void Function(ffi.Pointer<GstPlugin>, ffi.Pointer<GstStructure>)>();

  int gst_plugin_is_loaded(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_is_loaded(
      plugin,
    );
  }

  late final _gst_plugin_is_loadedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPlugin>)>>(
          'gst_plugin_is_loaded');
  late final _gst_plugin_is_loaded = _gst_plugin_is_loadedPtr
      .asFunction<int Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<GstPlugin> gst_plugin_load_file(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_plugin_load_file(
      filename,
      error,
    );
  }

  late final _gst_plugin_load_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPlugin> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_plugin_load_file');
  late final _gst_plugin_load_file = _gst_plugin_load_filePtr.asFunction<
      ffi.Pointer<GstPlugin> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GstPlugin> gst_plugin_load(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_load(
      plugin,
    );
  }

  late final _gst_plugin_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPlugin> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_load');
  late final _gst_plugin_load = _gst_plugin_loadPtr
      .asFunction<ffi.Pointer<GstPlugin> Function(ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<GstPlugin> gst_plugin_load_by_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_plugin_load_by_name(
      name,
    );
  }

  late final _gst_plugin_load_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPlugin> Function(
              ffi.Pointer<ffi.Char>)>>('gst_plugin_load_by_name');
  late final _gst_plugin_load_by_name = _gst_plugin_load_by_namePtr
      .asFunction<ffi.Pointer<GstPlugin> Function(ffi.Pointer<ffi.Char>)>();

  void gst_plugin_add_dependency(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Pointer<ffi.Char>> env_vars,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paths,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    int flags,
  ) {
    return _gst_plugin_add_dependency(
      plugin,
      env_vars,
      paths,
      names,
      flags,
    );
  }

  late final _gst_plugin_add_dependencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32)>>('gst_plugin_add_dependency');
  late final _gst_plugin_add_dependency =
      _gst_plugin_add_dependencyPtr.asFunction<
          void Function(
              ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int)>();

  void gst_plugin_add_dependency_simple(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> env_vars,
    ffi.Pointer<ffi.Char> paths,
    ffi.Pointer<ffi.Char> names,
    int flags,
  ) {
    return _gst_plugin_add_dependency_simple(
      plugin,
      env_vars,
      paths,
      names,
      flags,
    );
  }

  late final _gst_plugin_add_dependency_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('gst_plugin_add_dependency_simple');
  late final _gst_plugin_add_dependency_simple =
      _gst_plugin_add_dependency_simplePtr.asFunction<
          void Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void gst_plugin_add_status_error(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _gst_plugin_add_status_error(
      plugin,
      message,
    );
  }

  late final _gst_plugin_add_status_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Char>)>>('gst_plugin_add_status_error');
  late final _gst_plugin_add_status_error =
      _gst_plugin_add_status_errorPtr.asFunction<
          void Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>)>();

  void gst_plugin_add_status_warning(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _gst_plugin_add_status_warning(
      plugin,
      message,
    );
  }

  late final _gst_plugin_add_status_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Char>)>>('gst_plugin_add_status_warning');
  late final _gst_plugin_add_status_warning =
      _gst_plugin_add_status_warningPtr.asFunction<
          void Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>)>();

  void gst_plugin_add_status_info(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _gst_plugin_add_status_info(
      plugin,
      message,
    );
  }

  late final _gst_plugin_add_status_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Char>)>>('gst_plugin_add_status_info');
  late final _gst_plugin_add_status_info =
      _gst_plugin_add_status_infoPtr.asFunction<
          void Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_plugin_get_status_errors(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_status_errors(
      plugin,
    );
  }

  late final _gst_plugin_get_status_errorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_status_errors');
  late final _gst_plugin_get_status_errors =
      _gst_plugin_get_status_errorsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_plugin_get_status_warnings(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_status_warnings(
      plugin,
    );
  }

  late final _gst_plugin_get_status_warningsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_status_warnings');
  late final _gst_plugin_get_status_warnings =
      _gst_plugin_get_status_warningsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPlugin>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_plugin_get_status_infos(
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_plugin_get_status_infos(
      plugin,
    );
  }

  late final _gst_plugin_get_status_infosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPlugin>)>>('gst_plugin_get_status_infos');
  late final _gst_plugin_get_status_infos =
      _gst_plugin_get_status_infosPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPlugin>)>();

  void gst_plugin_list_free(
    ffi.Pointer<GList> list,
  ) {
    return _gst_plugin_list_free(
      list,
    );
  }

  late final _gst_plugin_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'gst_plugin_list_free');
  late final _gst_plugin_list_free =
      _gst_plugin_list_freePtr.asFunction<void Function(ffi.Pointer<GList>)>();

  int gst_plugin_feature_get_type() {
    return _gst_plugin_feature_get_type();
  }

  late final _gst_plugin_feature_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_plugin_feature_get_type');
  late final _gst_plugin_feature_get_type =
      _gst_plugin_feature_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstPluginFeature> gst_plugin_feature_load(
    ffi.Pointer<GstPluginFeature> feature,
  ) {
    return _gst_plugin_feature_load(
      feature,
    );
  }

  late final _gst_plugin_feature_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPluginFeature> Function(
              ffi.Pointer<GstPluginFeature>)>>('gst_plugin_feature_load');
  late final _gst_plugin_feature_load = _gst_plugin_feature_loadPtr.asFunction<
      ffi.Pointer<GstPluginFeature> Function(ffi.Pointer<GstPluginFeature>)>();

  void gst_plugin_feature_set_rank(
    ffi.Pointer<GstPluginFeature> feature,
    int rank,
  ) {
    return _gst_plugin_feature_set_rank(
      feature,
      rank,
    );
  }

  late final _gst_plugin_feature_set_rankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPluginFeature>,
              guint)>>('gst_plugin_feature_set_rank');
  late final _gst_plugin_feature_set_rank = _gst_plugin_feature_set_rankPtr
      .asFunction<void Function(ffi.Pointer<GstPluginFeature>, int)>();

  int gst_plugin_feature_get_rank(
    ffi.Pointer<GstPluginFeature> feature,
  ) {
    return _gst_plugin_feature_get_rank(
      feature,
    );
  }

  late final _gst_plugin_feature_get_rankPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstPluginFeature>)>>(
      'gst_plugin_feature_get_rank');
  late final _gst_plugin_feature_get_rank = _gst_plugin_feature_get_rankPtr
      .asFunction<int Function(ffi.Pointer<GstPluginFeature>)>();

  ffi.Pointer<GstPlugin> gst_plugin_feature_get_plugin(
    ffi.Pointer<GstPluginFeature> feature,
  ) {
    return _gst_plugin_feature_get_plugin(
      feature,
    );
  }

  late final _gst_plugin_feature_get_pluginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPlugin> Function(
              ffi.Pointer<GstPluginFeature>)>>('gst_plugin_feature_get_plugin');
  late final _gst_plugin_feature_get_plugin =
      _gst_plugin_feature_get_pluginPtr.asFunction<
          ffi.Pointer<GstPlugin> Function(ffi.Pointer<GstPluginFeature>)>();

  ffi.Pointer<ffi.Char> gst_plugin_feature_get_plugin_name(
    ffi.Pointer<GstPluginFeature> feature,
  ) {
    return _gst_plugin_feature_get_plugin_name(
      feature,
    );
  }

  late final _gst_plugin_feature_get_plugin_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPluginFeature>)>>(
      'gst_plugin_feature_get_plugin_name');
  late final _gst_plugin_feature_get_plugin_name =
      _gst_plugin_feature_get_plugin_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPluginFeature>)>();

  void gst_plugin_feature_list_free(
    ffi.Pointer<GList> list,
  ) {
    return _gst_plugin_feature_list_free(
      list,
    );
  }

  late final _gst_plugin_feature_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'gst_plugin_feature_list_free');
  late final _gst_plugin_feature_list_free = _gst_plugin_feature_list_freePtr
      .asFunction<void Function(ffi.Pointer<GList>)>();

  ffi.Pointer<GList> gst_plugin_feature_list_copy(
    ffi.Pointer<GList> list,
  ) {
    return _gst_plugin_feature_list_copy(
      list,
    );
  }

  late final _gst_plugin_feature_list_copyPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>>(
      'gst_plugin_feature_list_copy');
  late final _gst_plugin_feature_list_copy = _gst_plugin_feature_list_copyPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GList>)>();

  void gst_plugin_feature_list_debug(
    ffi.Pointer<GList> list,
  ) {
    return _gst_plugin_feature_list_debug(
      list,
    );
  }

  late final _gst_plugin_feature_list_debugPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GList>)>>(
          'gst_plugin_feature_list_debug');
  late final _gst_plugin_feature_list_debug = _gst_plugin_feature_list_debugPtr
      .asFunction<void Function(ffi.Pointer<GList>)>();

  int gst_plugin_feature_check_version(
    ffi.Pointer<GstPluginFeature> feature,
    int min_major,
    int min_minor,
    int min_micro,
  ) {
    return _gst_plugin_feature_check_version(
      feature,
      min_major,
      min_minor,
      min_micro,
    );
  }

  late final _gst_plugin_feature_check_versionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPluginFeature>, guint, guint,
              guint)>>('gst_plugin_feature_check_version');
  late final _gst_plugin_feature_check_version =
      _gst_plugin_feature_check_versionPtr.asFunction<
          int Function(ffi.Pointer<GstPluginFeature>, int, int, int)>();

  int gst_plugin_feature_rank_compare_func(
    gconstpointer p1,
    gconstpointer p2,
  ) {
    return _gst_plugin_feature_rank_compare_func(
      p1,
      p2,
    );
  }

  late final _gst_plugin_feature_rank_compare_funcPtr =
      _lookup<ffi.NativeFunction<gint Function(gconstpointer, gconstpointer)>>(
          'gst_plugin_feature_rank_compare_func');
  late final _gst_plugin_feature_rank_compare_func =
      _gst_plugin_feature_rank_compare_funcPtr
          .asFunction<int Function(gconstpointer, gconstpointer)>();

  /// gst_uri_error_quark: (attributes doc.skip=true)
  int gst_uri_error_quark() {
    return _gst_uri_error_quark();
  }

  late final _gst_uri_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('gst_uri_error_quark');
  late final _gst_uri_error_quark =
      _gst_uri_error_quarkPtr.asFunction<int Function()>();

  int gst_uri_protocol_is_valid(
    ffi.Pointer<ffi.Char> protocol,
  ) {
    return _gst_uri_protocol_is_valid(
      protocol,
    );
  }

  late final _gst_uri_protocol_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'gst_uri_protocol_is_valid');
  late final _gst_uri_protocol_is_valid = _gst_uri_protocol_is_validPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gst_uri_protocol_is_supported(
    int type,
    ffi.Pointer<ffi.Char> protocol,
  ) {
    return _gst_uri_protocol_is_supported(
      type,
      protocol,
    );
  }

  late final _gst_uri_protocol_is_supportedPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Int32, ffi.Pointer<ffi.Char>)>>(
      'gst_uri_protocol_is_supported');
  late final _gst_uri_protocol_is_supported = _gst_uri_protocol_is_supportedPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int gst_uri_is_valid(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_uri_is_valid(
      uri,
    );
  }

  late final _gst_uri_is_validPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'gst_uri_is_valid');
  late final _gst_uri_is_valid =
      _gst_uri_is_validPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_protocol(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_uri_get_protocol(
      uri,
    );
  }

  late final _gst_uri_get_protocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('gst_uri_get_protocol');
  late final _gst_uri_get_protocol = _gst_uri_get_protocolPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int gst_uri_has_protocol(
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> protocol,
  ) {
    return _gst_uri_has_protocol(
      uri,
      protocol,
    );
  }

  late final _gst_uri_has_protocolPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_has_protocol');
  late final _gst_uri_has_protocol = _gst_uri_has_protocolPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_location(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_uri_get_location(
      uri,
    );
  }

  late final _gst_uri_get_locationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('gst_uri_get_location');
  late final _gst_uri_get_location = _gst_uri_get_locationPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_construct(
    ffi.Pointer<ffi.Char> protocol,
    ffi.Pointer<ffi.Char> location,
  ) {
    return _gst_uri_construct(
      protocol,
      location,
    );
  }

  late final _gst_uri_constructPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_construct');
  late final _gst_uri_construct = _gst_uri_constructPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_filename_to_uri(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_filename_to_uri(
      filename,
      error,
    );
  }

  late final _gst_filename_to_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_filename_to_uri');
  late final _gst_filename_to_uri = _gst_filename_to_uriPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GstElement> gst_element_make_from_uri(
    int type,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Char> elementname,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_element_make_from_uri(
      type,
      uri,
      elementname,
      error,
    );
  }

  late final _gst_element_make_from_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_element_make_from_uri');
  late final _gst_element_make_from_uri =
      _gst_element_make_from_uriPtr.asFunction<
          ffi.Pointer<GstElement> Function(int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int gst_uri_handler_get_type() {
    return _gst_uri_handler_get_type();
  }

  late final _gst_uri_handler_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_uri_handler_get_type');
  late final _gst_uri_handler_get_type =
      _gst_uri_handler_get_typePtr.asFunction<int Function()>();

  int gst_uri_handler_get_uri_type(
    ffi.Pointer<GstURIHandler> handler,
  ) {
    return _gst_uri_handler_get_uri_type(
      handler,
    );
  }

  late final _gst_uri_handler_get_uri_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstURIHandler>)>>(
      'gst_uri_handler_get_uri_type');
  late final _gst_uri_handler_get_uri_type = _gst_uri_handler_get_uri_typePtr
      .asFunction<int Function(ffi.Pointer<GstURIHandler>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_uri_handler_get_protocols(
    ffi.Pointer<GstURIHandler> handler,
  ) {
    return _gst_uri_handler_get_protocols(
      handler,
    );
  }

  late final _gst_uri_handler_get_protocolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstURIHandler>)>>('gst_uri_handler_get_protocols');
  late final _gst_uri_handler_get_protocols =
      _gst_uri_handler_get_protocolsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstURIHandler>)>();

  ffi.Pointer<ffi.Char> gst_uri_handler_get_uri(
    ffi.Pointer<GstURIHandler> handler,
  ) {
    return _gst_uri_handler_get_uri(
      handler,
    );
  }

  late final _gst_uri_handler_get_uriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstURIHandler>)>>('gst_uri_handler_get_uri');
  late final _gst_uri_handler_get_uri = _gst_uri_handler_get_uriPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstURIHandler>)>();

  int gst_uri_handler_set_uri(
    ffi.Pointer<GstURIHandler> handler,
    ffi.Pointer<ffi.Char> uri,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_uri_handler_set_uri(
      handler,
      uri,
      error,
    );
  }

  late final _gst_uri_handler_set_uriPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstURIHandler>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_uri_handler_set_uri');
  late final _gst_uri_handler_set_uri = _gst_uri_handler_set_uriPtr.asFunction<
      int Function(ffi.Pointer<GstURIHandler>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int gst_uri_get_type() {
    return _gst_uri_get_type();
  }

  late final _gst_uri_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_uri_get_type');
  late final _gst_uri_get_type =
      _gst_uri_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstUri> gst_uri_new(
    ffi.Pointer<ffi.Char> scheme,
    ffi.Pointer<ffi.Char> userinfo,
    ffi.Pointer<ffi.Char> host,
    int port,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _gst_uri_new(
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _gst_uri_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstUri> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              guint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_new');
  late final _gst_uri_new = _gst_uri_newPtr.asFunction<
      ffi.Pointer<GstUri> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstUri> gst_uri_new_with_base(
    ffi.Pointer<GstUri> base,
    ffi.Pointer<ffi.Char> scheme,
    ffi.Pointer<ffi.Char> userinfo,
    ffi.Pointer<ffi.Char> host,
    int port,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _gst_uri_new_with_base(
      base,
      scheme,
      userinfo,
      host,
      port,
      path,
      query,
      fragment,
    );
  }

  late final _gst_uri_new_with_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstUri> Function(
              ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              guint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_new_with_base');
  late final _gst_uri_new_with_base = _gst_uri_new_with_basePtr.asFunction<
      ffi.Pointer<GstUri> Function(
          ffi.Pointer<GstUri>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstUri> gst_uri_from_string(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_uri_from_string(
      uri,
    );
  }

  late final _gst_uri_from_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstUri> Function(ffi.Pointer<ffi.Char>)>>(
      'gst_uri_from_string');
  late final _gst_uri_from_string = _gst_uri_from_stringPtr
      .asFunction<ffi.Pointer<GstUri> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstUri> gst_uri_from_string_escaped(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_uri_from_string_escaped(
      uri,
    );
  }

  late final _gst_uri_from_string_escapedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstUri> Function(ffi.Pointer<ffi.Char>)>>(
      'gst_uri_from_string_escaped');
  late final _gst_uri_from_string_escaped = _gst_uri_from_string_escapedPtr
      .asFunction<ffi.Pointer<GstUri> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstUri> gst_uri_from_string_with_base(
    ffi.Pointer<GstUri> base,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _gst_uri_from_string_with_base(
      base,
      uri,
    );
  }

  late final _gst_uri_from_string_with_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstUri> Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_from_string_with_base');
  late final _gst_uri_from_string_with_base =
      _gst_uri_from_string_with_basePtr.asFunction<
          ffi.Pointer<GstUri> Function(
              ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  int gst_uri_equal(
    ffi.Pointer<GstUri> first,
    ffi.Pointer<GstUri> second,
  ) {
    return _gst_uri_equal(
      first,
      second,
    );
  }

  late final _gst_uri_equalPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstUri>, ffi.Pointer<GstUri>)>>('gst_uri_equal');
  late final _gst_uri_equal = _gst_uri_equalPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<GstUri>)>();

  ffi.Pointer<GstUri> gst_uri_join(
    ffi.Pointer<GstUri> base_uri,
    ffi.Pointer<GstUri> ref_uri,
  ) {
    return _gst_uri_join(
      base_uri,
      ref_uri,
    );
  }

  late final _gst_uri_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstUri> Function(
              ffi.Pointer<GstUri>, ffi.Pointer<GstUri>)>>('gst_uri_join');
  late final _gst_uri_join = _gst_uri_joinPtr.asFunction<
      ffi.Pointer<GstUri> Function(ffi.Pointer<GstUri>, ffi.Pointer<GstUri>)>();

  ffi.Pointer<ffi.Char> gst_uri_join_strings(
    ffi.Pointer<ffi.Char> base_uri,
    ffi.Pointer<ffi.Char> ref_uri,
  ) {
    return _gst_uri_join_strings(
      base_uri,
      ref_uri,
    );
  }

  late final _gst_uri_join_stringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_join_strings');
  late final _gst_uri_join_strings = _gst_uri_join_stringsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int gst_uri_is_writable(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_is_writable(
      uri,
    );
  }

  late final _gst_uri_is_writablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstUri>)>>(
          'gst_uri_is_writable');
  late final _gst_uri_is_writable =
      _gst_uri_is_writablePtr.asFunction<int Function(ffi.Pointer<GstUri>)>();

  ffi.Pointer<GstUri> gst_uri_make_writable(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_make_writable(
      uri,
    );
  }

  late final _gst_uri_make_writablePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstUri> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_make_writable');
  late final _gst_uri_make_writable = _gst_uri_make_writablePtr
      .asFunction<ffi.Pointer<GstUri> Function(ffi.Pointer<GstUri>)>();

  ffi.Pointer<ffi.Char> gst_uri_to_string(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_to_string(
      uri,
    );
  }

  late final _gst_uri_to_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_to_string');
  late final _gst_uri_to_string = _gst_uri_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  ffi.Pointer<ffi.Char> gst_uri_to_string_with_keys(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<GList> keys,
  ) {
    return _gst_uri_to_string_with_keys(
      uri,
      keys,
    );
  }

  late final _gst_uri_to_string_with_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>,
              ffi.Pointer<GList>)>>('gst_uri_to_string_with_keys');
  late final _gst_uri_to_string_with_keys =
      _gst_uri_to_string_with_keysPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstUri>, ffi.Pointer<GList>)>();

  int gst_uri_is_normalized(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_is_normalized(
      uri,
    );
  }

  late final _gst_uri_is_normalizedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstUri>)>>(
          'gst_uri_is_normalized');
  late final _gst_uri_is_normalized =
      _gst_uri_is_normalizedPtr.asFunction<int Function(ffi.Pointer<GstUri>)>();

  int gst_uri_normalize(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_normalize(
      uri,
    );
  }

  late final _gst_uri_normalizePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstUri>)>>(
          'gst_uri_normalize');
  late final _gst_uri_normalize =
      _gst_uri_normalizePtr.asFunction<int Function(ffi.Pointer<GstUri>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_scheme(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_scheme(
      uri,
    );
  }

  late final _gst_uri_get_schemePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_scheme');
  late final _gst_uri_get_scheme = _gst_uri_get_schemePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_scheme(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> scheme,
  ) {
    return _gst_uri_set_scheme(
      uri,
      scheme,
    );
  }

  late final _gst_uri_set_schemePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_set_scheme');
  late final _gst_uri_set_scheme = _gst_uri_set_schemePtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_userinfo(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_userinfo(
      uri,
    );
  }

  late final _gst_uri_get_userinfoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_userinfo');
  late final _gst_uri_get_userinfo = _gst_uri_get_userinfoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_userinfo(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> userinfo,
  ) {
    return _gst_uri_set_userinfo(
      uri,
      userinfo,
    );
  }

  late final _gst_uri_set_userinfoPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_set_userinfo');
  late final _gst_uri_set_userinfo = _gst_uri_set_userinfoPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_host(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_host(
      uri,
    );
  }

  late final _gst_uri_get_hostPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_host');
  late final _gst_uri_get_host = _gst_uri_get_hostPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_host(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> host,
  ) {
    return _gst_uri_set_host(
      uri,
      host,
    );
  }

  late final _gst_uri_set_hostPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>>('gst_uri_set_host');
  late final _gst_uri_set_host = _gst_uri_set_hostPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  int gst_uri_get_port(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_port(
      uri,
    );
  }

  late final _gst_uri_get_portPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstUri>)>>(
          'gst_uri_get_port');
  late final _gst_uri_get_port =
      _gst_uri_get_portPtr.asFunction<int Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_port(
    ffi.Pointer<GstUri> uri,
    int port,
  ) {
    return _gst_uri_set_port(
      uri,
      port,
    );
  }

  late final _gst_uri_set_portPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstUri>, guint)>>(
      'gst_uri_set_port');
  late final _gst_uri_set_port =
      _gst_uri_set_portPtr.asFunction<int Function(ffi.Pointer<GstUri>, int)>();

  ffi.Pointer<ffi.Char> gst_uri_get_path(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_path(
      uri,
    );
  }

  late final _gst_uri_get_pathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_path');
  late final _gst_uri_get_path = _gst_uri_get_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_path(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _gst_uri_set_path(
      uri,
      path,
    );
  }

  late final _gst_uri_set_pathPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>>('gst_uri_set_path');
  late final _gst_uri_set_path = _gst_uri_set_pathPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_path_string(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_path_string(
      uri,
    );
  }

  late final _gst_uri_get_path_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_path_string');
  late final _gst_uri_get_path_string = _gst_uri_get_path_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_path_string(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _gst_uri_set_path_string(
      uri,
      path,
    );
  }

  late final _gst_uri_set_path_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_set_path_string');
  late final _gst_uri_set_path_string = _gst_uri_set_path_stringPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> gst_uri_get_path_segments(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_path_segments(
      uri,
    );
  }

  late final _gst_uri_get_path_segmentsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_path_segments');
  late final _gst_uri_get_path_segments = _gst_uri_get_path_segmentsPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_path_segments(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<GList> path_segments,
  ) {
    return _gst_uri_set_path_segments(
      uri,
      path_segments,
    );
  }

  late final _gst_uri_set_path_segmentsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<GList>)>>('gst_uri_set_path_segments');
  late final _gst_uri_set_path_segments = _gst_uri_set_path_segmentsPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<GList>)>();

  int gst_uri_append_path(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> relative_path,
  ) {
    return _gst_uri_append_path(
      uri,
      relative_path,
    );
  }

  late final _gst_uri_append_pathPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_append_path');
  late final _gst_uri_append_path = _gst_uri_append_pathPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  int gst_uri_append_path_segment(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> path_segment,
  ) {
    return _gst_uri_append_path_segment(
      uri,
      path_segment,
    );
  }

  late final _gst_uri_append_path_segmentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_append_path_segment');
  late final _gst_uri_append_path_segment = _gst_uri_append_path_segmentPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_query_string(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_query_string(
      uri,
    );
  }

  late final _gst_uri_get_query_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_query_string');
  late final _gst_uri_get_query_string = _gst_uri_get_query_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_query_string_ordered(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<GList> keys,
  ) {
    return _gst_uri_get_query_string_ordered(
      uri,
      keys,
    );
  }

  late final _gst_uri_get_query_string_orderedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>,
              ffi.Pointer<GList>)>>('gst_uri_get_query_string_ordered');
  late final _gst_uri_get_query_string_ordered =
      _gst_uri_get_query_string_orderedPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstUri>, ffi.Pointer<GList>)>();

  int gst_uri_set_query_string(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> query,
  ) {
    return _gst_uri_set_query_string(
      uri,
      query,
    );
  }

  late final _gst_uri_set_query_stringPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_set_query_string');
  late final _gst_uri_set_query_string = _gst_uri_set_query_stringPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GHashTable> gst_uri_get_query_table(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_query_table(
      uri,
    );
  }

  late final _gst_uri_get_query_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<GstUri>)>>('gst_uri_get_query_table');
  late final _gst_uri_get_query_table = _gst_uri_get_query_tablePtr
      .asFunction<ffi.Pointer<GHashTable> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_query_table(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<GHashTable> query_table,
  ) {
    return _gst_uri_set_query_table(
      uri,
      query_table,
    );
  }

  late final _gst_uri_set_query_tablePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<GHashTable>)>>('gst_uri_set_query_table');
  late final _gst_uri_set_query_table = _gst_uri_set_query_tablePtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<GHashTable>)>();

  int gst_uri_set_query_value(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> query_key,
    ffi.Pointer<ffi.Char> query_value,
  ) {
    return _gst_uri_set_query_value(
      uri,
      query_key,
      query_value,
    );
  }

  late final _gst_uri_set_query_valuePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_set_query_value');
  late final _gst_uri_set_query_value = _gst_uri_set_query_valuePtr.asFunction<
      int Function(
          ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int gst_uri_remove_query_key(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> query_key,
  ) {
    return _gst_uri_remove_query_key(
      uri,
      query_key,
    );
  }

  late final _gst_uri_remove_query_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_remove_query_key');
  late final _gst_uri_remove_query_key = _gst_uri_remove_query_keyPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  int gst_uri_query_has_key(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> query_key,
  ) {
    return _gst_uri_query_has_key(
      uri,
      query_key,
    );
  }

  late final _gst_uri_query_has_keyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_query_has_key');
  late final _gst_uri_query_has_key = _gst_uri_query_has_keyPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_query_value(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> query_key,
  ) {
    return _gst_uri_get_query_value(
      uri,
      query_key,
    );
  }

  late final _gst_uri_get_query_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_get_query_value');
  late final _gst_uri_get_query_value = _gst_uri_get_query_valuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> gst_uri_get_query_keys(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_query_keys(
      uri,
    );
  }

  late final _gst_uri_get_query_keysPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_query_keys');
  late final _gst_uri_get_query_keys = _gst_uri_get_query_keysPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstUri>)>();

  ffi.Pointer<ffi.Char> gst_uri_get_fragment(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_fragment(
      uri,
    );
  }

  late final _gst_uri_get_fragmentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>>(
      'gst_uri_get_fragment');
  late final _gst_uri_get_fragment = _gst_uri_get_fragmentPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstUri>)>();

  int gst_uri_set_fragment(
    ffi.Pointer<GstUri> uri,
    ffi.Pointer<ffi.Char> fragment,
  ) {
    return _gst_uri_set_fragment(
      uri,
      fragment,
    );
  }

  late final _gst_uri_set_fragmentPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstUri>,
              ffi.Pointer<ffi.Char>)>>('gst_uri_set_fragment');
  late final _gst_uri_set_fragment = _gst_uri_set_fragmentPtr
      .asFunction<int Function(ffi.Pointer<GstUri>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GHashTable> gst_uri_get_media_fragment_table(
    ffi.Pointer<GstUri> uri,
  ) {
    return _gst_uri_get_media_fragment_table(
      uri,
    );
  }

  late final _gst_uri_get_media_fragment_tablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              ffi.Pointer<GstUri>)>>('gst_uri_get_media_fragment_table');
  late final _gst_uri_get_media_fragment_table =
      _gst_uri_get_media_fragment_tablePtr
          .asFunction<ffi.Pointer<GHashTable> Function(ffi.Pointer<GstUri>)>();

  int gst_element_factory_get_type() {
    return _gst_element_factory_get_type();
  }

  late final _gst_element_factory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_element_factory_get_type');
  late final _gst_element_factory_get_type =
      _gst_element_factory_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstElementFactory> gst_element_factory_find(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_factory_find(
      name,
    );
  }

  late final _gst_element_factory_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElementFactory> Function(
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_find');
  late final _gst_element_factory_find =
      _gst_element_factory_findPtr.asFunction<
          ffi.Pointer<GstElementFactory> Function(ffi.Pointer<ffi.Char>)>();

  int gst_element_factory_get_element_type(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_element_type(
      factory1,
    );
  }

  late final _gst_element_factory_get_element_typePtr = _lookup<
          ffi.NativeFunction<GType Function(ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_element_type');
  late final _gst_element_factory_get_element_type =
      _gst_element_factory_get_element_typePtr
          .asFunction<int Function(ffi.Pointer<GstElementFactory>)>();

  ffi.Pointer<ffi.Char> gst_element_factory_get_metadata(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _gst_element_factory_get_metadata(
      factory1,
      key,
    );
  }

  late final _gst_element_factory_get_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_get_metadata');
  late final _gst_element_factory_get_metadata =
      _gst_element_factory_get_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstElementFactory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_element_factory_get_metadata_keys(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_metadata_keys(
      factory1,
    );
  }

  late final _gst_element_factory_get_metadata_keysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_metadata_keys');
  late final _gst_element_factory_get_metadata_keys =
      _gst_element_factory_get_metadata_keysPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstElementFactory>)>();

  int gst_element_factory_get_num_pad_templates(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_num_pad_templates(
      factory1,
    );
  }

  late final _gst_element_factory_get_num_pad_templatesPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_num_pad_templates');
  late final _gst_element_factory_get_num_pad_templates =
      _gst_element_factory_get_num_pad_templatesPtr
          .asFunction<int Function(ffi.Pointer<GstElementFactory>)>();

  ffi.Pointer<GList> gst_element_factory_get_static_pad_templates(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_static_pad_templates(
      factory1,
    );
  }

  late final _gst_element_factory_get_static_pad_templatesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_static_pad_templates');
  late final _gst_element_factory_get_static_pad_templates =
      _gst_element_factory_get_static_pad_templatesPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstElementFactory>)>();

  int gst_element_factory_get_uri_type(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_uri_type(
      factory1,
    );
  }

  late final _gst_element_factory_get_uri_typePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_uri_type');
  late final _gst_element_factory_get_uri_type =
      _gst_element_factory_get_uri_typePtr
          .asFunction<int Function(ffi.Pointer<GstElementFactory>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_element_factory_get_uri_protocols(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_uri_protocols(
      factory1,
    );
  }

  late final _gst_element_factory_get_uri_protocolsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_uri_protocols');
  late final _gst_element_factory_get_uri_protocols =
      _gst_element_factory_get_uri_protocolsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstElementFactory>)>();

  int gst_element_factory_has_interface(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<ffi.Char> interfacename,
  ) {
    return _gst_element_factory_has_interface(
      factory1,
      interfacename,
    );
  }

  late final _gst_element_factory_has_interfacePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_has_interface');
  late final _gst_element_factory_has_interface =
      _gst_element_factory_has_interfacePtr.asFunction<
          int Function(
              ffi.Pointer<GstElementFactory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_element_factory_create(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_factory_create(
      factory1,
      name,
    );
  }

  late final _gst_element_factory_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_create');
  late final _gst_element_factory_create =
      _gst_element_factory_createPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<GstElementFactory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_element_factory_create_full(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<ffi.Char> first,
  ) {
    return _gst_element_factory_create_full(
      factory1,
      first,
    );
  }

  late final _gst_element_factory_create_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_create_full');
  late final _gst_element_factory_create_full =
      _gst_element_factory_create_fullPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<GstElementFactory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_element_factory_create_valist(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<ffi.Char> first,
    ffi.Pointer<__va_list_tag> properties,
  ) {
    return _gst_element_factory_create_valist(
      factory1,
      first,
      properties,
    );
  }

  late final _gst_element_factory_create_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstElement> Function(ffi.Pointer<GstElementFactory>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'gst_element_factory_create_valist');
  late final _gst_element_factory_create_valist =
      _gst_element_factory_create_valistPtr.asFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<GstElement> gst_element_factory_create_with_properties(
    ffi.Pointer<GstElementFactory> factory1,
    int n,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _gst_element_factory_create_with_properties(
      factory1,
      n,
      names,
      values,
    );
  }

  late final _gst_element_factory_create_with_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstElement> Function(
                  ffi.Pointer<GstElementFactory>,
                  guint,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<GValue>)>>(
      'gst_element_factory_create_with_properties');
  late final _gst_element_factory_create_with_properties =
      _gst_element_factory_create_with_propertiesPtr.asFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstElementFactory>, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  ffi.Pointer<GstElement> gst_element_factory_make(
    ffi.Pointer<ffi.Char> factoryname,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_factory_make(
      factoryname,
      name,
    );
  }

  late final _gst_element_factory_makePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_make');
  late final _gst_element_factory_make =
      _gst_element_factory_makePtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_element_factory_make_full(
    ffi.Pointer<ffi.Char> factoryname,
    ffi.Pointer<ffi.Char> first,
  ) {
    return _gst_element_factory_make_full(
      factoryname,
      first,
    );
  }

  late final _gst_element_factory_make_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_element_factory_make_full');
  late final _gst_element_factory_make_full =
      _gst_element_factory_make_fullPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_element_factory_make_valist(
    ffi.Pointer<ffi.Char> factoryname,
    ffi.Pointer<ffi.Char> first,
    ffi.Pointer<__va_list_tag> properties,
  ) {
    return _gst_element_factory_make_valist(
      factoryname,
      first,
      properties,
    );
  }

  late final _gst_element_factory_make_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_element_factory_make_valist');
  late final _gst_element_factory_make_valist =
      _gst_element_factory_make_valistPtr.asFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<GstElement> gst_element_factory_make_with_properties(
    ffi.Pointer<ffi.Char> factoryname,
    int n,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
    ffi.Pointer<GValue> values,
  ) {
    return _gst_element_factory_make_with_properties(
      factoryname,
      n,
      names,
      values,
    );
  }

  late final _gst_element_factory_make_with_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>, guint,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>>(
      'gst_element_factory_make_with_properties');
  late final _gst_element_factory_make_with_properties =
      _gst_element_factory_make_with_propertiesPtr.asFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<GValue>)>();

  int gst_element_register(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> name,
    int rank,
    int type,
  ) {
    return _gst_element_register(
      plugin,
      name,
      rank,
      type,
    );
  }

  late final _gst_element_registerPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>,
              guint, GType)>>('gst_element_register');
  late final _gst_element_register = _gst_element_registerPtr.asFunction<
      int Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>, int, int)>();

  void gst_element_type_set_skip_documentation(
    int type,
  ) {
    return _gst_element_type_set_skip_documentation(
      type,
    );
  }

  late final _gst_element_type_set_skip_documentationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType)>>(
          'gst_element_type_set_skip_documentation');
  late final _gst_element_type_set_skip_documentation =
      _gst_element_type_set_skip_documentationPtr
          .asFunction<void Function(int)>();

  int gst_element_factory_get_skip_documentation(
    ffi.Pointer<GstElementFactory> factory1,
  ) {
    return _gst_element_factory_get_skip_documentation(
      factory1,
    );
  }

  late final _gst_element_factory_get_skip_documentationPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstElementFactory>)>>(
      'gst_element_factory_get_skip_documentation');
  late final _gst_element_factory_get_skip_documentation =
      _gst_element_factory_get_skip_documentationPtr
          .asFunction<int Function(ffi.Pointer<GstElementFactory>)>();

  int gst_element_factory_list_is_type(
    ffi.Pointer<GstElementFactory> factory1,
    int type,
  ) {
    return _gst_element_factory_list_is_type(
      factory1,
      type,
    );
  }

  late final _gst_element_factory_list_is_typePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElementFactory>,
              GstElementFactoryListType)>>('gst_element_factory_list_is_type');
  late final _gst_element_factory_list_is_type =
      _gst_element_factory_list_is_typePtr
          .asFunction<int Function(ffi.Pointer<GstElementFactory>, int)>();

  ffi.Pointer<GList> gst_element_factory_list_get_elements(
    int type,
    int minrank,
  ) {
    return _gst_element_factory_list_get_elements(
      type,
      minrank,
    );
  }

  late final _gst_element_factory_list_get_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(GstElementFactoryListType,
              ffi.Int32)>>('gst_element_factory_list_get_elements');
  late final _gst_element_factory_list_get_elements =
      _gst_element_factory_list_get_elementsPtr
          .asFunction<ffi.Pointer<GList> Function(int, int)>();

  ffi.Pointer<GList> gst_element_factory_list_filter(
    ffi.Pointer<GList> list,
    ffi.Pointer<GstCaps> caps,
    int direction,
    int subsetonly,
  ) {
    return _gst_element_factory_list_filter(
      list,
      caps,
      direction,
      subsetonly,
    );
  }

  late final _gst_element_factory_list_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GList>, ffi.Pointer<GstCaps>,
              ffi.Int32, gboolean)>>('gst_element_factory_list_filter');
  late final _gst_element_factory_list_filter =
      _gst_element_factory_list_filterPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GList>, ffi.Pointer<GstCaps>, int, int)>();

  ffi.Pointer<GstStructure> gst_make_element_message_details(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_make_element_message_details(
      name,
    );
  }

  late final _gst_make_element_message_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<ffi.Char>)>>('gst_make_element_message_details');
  late final _gst_make_element_message_details =
      _gst_make_element_message_detailsPtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<ffi.Char>)>();

  void gst_element_class_add_pad_template(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<GstPadTemplate> templ,
  ) {
    return _gst_element_class_add_pad_template(
      klass,
      templ,
    );
  }

  late final _gst_element_class_add_pad_templatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstElementClass>, ffi.Pointer<GstPadTemplate>)>>(
      'gst_element_class_add_pad_template');
  late final _gst_element_class_add_pad_template =
      _gst_element_class_add_pad_templatePtr.asFunction<
          void Function(
              ffi.Pointer<GstElementClass>, ffi.Pointer<GstPadTemplate>)>();

  void gst_element_class_add_static_pad_template(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<GstStaticPadTemplate> static_templ,
  ) {
    return _gst_element_class_add_static_pad_template(
      klass,
      static_templ,
    );
  }

  late final _gst_element_class_add_static_pad_templatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstElementClass>,
                  ffi.Pointer<GstStaticPadTemplate>)>>(
      'gst_element_class_add_static_pad_template');
  late final _gst_element_class_add_static_pad_template =
      _gst_element_class_add_static_pad_templatePtr.asFunction<
          void Function(ffi.Pointer<GstElementClass>,
              ffi.Pointer<GstStaticPadTemplate>)>();

  void gst_element_class_add_static_pad_template_with_gtype(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<GstStaticPadTemplate> static_templ,
    int pad_type,
  ) {
    return _gst_element_class_add_static_pad_template_with_gtype(
      klass,
      static_templ,
      pad_type,
    );
  }

  late final _gst_element_class_add_static_pad_template_with_gtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstElementClass>,
              ffi.Pointer<GstStaticPadTemplate>,
              GType)>>('gst_element_class_add_static_pad_template_with_gtype');
  late final _gst_element_class_add_static_pad_template_with_gtype =
      _gst_element_class_add_static_pad_template_with_gtypePtr.asFunction<
          void Function(ffi.Pointer<GstElementClass>,
              ffi.Pointer<GstStaticPadTemplate>, int)>();

  ffi.Pointer<GstPadTemplate> gst_element_class_get_pad_template(
    ffi.Pointer<GstElementClass> element_class,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_class_get_pad_template(
      element_class,
      name,
    );
  }

  late final _gst_element_class_get_pad_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPadTemplate> Function(ffi.Pointer<GstElementClass>,
              ffi.Pointer<ffi.Char>)>>('gst_element_class_get_pad_template');
  late final _gst_element_class_get_pad_template =
      _gst_element_class_get_pad_templatePtr.asFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<GstElementClass>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> gst_element_class_get_pad_template_list(
    ffi.Pointer<GstElementClass> element_class,
  ) {
    return _gst_element_class_get_pad_template_list(
      element_class,
    );
  }

  late final _gst_element_class_get_pad_template_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GstElementClass>)>>(
      'gst_element_class_get_pad_template_list');
  late final _gst_element_class_get_pad_template_list =
      _gst_element_class_get_pad_template_listPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstElementClass>)>();

  void gst_element_class_set_metadata(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<ffi.Char> longname,
    ffi.Pointer<ffi.Char> classification,
    ffi.Pointer<ffi.Char> description,
    ffi.Pointer<ffi.Char> author,
  ) {
    return _gst_element_class_set_metadata(
      klass,
      longname,
      classification,
      description,
      author,
    );
  }

  late final _gst_element_class_set_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstElementClass>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_element_class_set_metadata');
  late final _gst_element_class_set_metadata =
      _gst_element_class_set_metadataPtr.asFunction<
          void Function(
              ffi.Pointer<GstElementClass>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void gst_element_class_set_static_metadata(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<ffi.Char> longname,
    ffi.Pointer<ffi.Char> classification,
    ffi.Pointer<ffi.Char> description,
    ffi.Pointer<ffi.Char> author,
  ) {
    return _gst_element_class_set_static_metadata(
      klass,
      longname,
      classification,
      description,
      author,
    );
  }

  late final _gst_element_class_set_static_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstElementClass>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_element_class_set_static_metadata');
  late final _gst_element_class_set_static_metadata =
      _gst_element_class_set_static_metadataPtr.asFunction<
          void Function(
              ffi.Pointer<GstElementClass>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void gst_element_class_add_metadata(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gst_element_class_add_metadata(
      klass,
      key,
      value,
    );
  }

  late final _gst_element_class_add_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElementClass>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_element_class_add_metadata');
  late final _gst_element_class_add_metadata =
      _gst_element_class_add_metadataPtr.asFunction<
          void Function(ffi.Pointer<GstElementClass>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void gst_element_class_add_static_metadata(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gst_element_class_add_static_metadata(
      klass,
      key,
      value,
    );
  }

  late final _gst_element_class_add_static_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElementClass>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_element_class_add_static_metadata');
  late final _gst_element_class_add_static_metadata =
      _gst_element_class_add_static_metadataPtr.asFunction<
          void Function(ffi.Pointer<GstElementClass>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_element_class_get_metadata(
    ffi.Pointer<GstElementClass> klass,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _gst_element_class_get_metadata(
      klass,
      key,
    );
  }

  late final _gst_element_class_get_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElementClass>,
              ffi.Pointer<ffi.Char>)>>('gst_element_class_get_metadata');
  late final _gst_element_class_get_metadata =
      _gst_element_class_get_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstElementClass>, ffi.Pointer<ffi.Char>)>();

  int gst_element_get_type() {
    return _gst_element_get_type();
  }

  late final _gst_element_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_element_get_type');
  late final _gst_element_get_type =
      _gst_element_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstClock> gst_element_provide_clock(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_provide_clock(
      element,
    );
  }

  late final _gst_element_provide_clockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstClock> Function(
              ffi.Pointer<GstElement>)>>('gst_element_provide_clock');
  late final _gst_element_provide_clock = _gst_element_provide_clockPtr
      .asFunction<ffi.Pointer<GstClock> Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstClock> gst_element_get_clock(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_clock(
      element,
    );
  }

  late final _gst_element_get_clockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstClock> Function(
              ffi.Pointer<GstElement>)>>('gst_element_get_clock');
  late final _gst_element_get_clock = _gst_element_get_clockPtr
      .asFunction<ffi.Pointer<GstClock> Function(ffi.Pointer<GstElement>)>();

  int gst_element_set_clock(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_element_set_clock(
      element,
      clock,
    );
  }

  late final _gst_element_set_clockPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstClock>)>>('gst_element_set_clock');
  late final _gst_element_set_clock = _gst_element_set_clockPtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstClock>)>();

  void gst_element_set_base_time(
    ffi.Pointer<GstElement> element,
    int time,
  ) {
    return _gst_element_set_base_time(
      element,
      time,
    );
  }

  late final _gst_element_set_base_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              GstClockTime)>>('gst_element_set_base_time');
  late final _gst_element_set_base_time = _gst_element_set_base_timePtr
      .asFunction<void Function(ffi.Pointer<GstElement>, int)>();

  int gst_element_get_base_time(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_base_time(
      element,
    );
  }

  late final _gst_element_get_base_timePtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstElement>)>>(
      'gst_element_get_base_time');
  late final _gst_element_get_base_time = _gst_element_get_base_timePtr
      .asFunction<int Function(ffi.Pointer<GstElement>)>();

  void gst_element_set_start_time(
    ffi.Pointer<GstElement> element,
    int time,
  ) {
    return _gst_element_set_start_time(
      element,
      time,
    );
  }

  late final _gst_element_set_start_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              GstClockTime)>>('gst_element_set_start_time');
  late final _gst_element_set_start_time = _gst_element_set_start_timePtr
      .asFunction<void Function(ffi.Pointer<GstElement>, int)>();

  int gst_element_get_start_time(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_start_time(
      element,
    );
  }

  late final _gst_element_get_start_timePtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstElement>)>>(
      'gst_element_get_start_time');
  late final _gst_element_get_start_time = _gst_element_get_start_timePtr
      .asFunction<int Function(ffi.Pointer<GstElement>)>();

  int gst_element_get_current_running_time(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_current_running_time(
      element,
    );
  }

  late final _gst_element_get_current_running_timePtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstElement>)>>(
      'gst_element_get_current_running_time');
  late final _gst_element_get_current_running_time =
      _gst_element_get_current_running_timePtr
          .asFunction<int Function(ffi.Pointer<GstElement>)>();

  int gst_element_get_current_clock_time(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_current_clock_time(
      element,
    );
  }

  late final _gst_element_get_current_clock_timePtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstElement>)>>(
      'gst_element_get_current_clock_time');
  late final _gst_element_get_current_clock_time =
      _gst_element_get_current_clock_timePtr
          .asFunction<int Function(ffi.Pointer<GstElement>)>();

  void gst_element_set_bus(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstBus> bus,
  ) {
    return _gst_element_set_bus(
      element,
      bus,
    );
  }

  late final _gst_element_set_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstBus>)>>('gst_element_set_bus');
  late final _gst_element_set_bus = _gst_element_set_busPtr.asFunction<
      void Function(ffi.Pointer<GstElement>, ffi.Pointer<GstBus>)>();

  ffi.Pointer<GstBus> gst_element_get_bus(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_bus(
      element,
    );
  }

  late final _gst_element_get_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBus> Function(
              ffi.Pointer<GstElement>)>>('gst_element_get_bus');
  late final _gst_element_get_bus = _gst_element_get_busPtr
      .asFunction<ffi.Pointer<GstBus> Function(ffi.Pointer<GstElement>)>();

  void gst_element_set_context(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstContext> context,
  ) {
    return _gst_element_set_context(
      element,
      context,
    );
  }

  late final _gst_element_set_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstContext>)>>('gst_element_set_context');
  late final _gst_element_set_context = _gst_element_set_contextPtr.asFunction<
      void Function(ffi.Pointer<GstElement>, ffi.Pointer<GstContext>)>();

  ffi.Pointer<GList> gst_element_get_contexts(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_contexts(
      element,
    );
  }

  late final _gst_element_get_contextsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstElement>)>>('gst_element_get_contexts');
  late final _gst_element_get_contexts = _gst_element_get_contextsPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstContext> gst_element_get_context(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> context_type,
  ) {
    return _gst_element_get_context(
      element,
      context_type,
    );
  }

  late final _gst_element_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstContext> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_get_context');
  late final _gst_element_get_context = _gst_element_get_contextPtr.asFunction<
      ffi.Pointer<GstContext> Function(
          ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstContext> gst_element_get_context_unlocked(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> context_type,
  ) {
    return _gst_element_get_context_unlocked(
      element,
      context_type,
    );
  }

  late final _gst_element_get_context_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstContext> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_get_context_unlocked');
  late final _gst_element_get_context_unlocked =
      _gst_element_get_context_unlockedPtr.asFunction<
          ffi.Pointer<GstContext> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  int gst_element_add_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_element_add_pad(
      element,
      pad,
    );
  }

  late final _gst_element_add_padPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstPad>)>>('gst_element_add_pad');
  late final _gst_element_add_pad = _gst_element_add_padPtr
      .asFunction<int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstPad>)>();

  int gst_element_remove_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_element_remove_pad(
      element,
      pad,
    );
  }

  late final _gst_element_remove_padPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstPad>)>>('gst_element_remove_pad');
  late final _gst_element_remove_pad = _gst_element_remove_padPtr
      .asFunction<int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstPad>)>();

  void gst_element_no_more_pads(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_no_more_pads(
      element,
    );
  }

  late final _gst_element_no_more_padsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstElement>)>>(
          'gst_element_no_more_pads');
  late final _gst_element_no_more_pads = _gst_element_no_more_padsPtr
      .asFunction<void Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstPad> gst_element_get_static_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_get_static_pad(
      element,
      name,
    );
  }

  late final _gst_element_get_static_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_get_static_pad');
  late final _gst_element_get_static_pad =
      _gst_element_get_static_padPtr.asFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstPad> gst_element_get_request_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_get_request_pad(
      element,
      name,
    );
  }

  late final _gst_element_get_request_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_get_request_pad');
  late final _gst_element_get_request_pad =
      _gst_element_get_request_padPtr.asFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstPad> gst_element_request_pad_simple(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_request_pad_simple(
      element,
      name,
    );
  }

  late final _gst_element_request_pad_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_request_pad_simple');
  late final _gst_element_request_pad_simple =
      _gst_element_request_pad_simplePtr.asFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstPad> gst_element_request_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPadTemplate> templ,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_element_request_pad(
      element,
      templ,
      name,
      caps,
    );
  }

  late final _gst_element_request_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<GstPadTemplate>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>)>>('gst_element_request_pad');
  late final _gst_element_request_pad = _gst_element_request_padPtr.asFunction<
      ffi.Pointer<GstPad> Function(
          ffi.Pointer<GstElement>,
          ffi.Pointer<GstPadTemplate>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GstCaps>)>();

  void gst_element_release_request_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_element_release_request_pad(
      element,
      pad,
    );
  }

  late final _gst_element_release_request_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstPad>)>>('gst_element_release_request_pad');
  late final _gst_element_release_request_pad =
      _gst_element_release_request_padPtr.asFunction<
          void Function(ffi.Pointer<GstElement>, ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstIterator1> gst_element_iterate_pads(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_iterate_pads(
      element,
    );
  }

  late final _gst_element_iterate_padsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstElement>)>>('gst_element_iterate_pads');
  late final _gst_element_iterate_pads =
      _gst_element_iterate_padsPtr.asFunction<
          ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstIterator1> gst_element_iterate_src_pads(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_iterate_src_pads(
      element,
    );
  }

  late final _gst_element_iterate_src_padsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstElement>)>>('gst_element_iterate_src_pads');
  late final _gst_element_iterate_src_pads =
      _gst_element_iterate_src_padsPtr.asFunction<
          ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstIterator1> gst_element_iterate_sink_pads(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_iterate_sink_pads(
      element,
    );
  }

  late final _gst_element_iterate_sink_padsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstElement>)>>('gst_element_iterate_sink_pads');
  late final _gst_element_iterate_sink_pads =
      _gst_element_iterate_sink_padsPtr.asFunction<
          ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstElement>)>();

  int gst_element_foreach_sink_pad(
    ffi.Pointer<GstElement> element,
    GstElementForeachPadFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_element_foreach_sink_pad(
      element,
      func,
      user_data,
    );
  }

  late final _gst_element_foreach_sink_padPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, GstElementForeachPadFunc,
              ffi.Pointer)>>('gst_element_foreach_sink_pad');
  late final _gst_element_foreach_sink_pad =
      _gst_element_foreach_sink_padPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, GstElementForeachPadFunc,
              ffi.Pointer)>();

  int gst_element_foreach_src_pad(
    ffi.Pointer<GstElement> element,
    GstElementForeachPadFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_element_foreach_src_pad(
      element,
      func,
      user_data,
    );
  }

  late final _gst_element_foreach_src_padPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, GstElementForeachPadFunc,
              ffi.Pointer)>>('gst_element_foreach_src_pad');
  late final _gst_element_foreach_src_pad =
      _gst_element_foreach_src_padPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, GstElementForeachPadFunc,
              ffi.Pointer)>();

  int gst_element_foreach_pad(
    ffi.Pointer<GstElement> element,
    GstElementForeachPadFunc func,
    ffi.Pointer user_data,
  ) {
    return _gst_element_foreach_pad(
      element,
      func,
      user_data,
    );
  }

  late final _gst_element_foreach_padPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, GstElementForeachPadFunc,
              ffi.Pointer)>>('gst_element_foreach_pad');
  late final _gst_element_foreach_pad = _gst_element_foreach_padPtr.asFunction<
      int Function(
          ffi.Pointer<GstElement>, GstElementForeachPadFunc, ffi.Pointer)>();

  int gst_element_send_event(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstEvent> event,
  ) {
    return _gst_element_send_event(
      element,
      event,
    );
  }

  late final _gst_element_send_eventPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstEvent>)>>('gst_element_send_event');
  late final _gst_element_send_event = _gst_element_send_eventPtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstEvent>)>();

  int gst_element_seek(
    ffi.Pointer<GstElement> element,
    double rate,
    int format,
    int flags,
    int start_type,
    int start,
    int stop_type,
    int stop,
  ) {
    return _gst_element_seek(
      element,
      rate,
      format,
      flags,
      start_type,
      start,
      stop_type,
      stop,
    );
  }

  late final _gst_element_seekPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstElement>,
              gdouble,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              gint64,
              ffi.Int32,
              gint64)>>('gst_element_seek');
  late final _gst_element_seek = _gst_element_seekPtr.asFunction<
      int Function(
          ffi.Pointer<GstElement>, double, int, int, int, int, int, int)>();

  int gst_element_query(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_element_query(
      element,
      query,
    );
  }

  late final _gst_element_queryPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstQuery>)>>('gst_element_query');
  late final _gst_element_query = _gst_element_queryPtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstQuery>)>();

  int gst_element_post_message(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstMessage> message,
  ) {
    return _gst_element_post_message(
      element,
      message,
    );
  }

  late final _gst_element_post_messagePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstMessage>)>>('gst_element_post_message');
  late final _gst_element_post_message =
      _gst_element_post_messagePtr.asFunction<
          int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstMessage>)>();

  ffi.Pointer<ffi.Char> _gst_element_error_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return __gst_element_error_printf(
      format,
    );
  }

  late final __gst_element_error_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('_gst_element_error_printf');
  late final __gst_element_error_printf = __gst_element_error_printfPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void gst_element_message_full(
    ffi.Pointer<GstElement> element,
    int type,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> debug,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
  ) {
    return _gst_element_message_full(
      element,
      type,
      domain,
      code,
      text,
      debug,
      file,
      function,
      line,
    );
  }

  late final _gst_element_message_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstElement>,
              ffi.Int32,
              GQuark,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint)>>('gst_element_message_full');
  late final _gst_element_message_full =
      _gst_element_message_fullPtr.asFunction<
          void Function(
              ffi.Pointer<GstElement>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int)>();

  void gst_element_message_full_with_details(
    ffi.Pointer<GstElement> element,
    int type,
    int domain,
    int code,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> debug,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_element_message_full_with_details(
      element,
      type,
      domain,
      code,
      text,
      debug,
      file,
      function,
      line,
      structure,
    );
  }

  late final _gst_element_message_full_with_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstElement>,
                  ffi.Int32,
                  GQuark,
                  gint,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  gint,
                  ffi.Pointer<GstStructure>)>>(
      'gst_element_message_full_with_details');
  late final _gst_element_message_full_with_details =
      _gst_element_message_full_with_detailsPtr.asFunction<
          void Function(
              ffi.Pointer<GstElement>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GstStructure>)>();

  int gst_element_is_locked_state(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_is_locked_state(
      element,
    );
  }

  late final _gst_element_is_locked_statePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstElement>)>>(
          'gst_element_is_locked_state');
  late final _gst_element_is_locked_state = _gst_element_is_locked_statePtr
      .asFunction<int Function(ffi.Pointer<GstElement>)>();

  int gst_element_set_locked_state(
    ffi.Pointer<GstElement> element,
    int locked_state,
  ) {
    return _gst_element_set_locked_state(
      element,
      locked_state,
    );
  }

  late final _gst_element_set_locked_statePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              gboolean)>>('gst_element_set_locked_state');
  late final _gst_element_set_locked_state = _gst_element_set_locked_statePtr
      .asFunction<int Function(ffi.Pointer<GstElement>, int)>();

  int gst_element_sync_state_with_parent(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_sync_state_with_parent(
      element,
    );
  }

  late final _gst_element_sync_state_with_parentPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstElement>)>>(
          'gst_element_sync_state_with_parent');
  late final _gst_element_sync_state_with_parent =
      _gst_element_sync_state_with_parentPtr
          .asFunction<int Function(ffi.Pointer<GstElement>)>();

  int gst_element_get_state(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Int32> state,
    ffi.Pointer<ffi.Int32> pending,
    int timeout,
  ) {
    return _gst_element_get_state(
      element,
      state,
      pending,
      timeout,
    );
  }

  late final _gst_element_get_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, GstClockTime)>>('gst_element_get_state');
  late final _gst_element_get_state = _gst_element_get_statePtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>, int)>();

  int gst_element_set_state(
    ffi.Pointer<GstElement> element,
    int state,
  ) {
    return _gst_element_set_state(
      element,
      state,
    );
  }

  late final _gst_element_set_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstElement>, ffi.Int32)>>('gst_element_set_state');
  late final _gst_element_set_state = _gst_element_set_statePtr
      .asFunction<int Function(ffi.Pointer<GstElement>, int)>();

  void gst_element_abort_state(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_abort_state(
      element,
    );
  }

  late final _gst_element_abort_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstElement>)>>(
          'gst_element_abort_state');
  late final _gst_element_abort_state = _gst_element_abort_statePtr
      .asFunction<void Function(ffi.Pointer<GstElement>)>();

  int gst_element_change_state(
    ffi.Pointer<GstElement> element,
    int transition,
  ) {
    return _gst_element_change_state(
      element,
      transition,
    );
  }

  late final _gst_element_change_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstElement>, ffi.Int32)>>('gst_element_change_state');
  late final _gst_element_change_state = _gst_element_change_statePtr
      .asFunction<int Function(ffi.Pointer<GstElement>, int)>();

  int gst_element_continue_state(
    ffi.Pointer<GstElement> element,
    int ret,
  ) {
    return _gst_element_continue_state(
      element,
      ret,
    );
  }

  late final _gst_element_continue_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstElement>,
              ffi.Int32)>>('gst_element_continue_state');
  late final _gst_element_continue_state = _gst_element_continue_statePtr
      .asFunction<int Function(ffi.Pointer<GstElement>, int)>();

  void gst_element_lost_state(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_lost_state(
      element,
    );
  }

  late final _gst_element_lost_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstElement>)>>(
          'gst_element_lost_state');
  late final _gst_element_lost_state = _gst_element_lost_statePtr
      .asFunction<void Function(ffi.Pointer<GstElement>)>();

  void gst_element_call_async(
    ffi.Pointer<GstElement> element,
    GstElementCallAsyncFunc func,
    ffi.Pointer user_data,
    GDestroyNotify destroy_notify,
  ) {
    return _gst_element_call_async(
      element,
      func,
      user_data,
      destroy_notify,
    );
  }

  late final _gst_element_call_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>, GstElementCallAsyncFunc,
              ffi.Pointer, GDestroyNotify)>>('gst_element_call_async');
  late final _gst_element_call_async = _gst_element_call_asyncPtr.asFunction<
      void Function(ffi.Pointer<GstElement>, GstElementCallAsyncFunc,
          ffi.Pointer, GDestroyNotify)>();

  ffi.Pointer<GstElementFactory> gst_element_get_factory(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_factory(
      element,
    );
  }

  late final _gst_element_get_factoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElementFactory> Function(
              ffi.Pointer<GstElement>)>>('gst_element_get_factory');
  late final _gst_element_get_factory = _gst_element_get_factoryPtr.asFunction<
      ffi.Pointer<GstElementFactory> Function(ffi.Pointer<GstElement>)>();

  int gst_element_add_property_notify_watch(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> property_name,
    int include_value,
  ) {
    return _gst_element_add_property_notify_watch(
      element,
      property_name,
      include_value,
    );
  }

  late final _gst_element_add_property_notify_watchPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>,
              gboolean)>>('gst_element_add_property_notify_watch');
  late final _gst_element_add_property_notify_watch =
      _gst_element_add_property_notify_watchPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>, int)>();

  int gst_element_add_property_deep_notify_watch(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> property_name,
    int include_value,
  ) {
    return _gst_element_add_property_deep_notify_watch(
      element,
      property_name,
      include_value,
    );
  }

  late final _gst_element_add_property_deep_notify_watchPtr = _lookup<
      ffi.NativeFunction<
          gulong Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>,
              gboolean)>>('gst_element_add_property_deep_notify_watch');
  late final _gst_element_add_property_deep_notify_watch =
      _gst_element_add_property_deep_notify_watchPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>, int)>();

  void gst_element_remove_property_notify_watch(
    ffi.Pointer<GstElement> element,
    int watch_id,
  ) {
    return _gst_element_remove_property_notify_watch(
      element,
      watch_id,
    );
  }

  late final _gst_element_remove_property_notify_watchPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstElement>, gulong)>>(
      'gst_element_remove_property_notify_watch');
  late final _gst_element_remove_property_notify_watch =
      _gst_element_remove_property_notify_watchPtr
          .asFunction<void Function(ffi.Pointer<GstElement>, int)>();

  ffi.Pointer<GstPadTemplate> gst_element_get_pad_template(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_element_get_pad_template(
      element,
      name,
    );
  }

  late final _gst_element_get_pad_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPadTemplate> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_get_pad_template');
  late final _gst_element_get_pad_template =
      _gst_element_get_pad_templatePtr.asFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> gst_element_get_pad_template_list(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_get_pad_template_list(
      element,
    );
  }

  late final _gst_element_get_pad_template_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstElement>)>>('gst_element_get_pad_template_list');
  late final _gst_element_get_pad_template_list =
      _gst_element_get_pad_template_listPtr
          .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<ffi.Char> gst_element_get_metadata(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _gst_element_get_metadata(
      element,
      key,
    );
  }

  late final _gst_element_get_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_get_metadata');
  late final _gst_element_get_metadata =
      _gst_element_get_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  int gst_bin_get_type() {
    return _gst_bin_get_type();
  }

  late final _gst_bin_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_bin_get_type');
  late final _gst_bin_get_type =
      _gst_bin_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstElement> gst_bin_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_bin_new(
      name,
    );
  }

  late final _gst_bin_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>)>>('gst_bin_new');
  late final _gst_bin_new = _gst_bin_newPtr
      .asFunction<ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>)>();

  int gst_bin_add(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_bin_add(
      bin,
      element,
    );
  }

  late final _gst_bin_addPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBin>, ffi.Pointer<GstElement>)>>('gst_bin_add');
  late final _gst_bin_add = _gst_bin_addPtr
      .asFunction<int Function(ffi.Pointer<GstBin>, ffi.Pointer<GstElement>)>();

  int gst_bin_remove(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_bin_remove(
      bin,
      element,
    );
  }

  late final _gst_bin_removePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstBin>, ffi.Pointer<GstElement>)>>('gst_bin_remove');
  late final _gst_bin_remove = _gst_bin_removePtr
      .asFunction<int Function(ffi.Pointer<GstBin>, ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstElement> gst_bin_get_by_name(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_bin_get_by_name(
      bin,
      name,
    );
  }

  late final _gst_bin_get_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstBin>,
              ffi.Pointer<ffi.Char>)>>('gst_bin_get_by_name');
  late final _gst_bin_get_by_name = _gst_bin_get_by_namePtr.asFunction<
      ffi.Pointer<GstElement> Function(
          ffi.Pointer<GstBin>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_bin_get_by_name_recurse_up(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_bin_get_by_name_recurse_up(
      bin,
      name,
    );
  }

  late final _gst_bin_get_by_name_recurse_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<GstBin>,
              ffi.Pointer<ffi.Char>)>>('gst_bin_get_by_name_recurse_up');
  late final _gst_bin_get_by_name_recurse_up =
      _gst_bin_get_by_name_recurse_upPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<GstBin>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstElement> gst_bin_get_by_interface(
    ffi.Pointer<GstBin> bin,
    int iface,
  ) {
    return _gst_bin_get_by_interface(
      bin,
      iface,
    );
  }

  late final _gst_bin_get_by_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<GstBin>, GType)>>('gst_bin_get_by_interface');
  late final _gst_bin_get_by_interface = _gst_bin_get_by_interfacePtr
      .asFunction<ffi.Pointer<GstElement> Function(ffi.Pointer<GstBin>, int)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_elements(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_iterate_elements(
      bin,
    );
  }

  late final _gst_bin_iterate_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>)>>('gst_bin_iterate_elements');
  late final _gst_bin_iterate_elements = _gst_bin_iterate_elementsPtr
      .asFunction<ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstBin>)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_sorted(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_iterate_sorted(
      bin,
    );
  }

  late final _gst_bin_iterate_sortedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>)>>('gst_bin_iterate_sorted');
  late final _gst_bin_iterate_sorted = _gst_bin_iterate_sortedPtr
      .asFunction<ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstBin>)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_recurse(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_iterate_recurse(
      bin,
    );
  }

  late final _gst_bin_iterate_recursePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>)>>('gst_bin_iterate_recurse');
  late final _gst_bin_iterate_recurse = _gst_bin_iterate_recursePtr
      .asFunction<ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstBin>)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_sinks(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_iterate_sinks(
      bin,
    );
  }

  late final _gst_bin_iterate_sinksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>)>>('gst_bin_iterate_sinks');
  late final _gst_bin_iterate_sinks = _gst_bin_iterate_sinksPtr
      .asFunction<ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstBin>)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_sources(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_iterate_sources(
      bin,
    );
  }

  late final _gst_bin_iterate_sourcesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>)>>('gst_bin_iterate_sources');
  late final _gst_bin_iterate_sources = _gst_bin_iterate_sourcesPtr
      .asFunction<ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstBin>)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_all_by_interface(
    ffi.Pointer<GstBin> bin,
    int iface,
  ) {
    return _gst_bin_iterate_all_by_interface(
      bin,
      iface,
    );
  }

  late final _gst_bin_iterate_all_by_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>, GType)>>('gst_bin_iterate_all_by_interface');
  late final _gst_bin_iterate_all_by_interface =
      _gst_bin_iterate_all_by_interfacePtr.asFunction<
          ffi.Pointer<GstIterator1> Function(ffi.Pointer<GstBin>, int)>();

  ffi.Pointer<GstIterator1> gst_bin_iterate_all_by_element_factory_name(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<ffi.Char> factory_name,
  ) {
    return _gst_bin_iterate_all_by_element_factory_name(
      bin,
      factory_name,
    );
  }

  late final _gst_bin_iterate_all_by_element_factory_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstIterator1> Function(
                  ffi.Pointer<GstBin>, ffi.Pointer<ffi.Char>)>>(
      'gst_bin_iterate_all_by_element_factory_name');
  late final _gst_bin_iterate_all_by_element_factory_name =
      _gst_bin_iterate_all_by_element_factory_namePtr.asFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstBin>, ffi.Pointer<ffi.Char>)>();

  int gst_bin_recalculate_latency(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_recalculate_latency(
      bin,
    );
  }

  late final _gst_bin_recalculate_latencyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBin>)>>(
          'gst_bin_recalculate_latency');
  late final _gst_bin_recalculate_latency = _gst_bin_recalculate_latencyPtr
      .asFunction<int Function(ffi.Pointer<GstBin>)>();

  void gst_bin_set_suppressed_flags(
    ffi.Pointer<GstBin> bin,
    int flags,
  ) {
    return _gst_bin_set_suppressed_flags(
      bin,
      flags,
    );
  }

  late final _gst_bin_set_suppressed_flagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstBin>, ffi.Int32)>>(
      'gst_bin_set_suppressed_flags');
  late final _gst_bin_set_suppressed_flags = _gst_bin_set_suppressed_flagsPtr
      .asFunction<void Function(ffi.Pointer<GstBin>, int)>();

  int gst_bin_get_suppressed_flags(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_get_suppressed_flags(
      bin,
    );
  }

  late final _gst_bin_get_suppressed_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstBin>)>>(
          'gst_bin_get_suppressed_flags');
  late final _gst_bin_get_suppressed_flags = _gst_bin_get_suppressed_flagsPtr
      .asFunction<int Function(ffi.Pointer<GstBin>)>();

  int gst_buffer_pool_get_type() {
    return _gst_buffer_pool_get_type();
  }

  late final _gst_buffer_pool_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_buffer_pool_get_type');
  late final _gst_buffer_pool_get_type =
      _gst_buffer_pool_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstBufferPool> gst_buffer_pool_new() {
    return _gst_buffer_pool_new();
  }

  late final _gst_buffer_pool_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstBufferPool> Function()>>(
          'gst_buffer_pool_new');
  late final _gst_buffer_pool_new = _gst_buffer_pool_newPtr
      .asFunction<ffi.Pointer<GstBufferPool> Function()>();

  int gst_buffer_pool_set_active(
    ffi.Pointer<GstBufferPool> pool,
    int active,
  ) {
    return _gst_buffer_pool_set_active(
      pool,
      active,
    );
  }

  late final _gst_buffer_pool_set_activePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBufferPool>,
              gboolean)>>('gst_buffer_pool_set_active');
  late final _gst_buffer_pool_set_active = _gst_buffer_pool_set_activePtr
      .asFunction<int Function(ffi.Pointer<GstBufferPool>, int)>();

  int gst_buffer_pool_is_active(
    ffi.Pointer<GstBufferPool> pool,
  ) {
    return _gst_buffer_pool_is_active(
      pool,
    );
  }

  late final _gst_buffer_pool_is_activePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBufferPool>)>>(
      'gst_buffer_pool_is_active');
  late final _gst_buffer_pool_is_active = _gst_buffer_pool_is_activePtr
      .asFunction<int Function(ffi.Pointer<GstBufferPool>)>();

  int gst_buffer_pool_set_config(
    ffi.Pointer<GstBufferPool> pool,
    ffi.Pointer<GstStructure> config,
  ) {
    return _gst_buffer_pool_set_config(
      pool,
      config,
    );
  }

  late final _gst_buffer_pool_set_configPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBufferPool>,
              ffi.Pointer<GstStructure>)>>('gst_buffer_pool_set_config');
  late final _gst_buffer_pool_set_config =
      _gst_buffer_pool_set_configPtr.asFunction<
          int Function(
              ffi.Pointer<GstBufferPool>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstStructure> gst_buffer_pool_get_config(
    ffi.Pointer<GstBufferPool> pool,
  ) {
    return _gst_buffer_pool_get_config(
      pool,
    );
  }

  late final _gst_buffer_pool_get_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstBufferPool>)>>('gst_buffer_pool_get_config');
  late final _gst_buffer_pool_get_config =
      _gst_buffer_pool_get_configPtr.asFunction<
          ffi.Pointer<GstStructure> Function(ffi.Pointer<GstBufferPool>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_buffer_pool_get_options(
    ffi.Pointer<GstBufferPool> pool,
  ) {
    return _gst_buffer_pool_get_options(
      pool,
    );
  }

  late final _gst_buffer_pool_get_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstBufferPool>)>>('gst_buffer_pool_get_options');
  late final _gst_buffer_pool_get_options =
      _gst_buffer_pool_get_optionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstBufferPool>)>();

  int gst_buffer_pool_has_option(
    ffi.Pointer<GstBufferPool> pool,
    ffi.Pointer<ffi.Char> option,
  ) {
    return _gst_buffer_pool_has_option(
      pool,
      option,
    );
  }

  late final _gst_buffer_pool_has_optionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBufferPool>,
              ffi.Pointer<ffi.Char>)>>('gst_buffer_pool_has_option');
  late final _gst_buffer_pool_has_option =
      _gst_buffer_pool_has_optionPtr.asFunction<
          int Function(ffi.Pointer<GstBufferPool>, ffi.Pointer<ffi.Char>)>();

  void gst_buffer_pool_set_flushing(
    ffi.Pointer<GstBufferPool> pool,
    int flushing,
  ) {
    return _gst_buffer_pool_set_flushing(
      pool,
      flushing,
    );
  }

  late final _gst_buffer_pool_set_flushingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferPool>,
              gboolean)>>('gst_buffer_pool_set_flushing');
  late final _gst_buffer_pool_set_flushing = _gst_buffer_pool_set_flushingPtr
      .asFunction<void Function(ffi.Pointer<GstBufferPool>, int)>();

  void gst_buffer_pool_config_set_params(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<GstCaps> caps,
    int size,
    int min_buffers,
    int max_buffers,
  ) {
    return _gst_buffer_pool_config_set_params(
      config,
      caps,
      size,
      min_buffers,
      max_buffers,
    );
  }

  late final _gst_buffer_pool_config_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstCaps>,
              guint, guint, guint)>>('gst_buffer_pool_config_set_params');
  late final _gst_buffer_pool_config_set_params =
      _gst_buffer_pool_config_set_paramsPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstCaps>, int,
              int, int)>();

  int gst_buffer_pool_config_get_params(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<ffi.Pointer<GstCaps>> caps,
    ffi.Pointer<guint> size,
    ffi.Pointer<guint> min_buffers,
    ffi.Pointer<guint> max_buffers,
  ) {
    return _gst_buffer_pool_config_get_params(
      config,
      caps,
      size,
      min_buffers,
      max_buffers,
    );
  }

  late final _gst_buffer_pool_config_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Pointer<GstCaps>>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>)>>('gst_buffer_pool_config_get_params');
  late final _gst_buffer_pool_config_get_params =
      _gst_buffer_pool_config_get_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Pointer<GstCaps>>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>,
              ffi.Pointer<guint>)>();

  void gst_buffer_pool_config_set_allocator(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<GstAllocator> allocator,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_buffer_pool_config_set_allocator(
      config,
      allocator,
      params,
    );
  }

  late final _gst_buffer_pool_config_set_allocatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstStructure>,
                  ffi.Pointer<GstAllocator>,
                  ffi.Pointer<GstAllocationParams>)>>(
      'gst_buffer_pool_config_set_allocator');
  late final _gst_buffer_pool_config_set_allocator =
      _gst_buffer_pool_config_set_allocatorPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstAllocator>,
              ffi.Pointer<GstAllocationParams>)>();

  int gst_buffer_pool_config_get_allocator(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<ffi.Pointer<GstAllocator>> allocator,
    ffi.Pointer<GstAllocationParams> params,
  ) {
    return _gst_buffer_pool_config_get_allocator(
      config,
      allocator,
      params,
    );
  }

  late final _gst_buffer_pool_config_get_allocatorPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstStructure>,
                  ffi.Pointer<ffi.Pointer<GstAllocator>>,
                  ffi.Pointer<GstAllocationParams>)>>(
      'gst_buffer_pool_config_get_allocator');
  late final _gst_buffer_pool_config_get_allocator =
      _gst_buffer_pool_config_get_allocatorPtr.asFunction<
          int Function(
              ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Pointer<GstAllocator>>,
              ffi.Pointer<GstAllocationParams>)>();

  int gst_buffer_pool_config_n_options(
    ffi.Pointer<GstStructure> config,
  ) {
    return _gst_buffer_pool_config_n_options(
      config,
    );
  }

  late final _gst_buffer_pool_config_n_optionsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstStructure>)>>(
          'gst_buffer_pool_config_n_options');
  late final _gst_buffer_pool_config_n_options =
      _gst_buffer_pool_config_n_optionsPtr
          .asFunction<int Function(ffi.Pointer<GstStructure>)>();

  void gst_buffer_pool_config_add_option(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<ffi.Char> option,
  ) {
    return _gst_buffer_pool_config_add_option(
      config,
      option,
    );
  }

  late final _gst_buffer_pool_config_add_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_buffer_pool_config_add_option');
  late final _gst_buffer_pool_config_add_option =
      _gst_buffer_pool_config_add_optionPtr.asFunction<
          void Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_buffer_pool_config_get_option(
    ffi.Pointer<GstStructure> config,
    int index,
  ) {
    return _gst_buffer_pool_config_get_option(
      config,
      index,
    );
  }

  late final _gst_buffer_pool_config_get_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>,
              guint)>>('gst_buffer_pool_config_get_option');
  late final _gst_buffer_pool_config_get_option =
      _gst_buffer_pool_config_get_optionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstStructure>, int)>();

  int gst_buffer_pool_config_has_option(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<ffi.Char> option,
  ) {
    return _gst_buffer_pool_config_has_option(
      config,
      option,
    );
  }

  late final _gst_buffer_pool_config_has_optionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>,
              ffi.Pointer<ffi.Char>)>>('gst_buffer_pool_config_has_option');
  late final _gst_buffer_pool_config_has_option =
      _gst_buffer_pool_config_has_optionPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<ffi.Char>)>();

  int gst_buffer_pool_config_validate_params(
    ffi.Pointer<GstStructure> config,
    ffi.Pointer<GstCaps> caps,
    int size,
    int min_buffers,
    int max_buffers,
  ) {
    return _gst_buffer_pool_config_validate_params(
      config,
      caps,
      size,
      min_buffers,
      max_buffers,
    );
  }

  late final _gst_buffer_pool_config_validate_paramsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstCaps>,
              guint, guint, guint)>>('gst_buffer_pool_config_validate_params');
  late final _gst_buffer_pool_config_validate_params =
      _gst_buffer_pool_config_validate_paramsPtr.asFunction<
          int Function(ffi.Pointer<GstStructure>, ffi.Pointer<GstCaps>, int,
              int, int)>();

  int gst_buffer_pool_acquire_buffer(
    ffi.Pointer<GstBufferPool> pool,
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
    ffi.Pointer<GstBufferPoolAcquireParams> params,
  ) {
    return _gst_buffer_pool_acquire_buffer(
      pool,
      buffer,
      params,
    );
  }

  late final _gst_buffer_pool_acquire_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GstBufferPool>,
                  ffi.Pointer<ffi.Pointer<GstBuffer>>,
                  ffi.Pointer<GstBufferPoolAcquireParams>)>>(
      'gst_buffer_pool_acquire_buffer');
  late final _gst_buffer_pool_acquire_buffer =
      _gst_buffer_pool_acquire_bufferPtr.asFunction<
          int Function(
              ffi.Pointer<GstBufferPool>,
              ffi.Pointer<ffi.Pointer<GstBuffer>>,
              ffi.Pointer<GstBufferPoolAcquireParams>)>();

  void gst_buffer_pool_release_buffer(
    ffi.Pointer<GstBufferPool> pool,
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_buffer_pool_release_buffer(
      pool,
      buffer,
    );
  }

  late final _gst_buffer_pool_release_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferPool>,
              ffi.Pointer<GstBuffer>)>>('gst_buffer_pool_release_buffer');
  late final _gst_buffer_pool_release_buffer =
      _gst_buffer_pool_release_bufferPtr.asFunction<
          void Function(ffi.Pointer<GstBufferPool>, ffi.Pointer<GstBuffer>)>();

  int gst_child_proxy_get_type() {
    return _gst_child_proxy_get_type();
  }

  late final _gst_child_proxy_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_child_proxy_get_type');
  late final _gst_child_proxy_get_type =
      _gst_child_proxy_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GObject> gst_child_proxy_get_child_by_name(
    ffi.Pointer<GstChildProxy> parent,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_child_proxy_get_child_by_name(
      parent,
      name,
    );
  }

  late final _gst_child_proxy_get_child_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GstChildProxy>,
              ffi.Pointer<ffi.Char>)>>('gst_child_proxy_get_child_by_name');
  late final _gst_child_proxy_get_child_by_name =
      _gst_child_proxy_get_child_by_namePtr.asFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GObject> gst_child_proxy_get_child_by_name_recurse(
    ffi.Pointer<GstChildProxy> child_proxy,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_child_proxy_get_child_by_name_recurse(
      child_proxy,
      name,
    );
  }

  late final _gst_child_proxy_get_child_by_name_recursePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(
                  ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>)>>(
      'gst_child_proxy_get_child_by_name_recurse');
  late final _gst_child_proxy_get_child_by_name_recurse =
      _gst_child_proxy_get_child_by_name_recursePtr.asFunction<
          ffi.Pointer<GObject> Function(
              ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>)>();

  int gst_child_proxy_get_children_count(
    ffi.Pointer<GstChildProxy> parent,
  ) {
    return _gst_child_proxy_get_children_count(
      parent,
    );
  }

  late final _gst_child_proxy_get_children_countPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GstChildProxy>)>>(
          'gst_child_proxy_get_children_count');
  late final _gst_child_proxy_get_children_count =
      _gst_child_proxy_get_children_countPtr
          .asFunction<int Function(ffi.Pointer<GstChildProxy>)>();

  ffi.Pointer<GObject> gst_child_proxy_get_child_by_index(
    ffi.Pointer<GstChildProxy> parent,
    int index,
  ) {
    return _gst_child_proxy_get_child_by_index(
      parent,
      index,
    );
  }

  late final _gst_child_proxy_get_child_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GstChildProxy>,
              guint)>>('gst_child_proxy_get_child_by_index');
  late final _gst_child_proxy_get_child_by_index =
      _gst_child_proxy_get_child_by_indexPtr.asFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GstChildProxy>, int)>();

  int gst_child_proxy_lookup(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<GObject>> target,
    ffi.Pointer<ffi.Pointer<GParamSpec>> pspec,
  ) {
    return _gst_child_proxy_lookup(
      object,
      name,
      target,
      pspec,
    );
  }

  late final _gst_child_proxy_lookupPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstChildProxy>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GObject>>,
              ffi.Pointer<ffi.Pointer<GParamSpec>>)>>('gst_child_proxy_lookup');
  late final _gst_child_proxy_lookup = _gst_child_proxy_lookupPtr.asFunction<
      int Function(
          ffi.Pointer<GstChildProxy>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<GObject>>,
          ffi.Pointer<ffi.Pointer<GParamSpec>>)>();

  void gst_child_proxy_get_property(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_child_proxy_get_property(
      object,
      name,
      value,
    );
  }

  late final _gst_child_proxy_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_child_proxy_get_property');
  late final _gst_child_proxy_get_property =
      _gst_child_proxy_get_propertyPtr.asFunction<
          void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>();

  void gst_child_proxy_get_valist(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_child_proxy_get_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _gst_child_proxy_get_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_child_proxy_get_valist');
  late final _gst_child_proxy_get_valist =
      _gst_child_proxy_get_valistPtr.asFunction<
          void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_child_proxy_get(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> first_property_name,
  ) {
    return _gst_child_proxy_get(
      object,
      first_property_name,
    );
  }

  late final _gst_child_proxy_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>,
              ffi.Pointer<ffi.Char>)>>('gst_child_proxy_get');
  late final _gst_child_proxy_get = _gst_child_proxy_getPtr.asFunction<
      void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>)>();

  void gst_child_proxy_set_property(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_child_proxy_set_property(
      object,
      name,
      value,
    );
  }

  late final _gst_child_proxy_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_child_proxy_set_property');
  late final _gst_child_proxy_set_property =
      _gst_child_proxy_set_propertyPtr.asFunction<
          void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>();

  void gst_child_proxy_set_valist(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> first_property_name,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_child_proxy_set_valist(
      object,
      first_property_name,
      var_args,
    );
  }

  late final _gst_child_proxy_set_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_child_proxy_set_valist');
  late final _gst_child_proxy_set_valist =
      _gst_child_proxy_set_valistPtr.asFunction<
          void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_child_proxy_set(
    ffi.Pointer<GstChildProxy> object,
    ffi.Pointer<ffi.Char> first_property_name,
  ) {
    return _gst_child_proxy_set(
      object,
      first_property_name,
    );
  }

  late final _gst_child_proxy_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>,
              ffi.Pointer<ffi.Char>)>>('gst_child_proxy_set');
  late final _gst_child_proxy_set = _gst_child_proxy_setPtr.asFunction<
      void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<ffi.Char>)>();

  void gst_child_proxy_child_added(
    ffi.Pointer<GstChildProxy> parent,
    ffi.Pointer<GObject> child,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_child_proxy_child_added(
      parent,
      child,
      name,
    );
  }

  late final _gst_child_proxy_child_addedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>>('gst_child_proxy_child_added');
  late final _gst_child_proxy_child_added =
      _gst_child_proxy_child_addedPtr.asFunction<
          void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>();

  void gst_child_proxy_child_removed(
    ffi.Pointer<GstChildProxy> parent,
    ffi.Pointer<GObject> child,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_child_proxy_child_removed(
      parent,
      child,
      name,
    );
  }

  late final _gst_child_proxy_child_removedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>>('gst_child_proxy_child_removed');
  late final _gst_child_proxy_child_removed =
      _gst_child_proxy_child_removedPtr.asFunction<
          void Function(ffi.Pointer<GstChildProxy>, ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>();

  /// pipeline graphs
  ffi.Pointer<ffi.Char> gst_debug_bin_to_dot_data(
    ffi.Pointer<GstBin> bin,
    int details,
  ) {
    return _gst_debug_bin_to_dot_data(
      bin,
      details,
    );
  }

  late final _gst_debug_bin_to_dot_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstBin>, ffi.Int32)>>('gst_debug_bin_to_dot_data');
  late final _gst_debug_bin_to_dot_data = _gst_debug_bin_to_dot_dataPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstBin>, int)>();

  void gst_debug_bin_to_dot_file(
    ffi.Pointer<GstBin> bin,
    int details,
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _gst_debug_bin_to_dot_file(
      bin,
      details,
      file_name,
    );
  }

  late final _gst_debug_bin_to_dot_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBin>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('gst_debug_bin_to_dot_file');
  late final _gst_debug_bin_to_dot_file =
      _gst_debug_bin_to_dot_filePtr.asFunction<
          void Function(ffi.Pointer<GstBin>, int, ffi.Pointer<ffi.Char>)>();

  void gst_debug_bin_to_dot_file_with_ts(
    ffi.Pointer<GstBin> bin,
    int details,
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _gst_debug_bin_to_dot_file_with_ts(
      bin,
      details,
      file_name,
    );
  }

  late final _gst_debug_bin_to_dot_file_with_tsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBin>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('gst_debug_bin_to_dot_file_with_ts');
  late final _gst_debug_bin_to_dot_file_with_ts =
      _gst_debug_bin_to_dot_file_with_tsPtr.asFunction<
          void Function(ffi.Pointer<GstBin>, int, ffi.Pointer<ffi.Char>)>();

  int gst_device_provider_factory_get_type() {
    return _gst_device_provider_factory_get_type();
  }

  late final _gst_device_provider_factory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_device_provider_factory_get_type');
  late final _gst_device_provider_factory_get_type =
      _gst_device_provider_factory_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstDeviceProviderFactory> gst_device_provider_factory_find(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_device_provider_factory_find(
      name,
    );
  }

  late final _gst_device_provider_factory_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDeviceProviderFactory> Function(
              ffi.Pointer<ffi.Char>)>>('gst_device_provider_factory_find');
  late final _gst_device_provider_factory_find =
      _gst_device_provider_factory_findPtr.asFunction<
          ffi.Pointer<GstDeviceProviderFactory> Function(
              ffi.Pointer<ffi.Char>)>();

  int gst_device_provider_factory_get_device_provider_type(
    ffi.Pointer<GstDeviceProviderFactory> factory1,
  ) {
    return _gst_device_provider_factory_get_device_provider_type(
      factory1,
    );
  }

  late final _gst_device_provider_factory_get_device_provider_typePtr = _lookup<
          ffi.NativeFunction<
              GType Function(ffi.Pointer<GstDeviceProviderFactory>)>>(
      'gst_device_provider_factory_get_device_provider_type');
  late final _gst_device_provider_factory_get_device_provider_type =
      _gst_device_provider_factory_get_device_provider_typePtr
          .asFunction<int Function(ffi.Pointer<GstDeviceProviderFactory>)>();

  ffi.Pointer<ffi.Char> gst_device_provider_factory_get_metadata(
    ffi.Pointer<GstDeviceProviderFactory> factory1,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _gst_device_provider_factory_get_metadata(
      factory1,
      key,
    );
  }

  late final _gst_device_provider_factory_get_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GstDeviceProviderFactory>,
                  ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_factory_get_metadata');
  late final _gst_device_provider_factory_get_metadata =
      _gst_device_provider_factory_get_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDeviceProviderFactory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>>
      gst_device_provider_factory_get_metadata_keys(
    ffi.Pointer<GstDeviceProviderFactory> factory1,
  ) {
    return _gst_device_provider_factory_get_metadata_keys(
      factory1,
    );
  }

  late final _gst_device_provider_factory_get_metadata_keysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstDeviceProviderFactory>)>>(
      'gst_device_provider_factory_get_metadata_keys');
  late final _gst_device_provider_factory_get_metadata_keys =
      _gst_device_provider_factory_get_metadata_keysPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstDeviceProviderFactory>)>();

  ffi.Pointer<GstDeviceProvider> gst_device_provider_factory_get(
    ffi.Pointer<GstDeviceProviderFactory> factory1,
  ) {
    return _gst_device_provider_factory_get(
      factory1,
    );
  }

  late final _gst_device_provider_factory_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstDeviceProvider> Function(
                  ffi.Pointer<GstDeviceProviderFactory>)>>(
      'gst_device_provider_factory_get');
  late final _gst_device_provider_factory_get =
      _gst_device_provider_factory_getPtr.asFunction<
          ffi.Pointer<GstDeviceProvider> Function(
              ffi.Pointer<GstDeviceProviderFactory>)>();

  ffi.Pointer<GstDeviceProvider> gst_device_provider_factory_get_by_name(
    ffi.Pointer<ffi.Char> factoryname,
  ) {
    return _gst_device_provider_factory_get_by_name(
      factoryname,
    );
  }

  late final _gst_device_provider_factory_get_by_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstDeviceProvider> Function(ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_factory_get_by_name');
  late final _gst_device_provider_factory_get_by_name =
      _gst_device_provider_factory_get_by_namePtr.asFunction<
          ffi.Pointer<GstDeviceProvider> Function(ffi.Pointer<ffi.Char>)>();

  int gst_device_provider_register(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> name,
    int rank,
    int type,
  ) {
    return _gst_device_provider_register(
      plugin,
      name,
      rank,
      type,
    );
  }

  late final _gst_device_provider_registerPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>,
              guint, GType)>>('gst_device_provider_register');
  late final _gst_device_provider_register =
      _gst_device_provider_registerPtr.asFunction<
          int Function(
              ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>, int, int)>();

  int gst_device_provider_factory_has_classesv(
    ffi.Pointer<GstDeviceProviderFactory> factory1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> classes,
  ) {
    return _gst_device_provider_factory_has_classesv(
      factory1,
      classes,
    );
  }

  late final _gst_device_provider_factory_has_classesvPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstDeviceProviderFactory>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_device_provider_factory_has_classesv');
  late final _gst_device_provider_factory_has_classesv =
      _gst_device_provider_factory_has_classesvPtr.asFunction<
          int Function(ffi.Pointer<GstDeviceProviderFactory>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_device_provider_factory_has_classes(
    ffi.Pointer<GstDeviceProviderFactory> factory1,
    ffi.Pointer<ffi.Char> classes,
  ) {
    return _gst_device_provider_factory_has_classes(
      factory1,
      classes,
    );
  }

  late final _gst_device_provider_factory_has_classesPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GstDeviceProviderFactory>,
                  ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_factory_has_classes');
  late final _gst_device_provider_factory_has_classes =
      _gst_device_provider_factory_has_classesPtr.asFunction<
          int Function(
              ffi.Pointer<GstDeviceProviderFactory>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GList> gst_device_provider_factory_list_get_device_providers(
    int minrank,
  ) {
    return _gst_device_provider_factory_list_get_device_providers(
      minrank,
    );
  }

  late final _gst_device_provider_factory_list_get_device_providersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function(ffi.Int32)>>(
          'gst_device_provider_factory_list_get_device_providers');
  late final _gst_device_provider_factory_list_get_device_providers =
      _gst_device_provider_factory_list_get_device_providersPtr
          .asFunction<ffi.Pointer<GList> Function(int)>();

  int gst_device_provider_get_type() {
    return _gst_device_provider_get_type();
  }

  late final _gst_device_provider_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_device_provider_get_type');
  late final _gst_device_provider_get_type =
      _gst_device_provider_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GList> gst_device_provider_get_devices(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_get_devices(
      provider,
    );
  }

  late final _gst_device_provider_get_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_get_devices');
  late final _gst_device_provider_get_devices =
      _gst_device_provider_get_devicesPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstDeviceProvider>)>();

  int gst_device_provider_start(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_start(
      provider,
    );
  }

  late final _gst_device_provider_startPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_start');
  late final _gst_device_provider_start = _gst_device_provider_startPtr
      .asFunction<int Function(ffi.Pointer<GstDeviceProvider>)>();

  void gst_device_provider_stop(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_stop(
      provider,
    );
  }

  late final _gst_device_provider_stopPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_stop');
  late final _gst_device_provider_stop = _gst_device_provider_stopPtr
      .asFunction<void Function(ffi.Pointer<GstDeviceProvider>)>();

  int gst_device_provider_can_monitor(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_can_monitor(
      provider,
    );
  }

  late final _gst_device_provider_can_monitorPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_can_monitor');
  late final _gst_device_provider_can_monitor =
      _gst_device_provider_can_monitorPtr
          .asFunction<int Function(ffi.Pointer<GstDeviceProvider>)>();

  ffi.Pointer<GstBus> gst_device_provider_get_bus(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_get_bus(
      provider,
    );
  }

  late final _gst_device_provider_get_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBus> Function(
              ffi.Pointer<GstDeviceProvider>)>>('gst_device_provider_get_bus');
  late final _gst_device_provider_get_bus =
      _gst_device_provider_get_busPtr.asFunction<
          ffi.Pointer<GstBus> Function(ffi.Pointer<GstDeviceProvider>)>();

  void gst_device_provider_device_add(
    ffi.Pointer<GstDeviceProvider> provider,
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_device_provider_device_add(
      provider,
      device,
    );
  }

  late final _gst_device_provider_device_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDeviceProvider>,
              ffi.Pointer<GstDevice>)>>('gst_device_provider_device_add');
  late final _gst_device_provider_device_add =
      _gst_device_provider_device_addPtr.asFunction<
          void Function(
              ffi.Pointer<GstDeviceProvider>, ffi.Pointer<GstDevice>)>();

  void gst_device_provider_device_remove(
    ffi.Pointer<GstDeviceProvider> provider,
    ffi.Pointer<GstDevice> device,
  ) {
    return _gst_device_provider_device_remove(
      provider,
      device,
    );
  }

  late final _gst_device_provider_device_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDeviceProvider>,
              ffi.Pointer<GstDevice>)>>('gst_device_provider_device_remove');
  late final _gst_device_provider_device_remove =
      _gst_device_provider_device_removePtr.asFunction<
          void Function(
              ffi.Pointer<GstDeviceProvider>, ffi.Pointer<GstDevice>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_device_provider_get_hidden_providers(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_get_hidden_providers(
      provider,
    );
  }

  late final _gst_device_provider_get_hidden_providersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_get_hidden_providers');
  late final _gst_device_provider_get_hidden_providers =
      _gst_device_provider_get_hidden_providersPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstDeviceProvider>)>();

  void gst_device_provider_hide_provider(
    ffi.Pointer<GstDeviceProvider> provider,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_device_provider_hide_provider(
      provider,
      name,
    );
  }

  late final _gst_device_provider_hide_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDeviceProvider>,
              ffi.Pointer<ffi.Char>)>>('gst_device_provider_hide_provider');
  late final _gst_device_provider_hide_provider =
      _gst_device_provider_hide_providerPtr.asFunction<
          void Function(
              ffi.Pointer<GstDeviceProvider>, ffi.Pointer<ffi.Char>)>();

  void gst_device_provider_unhide_provider(
    ffi.Pointer<GstDeviceProvider> provider,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_device_provider_unhide_provider(
      provider,
      name,
    );
  }

  late final _gst_device_provider_unhide_providerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDeviceProvider>,
              ffi.Pointer<ffi.Char>)>>('gst_device_provider_unhide_provider');
  late final _gst_device_provider_unhide_provider =
      _gst_device_provider_unhide_providerPtr.asFunction<
          void Function(
              ffi.Pointer<GstDeviceProvider>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_device_provider_get_metadata(
    ffi.Pointer<GstDeviceProvider> provider,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _gst_device_provider_get_metadata(
      provider,
      key,
    );
  }

  late final _gst_device_provider_get_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDeviceProvider>,
              ffi.Pointer<ffi.Char>)>>('gst_device_provider_get_metadata');
  late final _gst_device_provider_get_metadata =
      _gst_device_provider_get_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDeviceProvider>, ffi.Pointer<ffi.Char>)>();

  int gst_device_provider_is_started(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_is_started(
      provider,
    );
  }

  late final _gst_device_provider_is_startedPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_is_started');
  late final _gst_device_provider_is_started =
      _gst_device_provider_is_startedPtr
          .asFunction<int Function(ffi.Pointer<GstDeviceProvider>)>();

  void gst_device_provider_class_set_metadata(
    ffi.Pointer<GstDeviceProviderClass> klass,
    ffi.Pointer<ffi.Char> longname,
    ffi.Pointer<ffi.Char> classification,
    ffi.Pointer<ffi.Char> description,
    ffi.Pointer<ffi.Char> author,
  ) {
    return _gst_device_provider_class_set_metadata(
      klass,
      longname,
      classification,
      description,
      author,
    );
  }

  late final _gst_device_provider_class_set_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstDeviceProviderClass>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_class_set_metadata');
  late final _gst_device_provider_class_set_metadata =
      _gst_device_provider_class_set_metadataPtr.asFunction<
          void Function(
              ffi.Pointer<GstDeviceProviderClass>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void gst_device_provider_class_set_static_metadata(
    ffi.Pointer<GstDeviceProviderClass> klass,
    ffi.Pointer<ffi.Char> longname,
    ffi.Pointer<ffi.Char> classification,
    ffi.Pointer<ffi.Char> description,
    ffi.Pointer<ffi.Char> author,
  ) {
    return _gst_device_provider_class_set_static_metadata(
      klass,
      longname,
      classification,
      description,
      author,
    );
  }

  late final _gst_device_provider_class_set_static_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstDeviceProviderClass>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_class_set_static_metadata');
  late final _gst_device_provider_class_set_static_metadata =
      _gst_device_provider_class_set_static_metadataPtr.asFunction<
          void Function(
              ffi.Pointer<GstDeviceProviderClass>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void gst_device_provider_class_add_metadata(
    ffi.Pointer<GstDeviceProviderClass> klass,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gst_device_provider_class_add_metadata(
      klass,
      key,
      value,
    );
  }

  late final _gst_device_provider_class_add_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstDeviceProviderClass>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_class_add_metadata');
  late final _gst_device_provider_class_add_metadata =
      _gst_device_provider_class_add_metadataPtr.asFunction<
          void Function(ffi.Pointer<GstDeviceProviderClass>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void gst_device_provider_class_add_static_metadata(
    ffi.Pointer<GstDeviceProviderClass> klass,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gst_device_provider_class_add_static_metadata(
      klass,
      key,
      value,
    );
  }

  late final _gst_device_provider_class_add_static_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstDeviceProviderClass>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_class_add_static_metadata');
  late final _gst_device_provider_class_add_static_metadata =
      _gst_device_provider_class_add_static_metadataPtr.asFunction<
          void Function(ffi.Pointer<GstDeviceProviderClass>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_device_provider_class_get_metadata(
    ffi.Pointer<GstDeviceProviderClass> klass,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _gst_device_provider_class_get_metadata(
      klass,
      key,
    );
  }

  late final _gst_device_provider_class_get_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GstDeviceProviderClass>, ffi.Pointer<ffi.Char>)>>(
      'gst_device_provider_class_get_metadata');
  late final _gst_device_provider_class_get_metadata =
      _gst_device_provider_class_get_metadataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDeviceProviderClass>, ffi.Pointer<ffi.Char>)>();

  void gst_device_provider_device_changed(
    ffi.Pointer<GstDeviceProvider> provider,
    ffi.Pointer<GstDevice> device,
    ffi.Pointer<GstDevice> changed_device,
  ) {
    return _gst_device_provider_device_changed(
      provider,
      device,
      changed_device,
    );
  }

  late final _gst_device_provider_device_changedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDeviceProvider>,
              ffi.Pointer<GstDevice>,
              ffi.Pointer<GstDevice>)>>('gst_device_provider_device_changed');
  late final _gst_device_provider_device_changed =
      _gst_device_provider_device_changedPtr.asFunction<
          void Function(ffi.Pointer<GstDeviceProvider>, ffi.Pointer<GstDevice>,
              ffi.Pointer<GstDevice>)>();

  ffi.Pointer<GstDeviceProviderFactory> gst_device_provider_get_factory(
    ffi.Pointer<GstDeviceProvider> provider,
  ) {
    return _gst_device_provider_get_factory(
      provider,
    );
  }

  late final _gst_device_provider_get_factoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstDeviceProviderFactory> Function(
                  ffi.Pointer<GstDeviceProvider>)>>(
      'gst_device_provider_get_factory');
  late final _gst_device_provider_get_factory =
      _gst_device_provider_get_factoryPtr.asFunction<
          ffi.Pointer<GstDeviceProviderFactory> Function(
              ffi.Pointer<GstDeviceProvider>)>();

  int gst_device_monitor_get_type() {
    return _gst_device_monitor_get_type();
  }

  late final _gst_device_monitor_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_device_monitor_get_type');
  late final _gst_device_monitor_get_type =
      _gst_device_monitor_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstDeviceMonitor> gst_device_monitor_new() {
    return _gst_device_monitor_new();
  }

  late final _gst_device_monitor_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstDeviceMonitor> Function()>>(
          'gst_device_monitor_new');
  late final _gst_device_monitor_new = _gst_device_monitor_newPtr
      .asFunction<ffi.Pointer<GstDeviceMonitor> Function()>();

  ffi.Pointer<GstBus> gst_device_monitor_get_bus(
    ffi.Pointer<GstDeviceMonitor> monitor,
  ) {
    return _gst_device_monitor_get_bus(
      monitor,
    );
  }

  late final _gst_device_monitor_get_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBus> Function(
              ffi.Pointer<GstDeviceMonitor>)>>('gst_device_monitor_get_bus');
  late final _gst_device_monitor_get_bus =
      _gst_device_monitor_get_busPtr.asFunction<
          ffi.Pointer<GstBus> Function(ffi.Pointer<GstDeviceMonitor>)>();

  ffi.Pointer<GList> gst_device_monitor_get_devices(
    ffi.Pointer<GstDeviceMonitor> monitor,
  ) {
    return _gst_device_monitor_get_devices(
      monitor,
    );
  }

  late final _gst_device_monitor_get_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(ffi.Pointer<GstDeviceMonitor>)>>(
      'gst_device_monitor_get_devices');
  late final _gst_device_monitor_get_devices =
      _gst_device_monitor_get_devicesPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstDeviceMonitor>)>();

  int gst_device_monitor_start(
    ffi.Pointer<GstDeviceMonitor> monitor,
  ) {
    return _gst_device_monitor_start(
      monitor,
    );
  }

  late final _gst_device_monitor_startPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDeviceMonitor>)>>(
      'gst_device_monitor_start');
  late final _gst_device_monitor_start = _gst_device_monitor_startPtr
      .asFunction<int Function(ffi.Pointer<GstDeviceMonitor>)>();

  void gst_device_monitor_stop(
    ffi.Pointer<GstDeviceMonitor> monitor,
  ) {
    return _gst_device_monitor_stop(
      monitor,
    );
  }

  late final _gst_device_monitor_stopPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstDeviceMonitor>)>>(
      'gst_device_monitor_stop');
  late final _gst_device_monitor_stop = _gst_device_monitor_stopPtr
      .asFunction<void Function(ffi.Pointer<GstDeviceMonitor>)>();

  int gst_device_monitor_add_filter(
    ffi.Pointer<GstDeviceMonitor> monitor,
    ffi.Pointer<ffi.Char> classes,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_device_monitor_add_filter(
      monitor,
      classes,
      caps,
    );
  }

  late final _gst_device_monitor_add_filterPtr = _lookup<
      ffi.NativeFunction<
          guint Function(ffi.Pointer<GstDeviceMonitor>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>)>>('gst_device_monitor_add_filter');
  late final _gst_device_monitor_add_filter =
      _gst_device_monitor_add_filterPtr.asFunction<
          int Function(ffi.Pointer<GstDeviceMonitor>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>)>();

  int gst_device_monitor_remove_filter(
    ffi.Pointer<GstDeviceMonitor> monitor,
    int filter_id,
  ) {
    return _gst_device_monitor_remove_filter(
      monitor,
      filter_id,
    );
  }

  late final _gst_device_monitor_remove_filterPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstDeviceMonitor>,
              guint)>>('gst_device_monitor_remove_filter');
  late final _gst_device_monitor_remove_filter =
      _gst_device_monitor_remove_filterPtr
          .asFunction<int Function(ffi.Pointer<GstDeviceMonitor>, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_device_monitor_get_providers(
    ffi.Pointer<GstDeviceMonitor> monitor,
  ) {
    return _gst_device_monitor_get_providers(
      monitor,
    );
  }

  late final _gst_device_monitor_get_providersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstDeviceMonitor>)>>(
      'gst_device_monitor_get_providers');
  late final _gst_device_monitor_get_providers =
      _gst_device_monitor_get_providersPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstDeviceMonitor>)>();

  void gst_device_monitor_set_show_all_devices(
    ffi.Pointer<GstDeviceMonitor> monitor,
    int show_all,
  ) {
    return _gst_device_monitor_set_show_all_devices(
      monitor,
      show_all,
    );
  }

  late final _gst_device_monitor_set_show_all_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDeviceMonitor>,
              gboolean)>>('gst_device_monitor_set_show_all_devices');
  late final _gst_device_monitor_set_show_all_devices =
      _gst_device_monitor_set_show_all_devicesPtr
          .asFunction<void Function(ffi.Pointer<GstDeviceMonitor>, int)>();

  int gst_device_monitor_get_show_all_devices(
    ffi.Pointer<GstDeviceMonitor> monitor,
  ) {
    return _gst_device_monitor_get_show_all_devices(
      monitor,
    );
  }

  late final _gst_device_monitor_get_show_all_devicesPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstDeviceMonitor>)>>(
      'gst_device_monitor_get_show_all_devices');
  late final _gst_device_monitor_get_show_all_devices =
      _gst_device_monitor_get_show_all_devicesPtr
          .asFunction<int Function(ffi.Pointer<GstDeviceMonitor>)>();

  int gst_dynamic_type_factory_get_type() {
    return _gst_dynamic_type_factory_get_type();
  }

  late final _gst_dynamic_type_factory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_dynamic_type_factory_get_type');
  late final _gst_dynamic_type_factory_get_type =
      _gst_dynamic_type_factory_get_typePtr.asFunction<int Function()>();

  int gst_dynamic_type_factory_load(
    ffi.Pointer<ffi.Char> factoryname,
  ) {
    return _gst_dynamic_type_factory_load(
      factoryname,
    );
  }

  late final _gst_dynamic_type_factory_loadPtr =
      _lookup<ffi.NativeFunction<GType Function(ffi.Pointer<ffi.Char>)>>(
          'gst_dynamic_type_factory_load');
  late final _gst_dynamic_type_factory_load = _gst_dynamic_type_factory_loadPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gst_dynamic_type_register(
    ffi.Pointer<GstPlugin> plugin,
    int type,
  ) {
    return _gst_dynamic_type_register(
      plugin,
      type,
    );
  }

  late final _gst_dynamic_type_registerPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPlugin>, GType)>>(
      'gst_dynamic_type_register');
  late final _gst_dynamic_type_register = _gst_dynamic_type_registerPtr
      .asFunction<int Function(ffi.Pointer<GstPlugin>, int)>();

  ffi.Pointer<ffi.Char> gst_error_get_message(
    int domain,
    int code,
  ) {
    return _gst_error_get_message(
      domain,
      code,
    );
  }

  late final _gst_error_get_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(GQuark, gint)>>(
          'gst_error_get_message');
  late final _gst_error_get_message = _gst_error_get_messagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  /// gst_stream_error_quark: (attributes doc.skip=true)
  int gst_stream_error_quark() {
    return _gst_stream_error_quark();
  }

  late final _gst_stream_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('gst_stream_error_quark');
  late final _gst_stream_error_quark =
      _gst_stream_error_quarkPtr.asFunction<int Function()>();

  /// gst_core_error_quark: (attributes doc.skip=true)
  int gst_core_error_quark() {
    return _gst_core_error_quark();
  }

  late final _gst_core_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('gst_core_error_quark');
  late final _gst_core_error_quark =
      _gst_core_error_quarkPtr.asFunction<int Function()>();

  /// gst_resource_error_quark: (attributes doc.skip=true)
  int gst_resource_error_quark() {
    return _gst_resource_error_quark();
  }

  late final _gst_resource_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'gst_resource_error_quark');
  late final _gst_resource_error_quark =
      _gst_resource_error_quarkPtr.asFunction<int Function()>();

  /// gst_library_error_quark: (attributes doc.skip=true)
  int gst_library_error_quark() {
    return _gst_library_error_quark();
  }

  late final _gst_library_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('gst_library_error_quark');
  late final _gst_library_error_quark =
      _gst_library_error_quarkPtr.asFunction<int Function()>();

  int gst_proxy_pad_get_type() {
    return _gst_proxy_pad_get_type();
  }

  late final _gst_proxy_pad_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_proxy_pad_get_type');
  late final _gst_proxy_pad_get_type =
      _gst_proxy_pad_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstProxyPad> gst_proxy_pad_get_internal(
    ffi.Pointer<GstProxyPad> pad,
  ) {
    return _gst_proxy_pad_get_internal(
      pad,
    );
  }

  late final _gst_proxy_pad_get_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstProxyPad> Function(
              ffi.Pointer<GstProxyPad>)>>('gst_proxy_pad_get_internal');
  late final _gst_proxy_pad_get_internal =
      _gst_proxy_pad_get_internalPtr.asFunction<
          ffi.Pointer<GstProxyPad> Function(ffi.Pointer<GstProxyPad>)>();

  ffi.Pointer<GstIterator1> gst_proxy_pad_iterate_internal_links_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
  ) {
    return _gst_proxy_pad_iterate_internal_links_default(
      pad,
      parent,
    );
  }

  late final _gst_proxy_pad_iterate_internal_links_defaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstIterator1> Function(
                  ffi.Pointer<GstPad>, ffi.Pointer<GstObject>)>>(
      'gst_proxy_pad_iterate_internal_links_default');
  late final _gst_proxy_pad_iterate_internal_links_default =
      _gst_proxy_pad_iterate_internal_links_defaultPtr.asFunction<
          ffi.Pointer<GstIterator1> Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstObject>)>();

  int gst_proxy_pad_chain_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstBuffer> buffer,
  ) {
    return _gst_proxy_pad_chain_default(
      pad,
      parent,
      buffer,
    );
  }

  late final _gst_proxy_pad_chain_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Pointer<GstBuffer>)>>('gst_proxy_pad_chain_default');
  late final _gst_proxy_pad_chain_default =
      _gst_proxy_pad_chain_defaultPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Pointer<GstBuffer>)>();

  int gst_proxy_pad_chain_list_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstBufferList> list,
  ) {
    return _gst_proxy_pad_chain_list_default(
      pad,
      parent,
      list,
    );
  }

  late final _gst_proxy_pad_chain_list_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Pointer<GstBufferList>)>>('gst_proxy_pad_chain_list_default');
  late final _gst_proxy_pad_chain_list_default =
      _gst_proxy_pad_chain_list_defaultPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Pointer<GstBufferList>)>();

  int gst_proxy_pad_getrange_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    int offset,
    int size,
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
  ) {
    return _gst_proxy_pad_getrange_default(
      pad,
      parent,
      offset,
      size,
      buffer,
    );
  }

  late final _gst_proxy_pad_getrange_defaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
                  guint64, guint, ffi.Pointer<ffi.Pointer<GstBuffer>>)>>(
      'gst_proxy_pad_getrange_default');
  late final _gst_proxy_pad_getrange_default =
      _gst_proxy_pad_getrange_defaultPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>, int, int,
              ffi.Pointer<ffi.Pointer<GstBuffer>>)>();

  int gst_ghost_pad_get_type() {
    return _gst_ghost_pad_get_type();
  }

  late final _gst_ghost_pad_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_ghost_pad_get_type');
  late final _gst_ghost_pad_get_type =
      _gst_ghost_pad_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstPad> gst_ghost_pad_new(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GstPad> target,
  ) {
    return _gst_ghost_pad_new(
      name,
      target,
    );
  }

  late final _gst_ghost_pad_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstPad>)>>('gst_ghost_pad_new');
  late final _gst_ghost_pad_new = _gst_ghost_pad_newPtr.asFunction<
      ffi.Pointer<GstPad> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstPad> gst_ghost_pad_new_no_target(
    ffi.Pointer<ffi.Char> name,
    int dir,
  ) {
    return _gst_ghost_pad_new_no_target(
      name,
      dir,
    );
  }

  late final _gst_ghost_pad_new_no_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('gst_ghost_pad_new_no_target');
  late final _gst_ghost_pad_new_no_target = _gst_ghost_pad_new_no_targetPtr
      .asFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GstPad> gst_ghost_pad_new_from_template(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GstPad> target,
    ffi.Pointer<GstPadTemplate> templ,
  ) {
    return _gst_ghost_pad_new_from_template(
      name,
      target,
      templ,
    );
  }

  late final _gst_ghost_pad_new_from_templatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstPad>,
              ffi.Pointer<GstPadTemplate>)>>('gst_ghost_pad_new_from_template');
  late final _gst_ghost_pad_new_from_template =
      _gst_ghost_pad_new_from_templatePtr.asFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstPad>, ffi.Pointer<GstPadTemplate>)>();

  ffi.Pointer<GstPad> gst_ghost_pad_new_no_target_from_template(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GstPadTemplate> templ,
  ) {
    return _gst_ghost_pad_new_no_target_from_template(
      name,
      templ,
    );
  }

  late final _gst_ghost_pad_new_no_target_from_templatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstPad> Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<GstPadTemplate>)>>(
      'gst_ghost_pad_new_no_target_from_template');
  late final _gst_ghost_pad_new_no_target_from_template =
      _gst_ghost_pad_new_no_target_from_templatePtr.asFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<GstPadTemplate>)>();

  ffi.Pointer<GstPad> gst_ghost_pad_get_target(
    ffi.Pointer<GstGhostPad> gpad,
  ) {
    return _gst_ghost_pad_get_target(
      gpad,
    );
  }

  late final _gst_ghost_pad_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstGhostPad>)>>('gst_ghost_pad_get_target');
  late final _gst_ghost_pad_get_target = _gst_ghost_pad_get_targetPtr
      .asFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<GstGhostPad>)>();

  int gst_ghost_pad_set_target(
    ffi.Pointer<GstGhostPad> gpad,
    ffi.Pointer<GstPad> newtarget,
  ) {
    return _gst_ghost_pad_set_target(
      gpad,
      newtarget,
    );
  }

  late final _gst_ghost_pad_set_targetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstGhostPad>,
              ffi.Pointer<GstPad>)>>('gst_ghost_pad_set_target');
  late final _gst_ghost_pad_set_target =
      _gst_ghost_pad_set_targetPtr.asFunction<
          int Function(ffi.Pointer<GstGhostPad>, ffi.Pointer<GstPad>)>();

  int gst_ghost_pad_construct(
    ffi.Pointer<GstGhostPad> gpad,
  ) {
    return _gst_ghost_pad_construct(
      gpad,
    );
  }

  late final _gst_ghost_pad_constructPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstGhostPad>)>>(
          'gst_ghost_pad_construct');
  late final _gst_ghost_pad_construct = _gst_ghost_pad_constructPtr
      .asFunction<int Function(ffi.Pointer<GstGhostPad>)>();

  int gst_ghost_pad_activate_mode_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    int mode,
    int active,
  ) {
    return _gst_ghost_pad_activate_mode_default(
      pad,
      parent,
      mode,
      active,
    );
  }

  late final _gst_ghost_pad_activate_mode_defaultPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Pointer<GstObject>,
              ffi.Int32, gboolean)>>('gst_ghost_pad_activate_mode_default');
  late final _gst_ghost_pad_activate_mode_default =
      _gst_ghost_pad_activate_mode_defaultPtr.asFunction<
          int Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstObject>, int, int)>();

  int gst_ghost_pad_internal_activate_mode_default(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstObject> parent,
    int mode,
    int active,
  ) {
    return _gst_ghost_pad_internal_activate_mode_default(
      pad,
      parent,
      mode,
      active,
    );
  }

  late final _gst_ghost_pad_internal_activate_mode_defaultPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPad>,
              ffi.Pointer<GstObject>,
              ffi.Int32,
              gboolean)>>('gst_ghost_pad_internal_activate_mode_default');
  late final _gst_ghost_pad_internal_activate_mode_default =
      _gst_ghost_pad_internal_activate_mode_defaultPtr.asFunction<
          int Function(
              ffi.Pointer<GstPad>, ffi.Pointer<GstObject>, int, int)>();

  void gst_debug_log(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_debug_log(
      category,
      level,
      file,
      function,
      line,
      object,
      format,
    );
  }

  late final _gst_debug_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>>('gst_debug_log');
  late final _gst_debug_log = _gst_debug_logPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<GObject>,
          ffi.Pointer<ffi.Char>)>();

  void gst_debug_log_valist(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gst_debug_log_valist(
      category,
      level,
      file,
      function,
      line,
      object,
      format,
      args,
    );
  }

  late final _gst_debug_log_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_debug_log_valist');
  late final _gst_debug_log_valist = _gst_debug_log_valistPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<GObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void gst_debug_log_literal(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> message_string,
  ) {
    return _gst_debug_log_literal(
      category,
      level,
      file,
      function,
      line,
      object,
      message_string,
    );
  }

  late final _gst_debug_log_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>)>>('gst_debug_log_literal');
  late final _gst_debug_log_literal = _gst_debug_log_literalPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<GObject>,
          ffi.Pointer<ffi.Char>)>();

  void gst_debug_log_id(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<ffi.Char> id,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_debug_log_id(
      category,
      level,
      file,
      function,
      line,
      id,
      format,
    );
  }

  late final _gst_debug_log_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_debug_log_id');
  late final _gst_debug_log_id = _gst_debug_log_idPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void gst_debug_log_id_valist(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<ffi.Char> id,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gst_debug_log_id_valist(
      category,
      level,
      file,
      function,
      line,
      id,
      format,
      args,
    );
  }

  late final _gst_debug_log_id_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_debug_log_id_valist');
  late final _gst_debug_log_id_valist = _gst_debug_log_id_valistPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void gst_debug_log_id_literal(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<ffi.Char> id,
    ffi.Pointer<ffi.Char> message_string,
  ) {
    return _gst_debug_log_id_literal(
      category,
      level,
      file,
      function,
      line,
      id,
      message_string,
    );
  }

  late final _gst_debug_log_id_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_debug_log_id_literal');
  late final _gst_debug_log_id_literal =
      _gst_debug_log_id_literalPtr.asFunction<
          void Function(
              ffi.Pointer<GstDebugCategory>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstDebugCategory> _gst_debug_category_new(
    ffi.Pointer<ffi.Char> name,
    int color,
    ffi.Pointer<ffi.Char> description,
  ) {
    return __gst_debug_category_new(
      name,
      color,
      description,
    );
  }

  late final __gst_debug_category_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDebugCategory> Function(ffi.Pointer<ffi.Char>, guint,
              ffi.Pointer<ffi.Char>)>>('_gst_debug_category_new');
  late final __gst_debug_category_new = __gst_debug_category_newPtr.asFunction<
      ffi.Pointer<GstDebugCategory> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstDebugCategory> _gst_debug_get_category(
    ffi.Pointer<ffi.Char> name,
  ) {
    return __gst_debug_get_category(
      name,
    );
  }

  late final __gst_debug_get_categoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstDebugCategory> Function(
              ffi.Pointer<ffi.Char>)>>('_gst_debug_get_category');
  late final __gst_debug_get_category = __gst_debug_get_categoryPtr.asFunction<
      ffi.Pointer<GstDebugCategory> Function(ffi.Pointer<ffi.Char>)>();

  void _gst_debug_dump_mem(
    ffi.Pointer<GstDebugCategory> cat,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> func,
    int line,
    ffi.Pointer<GObject> obj,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<guint8> data,
    int length,
  ) {
    return __gst_debug_dump_mem(
      cat,
      file,
      func,
      line,
      obj,
      msg,
      data,
      length,
    );
  }

  late final __gst_debug_dump_memPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<GObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint8>,
              guint)>>('_gst_debug_dump_mem');
  late final __gst_debug_dump_mem = __gst_debug_dump_memPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<GObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<guint8>,
          int)>();

  void _gst_debug_dump_mem_id(
    ffi.Pointer<GstDebugCategory> cat,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> func,
    int line,
    ffi.Pointer<ffi.Char> object_id,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<guint8> data,
    int length,
  ) {
    return __gst_debug_dump_mem_id(
      cat,
      file,
      func,
      line,
      object_id,
      msg,
      data,
      length,
    );
  }

  late final __gst_debug_dump_mem_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<guint8>,
              guint)>>('_gst_debug_dump_mem_id');
  late final __gst_debug_dump_mem_id = __gst_debug_dump_mem_idPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<guint8>,
          int)>();

  void _gst_debug_register_funcptr(
    GstDebugFuncPtr func,
    ffi.Pointer<ffi.Char> ptrname,
  ) {
    return __gst_debug_register_funcptr(
      func,
      ptrname,
    );
  }

  late final __gst_debug_register_funcptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GstDebugFuncPtr,
              ffi.Pointer<ffi.Char>)>>('_gst_debug_register_funcptr');
  late final __gst_debug_register_funcptr = __gst_debug_register_funcptrPtr
      .asFunction<void Function(GstDebugFuncPtr, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> _gst_debug_nameof_funcptr(
    GstDebugFuncPtr func,
  ) {
    return __gst_debug_nameof_funcptr(
      func,
    );
  }

  late final __gst_debug_nameof_funcptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(GstDebugFuncPtr)>>(
      '_gst_debug_nameof_funcptr');
  late final __gst_debug_nameof_funcptr = __gst_debug_nameof_funcptrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(GstDebugFuncPtr)>();

  ffi.Pointer<ffi.Char> gst_debug_message_get(
    ffi.Pointer<GstDebugMessage> message,
  ) {
    return _gst_debug_message_get(
      message,
    );
  }

  late final _gst_debug_message_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDebugMessage>)>>('gst_debug_message_get');
  late final _gst_debug_message_get = _gst_debug_message_getPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDebugMessage>)>();

  ffi.Pointer<ffi.Char> gst_debug_message_get_id(
    ffi.Pointer<GstDebugMessage> message,
  ) {
    return _gst_debug_message_get_id(
      message,
    );
  }

  late final _gst_debug_message_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDebugMessage>)>>('gst_debug_message_get_id');
  late final _gst_debug_message_get_id =
      _gst_debug_message_get_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDebugMessage>)>();

  ffi.Pointer<ffi.Char> gst_debug_log_get_line(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<GstDebugMessage> message,
  ) {
    return _gst_debug_log_get_line(
      category,
      level,
      file,
      function,
      line,
      object,
      message,
    );
  }

  late final _gst_debug_log_get_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<GObject>,
              ffi.Pointer<GstDebugMessage>)>>('gst_debug_log_get_line');
  late final _gst_debug_log_get_line = _gst_debug_log_get_linePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<GObject>,
          ffi.Pointer<GstDebugMessage>)>();

  void gst_debug_log_default(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    int line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<GstDebugMessage> message,
    ffi.Pointer user_data,
  ) {
    return _gst_debug_log_default(
      category,
      level,
      file,
      function,
      line,
      object,
      message,
      user_data,
    );
  }

  late final _gst_debug_log_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstDebugCategory>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              ffi.Pointer<GObject>,
              ffi.Pointer<GstDebugMessage>,
              ffi.Pointer)>>('gst_debug_log_default');
  late final _gst_debug_log_default = _gst_debug_log_defaultPtr.asFunction<
      void Function(
          ffi.Pointer<GstDebugCategory>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<GObject>,
          ffi.Pointer<GstDebugMessage>,
          ffi.Pointer)>();

  ffi.Pointer<ffi.Char> gst_debug_level_get_name(
    int level,
  ) {
    return _gst_debug_level_get_name(
      level,
    );
  }

  late final _gst_debug_level_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_debug_level_get_name');
  late final _gst_debug_level_get_name = _gst_debug_level_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void gst_debug_add_log_function(
    GstLogFunction func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_debug_add_log_function(
      func,
      user_data,
      notify,
    );
  }

  late final _gst_debug_add_log_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(GstLogFunction, ffi.Pointer,
              GDestroyNotify)>>('gst_debug_add_log_function');
  late final _gst_debug_add_log_function = _gst_debug_add_log_functionPtr
      .asFunction<void Function(GstLogFunction, ffi.Pointer, GDestroyNotify)>();

  int gst_debug_remove_log_function(
    GstLogFunction func,
  ) {
    return _gst_debug_remove_log_function(
      func,
    );
  }

  late final _gst_debug_remove_log_functionPtr =
      _lookup<ffi.NativeFunction<guint Function(GstLogFunction)>>(
          'gst_debug_remove_log_function');
  late final _gst_debug_remove_log_function = _gst_debug_remove_log_functionPtr
      .asFunction<int Function(GstLogFunction)>();

  int gst_debug_remove_log_function_by_data(
    ffi.Pointer data,
  ) {
    return _gst_debug_remove_log_function_by_data(
      data,
    );
  }

  late final _gst_debug_remove_log_function_by_dataPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer)>>(
          'gst_debug_remove_log_function_by_data');
  late final _gst_debug_remove_log_function_by_data =
      _gst_debug_remove_log_function_by_dataPtr
          .asFunction<int Function(ffi.Pointer)>();

  void gst_debug_set_active(
    int active,
  ) {
    return _gst_debug_set_active(
      active,
    );
  }

  late final _gst_debug_set_activePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'gst_debug_set_active');
  late final _gst_debug_set_active =
      _gst_debug_set_activePtr.asFunction<void Function(int)>();

  int gst_debug_is_active() {
    return _gst_debug_is_active();
  }

  late final _gst_debug_is_activePtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('gst_debug_is_active');
  late final _gst_debug_is_active =
      _gst_debug_is_activePtr.asFunction<int Function()>();

  void gst_debug_set_colored(
    int colored,
  ) {
    return _gst_debug_set_colored(
      colored,
    );
  }

  late final _gst_debug_set_coloredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'gst_debug_set_colored');
  late final _gst_debug_set_colored =
      _gst_debug_set_coloredPtr.asFunction<void Function(int)>();

  void gst_debug_set_color_mode(
    int mode,
  ) {
    return _gst_debug_set_color_mode(
      mode,
    );
  }

  late final _gst_debug_set_color_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'gst_debug_set_color_mode');
  late final _gst_debug_set_color_mode =
      _gst_debug_set_color_modePtr.asFunction<void Function(int)>();

  void gst_debug_set_color_mode_from_string(
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _gst_debug_set_color_mode_from_string(
      mode,
    );
  }

  late final _gst_debug_set_color_mode_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gst_debug_set_color_mode_from_string');
  late final _gst_debug_set_color_mode_from_string =
      _gst_debug_set_color_mode_from_stringPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int gst_debug_is_colored() {
    return _gst_debug_is_colored();
  }

  late final _gst_debug_is_coloredPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('gst_debug_is_colored');
  late final _gst_debug_is_colored =
      _gst_debug_is_coloredPtr.asFunction<int Function()>();

  int gst_debug_get_color_mode() {
    return _gst_debug_get_color_mode();
  }

  late final _gst_debug_get_color_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'gst_debug_get_color_mode');
  late final _gst_debug_get_color_mode =
      _gst_debug_get_color_modePtr.asFunction<int Function()>();

  void gst_debug_set_default_threshold(
    int level,
  ) {
    return _gst_debug_set_default_threshold(
      level,
    );
  }

  late final _gst_debug_set_default_thresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'gst_debug_set_default_threshold');
  late final _gst_debug_set_default_threshold =
      _gst_debug_set_default_thresholdPtr.asFunction<void Function(int)>();

  int gst_debug_get_default_threshold() {
    return _gst_debug_get_default_threshold();
  }

  late final _gst_debug_get_default_thresholdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'gst_debug_get_default_threshold');
  late final _gst_debug_get_default_threshold =
      _gst_debug_get_default_thresholdPtr.asFunction<int Function()>();

  void gst_debug_set_threshold_for_name(
    ffi.Pointer<ffi.Char> name,
    int level,
  ) {
    return _gst_debug_set_threshold_for_name(
      name,
      level,
    );
  }

  late final _gst_debug_set_threshold_for_namePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32)>>(
      'gst_debug_set_threshold_for_name');
  late final _gst_debug_set_threshold_for_name =
      _gst_debug_set_threshold_for_namePtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void gst_debug_set_threshold_from_string(
    ffi.Pointer<ffi.Char> list,
    int reset,
  ) {
    return _gst_debug_set_threshold_from_string(
      list,
      reset,
    );
  }

  late final _gst_debug_set_threshold_from_stringPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, gboolean)>>(
      'gst_debug_set_threshold_from_string');
  late final _gst_debug_set_threshold_from_string =
      _gst_debug_set_threshold_from_stringPtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void gst_debug_unset_threshold_for_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_debug_unset_threshold_for_name(
      name,
    );
  }

  late final _gst_debug_unset_threshold_for_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gst_debug_unset_threshold_for_name');
  late final _gst_debug_unset_threshold_for_name =
      _gst_debug_unset_threshold_for_namePtr
          .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void gst_debug_category_free(
    ffi.Pointer<GstDebugCategory> category,
  ) {
    return _gst_debug_category_free(
      category,
    );
  }

  late final _gst_debug_category_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstDebugCategory>)>>(
      'gst_debug_category_free');
  late final _gst_debug_category_free = _gst_debug_category_freePtr
      .asFunction<void Function(ffi.Pointer<GstDebugCategory>)>();

  void gst_debug_category_set_threshold(
    ffi.Pointer<GstDebugCategory> category,
    int level,
  ) {
    return _gst_debug_category_set_threshold(
      category,
      level,
    );
  }

  late final _gst_debug_category_set_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDebugCategory>,
              ffi.Int32)>>('gst_debug_category_set_threshold');
  late final _gst_debug_category_set_threshold =
      _gst_debug_category_set_thresholdPtr
          .asFunction<void Function(ffi.Pointer<GstDebugCategory>, int)>();

  void gst_debug_category_reset_threshold(
    ffi.Pointer<GstDebugCategory> category,
  ) {
    return _gst_debug_category_reset_threshold(
      category,
    );
  }

  late final _gst_debug_category_reset_thresholdPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstDebugCategory>)>>(
      'gst_debug_category_reset_threshold');
  late final _gst_debug_category_reset_threshold =
      _gst_debug_category_reset_thresholdPtr
          .asFunction<void Function(ffi.Pointer<GstDebugCategory>)>();

  int gst_debug_category_get_threshold(
    ffi.Pointer<GstDebugCategory> category,
  ) {
    return _gst_debug_category_get_threshold(
      category,
    );
  }

  late final _gst_debug_category_get_thresholdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GstDebugCategory>)>>(
      'gst_debug_category_get_threshold');
  late final _gst_debug_category_get_threshold =
      _gst_debug_category_get_thresholdPtr
          .asFunction<int Function(ffi.Pointer<GstDebugCategory>)>();

  ffi.Pointer<ffi.Char> gst_debug_category_get_name(
    ffi.Pointer<GstDebugCategory> category,
  ) {
    return _gst_debug_category_get_name(
      category,
    );
  }

  late final _gst_debug_category_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstDebugCategory>)>>('gst_debug_category_get_name');
  late final _gst_debug_category_get_name =
      _gst_debug_category_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDebugCategory>)>();

  int gst_debug_category_get_color(
    ffi.Pointer<GstDebugCategory> category,
  ) {
    return _gst_debug_category_get_color(
      category,
    );
  }

  late final _gst_debug_category_get_colorPtr = _lookup<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstDebugCategory>)>>(
      'gst_debug_category_get_color');
  late final _gst_debug_category_get_color = _gst_debug_category_get_colorPtr
      .asFunction<int Function(ffi.Pointer<GstDebugCategory>)>();

  ffi.Pointer<ffi.Char> gst_debug_category_get_description(
    ffi.Pointer<GstDebugCategory> category,
  ) {
    return _gst_debug_category_get_description(
      category,
    );
  }

  late final _gst_debug_category_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDebugCategory>)>>(
      'gst_debug_category_get_description');
  late final _gst_debug_category_get_description =
      _gst_debug_category_get_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstDebugCategory>)>();

  ffi.Pointer<GSList> gst_debug_get_all_categories() {
    return _gst_debug_get_all_categories();
  }

  late final _gst_debug_get_all_categoriesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GSList> Function()>>(
          'gst_debug_get_all_categories');
  late final _gst_debug_get_all_categories = _gst_debug_get_all_categoriesPtr
      .asFunction<ffi.Pointer<GSList> Function()>();

  ffi.Pointer<ffi.Char> gst_debug_construct_term_color(
    int colorinfo,
  ) {
    return _gst_debug_construct_term_color(
      colorinfo,
    );
  }

  late final _gst_debug_construct_term_colorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(guint)>>(
          'gst_debug_construct_term_color');
  late final _gst_debug_construct_term_color =
      _gst_debug_construct_term_colorPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_debug_construct_win_color(
    int colorinfo,
  ) {
    return _gst_debug_construct_win_color(
      colorinfo,
    );
  }

  late final _gst_debug_construct_win_colorPtr =
      _lookup<ffi.NativeFunction<gint Function(guint)>>(
          'gst_debug_construct_win_color');
  late final _gst_debug_construct_win_color =
      _gst_debug_construct_win_colorPtr.asFunction<int Function(int)>();

  int gst_info_vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> result,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gst_info_vasprintf(
      result,
      format,
      args,
    );
  }

  late final _gst_info_vasprintfPtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_info_vasprintf');
  late final _gst_info_vasprintf = _gst_info_vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> gst_info_strdup_vprintf(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gst_info_strdup_vprintf(
      format,
      args,
    );
  }

  late final _gst_info_strdup_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_info_strdup_vprintf');
  late final _gst_info_strdup_vprintf = _gst_info_strdup_vprintfPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> gst_info_strdup_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_info_strdup_printf(
      format,
    );
  }

  late final _gst_info_strdup_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('gst_info_strdup_printf');
  late final _gst_info_strdup_printf = _gst_info_strdup_printfPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void gst_print(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_print(
      format,
    );
  }

  late final _gst_printPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gst_print');
  late final _gst_print =
      _gst_printPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void gst_println(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_println(
      format,
    );
  }

  late final _gst_printlnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gst_println');
  late final _gst_println =
      _gst_printlnPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void gst_printerr(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_printerr(
      format,
    );
  }

  late final _gst_printerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gst_printerr');
  late final _gst_printerr =
      _gst_printerrPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void gst_printerrln(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_printerrln(
      format,
    );
  }

  late final _gst_printerrlnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'gst_printerrln');
  late final _gst_printerrln =
      _gst_printerrlnPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// GST_CAT_DEFAULT:
  ///
  /// Default gstreamer core debug log category. Please define your own.
  late final ffi.Pointer<ffi.Pointer<GstDebugCategory>> _GST_CAT_DEFAULT =
      _lookup<ffi.Pointer<GstDebugCategory>>('GST_CAT_DEFAULT');

  ffi.Pointer<GstDebugCategory> get GST_CAT_DEFAULT => _GST_CAT_DEFAULT.value;

  set GST_CAT_DEFAULT(ffi.Pointer<GstDebugCategory> value) =>
      _GST_CAT_DEFAULT.value = value;

  late final ffi.Pointer<gboolean> __gst_debug_enabled =
      _lookup<gboolean>('_gst_debug_enabled');

  int get _gst_debug_enabled => __gst_debug_enabled.value;

  set _gst_debug_enabled(int value) => __gst_debug_enabled.value = value;

  late final ffi.Pointer<ffi.Int32> __gst_debug_min =
      _lookup<ffi.Int32>('_gst_debug_min');

  int get _gst_debug_min => __gst_debug_min.value;

  set _gst_debug_min(int value) => __gst_debug_min.value = value;

  void gst_debug_print_stack_trace() {
    return _gst_debug_print_stack_trace();
  }

  late final _gst_debug_print_stack_tracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'gst_debug_print_stack_trace');
  late final _gst_debug_print_stack_trace =
      _gst_debug_print_stack_tracePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> gst_debug_get_stack_trace(
    int flags,
  ) {
    return _gst_debug_get_stack_trace(
      flags,
    );
  }

  late final _gst_debug_get_stack_tracePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_debug_get_stack_trace');
  late final _gst_debug_get_stack_trace = _gst_debug_get_stack_tracePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void gst_debug_add_ring_buffer_logger(
    int max_size_per_thread,
    int thread_timeout,
  ) {
    return _gst_debug_add_ring_buffer_logger(
      max_size_per_thread,
      thread_timeout,
    );
  }

  late final _gst_debug_add_ring_buffer_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(guint, guint)>>(
          'gst_debug_add_ring_buffer_logger');
  late final _gst_debug_add_ring_buffer_logger =
      _gst_debug_add_ring_buffer_loggerPtr
          .asFunction<void Function(int, int)>();

  void gst_debug_remove_ring_buffer_logger() {
    return _gst_debug_remove_ring_buffer_logger();
  }

  late final _gst_debug_remove_ring_buffer_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'gst_debug_remove_ring_buffer_logger');
  late final _gst_debug_remove_ring_buffer_logger =
      _gst_debug_remove_ring_buffer_loggerPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_debug_ring_buffer_logger_get_logs() {
    return _gst_debug_ring_buffer_logger_get_logs();
  }

  late final _gst_debug_ring_buffer_logger_get_logsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      'gst_debug_ring_buffer_logger_get_logs');
  late final _gst_debug_ring_buffer_logger_get_logs =
      _gst_debug_ring_buffer_logger_get_logsPtr
          .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  late final ffi.Pointer<GType> __gst_int_range_type =
      _lookup<GType>('_gst_int_range_type');

  int get _gst_int_range_type => __gst_int_range_type.value;

  set _gst_int_range_type(int value) => __gst_int_range_type.value = value;

  late final ffi.Pointer<GType> __gst_int64_range_type =
      _lookup<GType>('_gst_int64_range_type');

  int get _gst_int64_range_type => __gst_int64_range_type.value;

  set _gst_int64_range_type(int value) => __gst_int64_range_type.value = value;

  late final ffi.Pointer<GType> __gst_double_range_type =
      _lookup<GType>('_gst_double_range_type');

  int get _gst_double_range_type => __gst_double_range_type.value;

  set _gst_double_range_type(int value) =>
      __gst_double_range_type.value = value;

  late final ffi.Pointer<GType> __gst_fraction_range_type =
      _lookup<GType>('_gst_fraction_range_type');

  int get _gst_fraction_range_type => __gst_fraction_range_type.value;

  set _gst_fraction_range_type(int value) =>
      __gst_fraction_range_type.value = value;

  late final ffi.Pointer<GType> __gst_value_list_type =
      _lookup<GType>('_gst_value_list_type');

  int get _gst_value_list_type => __gst_value_list_type.value;

  set _gst_value_list_type(int value) => __gst_value_list_type.value = value;

  late final ffi.Pointer<GType> __gst_value_array_type =
      _lookup<GType>('_gst_value_array_type');

  int get _gst_value_array_type => __gst_value_array_type.value;

  set _gst_value_array_type(int value) => __gst_value_array_type.value = value;

  late final ffi.Pointer<GType> __gst_fraction_type =
      _lookup<GType>('_gst_fraction_type');

  int get _gst_fraction_type => __gst_fraction_type.value;

  set _gst_fraction_type(int value) => __gst_fraction_type.value = value;

  late final ffi.Pointer<GType> __gst_bitmask_type =
      _lookup<GType>('_gst_bitmask_type');

  int get _gst_bitmask_type => __gst_bitmask_type.value;

  set _gst_bitmask_type(int value) => __gst_bitmask_type.value = value;

  late final ffi.Pointer<GType> __gst_flagset_type =
      _lookup<GType>('_gst_flagset_type');

  int get _gst_flagset_type => __gst_flagset_type.value;

  set _gst_flagset_type(int value) => __gst_flagset_type.value = value;

  int gst_int_range_get_type() {
    return _gst_int_range_get_type();
  }

  late final _gst_int_range_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_int_range_get_type');
  late final _gst_int_range_get_type =
      _gst_int_range_get_typePtr.asFunction<int Function()>();

  int gst_int64_range_get_type() {
    return _gst_int64_range_get_type();
  }

  late final _gst_int64_range_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_int64_range_get_type');
  late final _gst_int64_range_get_type =
      _gst_int64_range_get_typePtr.asFunction<int Function()>();

  int gst_double_range_get_type() {
    return _gst_double_range_get_type();
  }

  late final _gst_double_range_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_double_range_get_type');
  late final _gst_double_range_get_type =
      _gst_double_range_get_typePtr.asFunction<int Function()>();

  int gst_fraction_range_get_type() {
    return _gst_fraction_range_get_type();
  }

  late final _gst_fraction_range_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_fraction_range_get_type');
  late final _gst_fraction_range_get_type =
      _gst_fraction_range_get_typePtr.asFunction<int Function()>();

  int gst_fraction_get_type() {
    return _gst_fraction_get_type();
  }

  late final _gst_fraction_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_fraction_get_type');
  late final _gst_fraction_get_type =
      _gst_fraction_get_typePtr.asFunction<int Function()>();

  int gst_value_list_get_type() {
    return _gst_value_list_get_type();
  }

  late final _gst_value_list_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_value_list_get_type');
  late final _gst_value_list_get_type =
      _gst_value_list_get_typePtr.asFunction<int Function()>();

  int gst_value_array_get_type() {
    return _gst_value_array_get_type();
  }

  late final _gst_value_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_value_array_get_type');
  late final _gst_value_array_get_type =
      _gst_value_array_get_typePtr.asFunction<int Function()>();

  int gst_bitmask_get_type() {
    return _gst_bitmask_get_type();
  }

  late final _gst_bitmask_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_bitmask_get_type');
  late final _gst_bitmask_get_type =
      _gst_bitmask_get_typePtr.asFunction<int Function()>();

  int gst_flagset_get_type() {
    return _gst_flagset_get_type();
  }

  late final _gst_flagset_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_flagset_get_type');
  late final _gst_flagset_get_type =
      _gst_flagset_get_typePtr.asFunction<int Function()>();

  int gst_g_thread_get_type() {
    return _gst_g_thread_get_type();
  }

  late final _gst_g_thread_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_g_thread_get_type');
  late final _gst_g_thread_get_type =
      _gst_g_thread_get_typePtr.asFunction<int Function()>();

  void gst_value_register(
    ffi.Pointer<GstValueTable> table,
  ) {
    return _gst_value_register(
      table,
    );
  }

  late final _gst_value_registerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstValueTable>)>>(
      'gst_value_register');
  late final _gst_value_register = _gst_value_registerPtr
      .asFunction<void Function(ffi.Pointer<GstValueTable>)>();

  void gst_value_init_and_copy(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> src,
  ) {
    return _gst_value_init_and_copy(
      dest,
      src,
    );
  }

  late final _gst_value_init_and_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_init_and_copy');
  late final _gst_value_init_and_copy = _gst_value_init_and_copyPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  ffi.Pointer<ffi.Char> gst_value_serialize(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_serialize(
      value,
    );
  }

  late final _gst_value_serializePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>>(
      'gst_value_serialize');
  late final _gst_value_serialize = _gst_value_serializePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GValue>)>();

  int gst_value_deserialize(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _gst_value_deserialize(
      dest,
      src,
    );
  }

  late final _gst_value_deserializePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('gst_value_deserialize');
  late final _gst_value_deserialize = _gst_value_deserializePtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  int gst_value_deserialize_with_pspec(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<ffi.Char> src,
    ffi.Pointer<GParamSpec> pspec,
  ) {
    return _gst_value_deserialize_with_pspec(
      dest,
      src,
      pspec,
    );
  }

  late final _gst_value_deserialize_with_pspecPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GParamSpec>)>>('gst_value_deserialize_with_pspec');
  late final _gst_value_deserialize_with_pspec =
      _gst_value_deserialize_with_pspecPtr.asFunction<
          int Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GParamSpec>)>();

  void gst_value_list_append_value(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> append_value,
  ) {
    return _gst_value_list_append_value(
      value,
      append_value,
    );
  }

  late final _gst_value_list_append_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_list_append_value');
  late final _gst_value_list_append_value = _gst_value_list_append_valuePtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_list_append_and_take_value(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> append_value,
  ) {
    return _gst_value_list_append_and_take_value(
      value,
      append_value,
    );
  }

  late final _gst_value_list_append_and_take_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_list_append_and_take_value');
  late final _gst_value_list_append_and_take_value =
      _gst_value_list_append_and_take_valuePtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_list_prepend_value(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> prepend_value,
  ) {
    return _gst_value_list_prepend_value(
      value,
      prepend_value,
    );
  }

  late final _gst_value_list_prepend_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_list_prepend_value');
  late final _gst_value_list_prepend_value = _gst_value_list_prepend_valuePtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_list_concat(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_list_concat(
      dest,
      value1,
      value2,
    );
  }

  late final _gst_value_list_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_list_concat');
  late final _gst_value_list_concat = _gst_value_list_concatPtr.asFunction<
      void Function(
          ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_list_merge(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_list_merge(
      dest,
      value1,
      value2,
    );
  }

  late final _gst_value_list_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_list_merge');
  late final _gst_value_list_merge = _gst_value_list_mergePtr.asFunction<
      void Function(
          ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_list_get_size(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_list_get_size(
      value,
    );
  }

  late final _gst_value_list_get_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'gst_value_list_get_size');
  late final _gst_value_list_get_size = _gst_value_list_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> gst_value_list_get_value(
    ffi.Pointer<GValue> value,
    int index,
  ) {
    return _gst_value_list_get_value(
      value,
      index,
    );
  }

  late final _gst_value_list_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, guint)>>('gst_value_list_get_value');
  late final _gst_value_list_get_value = _gst_value_list_get_valuePtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  ffi.Pointer<GValue> gst_value_list_init(
    ffi.Pointer<GValue> value,
    int prealloc,
  ) {
    return _gst_value_list_init(
      value,
      prealloc,
    );
  }

  late final _gst_value_list_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, guint)>>('gst_value_list_init');
  late final _gst_value_list_init = _gst_value_list_initPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  void gst_value_array_append_value(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> append_value,
  ) {
    return _gst_value_array_append_value(
      value,
      append_value,
    );
  }

  late final _gst_value_array_append_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_array_append_value');
  late final _gst_value_array_append_value = _gst_value_array_append_valuePtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_array_append_and_take_value(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> append_value,
  ) {
    return _gst_value_array_append_and_take_value(
      value,
      append_value,
    );
  }

  late final _gst_value_array_append_and_take_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_array_append_and_take_value');
  late final _gst_value_array_append_and_take_value =
      _gst_value_array_append_and_take_valuePtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_array_prepend_value(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> prepend_value,
  ) {
    return _gst_value_array_prepend_value(
      value,
      prepend_value,
    );
  }

  late final _gst_value_array_prepend_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_array_prepend_value');
  late final _gst_value_array_prepend_value = _gst_value_array_prepend_valuePtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_array_get_size(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_array_get_size(
      value,
    );
  }

  late final _gst_value_array_get_sizePtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'gst_value_array_get_size');
  late final _gst_value_array_get_size = _gst_value_array_get_sizePtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> gst_value_array_get_value(
    ffi.Pointer<GValue> value,
    int index,
  ) {
    return _gst_value_array_get_value(
      value,
      index,
    );
  }

  late final _gst_value_array_get_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, guint)>>('gst_value_array_get_value');
  late final _gst_value_array_get_value = _gst_value_array_get_valuePtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  ffi.Pointer<GValue> gst_value_array_init(
    ffi.Pointer<GValue> value,
    int prealloc,
  ) {
    return _gst_value_array_init(
      value,
      prealloc,
    );
  }

  late final _gst_value_array_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(
              ffi.Pointer<GValue>, guint)>>('gst_value_array_init');
  late final _gst_value_array_init = _gst_value_array_initPtr
      .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>, int)>();

  void gst_value_set_int_range(
    ffi.Pointer<GValue> value,
    int start,
    int end,
  ) {
    return _gst_value_set_int_range(
      value,
      start,
      end,
    );
  }

  late final _gst_value_set_int_rangePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint, gint)>>(
      'gst_value_set_int_range');
  late final _gst_value_set_int_range = _gst_value_set_int_rangePtr
      .asFunction<void Function(ffi.Pointer<GValue>, int, int)>();

  void gst_value_set_int_range_step(
    ffi.Pointer<GValue> value,
    int start,
    int end,
    int step,
  ) {
    return _gst_value_set_int_range_step(
      value,
      start,
      end,
      step,
    );
  }

  late final _gst_value_set_int_range_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, gint, gint,
              gint)>>('gst_value_set_int_range_step');
  late final _gst_value_set_int_range_step = _gst_value_set_int_range_stepPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int, int, int)>();

  int gst_value_get_int_range_min(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_int_range_min(
      value,
    );
  }

  late final _gst_value_get_int_range_minPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_int_range_min');
  late final _gst_value_get_int_range_min = _gst_value_get_int_range_minPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_get_int_range_max(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_int_range_max(
      value,
    );
  }

  late final _gst_value_get_int_range_maxPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_int_range_max');
  late final _gst_value_get_int_range_max = _gst_value_get_int_range_maxPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_get_int_range_step(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_int_range_step(
      value,
    );
  }

  late final _gst_value_get_int_range_stepPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_int_range_step');
  late final _gst_value_get_int_range_step = _gst_value_get_int_range_stepPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  void gst_value_set_int64_range(
    ffi.Pointer<GValue> value,
    int start,
    int end,
  ) {
    return _gst_value_set_int64_range(
      value,
      start,
      end,
    );
  }

  late final _gst_value_set_int64_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, gint64,
              gint64)>>('gst_value_set_int64_range');
  late final _gst_value_set_int64_range = _gst_value_set_int64_rangePtr
      .asFunction<void Function(ffi.Pointer<GValue>, int, int)>();

  void gst_value_set_int64_range_step(
    ffi.Pointer<GValue> value,
    int start,
    int end,
    int step,
  ) {
    return _gst_value_set_int64_range_step(
      value,
      start,
      end,
      step,
    );
  }

  late final _gst_value_set_int64_range_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, gint64, gint64,
              gint64)>>('gst_value_set_int64_range_step');
  late final _gst_value_set_int64_range_step =
      _gst_value_set_int64_range_stepPtr
          .asFunction<void Function(ffi.Pointer<GValue>, int, int, int)>();

  int gst_value_get_int64_range_min(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_int64_range_min(
      value,
    );
  }

  late final _gst_value_get_int64_range_minPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_int64_range_min');
  late final _gst_value_get_int64_range_min = _gst_value_get_int64_range_minPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_get_int64_range_max(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_int64_range_max(
      value,
    );
  }

  late final _gst_value_get_int64_range_maxPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_int64_range_max');
  late final _gst_value_get_int64_range_max = _gst_value_get_int64_range_maxPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_get_int64_range_step(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_int64_range_step(
      value,
    );
  }

  late final _gst_value_get_int64_range_stepPtr =
      _lookup<ffi.NativeFunction<gint64 Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_int64_range_step');
  late final _gst_value_get_int64_range_step =
      _gst_value_get_int64_range_stepPtr
          .asFunction<int Function(ffi.Pointer<GValue>)>();

  void gst_value_set_double_range(
    ffi.Pointer<GValue> value,
    double start,
    double end,
  ) {
    return _gst_value_set_double_range(
      value,
      start,
      end,
    );
  }

  late final _gst_value_set_double_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, gdouble,
              gdouble)>>('gst_value_set_double_range');
  late final _gst_value_set_double_range = _gst_value_set_double_rangePtr
      .asFunction<void Function(ffi.Pointer<GValue>, double, double)>();

  double gst_value_get_double_range_min(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_double_range_min(
      value,
    );
  }

  late final _gst_value_get_double_range_minPtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_double_range_min');
  late final _gst_value_get_double_range_min =
      _gst_value_get_double_range_minPtr
          .asFunction<double Function(ffi.Pointer<GValue>)>();

  double gst_value_get_double_range_max(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_double_range_max(
      value,
    );
  }

  late final _gst_value_get_double_range_maxPtr =
      _lookup<ffi.NativeFunction<gdouble Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_double_range_max');
  late final _gst_value_get_double_range_max =
      _gst_value_get_double_range_maxPtr
          .asFunction<double Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GstCaps> gst_value_get_caps(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_caps(
      value,
    );
  }

  late final _gst_value_get_capsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GValue>)>>(
      'gst_value_get_caps');
  late final _gst_value_get_caps = _gst_value_get_capsPtr
      .asFunction<ffi.Pointer<GstCaps> Function(ffi.Pointer<GValue>)>();

  void gst_value_set_caps(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_value_set_caps(
      value,
      caps,
    );
  }

  late final _gst_value_set_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GstCaps>)>>('gst_value_set_caps');
  late final _gst_value_set_caps = _gst_value_set_capsPtr
      .asFunction<void Function(ffi.Pointer<GValue>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstStructure> gst_value_get_structure(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_structure(
      value,
    );
  }

  late final _gst_value_get_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GValue>)>>('gst_value_get_structure');
  late final _gst_value_get_structure = _gst_value_get_structurePtr
      .asFunction<ffi.Pointer<GstStructure> Function(ffi.Pointer<GValue>)>();

  void gst_value_set_structure(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GstStructure> structure,
  ) {
    return _gst_value_set_structure(
      value,
      structure,
    );
  }

  late final _gst_value_set_structurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GstStructure>)>>('gst_value_set_structure');
  late final _gst_value_set_structure = _gst_value_set_structurePtr.asFunction<
      void Function(ffi.Pointer<GValue>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<GstCapsFeatures> gst_value_get_caps_features(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_caps_features(
      value,
    );
  }

  late final _gst_value_get_caps_featuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCapsFeatures> Function(
              ffi.Pointer<GValue>)>>('gst_value_get_caps_features');
  late final _gst_value_get_caps_features = _gst_value_get_caps_featuresPtr
      .asFunction<ffi.Pointer<GstCapsFeatures> Function(ffi.Pointer<GValue>)>();

  void gst_value_set_caps_features(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GstCapsFeatures> features,
  ) {
    return _gst_value_set_caps_features(
      value,
      features,
    );
  }

  late final _gst_value_set_caps_featuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<GstCapsFeatures>)>>('gst_value_set_caps_features');
  late final _gst_value_set_caps_features =
      _gst_value_set_caps_featuresPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<GstCapsFeatures>)>();

  void gst_value_set_fraction(
    ffi.Pointer<GValue> value,
    int numerator,
    int denominator,
  ) {
    return _gst_value_set_fraction(
      value,
      numerator,
      denominator,
    );
  }

  late final _gst_value_set_fractionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, gint, gint)>>(
      'gst_value_set_fraction');
  late final _gst_value_set_fraction = _gst_value_set_fractionPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int, int)>();

  int gst_value_get_fraction_numerator(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_fraction_numerator(
      value,
    );
  }

  late final _gst_value_get_fraction_numeratorPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_fraction_numerator');
  late final _gst_value_get_fraction_numerator =
      _gst_value_get_fraction_numeratorPtr
          .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_get_fraction_denominator(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_fraction_denominator(
      value,
    );
  }

  late final _gst_value_get_fraction_denominatorPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_fraction_denominator');
  late final _gst_value_get_fraction_denominator =
      _gst_value_get_fraction_denominatorPtr
          .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_fraction_multiply(
    ffi.Pointer<GValue> product,
    ffi.Pointer<GValue> factor1,
    ffi.Pointer<GValue> factor2,
  ) {
    return _gst_value_fraction_multiply(
      product,
      factor1,
      factor2,
    );
  }

  late final _gst_value_fraction_multiplyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_fraction_multiply');
  late final _gst_value_fraction_multiply =
      _gst_value_fraction_multiplyPtr.asFunction<
          int Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_fraction_subtract(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> minuend,
    ffi.Pointer<GValue> subtrahend,
  ) {
    return _gst_value_fraction_subtract(
      dest,
      minuend,
      subtrahend,
    );
  }

  late final _gst_value_fraction_subtractPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_fraction_subtract');
  late final _gst_value_fraction_subtract =
      _gst_value_fraction_subtractPtr.asFunction<
          int Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_set_fraction_range(
    ffi.Pointer<GValue> value,
    ffi.Pointer<GValue> start,
    ffi.Pointer<GValue> end,
  ) {
    return _gst_value_set_fraction_range(
      value,
      start,
      end,
    );
  }

  late final _gst_value_set_fraction_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_set_fraction_range');
  late final _gst_value_set_fraction_range =
      _gst_value_set_fraction_rangePtr.asFunction<
          void Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  void gst_value_set_fraction_range_full(
    ffi.Pointer<GValue> value,
    int numerator_start,
    int denominator_start,
    int numerator_end,
    int denominator_end,
  ) {
    return _gst_value_set_fraction_range_full(
      value,
      numerator_start,
      denominator_start,
      numerator_end,
      denominator_end,
    );
  }

  late final _gst_value_set_fraction_range_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>, gint, gint, gint,
              gint)>>('gst_value_set_fraction_range_full');
  late final _gst_value_set_fraction_range_full =
      _gst_value_set_fraction_range_fullPtr
          .asFunction<void Function(ffi.Pointer<GValue>, int, int, int, int)>();

  ffi.Pointer<GValue> gst_value_get_fraction_range_min(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_fraction_range_min(
      value,
    );
  }

  late final _gst_value_get_fraction_range_minPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>>(
      'gst_value_get_fraction_range_min');
  late final _gst_value_get_fraction_range_min =
      _gst_value_get_fraction_range_minPtr
          .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>();

  ffi.Pointer<GValue> gst_value_get_fraction_range_max(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_fraction_range_max(
      value,
    );
  }

  late final _gst_value_get_fraction_range_maxPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>>(
      'gst_value_get_fraction_range_max');
  late final _gst_value_get_fraction_range_max =
      _gst_value_get_fraction_range_maxPtr
          .asFunction<ffi.Pointer<GValue> Function(ffi.Pointer<GValue>)>();

  int gst_value_get_bitmask(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_bitmask(
      value,
    );
  }

  late final _gst_value_get_bitmaskPtr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_bitmask');
  late final _gst_value_get_bitmask =
      _gst_value_get_bitmaskPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  void gst_value_set_bitmask(
    ffi.Pointer<GValue> value,
    int bitmask,
  ) {
    return _gst_value_set_bitmask(
      value,
      bitmask,
    );
  }

  late final _gst_value_set_bitmaskPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GValue>, guint64)>>(
      'gst_value_set_bitmask');
  late final _gst_value_set_bitmask = _gst_value_set_bitmaskPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int)>();

  void gst_value_set_flagset(
    ffi.Pointer<GValue> value,
    int flags,
    int mask,
  ) {
    return _gst_value_set_flagset(
      value,
      flags,
      mask,
    );
  }

  late final _gst_value_set_flagsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GValue>, guint, guint)>>('gst_value_set_flagset');
  late final _gst_value_set_flagset = _gst_value_set_flagsetPtr
      .asFunction<void Function(ffi.Pointer<GValue>, int, int)>();

  int gst_value_get_flagset_flags(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_flagset_flags(
      value,
    );
  }

  late final _gst_value_get_flagset_flagsPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_flagset_flags');
  late final _gst_value_get_flagset_flags = _gst_value_get_flagset_flagsPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_get_flagset_mask(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_get_flagset_mask(
      value,
    );
  }

  late final _gst_value_get_flagset_maskPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<GValue>)>>(
          'gst_value_get_flagset_mask');
  late final _gst_value_get_flagset_mask = _gst_value_get_flagset_maskPtr
      .asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_compare(
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_compare(
      value1,
      value2,
    );
  }

  late final _gst_value_comparePtr = _lookup<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('gst_value_compare');
  late final _gst_value_compare = _gst_value_comparePtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_can_compare(
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_can_compare(
      value1,
      value2,
    );
  }

  late final _gst_value_can_comparePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_can_compare');
  late final _gst_value_can_compare = _gst_value_can_comparePtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_is_subset(
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_is_subset(
      value1,
      value2,
    );
  }

  late final _gst_value_is_subsetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_is_subset');
  late final _gst_value_is_subset = _gst_value_is_subsetPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_union(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_union(
      dest,
      value1,
      value2,
    );
  }

  late final _gst_value_unionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_union');
  late final _gst_value_union = _gst_value_unionPtr.asFunction<
      int Function(
          ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_can_union(
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_can_union(
      value1,
      value2,
    );
  }

  late final _gst_value_can_unionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_can_union');
  late final _gst_value_can_union = _gst_value_can_unionPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_intersect(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_intersect(
      dest,
      value1,
      value2,
    );
  }

  late final _gst_value_intersectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_intersect');
  late final _gst_value_intersect = _gst_value_intersectPtr.asFunction<
      int Function(
          ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_can_intersect(
    ffi.Pointer<GValue> value1,
    ffi.Pointer<GValue> value2,
  ) {
    return _gst_value_can_intersect(
      value1,
      value2,
    );
  }

  late final _gst_value_can_intersectPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_can_intersect');
  late final _gst_value_can_intersect = _gst_value_can_intersectPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_subtract(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> minuend,
    ffi.Pointer<GValue> subtrahend,
  ) {
    return _gst_value_subtract(
      dest,
      minuend,
      subtrahend,
    );
  }

  late final _gst_value_subtractPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_subtract');
  late final _gst_value_subtract = _gst_value_subtractPtr.asFunction<
      int Function(
          ffi.Pointer<GValue>, ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_can_subtract(
    ffi.Pointer<GValue> minuend,
    ffi.Pointer<GValue> subtrahend,
  ) {
    return _gst_value_can_subtract(
      minuend,
      subtrahend,
    );
  }

  late final _gst_value_can_subtractPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GValue>,
              ffi.Pointer<GValue>)>>('gst_value_can_subtract');
  late final _gst_value_can_subtract = _gst_value_can_subtractPtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_value_is_fixed(
    ffi.Pointer<GValue> value,
  ) {
    return _gst_value_is_fixed(
      value,
    );
  }

  late final _gst_value_is_fixedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GValue>)>>(
          'gst_value_is_fixed');
  late final _gst_value_is_fixed =
      _gst_value_is_fixedPtr.asFunction<int Function(ffi.Pointer<GValue>)>();

  int gst_value_fixate(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<GValue> src,
  ) {
    return _gst_value_fixate(
      dest,
      src,
    );
  }

  late final _gst_value_fixatePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GValue>, ffi.Pointer<GValue>)>>('gst_value_fixate');
  late final _gst_value_fixate = _gst_value_fixatePtr
      .asFunction<int Function(ffi.Pointer<GValue>, ffi.Pointer<GValue>)>();

  int gst_flagset_register(
    int flags_type,
  ) {
    return _gst_flagset_register(
      flags_type,
    );
  }

  late final _gst_flagset_registerPtr =
      _lookup<ffi.NativeFunction<GType Function(GType)>>(
          'gst_flagset_register');
  late final _gst_flagset_register =
      _gst_flagset_registerPtr.asFunction<int Function(int)>();

  int gst_param_spec_fraction_get_type() {
    return _gst_param_spec_fraction_get_type();
  }

  late final _gst_param_spec_fraction_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_param_spec_fraction_get_type');
  late final _gst_param_spec_fraction_get_type =
      _gst_param_spec_fraction_get_typePtr.asFunction<int Function()>();

  int gst_param_spec_array_get_type() {
    return _gst_param_spec_array_get_type();
  }

  late final _gst_param_spec_array_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_param_spec_array_get_type');
  late final _gst_param_spec_array_get_type =
      _gst_param_spec_array_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GParamSpec> gst_param_spec_fraction(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    int min_num,
    int min_denom,
    int max_num,
    int max_denom,
    int default_num,
    int default_denom,
    int flags,
  ) {
    return _gst_param_spec_fraction(
      name,
      nick,
      blurb,
      min_num,
      min_denom,
      max_num,
      max_denom,
      default_num,
      default_denom,
      flags,
    );
  }

  late final _gst_param_spec_fractionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gint,
              gint,
              gint,
              gint,
              gint,
              gint,
              ffi.Int32)>>('gst_param_spec_fraction');
  late final _gst_param_spec_fraction = _gst_param_spec_fractionPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<GParamSpec> gst_param_spec_array(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> nick,
    ffi.Pointer<ffi.Char> blurb,
    ffi.Pointer<GParamSpec> element_spec,
    int flags,
  ) {
    return _gst_param_spec_array(
      name,
      nick,
      blurb,
      element_spec,
      flags,
    );
  }

  late final _gst_param_spec_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GParamSpec> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GParamSpec>,
              ffi.Int32)>>('gst_param_spec_array');
  late final _gst_param_spec_array = _gst_param_spec_arrayPtr.asFunction<
      ffi.Pointer<GParamSpec> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GParamSpec>,
          int)>();

  int gst_pipeline_get_type() {
    return _gst_pipeline_get_type();
  }

  late final _gst_pipeline_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_pipeline_get_type');
  late final _gst_pipeline_get_type =
      _gst_pipeline_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstElement> gst_pipeline_new(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_pipeline_new(
      name,
    );
  }

  late final _gst_pipeline_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>)>>('gst_pipeline_new');
  late final _gst_pipeline_new = _gst_pipeline_newPtr
      .asFunction<ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstBus> gst_pipeline_get_bus(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_bus(
      pipeline,
    );
  }

  late final _gst_pipeline_get_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstBus> Function(
              ffi.Pointer<GstPipeline>)>>('gst_pipeline_get_bus');
  late final _gst_pipeline_get_bus = _gst_pipeline_get_busPtr
      .asFunction<ffi.Pointer<GstBus> Function(ffi.Pointer<GstPipeline>)>();

  void gst_pipeline_use_clock(
    ffi.Pointer<GstPipeline> pipeline,
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_pipeline_use_clock(
      pipeline,
      clock,
    );
  }

  late final _gst_pipeline_use_clockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPipeline>,
              ffi.Pointer<GstClock>)>>('gst_pipeline_use_clock');
  late final _gst_pipeline_use_clock = _gst_pipeline_use_clockPtr.asFunction<
      void Function(ffi.Pointer<GstPipeline>, ffi.Pointer<GstClock>)>();

  int gst_pipeline_set_clock(
    ffi.Pointer<GstPipeline> pipeline,
    ffi.Pointer<GstClock> clock,
  ) {
    return _gst_pipeline_set_clock(
      pipeline,
      clock,
    );
  }

  late final _gst_pipeline_set_clockPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPipeline>,
              ffi.Pointer<GstClock>)>>('gst_pipeline_set_clock');
  late final _gst_pipeline_set_clock = _gst_pipeline_set_clockPtr.asFunction<
      int Function(ffi.Pointer<GstPipeline>, ffi.Pointer<GstClock>)>();

  ffi.Pointer<GstClock> gst_pipeline_get_clock(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_clock(
      pipeline,
    );
  }

  late final _gst_pipeline_get_clockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstClock> Function(
              ffi.Pointer<GstPipeline>)>>('gst_pipeline_get_clock');
  late final _gst_pipeline_get_clock = _gst_pipeline_get_clockPtr
      .asFunction<ffi.Pointer<GstClock> Function(ffi.Pointer<GstPipeline>)>();

  ffi.Pointer<GstClock> gst_pipeline_get_pipeline_clock(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_pipeline_clock(
      pipeline,
    );
  }

  late final _gst_pipeline_get_pipeline_clockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstClock> Function(
              ffi.Pointer<GstPipeline>)>>('gst_pipeline_get_pipeline_clock');
  late final _gst_pipeline_get_pipeline_clock =
      _gst_pipeline_get_pipeline_clockPtr.asFunction<
          ffi.Pointer<GstClock> Function(ffi.Pointer<GstPipeline>)>();

  void gst_pipeline_auto_clock(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_auto_clock(
      pipeline,
    );
  }

  late final _gst_pipeline_auto_clockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPipeline>)>>(
          'gst_pipeline_auto_clock');
  late final _gst_pipeline_auto_clock = _gst_pipeline_auto_clockPtr
      .asFunction<void Function(ffi.Pointer<GstPipeline>)>();

  void gst_pipeline_set_delay(
    ffi.Pointer<GstPipeline> pipeline,
    int delay,
  ) {
    return _gst_pipeline_set_delay(
      pipeline,
      delay,
    );
  }

  late final _gst_pipeline_set_delayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPipeline>,
              GstClockTime)>>('gst_pipeline_set_delay');
  late final _gst_pipeline_set_delay = _gst_pipeline_set_delayPtr
      .asFunction<void Function(ffi.Pointer<GstPipeline>, int)>();

  int gst_pipeline_get_delay(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_delay(
      pipeline,
    );
  }

  late final _gst_pipeline_get_delayPtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstPipeline>)>>(
      'gst_pipeline_get_delay');
  late final _gst_pipeline_get_delay = _gst_pipeline_get_delayPtr
      .asFunction<int Function(ffi.Pointer<GstPipeline>)>();

  void gst_pipeline_set_latency(
    ffi.Pointer<GstPipeline> pipeline,
    int latency,
  ) {
    return _gst_pipeline_set_latency(
      pipeline,
      latency,
    );
  }

  late final _gst_pipeline_set_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPipeline>,
              GstClockTime)>>('gst_pipeline_set_latency');
  late final _gst_pipeline_set_latency = _gst_pipeline_set_latencyPtr
      .asFunction<void Function(ffi.Pointer<GstPipeline>, int)>();

  int gst_pipeline_get_latency(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_latency(
      pipeline,
    );
  }

  late final _gst_pipeline_get_latencyPtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstPipeline>)>>(
      'gst_pipeline_get_latency');
  late final _gst_pipeline_get_latency = _gst_pipeline_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<GstPipeline>)>();

  void gst_pipeline_set_auto_flush_bus(
    ffi.Pointer<GstPipeline> pipeline,
    int auto_flush,
  ) {
    return _gst_pipeline_set_auto_flush_bus(
      pipeline,
      auto_flush,
    );
  }

  late final _gst_pipeline_set_auto_flush_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPipeline>,
              gboolean)>>('gst_pipeline_set_auto_flush_bus');
  late final _gst_pipeline_set_auto_flush_bus =
      _gst_pipeline_set_auto_flush_busPtr
          .asFunction<void Function(ffi.Pointer<GstPipeline>, int)>();

  int gst_pipeline_get_auto_flush_bus(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_auto_flush_bus(
      pipeline,
    );
  }

  late final _gst_pipeline_get_auto_flush_busPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPipeline>)>>(
          'gst_pipeline_get_auto_flush_bus');
  late final _gst_pipeline_get_auto_flush_bus =
      _gst_pipeline_get_auto_flush_busPtr
          .asFunction<int Function(ffi.Pointer<GstPipeline>)>();

  int gst_pipeline_is_live(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_is_live(
      pipeline,
    );
  }

  late final _gst_pipeline_is_livePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPipeline>)>>(
          'gst_pipeline_is_live');
  late final _gst_pipeline_is_live = _gst_pipeline_is_livePtr
      .asFunction<int Function(ffi.Pointer<GstPipeline>)>();

  int gst_pipeline_get_configured_latency(
    ffi.Pointer<GstPipeline> pipeline,
  ) {
    return _gst_pipeline_get_configured_latency(
      pipeline,
    );
  }

  late final _gst_pipeline_get_configured_latencyPtr = _lookup<
          ffi.NativeFunction<GstClockTime Function(ffi.Pointer<GstPipeline>)>>(
      'gst_pipeline_get_configured_latency');
  late final _gst_pipeline_get_configured_latency =
      _gst_pipeline_get_configured_latencyPtr
          .asFunction<int Function(ffi.Pointer<GstPipeline>)>();

  ffi.Pointer<GstPoll> gst_poll_new(
    int controllable,
  ) {
    return _gst_poll_new(
      controllable,
    );
  }

  late final _gst_poll_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstPoll> Function(gboolean)>>(
          'gst_poll_new');
  late final _gst_poll_new =
      _gst_poll_newPtr.asFunction<ffi.Pointer<GstPoll> Function(int)>();

  ffi.Pointer<GstPoll> gst_poll_new_timer() {
    return _gst_poll_new_timer();
  }

  late final _gst_poll_new_timerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstPoll> Function()>>(
          'gst_poll_new_timer');
  late final _gst_poll_new_timer =
      _gst_poll_new_timerPtr.asFunction<ffi.Pointer<GstPoll> Function()>();

  void gst_poll_free(
    ffi.Pointer<GstPoll> set1,
  ) {
    return _gst_poll_free(
      set1,
    );
  }

  late final _gst_poll_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPoll>)>>(
          'gst_poll_free');
  late final _gst_poll_free =
      _gst_poll_freePtr.asFunction<void Function(ffi.Pointer<GstPoll>)>();

  void gst_poll_get_read_gpollfd(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GPollFD> fd,
  ) {
    return _gst_poll_get_read_gpollfd(
      set1,
      fd,
    );
  }

  late final _gst_poll_get_read_gpollfdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GPollFD>)>>('gst_poll_get_read_gpollfd');
  late final _gst_poll_get_read_gpollfd = _gst_poll_get_read_gpollfdPtr
      .asFunction<void Function(ffi.Pointer<GstPoll>, ffi.Pointer<GPollFD>)>();

  void gst_poll_fd_init(
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_init(
      fd,
    );
  }

  late final _gst_poll_fd_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPollFD>)>>(
          'gst_poll_fd_init');
  late final _gst_poll_fd_init =
      _gst_poll_fd_initPtr.asFunction<void Function(ffi.Pointer<GstPollFD>)>();

  int gst_poll_add_fd(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_add_fd(
      set1,
      fd,
    );
  }

  late final _gst_poll_add_fdPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_add_fd');
  late final _gst_poll_add_fd = _gst_poll_add_fdPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_remove_fd(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_remove_fd(
      set1,
      fd,
    );
  }

  late final _gst_poll_remove_fdPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_remove_fd');
  late final _gst_poll_remove_fd = _gst_poll_remove_fdPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_fd_ctl_write(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
    int active,
  ) {
    return _gst_poll_fd_ctl_write(
      set1,
      fd,
      active,
    );
  }

  late final _gst_poll_fd_ctl_writePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>,
              gboolean)>>('gst_poll_fd_ctl_write');
  late final _gst_poll_fd_ctl_write = _gst_poll_fd_ctl_writePtr.asFunction<
      int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>, int)>();

  int gst_poll_fd_ctl_read(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
    int active,
  ) {
    return _gst_poll_fd_ctl_read(
      set1,
      fd,
      active,
    );
  }

  late final _gst_poll_fd_ctl_readPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>,
              gboolean)>>('gst_poll_fd_ctl_read');
  late final _gst_poll_fd_ctl_read = _gst_poll_fd_ctl_readPtr.asFunction<
      int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>, int)>();

  int gst_poll_fd_ctl_pri(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
    int active,
  ) {
    return _gst_poll_fd_ctl_pri(
      set1,
      fd,
      active,
    );
  }

  late final _gst_poll_fd_ctl_priPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>,
              gboolean)>>('gst_poll_fd_ctl_pri');
  late final _gst_poll_fd_ctl_pri = _gst_poll_fd_ctl_priPtr.asFunction<
      int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>, int)>();

  void gst_poll_fd_ignored(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_ignored(
      set1,
      fd,
    );
  }

  late final _gst_poll_fd_ignoredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_fd_ignored');
  late final _gst_poll_fd_ignored = _gst_poll_fd_ignoredPtr.asFunction<
      void Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_fd_has_closed(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_has_closed(
      set1,
      fd,
    );
  }

  late final _gst_poll_fd_has_closedPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_fd_has_closed');
  late final _gst_poll_fd_has_closed = _gst_poll_fd_has_closedPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_fd_has_error(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_has_error(
      set1,
      fd,
    );
  }

  late final _gst_poll_fd_has_errorPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_fd_has_error');
  late final _gst_poll_fd_has_error = _gst_poll_fd_has_errorPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_fd_can_read(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_can_read(
      set1,
      fd,
    );
  }

  late final _gst_poll_fd_can_readPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_fd_can_read');
  late final _gst_poll_fd_can_read = _gst_poll_fd_can_readPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_fd_can_write(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_can_write(
      set1,
      fd,
    );
  }

  late final _gst_poll_fd_can_writePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_fd_can_write');
  late final _gst_poll_fd_can_write = _gst_poll_fd_can_writePtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_fd_has_pri(
    ffi.Pointer<GstPoll> set1,
    ffi.Pointer<GstPollFD> fd,
  ) {
    return _gst_poll_fd_has_pri(
      set1,
      fd,
    );
  }

  late final _gst_poll_fd_has_priPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPoll>,
              ffi.Pointer<GstPollFD>)>>('gst_poll_fd_has_pri');
  late final _gst_poll_fd_has_pri = _gst_poll_fd_has_priPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, ffi.Pointer<GstPollFD>)>();

  int gst_poll_wait(
    ffi.Pointer<GstPoll> set1,
    int timeout,
  ) {
    return _gst_poll_wait(
      set1,
      timeout,
    );
  }

  late final _gst_poll_waitPtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<GstPoll>, GstClockTime)>>('gst_poll_wait');
  late final _gst_poll_wait =
      _gst_poll_waitPtr.asFunction<int Function(ffi.Pointer<GstPoll>, int)>();

  int gst_poll_set_controllable(
    ffi.Pointer<GstPoll> set1,
    int controllable,
  ) {
    return _gst_poll_set_controllable(
      set1,
      controllable,
    );
  }

  late final _gst_poll_set_controllablePtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstPoll>, gboolean)>>(
      'gst_poll_set_controllable');
  late final _gst_poll_set_controllable = _gst_poll_set_controllablePtr
      .asFunction<int Function(ffi.Pointer<GstPoll>, int)>();

  void gst_poll_restart(
    ffi.Pointer<GstPoll> set1,
  ) {
    return _gst_poll_restart(
      set1,
    );
  }

  late final _gst_poll_restartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPoll>)>>(
          'gst_poll_restart');
  late final _gst_poll_restart =
      _gst_poll_restartPtr.asFunction<void Function(ffi.Pointer<GstPoll>)>();

  void gst_poll_set_flushing(
    ffi.Pointer<GstPoll> set1,
    int flushing,
  ) {
    return _gst_poll_set_flushing(
      set1,
      flushing,
    );
  }

  late final _gst_poll_set_flushingPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstPoll>, gboolean)>>(
      'gst_poll_set_flushing');
  late final _gst_poll_set_flushing = _gst_poll_set_flushingPtr
      .asFunction<void Function(ffi.Pointer<GstPoll>, int)>();

  int gst_poll_write_control(
    ffi.Pointer<GstPoll> set1,
  ) {
    return _gst_poll_write_control(
      set1,
    );
  }

  late final _gst_poll_write_controlPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPoll>)>>(
          'gst_poll_write_control');
  late final _gst_poll_write_control = _gst_poll_write_controlPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>)>();

  int gst_poll_read_control(
    ffi.Pointer<GstPoll> set1,
  ) {
    return _gst_poll_read_control(
      set1,
    );
  }

  late final _gst_poll_read_controlPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPoll>)>>(
          'gst_poll_read_control');
  late final _gst_poll_read_control = _gst_poll_read_controlPtr
      .asFunction<int Function(ffi.Pointer<GstPoll>)>();

  int gst_preset_get_type() {
    return _gst_preset_get_type();
  }

  late final _gst_preset_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_preset_get_type');
  late final _gst_preset_get_type =
      _gst_preset_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_preset_get_preset_names(
    ffi.Pointer<GstPreset> preset,
  ) {
    return _gst_preset_get_preset_names(
      preset,
    );
  }

  late final _gst_preset_get_preset_namesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPreset>)>>('gst_preset_get_preset_names');
  late final _gst_preset_get_preset_names =
      _gst_preset_get_preset_namesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPreset>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_preset_get_property_names(
    ffi.Pointer<GstPreset> preset,
  ) {
    return _gst_preset_get_property_names(
      preset,
    );
  }

  late final _gst_preset_get_property_namesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPreset>)>>('gst_preset_get_property_names');
  late final _gst_preset_get_property_names =
      _gst_preset_get_property_namesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPreset>)>();

  int gst_preset_load_preset(
    ffi.Pointer<GstPreset> preset,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_preset_load_preset(
      preset,
      name,
    );
  }

  late final _gst_preset_load_presetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPreset>,
              ffi.Pointer<ffi.Char>)>>('gst_preset_load_preset');
  late final _gst_preset_load_preset = _gst_preset_load_presetPtr.asFunction<
      int Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>)>();

  int gst_preset_save_preset(
    ffi.Pointer<GstPreset> preset,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_preset_save_preset(
      preset,
      name,
    );
  }

  late final _gst_preset_save_presetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPreset>,
              ffi.Pointer<ffi.Char>)>>('gst_preset_save_preset');
  late final _gst_preset_save_preset = _gst_preset_save_presetPtr.asFunction<
      int Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>)>();

  int gst_preset_rename_preset(
    ffi.Pointer<GstPreset> preset,
    ffi.Pointer<ffi.Char> old_name,
    ffi.Pointer<ffi.Char> new_name,
  ) {
    return _gst_preset_rename_preset(
      preset,
      old_name,
      new_name,
    );
  }

  late final _gst_preset_rename_presetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_preset_rename_preset');
  late final _gst_preset_rename_preset =
      _gst_preset_rename_presetPtr.asFunction<
          int Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int gst_preset_delete_preset(
    ffi.Pointer<GstPreset> preset,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_preset_delete_preset(
      preset,
      name,
    );
  }

  late final _gst_preset_delete_presetPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPreset>,
              ffi.Pointer<ffi.Char>)>>('gst_preset_delete_preset');
  late final _gst_preset_delete_preset =
      _gst_preset_delete_presetPtr.asFunction<
          int Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>)>();

  int gst_preset_set_meta(
    ffi.Pointer<GstPreset> preset,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gst_preset_set_meta(
      preset,
      name,
      tag,
      value,
    );
  }

  late final _gst_preset_set_metaPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPreset>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_preset_set_meta');
  late final _gst_preset_set_meta = _gst_preset_set_metaPtr.asFunction<
      int Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int gst_preset_get_meta(
    ffi.Pointer<GstPreset> preset,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _gst_preset_get_meta(
      preset,
      name,
      tag,
      value,
    );
  }

  late final _gst_preset_get_metaPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPreset>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('gst_preset_get_meta');
  late final _gst_preset_get_meta = _gst_preset_get_metaPtr.asFunction<
      int Function(ffi.Pointer<GstPreset>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_preset_set_app_dir(
    ffi.Pointer<ffi.Char> app_dir,
  ) {
    return _gst_preset_set_app_dir(
      app_dir,
    );
  }

  late final _gst_preset_set_app_dirPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<ffi.Char>)>>(
          'gst_preset_set_app_dir');
  late final _gst_preset_set_app_dir = _gst_preset_set_app_dirPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_preset_get_app_dir() {
    return _gst_preset_get_app_dir();
  }

  late final _gst_preset_get_app_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'gst_preset_get_app_dir');
  late final _gst_preset_get_app_dir =
      _gst_preset_get_app_dirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int gst_preset_is_editable(
    ffi.Pointer<GstPreset> preset,
  ) {
    return _gst_preset_is_editable(
      preset,
    );
  }

  late final _gst_preset_is_editablePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstPreset>)>>(
          'gst_preset_is_editable');
  late final _gst_preset_is_editable = _gst_preset_is_editablePtr
      .asFunction<int Function(ffi.Pointer<GstPreset>)>();

  /// gst_protection_meta_api_get_type: (attributes doc.skip=true)
  int gst_protection_meta_api_get_type() {
    return _gst_protection_meta_api_get_type();
  }

  late final _gst_protection_meta_api_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_protection_meta_api_get_type');
  late final _gst_protection_meta_api_get_type =
      _gst_protection_meta_api_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstMetaInfo> gst_protection_meta_get_info() {
    return _gst_protection_meta_get_info();
  }

  late final _gst_protection_meta_get_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstMetaInfo> Function()>>(
          'gst_protection_meta_get_info');
  late final _gst_protection_meta_get_info = _gst_protection_meta_get_infoPtr
      .asFunction<ffi.Pointer<GstMetaInfo> Function()>();

  ffi.Pointer<GstProtectionMeta> gst_buffer_add_protection_meta(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<GstStructure> info,
  ) {
    return _gst_buffer_add_protection_meta(
      buffer,
      info,
    );
  }

  late final _gst_buffer_add_protection_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstProtectionMeta> Function(ffi.Pointer<GstBuffer>,
              ffi.Pointer<GstStructure>)>>('gst_buffer_add_protection_meta');
  late final _gst_buffer_add_protection_meta =
      _gst_buffer_add_protection_metaPtr.asFunction<
          ffi.Pointer<GstProtectionMeta> Function(
              ffi.Pointer<GstBuffer>, ffi.Pointer<GstStructure>)>();

  ffi.Pointer<ffi.Char> gst_protection_select_system(
    ffi.Pointer<ffi.Pointer<ffi.Char>> system_identifiers,
  ) {
    return _gst_protection_select_system(
      system_identifiers,
    );
  }

  late final _gst_protection_select_systemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'gst_protection_select_system');
  late final _gst_protection_select_system =
      _gst_protection_select_systemPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>>
      gst_protection_filter_systems_by_available_decryptors(
    ffi.Pointer<ffi.Pointer<ffi.Char>> system_identifiers,
  ) {
    return _gst_protection_filter_systems_by_available_decryptors(
      system_identifiers,
    );
  }

  late final _gst_protection_filter_systems_by_available_decryptorsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                      ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
          'gst_protection_filter_systems_by_available_decryptors');
  late final _gst_protection_filter_systems_by_available_decryptors =
      _gst_protection_filter_systems_by_available_decryptorsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int gst_registry_get_type() {
    return _gst_registry_get_type();
  }

  late final _gst_registry_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_registry_get_type');
  late final _gst_registry_get_type =
      _gst_registry_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstRegistry> gst_registry_get() {
    return _gst_registry_get();
  }

  late final _gst_registry_getPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstRegistry> Function()>>(
          'gst_registry_get');
  late final _gst_registry_get =
      _gst_registry_getPtr.asFunction<ffi.Pointer<GstRegistry> Function()>();

  int gst_registry_scan_path(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _gst_registry_scan_path(
      registry,
      path,
    );
  }

  late final _gst_registry_scan_pathPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<ffi.Char>)>>('gst_registry_scan_path');
  late final _gst_registry_scan_path = _gst_registry_scan_pathPtr.asFunction<
      int Function(ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>)>();

  int gst_registry_add_plugin(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_registry_add_plugin(
      registry,
      plugin,
    );
  }

  late final _gst_registry_add_pluginPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<GstPlugin>)>>('gst_registry_add_plugin');
  late final _gst_registry_add_plugin = _gst_registry_add_pluginPtr.asFunction<
      int Function(ffi.Pointer<GstRegistry>, ffi.Pointer<GstPlugin>)>();

  void gst_registry_remove_plugin(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<GstPlugin> plugin,
  ) {
    return _gst_registry_remove_plugin(
      registry,
      plugin,
    );
  }

  late final _gst_registry_remove_pluginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<GstPlugin>)>>('gst_registry_remove_plugin');
  late final _gst_registry_remove_plugin =
      _gst_registry_remove_pluginPtr.asFunction<
          void Function(ffi.Pointer<GstRegistry>, ffi.Pointer<GstPlugin>)>();

  int gst_registry_add_feature(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<GstPluginFeature> feature,
  ) {
    return _gst_registry_add_feature(
      registry,
      feature,
    );
  }

  late final _gst_registry_add_featurePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<GstPluginFeature>)>>('gst_registry_add_feature');
  late final _gst_registry_add_feature =
      _gst_registry_add_featurePtr.asFunction<
          int Function(
              ffi.Pointer<GstRegistry>, ffi.Pointer<GstPluginFeature>)>();

  void gst_registry_remove_feature(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<GstPluginFeature> feature,
  ) {
    return _gst_registry_remove_feature(
      registry,
      feature,
    );
  }

  late final _gst_registry_remove_featurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<GstPluginFeature>)>>('gst_registry_remove_feature');
  late final _gst_registry_remove_feature =
      _gst_registry_remove_featurePtr.asFunction<
          void Function(
              ffi.Pointer<GstRegistry>, ffi.Pointer<GstPluginFeature>)>();

  ffi.Pointer<GList> gst_registry_get_plugin_list(
    ffi.Pointer<GstRegistry> registry,
  ) {
    return _gst_registry_get_plugin_list(
      registry,
    );
  }

  late final _gst_registry_get_plugin_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstRegistry>)>>('gst_registry_get_plugin_list');
  late final _gst_registry_get_plugin_list = _gst_registry_get_plugin_listPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstRegistry>)>();

  ffi.Pointer<GList> gst_registry_plugin_filter(
    ffi.Pointer<GstRegistry> registry,
    GstPluginFilter filter,
    int first,
    ffi.Pointer user_data,
  ) {
    return _gst_registry_plugin_filter(
      registry,
      filter,
      first,
      user_data,
    );
  }

  late final _gst_registry_plugin_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstRegistry>, GstPluginFilter,
              gboolean, ffi.Pointer)>>('gst_registry_plugin_filter');
  late final _gst_registry_plugin_filter =
      _gst_registry_plugin_filterPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstRegistry>, GstPluginFilter, int, ffi.Pointer)>();

  ffi.Pointer<GList> gst_registry_feature_filter(
    ffi.Pointer<GstRegistry> registry,
    GstPluginFeatureFilter filter,
    int first,
    ffi.Pointer user_data,
  ) {
    return _gst_registry_feature_filter(
      registry,
      filter,
      first,
      user_data,
    );
  }

  late final _gst_registry_feature_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstRegistry>,
              GstPluginFeatureFilter,
              gboolean,
              ffi.Pointer)>>('gst_registry_feature_filter');
  late final _gst_registry_feature_filter =
      _gst_registry_feature_filterPtr.asFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstRegistry>,
              GstPluginFeatureFilter, int, ffi.Pointer)>();

  ffi.Pointer<GList> gst_registry_get_feature_list(
    ffi.Pointer<GstRegistry> registry,
    int type,
  ) {
    return _gst_registry_get_feature_list(
      registry,
      type,
    );
  }

  late final _gst_registry_get_feature_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(ffi.Pointer<GstRegistry>,
              GType)>>('gst_registry_get_feature_list');
  late final _gst_registry_get_feature_list = _gst_registry_get_feature_listPtr
      .asFunction<ffi.Pointer<GList> Function(ffi.Pointer<GstRegistry>, int)>();

  ffi.Pointer<GList> gst_registry_get_feature_list_by_plugin(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_registry_get_feature_list_by_plugin(
      registry,
      name,
    );
  }

  late final _gst_registry_get_feature_list_by_pluginPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GList> Function(
                  ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>)>>(
      'gst_registry_get_feature_list_by_plugin');
  late final _gst_registry_get_feature_list_by_plugin =
      _gst_registry_get_feature_list_by_pluginPtr.asFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>)>();

  int gst_registry_get_feature_list_cookie(
    ffi.Pointer<GstRegistry> registry,
  ) {
    return _gst_registry_get_feature_list_cookie(
      registry,
    );
  }

  late final _gst_registry_get_feature_list_cookiePtr =
      _lookup<ffi.NativeFunction<guint32 Function(ffi.Pointer<GstRegistry>)>>(
          'gst_registry_get_feature_list_cookie');
  late final _gst_registry_get_feature_list_cookie =
      _gst_registry_get_feature_list_cookiePtr
          .asFunction<int Function(ffi.Pointer<GstRegistry>)>();

  ffi.Pointer<GstPlugin> gst_registry_find_plugin(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_registry_find_plugin(
      registry,
      name,
    );
  }

  late final _gst_registry_find_pluginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPlugin> Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<ffi.Char>)>>('gst_registry_find_plugin');
  late final _gst_registry_find_plugin =
      _gst_registry_find_pluginPtr.asFunction<
          ffi.Pointer<GstPlugin> Function(
              ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstPluginFeature> gst_registry_find_feature(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _gst_registry_find_feature(
      registry,
      name,
      type,
    );
  }

  late final _gst_registry_find_featurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPluginFeature> Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<ffi.Char>, GType)>>('gst_registry_find_feature');
  late final _gst_registry_find_feature =
      _gst_registry_find_featurePtr.asFunction<
          ffi.Pointer<GstPluginFeature> Function(
              ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GstPlugin> gst_registry_lookup(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _gst_registry_lookup(
      registry,
      filename,
    );
  }

  late final _gst_registry_lookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPlugin> Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<ffi.Char>)>>('gst_registry_lookup');
  late final _gst_registry_lookup = _gst_registry_lookupPtr.asFunction<
      ffi.Pointer<GstPlugin> Function(
          ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<GstPluginFeature> gst_registry_lookup_feature(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gst_registry_lookup_feature(
      registry,
      name,
    );
  }

  late final _gst_registry_lookup_featurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPluginFeature> Function(ffi.Pointer<GstRegistry>,
              ffi.Pointer<ffi.Char>)>>('gst_registry_lookup_feature');
  late final _gst_registry_lookup_feature =
      _gst_registry_lookup_featurePtr.asFunction<
          ffi.Pointer<GstPluginFeature> Function(
              ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>)>();

  int gst_registry_check_feature_version(
    ffi.Pointer<GstRegistry> registry,
    ffi.Pointer<ffi.Char> feature_name,
    int min_major,
    int min_minor,
    int min_micro,
  ) {
    return _gst_registry_check_feature_version(
      registry,
      feature_name,
      min_major,
      min_minor,
      min_micro,
    );
  }

  late final _gst_registry_check_feature_versionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>,
              guint, guint, guint)>>('gst_registry_check_feature_version');
  late final _gst_registry_check_feature_version =
      _gst_registry_check_feature_versionPtr.asFunction<
          int Function(ffi.Pointer<GstRegistry>, ffi.Pointer<ffi.Char>, int,
              int, int)>();

  int gst_promise_get_type() {
    return _gst_promise_get_type();
  }

  late final _gst_promise_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_promise_get_type');
  late final _gst_promise_get_type =
      _gst_promise_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstPromise> gst_promise_new() {
    return _gst_promise_new();
  }

  late final _gst_promise_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstPromise> Function()>>(
          'gst_promise_new');
  late final _gst_promise_new =
      _gst_promise_newPtr.asFunction<ffi.Pointer<GstPromise> Function()>();

  ffi.Pointer<GstPromise> gst_promise_new_with_change_func(
    GstPromiseChangeFunc func,
    ffi.Pointer user_data,
    GDestroyNotify notify,
  ) {
    return _gst_promise_new_with_change_func(
      func,
      user_data,
      notify,
    );
  }

  late final _gst_promise_new_with_change_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPromise> Function(GstPromiseChangeFunc, ffi.Pointer,
              GDestroyNotify)>>('gst_promise_new_with_change_func');
  late final _gst_promise_new_with_change_func =
      _gst_promise_new_with_change_funcPtr.asFunction<
          ffi.Pointer<GstPromise> Function(
              GstPromiseChangeFunc, ffi.Pointer, GDestroyNotify)>();

  int gst_promise_wait(
    ffi.Pointer<GstPromise> promise,
  ) {
    return _gst_promise_wait(
      promise,
    );
  }

  late final _gst_promise_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstPromise>)>>(
          'gst_promise_wait');
  late final _gst_promise_wait =
      _gst_promise_waitPtr.asFunction<int Function(ffi.Pointer<GstPromise>)>();

  void gst_promise_reply(
    ffi.Pointer<GstPromise> promise,
    ffi.Pointer<GstStructure> s,
  ) {
    return _gst_promise_reply(
      promise,
      s,
    );
  }

  late final _gst_promise_replyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstPromise>,
              ffi.Pointer<GstStructure>)>>('gst_promise_reply');
  late final _gst_promise_reply = _gst_promise_replyPtr.asFunction<
      void Function(ffi.Pointer<GstPromise>, ffi.Pointer<GstStructure>)>();

  void gst_promise_interrupt(
    ffi.Pointer<GstPromise> promise,
  ) {
    return _gst_promise_interrupt(
      promise,
    );
  }

  late final _gst_promise_interruptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPromise>)>>(
          'gst_promise_interrupt');
  late final _gst_promise_interrupt = _gst_promise_interruptPtr
      .asFunction<void Function(ffi.Pointer<GstPromise>)>();

  void gst_promise_expire(
    ffi.Pointer<GstPromise> promise,
  ) {
    return _gst_promise_expire(
      promise,
    );
  }

  late final _gst_promise_expirePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPromise>)>>(
          'gst_promise_expire');
  late final _gst_promise_expire = _gst_promise_expirePtr
      .asFunction<void Function(ffi.Pointer<GstPromise>)>();

  ffi.Pointer<GstStructure> gst_promise_get_reply(
    ffi.Pointer<GstPromise> promise,
  ) {
    return _gst_promise_get_reply(
      promise,
    );
  }

  late final _gst_promise_get_replyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStructure> Function(
              ffi.Pointer<GstPromise>)>>('gst_promise_get_reply');
  late final _gst_promise_get_reply = _gst_promise_get_replyPtr.asFunction<
      ffi.Pointer<GstStructure> Function(ffi.Pointer<GstPromise>)>();

  int gst_system_clock_get_type() {
    return _gst_system_clock_get_type();
  }

  late final _gst_system_clock_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_system_clock_get_type');
  late final _gst_system_clock_get_type =
      _gst_system_clock_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstClock> gst_system_clock_obtain() {
    return _gst_system_clock_obtain();
  }

  late final _gst_system_clock_obtainPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstClock> Function()>>(
          'gst_system_clock_obtain');
  late final _gst_system_clock_obtain = _gst_system_clock_obtainPtr
      .asFunction<ffi.Pointer<GstClock> Function()>();

  void gst_system_clock_set_default(
    ffi.Pointer<GstClock> new_clock,
  ) {
    return _gst_system_clock_set_default(
      new_clock,
    );
  }

  late final _gst_system_clock_set_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstClock>)>>(
          'gst_system_clock_set_default');
  late final _gst_system_clock_set_default = _gst_system_clock_set_defaultPtr
      .asFunction<void Function(ffi.Pointer<GstClock>)>();

  int gst_tag_setter_get_type() {
    return _gst_tag_setter_get_type();
  }

  late final _gst_tag_setter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_tag_setter_get_type');
  late final _gst_tag_setter_get_type =
      _gst_tag_setter_get_typePtr.asFunction<int Function()>();

  void gst_tag_setter_reset_tags(
    ffi.Pointer<GstTagSetter> setter,
  ) {
    return _gst_tag_setter_reset_tags(
      setter,
    );
  }

  late final _gst_tag_setter_reset_tagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstTagSetter>)>>(
          'gst_tag_setter_reset_tags');
  late final _gst_tag_setter_reset_tags = _gst_tag_setter_reset_tagsPtr
      .asFunction<void Function(ffi.Pointer<GstTagSetter>)>();

  void gst_tag_setter_merge_tags(
    ffi.Pointer<GstTagSetter> setter,
    ffi.Pointer<GstTagList> list,
    int mode,
  ) {
    return _gst_tag_setter_merge_tags(
      setter,
      list,
      mode,
    );
  }

  late final _gst_tag_setter_merge_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagSetter>, ffi.Pointer<GstTagList>,
              ffi.Int32)>>('gst_tag_setter_merge_tags');
  late final _gst_tag_setter_merge_tags =
      _gst_tag_setter_merge_tagsPtr.asFunction<
          void Function(
              ffi.Pointer<GstTagSetter>, ffi.Pointer<GstTagList>, int)>();

  void gst_tag_setter_add_tags(
    ffi.Pointer<GstTagSetter> setter,
    int mode,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_setter_add_tags(
      setter,
      mode,
      tag,
    );
  }

  late final _gst_tag_setter_add_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagSetter>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('gst_tag_setter_add_tags');
  late final _gst_tag_setter_add_tags = _gst_tag_setter_add_tagsPtr.asFunction<
      void Function(ffi.Pointer<GstTagSetter>, int, ffi.Pointer<ffi.Char>)>();

  void gst_tag_setter_add_tag_values(
    ffi.Pointer<GstTagSetter> setter,
    int mode,
    ffi.Pointer<ffi.Char> tag,
  ) {
    return _gst_tag_setter_add_tag_values(
      setter,
      mode,
      tag,
    );
  }

  late final _gst_tag_setter_add_tag_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagSetter>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('gst_tag_setter_add_tag_values');
  late final _gst_tag_setter_add_tag_values =
      _gst_tag_setter_add_tag_valuesPtr.asFunction<
          void Function(
              ffi.Pointer<GstTagSetter>, int, ffi.Pointer<ffi.Char>)>();

  void gst_tag_setter_add_tag_valist(
    ffi.Pointer<GstTagSetter> setter,
    int mode,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_tag_setter_add_tag_valist(
      setter,
      mode,
      tag,
      var_args,
    );
  }

  late final _gst_tag_setter_add_tag_valistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTagSetter>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('gst_tag_setter_add_tag_valist');
  late final _gst_tag_setter_add_tag_valist =
      _gst_tag_setter_add_tag_valistPtr.asFunction<
          void Function(ffi.Pointer<GstTagSetter>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_tag_setter_add_tag_valist_values(
    ffi.Pointer<GstTagSetter> setter,
    int mode,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_tag_setter_add_tag_valist_values(
      setter,
      mode,
      tag,
      var_args,
    );
  }

  late final _gst_tag_setter_add_tag_valist_valuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstTagSetter>, ffi.Int32,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'gst_tag_setter_add_tag_valist_values');
  late final _gst_tag_setter_add_tag_valist_values =
      _gst_tag_setter_add_tag_valist_valuesPtr.asFunction<
          void Function(ffi.Pointer<GstTagSetter>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  void gst_tag_setter_add_tag_value(
    ffi.Pointer<GstTagSetter> setter,
    int mode,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer<GValue> value,
  ) {
    return _gst_tag_setter_add_tag_value(
      setter,
      mode,
      tag,
      value,
    );
  }

  late final _gst_tag_setter_add_tag_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTagSetter>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>>('gst_tag_setter_add_tag_value');
  late final _gst_tag_setter_add_tag_value =
      _gst_tag_setter_add_tag_valuePtr.asFunction<
          void Function(ffi.Pointer<GstTagSetter>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValue>)>();

  ffi.Pointer<GstTagList> gst_tag_setter_get_tag_list(
    ffi.Pointer<GstTagSetter> setter,
  ) {
    return _gst_tag_setter_get_tag_list(
      setter,
    );
  }

  late final _gst_tag_setter_get_tag_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTagList> Function(
              ffi.Pointer<GstTagSetter>)>>('gst_tag_setter_get_tag_list');
  late final _gst_tag_setter_get_tag_list =
      _gst_tag_setter_get_tag_listPtr.asFunction<
          ffi.Pointer<GstTagList> Function(ffi.Pointer<GstTagSetter>)>();

  void gst_tag_setter_set_tag_merge_mode(
    ffi.Pointer<GstTagSetter> setter,
    int mode,
  ) {
    return _gst_tag_setter_set_tag_merge_mode(
      setter,
      mode,
    );
  }

  late final _gst_tag_setter_set_tag_merge_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTagSetter>,
              ffi.Int32)>>('gst_tag_setter_set_tag_merge_mode');
  late final _gst_tag_setter_set_tag_merge_mode =
      _gst_tag_setter_set_tag_merge_modePtr
          .asFunction<void Function(ffi.Pointer<GstTagSetter>, int)>();

  int gst_tag_setter_get_tag_merge_mode(
    ffi.Pointer<GstTagSetter> setter,
  ) {
    return _gst_tag_setter_get_tag_merge_mode(
      setter,
    );
  }

  late final _gst_tag_setter_get_tag_merge_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<GstTagSetter>)>>(
      'gst_tag_setter_get_tag_merge_mode');
  late final _gst_tag_setter_get_tag_merge_mode =
      _gst_tag_setter_get_tag_merge_modePtr
          .asFunction<int Function(ffi.Pointer<GstTagSetter>)>();

  int gst_toc_setter_get_type() {
    return _gst_toc_setter_get_type();
  }

  late final _gst_toc_setter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_toc_setter_get_type');
  late final _gst_toc_setter_get_type =
      _gst_toc_setter_get_typePtr.asFunction<int Function()>();

  void gst_toc_setter_reset(
    ffi.Pointer<GstTocSetter> setter,
  ) {
    return _gst_toc_setter_reset(
      setter,
    );
  }

  late final _gst_toc_setter_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstTocSetter>)>>(
          'gst_toc_setter_reset');
  late final _gst_toc_setter_reset = _gst_toc_setter_resetPtr
      .asFunction<void Function(ffi.Pointer<GstTocSetter>)>();

  ffi.Pointer<GstToc> gst_toc_setter_get_toc(
    ffi.Pointer<GstTocSetter> setter,
  ) {
    return _gst_toc_setter_get_toc(
      setter,
    );
  }

  late final _gst_toc_setter_get_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstToc> Function(
              ffi.Pointer<GstTocSetter>)>>('gst_toc_setter_get_toc');
  late final _gst_toc_setter_get_toc = _gst_toc_setter_get_tocPtr
      .asFunction<ffi.Pointer<GstToc> Function(ffi.Pointer<GstTocSetter>)>();

  void gst_toc_setter_set_toc(
    ffi.Pointer<GstTocSetter> setter,
    ffi.Pointer<GstToc> toc,
  ) {
    return _gst_toc_setter_set_toc(
      setter,
      toc,
    );
  }

  late final _gst_toc_setter_set_tocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTocSetter>,
              ffi.Pointer<GstToc>)>>('gst_toc_setter_set_toc');
  late final _gst_toc_setter_set_toc = _gst_toc_setter_set_tocPtr.asFunction<
      void Function(ffi.Pointer<GstTocSetter>, ffi.Pointer<GstToc>)>();

  int gst_tracer_get_type() {
    return _gst_tracer_get_type();
  }

  late final _gst_tracer_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_tracer_get_type');
  late final _gst_tracer_get_type =
      _gst_tracer_get_typePtr.asFunction<int Function()>();

  void gst_tracing_register_hook(
    ffi.Pointer<GstTracer> tracer,
    ffi.Pointer<ffi.Char> detail,
    GCallback func,
  ) {
    return _gst_tracing_register_hook(
      tracer,
      detail,
      func,
    );
  }

  late final _gst_tracing_register_hookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTracer>, ffi.Pointer<ffi.Char>,
              GCallback)>>('gst_tracing_register_hook');
  late final _gst_tracing_register_hook =
      _gst_tracing_register_hookPtr.asFunction<
          void Function(
              ffi.Pointer<GstTracer>, ffi.Pointer<ffi.Char>, GCallback)>();

  int gst_tracer_register(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> name,
    int type,
  ) {
    return _gst_tracer_register(
      plugin,
      name,
      type,
    );
  }

  late final _gst_tracer_registerPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>,
              GType)>>('gst_tracer_register');
  late final _gst_tracer_register = _gst_tracer_registerPtr.asFunction<
      int Function(ffi.Pointer<GstPlugin>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<GList> gst_tracing_get_active_tracers() {
    return _gst_tracing_get_active_tracers();
  }

  late final _gst_tracing_get_active_tracersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'gst_tracing_get_active_tracers');
  late final _gst_tracing_get_active_tracers =
      _gst_tracing_get_active_tracersPtr
          .asFunction<ffi.Pointer<GList> Function()>();

  int gst_tracer_factory_get_type() {
    return _gst_tracer_factory_get_type();
  }

  late final _gst_tracer_factory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_tracer_factory_get_type');
  late final _gst_tracer_factory_get_type =
      _gst_tracer_factory_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GList> gst_tracer_factory_get_list() {
    return _gst_tracer_factory_get_list();
  }

  late final _gst_tracer_factory_get_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'gst_tracer_factory_get_list');
  late final _gst_tracer_factory_get_list = _gst_tracer_factory_get_listPtr
      .asFunction<ffi.Pointer<GList> Function()>();

  int gst_tracer_factory_get_tracer_type(
    ffi.Pointer<GstTracerFactory> factory1,
  ) {
    return _gst_tracer_factory_get_tracer_type(
      factory1,
    );
  }

  late final _gst_tracer_factory_get_tracer_typePtr = _lookup<
          ffi.NativeFunction<GType Function(ffi.Pointer<GstTracerFactory>)>>(
      'gst_tracer_factory_get_tracer_type');
  late final _gst_tracer_factory_get_tracer_type =
      _gst_tracer_factory_get_tracer_typePtr
          .asFunction<int Function(ffi.Pointer<GstTracerFactory>)>();

  int gst_tracer_record_get_type() {
    return _gst_tracer_record_get_type();
  }

  late final _gst_tracer_record_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_tracer_record_get_type');
  late final _gst_tracer_record_get_type =
      _gst_tracer_record_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstTracerRecord> gst_tracer_record_new(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> firstfield,
  ) {
    return _gst_tracer_record_new(
      name,
      firstfield,
    );
  }

  late final _gst_tracer_record_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstTracerRecord> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_tracer_record_new');
  late final _gst_tracer_record_new = _gst_tracer_record_newPtr.asFunction<
      ffi.Pointer<GstTracerRecord> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void gst_tracer_record_log(
    ffi.Pointer<GstTracerRecord> self,
  ) {
    return _gst_tracer_record_log(
      self,
    );
  }

  late final _gst_tracer_record_logPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstTracerRecord>)>>(
      'gst_tracer_record_log');
  late final _gst_tracer_record_log = _gst_tracer_record_logPtr
      .asFunction<void Function(ffi.Pointer<GstTracerRecord>)>();

  /// gst_type_find_get_type: (attributes doc.skip=true)
  int gst_type_find_get_type() {
    return _gst_type_find_get_type();
  }

  late final _gst_type_find_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('gst_type_find_get_type');
  late final _gst_type_find_get_type =
      _gst_type_find_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<guint8> gst_type_find_peek(
    ffi.Pointer<GstTypeFind> find,
    int offset,
    int size,
  ) {
    return _gst_type_find_peek(
      find,
      offset,
      size,
    );
  }

  late final _gst_type_find_peekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(
              ffi.Pointer<GstTypeFind>, gint64, guint)>>('gst_type_find_peek');
  late final _gst_type_find_peek = _gst_type_find_peekPtr.asFunction<
      ffi.Pointer<guint8> Function(ffi.Pointer<GstTypeFind>, int, int)>();

  void gst_type_find_suggest(
    ffi.Pointer<GstTypeFind> find,
    int probability,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_type_find_suggest(
      find,
      probability,
      caps,
    );
  }

  late final _gst_type_find_suggestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTypeFind>, guint,
              ffi.Pointer<GstCaps>)>>('gst_type_find_suggest');
  late final _gst_type_find_suggest = _gst_type_find_suggestPtr.asFunction<
      void Function(ffi.Pointer<GstTypeFind>, int, ffi.Pointer<GstCaps>)>();

  void gst_type_find_suggest_empty_simple(
    ffi.Pointer<GstTypeFind> find,
    int probability,
    ffi.Pointer<ffi.Char> media_type,
  ) {
    return _gst_type_find_suggest_empty_simple(
      find,
      probability,
      media_type,
    );
  }

  late final _gst_type_find_suggest_empty_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTypeFind>, guint,
              ffi.Pointer<ffi.Char>)>>('gst_type_find_suggest_empty_simple');
  late final _gst_type_find_suggest_empty_simple =
      _gst_type_find_suggest_empty_simplePtr.asFunction<
          void Function(
              ffi.Pointer<GstTypeFind>, int, ffi.Pointer<ffi.Char>)>();

  void gst_type_find_suggest_simple(
    ffi.Pointer<GstTypeFind> find,
    int probability,
    ffi.Pointer<ffi.Char> media_type,
    ffi.Pointer<ffi.Char> fieldname,
  ) {
    return _gst_type_find_suggest_simple(
      find,
      probability,
      media_type,
      fieldname,
    );
  }

  late final _gst_type_find_suggest_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstTypeFind>,
              guint,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_type_find_suggest_simple');
  late final _gst_type_find_suggest_simple =
      _gst_type_find_suggest_simplePtr.asFunction<
          void Function(ffi.Pointer<GstTypeFind>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int gst_type_find_get_length(
    ffi.Pointer<GstTypeFind> find,
  ) {
    return _gst_type_find_get_length(
      find,
    );
  }

  late final _gst_type_find_get_lengthPtr =
      _lookup<ffi.NativeFunction<guint64 Function(ffi.Pointer<GstTypeFind>)>>(
          'gst_type_find_get_length');
  late final _gst_type_find_get_length = _gst_type_find_get_lengthPtr
      .asFunction<int Function(ffi.Pointer<GstTypeFind>)>();

  int gst_type_find_register(
    ffi.Pointer<GstPlugin> plugin,
    ffi.Pointer<ffi.Char> name,
    int rank,
    GstTypeFindFunction func,
    ffi.Pointer<ffi.Char> extensions,
    ffi.Pointer<GstCaps> possible_caps,
    ffi.Pointer data,
    GDestroyNotify data_notify,
  ) {
    return _gst_type_find_register(
      plugin,
      name,
      rank,
      func,
      extensions,
      possible_caps,
      data,
      data_notify,
    );
  }

  late final _gst_type_find_registerPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPlugin>,
              ffi.Pointer<ffi.Char>,
              guint,
              GstTypeFindFunction,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>,
              ffi.Pointer,
              GDestroyNotify)>>('gst_type_find_register');
  late final _gst_type_find_register = _gst_type_find_registerPtr.asFunction<
      int Function(
          ffi.Pointer<GstPlugin>,
          ffi.Pointer<ffi.Char>,
          int,
          GstTypeFindFunction,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GstCaps>,
          ffi.Pointer,
          GDestroyNotify)>();

  int gst_type_find_factory_get_type() {
    return _gst_type_find_factory_get_type();
  }

  late final _gst_type_find_factory_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_type_find_factory_get_type');
  late final _gst_type_find_factory_get_type =
      _gst_type_find_factory_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GList> gst_type_find_factory_get_list() {
    return _gst_type_find_factory_get_list();
  }

  late final _gst_type_find_factory_get_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GList> Function()>>(
          'gst_type_find_factory_get_list');
  late final _gst_type_find_factory_get_list =
      _gst_type_find_factory_get_listPtr
          .asFunction<ffi.Pointer<GList> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_type_find_factory_get_extensions(
    ffi.Pointer<GstTypeFindFactory> factory1,
  ) {
    return _gst_type_find_factory_get_extensions(
      factory1,
    );
  }

  late final _gst_type_find_factory_get_extensionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstTypeFindFactory>)>>(
      'gst_type_find_factory_get_extensions');
  late final _gst_type_find_factory_get_extensions =
      _gst_type_find_factory_get_extensionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstTypeFindFactory>)>();

  ffi.Pointer<GstCaps> gst_type_find_factory_get_caps(
    ffi.Pointer<GstTypeFindFactory> factory1,
  ) {
    return _gst_type_find_factory_get_caps(
      factory1,
    );
  }

  late final _gst_type_find_factory_get_capsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstCaps> Function(ffi.Pointer<GstTypeFindFactory>)>>(
      'gst_type_find_factory_get_caps');
  late final _gst_type_find_factory_get_caps =
      _gst_type_find_factory_get_capsPtr.asFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstTypeFindFactory>)>();

  int gst_type_find_factory_has_function(
    ffi.Pointer<GstTypeFindFactory> factory1,
  ) {
    return _gst_type_find_factory_has_function(
      factory1,
    );
  }

  late final _gst_type_find_factory_has_functionPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstTypeFindFactory>)>>(
      'gst_type_find_factory_has_function');
  late final _gst_type_find_factory_has_function =
      _gst_type_find_factory_has_functionPtr
          .asFunction<int Function(ffi.Pointer<GstTypeFindFactory>)>();

  void gst_type_find_factory_call_function(
    ffi.Pointer<GstTypeFindFactory> factory1,
    ffi.Pointer<GstTypeFind> find,
  ) {
    return _gst_type_find_factory_call_function(
      factory1,
      find,
    );
  }

  late final _gst_type_find_factory_call_functionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstTypeFindFactory>, ffi.Pointer<GstTypeFind>)>>(
      'gst_type_find_factory_call_function');
  late final _gst_type_find_factory_call_function =
      _gst_type_find_factory_call_functionPtr.asFunction<
          void Function(
              ffi.Pointer<GstTypeFindFactory>, ffi.Pointer<GstTypeFind>)>();

  int gst_parse_error_quark() {
    return _gst_parse_error_quark();
  }

  late final _gst_parse_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>('gst_parse_error_quark');
  late final _gst_parse_error_quark =
      _gst_parse_error_quarkPtr.asFunction<int Function()>();

  int gst_parse_context_get_type() {
    return _gst_parse_context_get_type();
  }

  late final _gst_parse_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'gst_parse_context_get_type');
  late final _gst_parse_context_get_type =
      _gst_parse_context_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<GstParseContext> gst_parse_context_new() {
    return _gst_parse_context_new();
  }

  late final _gst_parse_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GstParseContext> Function()>>(
          'gst_parse_context_new');
  late final _gst_parse_context_new = _gst_parse_context_newPtr
      .asFunction<ffi.Pointer<GstParseContext> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> gst_parse_context_get_missing_elements(
    ffi.Pointer<GstParseContext> context,
  ) {
    return _gst_parse_context_get_missing_elements(
      context,
    );
  }

  late final _gst_parse_context_get_missing_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<GstParseContext>)>>(
      'gst_parse_context_get_missing_elements');
  late final _gst_parse_context_get_missing_elements =
      _gst_parse_context_get_missing_elementsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstParseContext>)>();

  void gst_parse_context_free(
    ffi.Pointer<GstParseContext> context,
  ) {
    return _gst_parse_context_free(
      context,
    );
  }

  late final _gst_parse_context_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstParseContext>)>>(
      'gst_parse_context_free');
  late final _gst_parse_context_free = _gst_parse_context_freePtr
      .asFunction<void Function(ffi.Pointer<GstParseContext>)>();

  ffi.Pointer<GstParseContext> gst_parse_context_copy(
    ffi.Pointer<GstParseContext> context,
  ) {
    return _gst_parse_context_copy(
      context,
    );
  }

  late final _gst_parse_context_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstParseContext> Function(
              ffi.Pointer<GstParseContext>)>>('gst_parse_context_copy');
  late final _gst_parse_context_copy = _gst_parse_context_copyPtr.asFunction<
      ffi.Pointer<GstParseContext> Function(ffi.Pointer<GstParseContext>)>();

  ffi.Pointer<GstElement> gst_parse_launch(
    ffi.Pointer<ffi.Char> pipeline_description,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_parse_launch(
      pipeline_description,
      error,
    );
  }

  late final _gst_parse_launchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_parse_launch');
  late final _gst_parse_launch = _gst_parse_launchPtr.asFunction<
      ffi.Pointer<GstElement> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GstElement> gst_parse_launchv(
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_parse_launchv(
      argv,
      error,
    );
  }

  late final _gst_parse_launchvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_parse_launchv');
  late final _gst_parse_launchv = _gst_parse_launchvPtr.asFunction<
      ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GstElement> gst_parse_launch_full(
    ffi.Pointer<ffi.Char> pipeline_description,
    ffi.Pointer<GstParseContext> context,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_parse_launch_full(
      pipeline_description,
      context,
      flags,
      error,
    );
  }

  late final _gst_parse_launch_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstParseContext>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_parse_launch_full');
  late final _gst_parse_launch_full = _gst_parse_launch_fullPtr.asFunction<
      ffi.Pointer<GstElement> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GstParseContext>,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GstElement> gst_parse_launchv_full(
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    ffi.Pointer<GstParseContext> context,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_parse_launchv_full(
      argv,
      context,
      flags,
      error,
    );
  }

  late final _gst_parse_launchv_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<GstParseContext>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_parse_launchv_full');
  late final _gst_parse_launchv_full = _gst_parse_launchv_fullPtr.asFunction<
      ffi.Pointer<GstElement> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<GstParseContext>,
          int,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  void gst_util_set_value_from_string(
    ffi.Pointer<GValue> value,
    ffi.Pointer<ffi.Char> value_str,
  ) {
    return _gst_util_set_value_from_string(
      value,
      value_str,
    );
  }

  late final _gst_util_set_value_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GValue>,
              ffi.Pointer<ffi.Char>)>>('gst_util_set_value_from_string');
  late final _gst_util_set_value_from_string =
      _gst_util_set_value_from_stringPtr.asFunction<
          void Function(ffi.Pointer<GValue>, ffi.Pointer<ffi.Char>)>();

  void gst_util_set_object_arg(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gst_util_set_object_arg(
      object,
      name,
      value,
    );
  }

  late final _gst_util_set_object_argPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_util_set_object_arg');
  late final _gst_util_set_object_arg = _gst_util_set_object_argPtr.asFunction<
      void Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int gst_util_set_object_array(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GValueArray> array,
  ) {
    return _gst_util_set_object_array(
      object,
      name,
      array,
    );
  }

  late final _gst_util_set_object_arrayPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValueArray>)>>('gst_util_set_object_array');
  late final _gst_util_set_object_array =
      _gst_util_set_object_arrayPtr.asFunction<
          int Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GValueArray>)>();

  int gst_util_get_object_array(
    ffi.Pointer<GObject> object,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<GValueArray>> array,
  ) {
    return _gst_util_get_object_array(
      object,
      name,
      array,
    );
  }

  late final _gst_util_get_object_arrayPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<GValueArray>>)>>(
      'gst_util_get_object_array');
  late final _gst_util_get_object_array =
      _gst_util_get_object_arrayPtr.asFunction<
          int Function(ffi.Pointer<GObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GValueArray>>)>();

  void gst_util_dump_mem(
    ffi.Pointer<guchar> mem,
    int size,
  ) {
    return _gst_util_dump_mem(
      mem,
      size,
    );
  }

  late final _gst_util_dump_memPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<guchar>, guint)>>(
      'gst_util_dump_mem');
  late final _gst_util_dump_mem = _gst_util_dump_memPtr
      .asFunction<void Function(ffi.Pointer<guchar>, int)>();

  void gst_util_dump_buffer(
    ffi.Pointer<GstBuffer> buf,
  ) {
    return _gst_util_dump_buffer(
      buf,
    );
  }

  late final _gst_util_dump_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstBuffer>)>>(
          'gst_util_dump_buffer');
  late final _gst_util_dump_buffer = _gst_util_dump_bufferPtr
      .asFunction<void Function(ffi.Pointer<GstBuffer>)>();

  int gst_util_gdouble_to_guint64(
    double value,
  ) {
    return _gst_util_gdouble_to_guint64(
      value,
    );
  }

  late final _gst_util_gdouble_to_guint64Ptr =
      _lookup<ffi.NativeFunction<guint64 Function(gdouble)>>(
          'gst_util_gdouble_to_guint64');
  late final _gst_util_gdouble_to_guint64 =
      _gst_util_gdouble_to_guint64Ptr.asFunction<int Function(double)>();

  double gst_util_guint64_to_gdouble(
    int value,
  ) {
    return _gst_util_guint64_to_gdouble(
      value,
    );
  }

  late final _gst_util_guint64_to_gdoublePtr =
      _lookup<ffi.NativeFunction<gdouble Function(guint64)>>(
          'gst_util_guint64_to_gdouble');
  late final _gst_util_guint64_to_gdouble =
      _gst_util_guint64_to_gdoublePtr.asFunction<double Function(int)>();

  int gst_util_uint64_scale(
    int val,
    int num,
    int denom,
  ) {
    return _gst_util_uint64_scale(
      val,
      num,
      denom,
    );
  }

  late final _gst_util_uint64_scalePtr =
      _lookup<ffi.NativeFunction<guint64 Function(guint64, guint64, guint64)>>(
          'gst_util_uint64_scale');
  late final _gst_util_uint64_scale =
      _gst_util_uint64_scalePtr.asFunction<int Function(int, int, int)>();

  int gst_util_uint64_scale_round(
    int val,
    int num,
    int denom,
  ) {
    return _gst_util_uint64_scale_round(
      val,
      num,
      denom,
    );
  }

  late final _gst_util_uint64_scale_roundPtr =
      _lookup<ffi.NativeFunction<guint64 Function(guint64, guint64, guint64)>>(
          'gst_util_uint64_scale_round');
  late final _gst_util_uint64_scale_round =
      _gst_util_uint64_scale_roundPtr.asFunction<int Function(int, int, int)>();

  int gst_util_uint64_scale_ceil(
    int val,
    int num,
    int denom,
  ) {
    return _gst_util_uint64_scale_ceil(
      val,
      num,
      denom,
    );
  }

  late final _gst_util_uint64_scale_ceilPtr =
      _lookup<ffi.NativeFunction<guint64 Function(guint64, guint64, guint64)>>(
          'gst_util_uint64_scale_ceil');
  late final _gst_util_uint64_scale_ceil =
      _gst_util_uint64_scale_ceilPtr.asFunction<int Function(int, int, int)>();

  int gst_util_uint64_scale_int(
    int val,
    int num,
    int denom,
  ) {
    return _gst_util_uint64_scale_int(
      val,
      num,
      denom,
    );
  }

  late final _gst_util_uint64_scale_intPtr =
      _lookup<ffi.NativeFunction<guint64 Function(guint64, gint, gint)>>(
          'gst_util_uint64_scale_int');
  late final _gst_util_uint64_scale_int =
      _gst_util_uint64_scale_intPtr.asFunction<int Function(int, int, int)>();

  int gst_util_uint64_scale_int_round(
    int val,
    int num,
    int denom,
  ) {
    return _gst_util_uint64_scale_int_round(
      val,
      num,
      denom,
    );
  }

  late final _gst_util_uint64_scale_int_roundPtr =
      _lookup<ffi.NativeFunction<guint64 Function(guint64, gint, gint)>>(
          'gst_util_uint64_scale_int_round');
  late final _gst_util_uint64_scale_int_round =
      _gst_util_uint64_scale_int_roundPtr
          .asFunction<int Function(int, int, int)>();

  int gst_util_uint64_scale_int_ceil(
    int val,
    int num,
    int denom,
  ) {
    return _gst_util_uint64_scale_int_ceil(
      val,
      num,
      denom,
    );
  }

  late final _gst_util_uint64_scale_int_ceilPtr =
      _lookup<ffi.NativeFunction<guint64 Function(guint64, gint, gint)>>(
          'gst_util_uint64_scale_int_ceil');
  late final _gst_util_uint64_scale_int_ceil =
      _gst_util_uint64_scale_int_ceilPtr
          .asFunction<int Function(int, int, int)>();

  int gst_util_seqnum_next() {
    return _gst_util_seqnum_next();
  }

  late final _gst_util_seqnum_nextPtr =
      _lookup<ffi.NativeFunction<guint32 Function()>>('gst_util_seqnum_next');
  late final _gst_util_seqnum_next =
      _gst_util_seqnum_nextPtr.asFunction<int Function()>();

  int gst_util_seqnum_compare(
    int s1,
    int s2,
  ) {
    return _gst_util_seqnum_compare(
      s1,
      s2,
    );
  }

  late final _gst_util_seqnum_comparePtr =
      _lookup<ffi.NativeFunction<gint32 Function(guint32, guint32)>>(
          'gst_util_seqnum_compare');
  late final _gst_util_seqnum_compare =
      _gst_util_seqnum_comparePtr.asFunction<int Function(int, int)>();

  int gst_util_group_id_next() {
    return _gst_util_group_id_next();
  }

  late final _gst_util_group_id_nextPtr =
      _lookup<ffi.NativeFunction<guint Function()>>('gst_util_group_id_next');
  late final _gst_util_group_id_next =
      _gst_util_group_id_nextPtr.asFunction<int Function()>();

  void gst_object_default_error(
    ffi.Pointer<GstObject> source,
    ffi.Pointer<GError> error,
    ffi.Pointer<ffi.Char> debug,
  ) {
    return _gst_object_default_error(
      source,
      error,
      debug,
    );
  }

  late final _gst_object_default_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstObject>, ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>>('gst_object_default_error');
  late final _gst_object_default_error =
      _gst_object_default_errorPtr.asFunction<
          void Function(ffi.Pointer<GstObject>, ffi.Pointer<GError>,
              ffi.Pointer<ffi.Char>)>();

  void gst_element_create_all_pads(
    ffi.Pointer<GstElement> element,
  ) {
    return _gst_element_create_all_pads(
      element,
    );
  }

  late final _gst_element_create_all_padsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstElement>)>>(
          'gst_element_create_all_pads');
  late final _gst_element_create_all_pads = _gst_element_create_all_padsPtr
      .asFunction<void Function(ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstPad> gst_element_get_compatible_pad(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_element_get_compatible_pad(
      element,
      pad,
      caps,
    );
  }

  late final _gst_element_get_compatible_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<GstPad>,
              ffi.Pointer<GstCaps>)>>('gst_element_get_compatible_pad');
  late final _gst_element_get_compatible_pad =
      _gst_element_get_compatible_padPtr.asFunction<
          ffi.Pointer<GstPad> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstPad>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<GstPadTemplate> gst_element_get_compatible_pad_template(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPadTemplate> compattempl,
  ) {
    return _gst_element_get_compatible_pad_template(
      element,
      compattempl,
    );
  }

  late final _gst_element_get_compatible_pad_templatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstPadTemplate> Function(
                  ffi.Pointer<GstElement>, ffi.Pointer<GstPadTemplate>)>>(
      'gst_element_get_compatible_pad_template');
  late final _gst_element_get_compatible_pad_template =
      _gst_element_get_compatible_pad_templatePtr.asFunction<
          ffi.Pointer<GstPadTemplate> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<GstPadTemplate>)>();

  ffi.Pointer<ffi.Char> gst_element_state_get_name(
    int state,
  ) {
    return _gst_element_state_get_name(
      state,
    );
  }

  late final _gst_element_state_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_element_state_get_name');
  late final _gst_element_state_get_name = _gst_element_state_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> gst_element_state_change_return_get_name(
    int state_ret,
  ) {
    return _gst_element_state_change_return_get_name(
      state_ret,
    );
  }

  late final _gst_element_state_change_return_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_element_state_change_return_get_name');
  late final _gst_element_state_change_return_get_name =
      _gst_element_state_change_return_get_namePtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> gst_state_change_get_name(
    int transition,
  ) {
    return _gst_state_change_get_name(
      transition,
    );
  }

  late final _gst_state_change_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'gst_state_change_get_name');
  late final _gst_state_change_get_name = _gst_state_change_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int gst_element_link(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<GstElement> dest,
  ) {
    return _gst_element_link(
      src,
      dest,
    );
  }

  late final _gst_element_linkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstElement>)>>('gst_element_link');
  late final _gst_element_link = _gst_element_linkPtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstElement>)>();

  int gst_element_link_many(
    ffi.Pointer<GstElement> element_1,
    ffi.Pointer<GstElement> element_2,
  ) {
    return _gst_element_link_many(
      element_1,
      element_2,
    );
  }

  late final _gst_element_link_manyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstElement>)>>('gst_element_link_many');
  late final _gst_element_link_many = _gst_element_link_manyPtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstElement>)>();

  int gst_element_link_filtered(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<GstElement> dest,
    ffi.Pointer<GstCaps> filter,
  ) {
    return _gst_element_link_filtered(
      src,
      dest,
      filter,
    );
  }

  late final _gst_element_link_filteredPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, ffi.Pointer<GstElement>,
              ffi.Pointer<GstCaps>)>>('gst_element_link_filtered');
  late final _gst_element_link_filtered =
      _gst_element_link_filteredPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, ffi.Pointer<GstElement>,
              ffi.Pointer<GstCaps>)>();

  void gst_element_unlink(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<GstElement> dest,
  ) {
    return _gst_element_unlink(
      src,
      dest,
    );
  }

  late final _gst_element_unlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstElement>)>>('gst_element_unlink');
  late final _gst_element_unlink = _gst_element_unlinkPtr.asFunction<
      void Function(ffi.Pointer<GstElement>, ffi.Pointer<GstElement>)>();

  void gst_element_unlink_many(
    ffi.Pointer<GstElement> element_1,
    ffi.Pointer<GstElement> element_2,
  ) {
    return _gst_element_unlink_many(
      element_1,
      element_2,
    );
  }

  late final _gst_element_unlink_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement>,
              ffi.Pointer<GstElement>)>>('gst_element_unlink_many');
  late final _gst_element_unlink_many = _gst_element_unlink_manyPtr.asFunction<
      void Function(ffi.Pointer<GstElement>, ffi.Pointer<GstElement>)>();

  int gst_element_link_pads(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<ffi.Char> srcpadname,
    ffi.Pointer<GstElement> dest,
    ffi.Pointer<ffi.Char> destpadname,
  ) {
    return _gst_element_link_pads(
      src,
      srcpadname,
      dest,
      destpadname,
    );
  }

  late final _gst_element_link_padsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_link_pads');
  late final _gst_element_link_pads = _gst_element_link_padsPtr.asFunction<
      int Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  int gst_element_link_pads_full(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<ffi.Char> srcpadname,
    ffi.Pointer<GstElement> dest,
    ffi.Pointer<ffi.Char> destpadname,
    int flags,
  ) {
    return _gst_element_link_pads_full(
      src,
      srcpadname,
      dest,
      destpadname,
      flags,
    );
  }

  late final _gst_element_link_pads_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('gst_element_link_pads_full');
  late final _gst_element_link_pads_full =
      _gst_element_link_pads_fullPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>, int)>();

  void gst_element_unlink_pads(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<ffi.Char> srcpadname,
    ffi.Pointer<GstElement> dest,
    ffi.Pointer<ffi.Char> destpadname,
  ) {
    return _gst_element_unlink_pads(
      src,
      srcpadname,
      dest,
      destpadname,
    );
  }

  late final _gst_element_unlink_padsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_unlink_pads');
  late final _gst_element_unlink_pads = _gst_element_unlink_padsPtr.asFunction<
      void Function(ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  int gst_element_link_pads_filtered(
    ffi.Pointer<GstElement> src,
    ffi.Pointer<ffi.Char> srcpadname,
    ffi.Pointer<GstElement> dest,
    ffi.Pointer<ffi.Char> destpadname,
    ffi.Pointer<GstCaps> filter,
  ) {
    return _gst_element_link_pads_filtered(
      src,
      srcpadname,
      dest,
      destpadname,
      filter,
    );
  }

  late final _gst_element_link_pads_filteredPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>)>>('gst_element_link_pads_filtered');
  late final _gst_element_link_pads_filtered =
      _gst_element_link_pads_filteredPtr.asFunction<
          int Function(
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GstCaps>)>();

  int gst_element_seek_simple(
    ffi.Pointer<GstElement> element,
    int format,
    int seek_flags,
    int seek_pos,
  ) {
    return _gst_element_seek_simple(
      element,
      format,
      seek_flags,
      seek_pos,
    );
  }

  late final _gst_element_seek_simplePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, ffi.Int32, ffi.Int32,
              gint64)>>('gst_element_seek_simple');
  late final _gst_element_seek_simple = _gst_element_seek_simplePtr
      .asFunction<int Function(ffi.Pointer<GstElement>, int, int, int)>();

  ffi.Pointer<ffi.Char> gst_element_decorate_stream_id(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _gst_element_decorate_stream_id(
      element,
      stream_id,
    );
  }

  late final _gst_element_decorate_stream_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_decorate_stream_id');
  late final _gst_element_decorate_stream_id =
      _gst_element_decorate_stream_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_element_decorate_stream_id_printf_valist(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_element_decorate_stream_id_printf_valist(
      element,
      format,
      var_args,
    );
  }

  late final _gst_element_decorate_stream_id_printf_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElement>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'gst_element_decorate_stream_id_printf_valist');
  late final _gst_element_decorate_stream_id_printf_valist =
      _gst_element_decorate_stream_id_printf_valistPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> gst_element_decorate_stream_id_printf(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gst_element_decorate_stream_id_printf(
      element,
      format,
    );
  }

  late final _gst_element_decorate_stream_id_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_element_decorate_stream_id_printf');
  late final _gst_element_decorate_stream_id_printf =
      _gst_element_decorate_stream_id_printfPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  int gst_element_factory_can_sink_all_caps(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_element_factory_can_sink_all_caps(
      factory1,
      caps,
    );
  }

  late final _gst_element_factory_can_sink_all_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<GstCaps>)>>('gst_element_factory_can_sink_all_caps');
  late final _gst_element_factory_can_sink_all_caps =
      _gst_element_factory_can_sink_all_capsPtr.asFunction<
          int Function(ffi.Pointer<GstElementFactory>, ffi.Pointer<GstCaps>)>();

  int gst_element_factory_can_src_all_caps(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_element_factory_can_src_all_caps(
      factory1,
      caps,
    );
  }

  late final _gst_element_factory_can_src_all_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<GstCaps>)>>('gst_element_factory_can_src_all_caps');
  late final _gst_element_factory_can_src_all_caps =
      _gst_element_factory_can_src_all_capsPtr.asFunction<
          int Function(ffi.Pointer<GstElementFactory>, ffi.Pointer<GstCaps>)>();

  int gst_element_factory_can_sink_any_caps(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_element_factory_can_sink_any_caps(
      factory1,
      caps,
    );
  }

  late final _gst_element_factory_can_sink_any_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<GstCaps>)>>('gst_element_factory_can_sink_any_caps');
  late final _gst_element_factory_can_sink_any_caps =
      _gst_element_factory_can_sink_any_capsPtr.asFunction<
          int Function(ffi.Pointer<GstElementFactory>, ffi.Pointer<GstCaps>)>();

  int gst_element_factory_can_src_any_caps(
    ffi.Pointer<GstElementFactory> factory1,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_element_factory_can_src_any_caps(
      factory1,
      caps,
    );
  }

  late final _gst_element_factory_can_src_any_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElementFactory>,
              ffi.Pointer<GstCaps>)>>('gst_element_factory_can_src_any_caps');
  late final _gst_element_factory_can_src_any_caps =
      _gst_element_factory_can_src_any_capsPtr.asFunction<
          int Function(ffi.Pointer<GstElementFactory>, ffi.Pointer<GstCaps>)>();

  int gst_element_query_position(
    ffi.Pointer<GstElement> element,
    int format,
    ffi.Pointer<gint64> cur,
  ) {
    return _gst_element_query_position(
      element,
      format,
      cur,
    );
  }

  late final _gst_element_query_positionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_element_query_position');
  late final _gst_element_query_position =
      _gst_element_query_positionPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, int, ffi.Pointer<gint64>)>();

  int gst_element_query_duration(
    ffi.Pointer<GstElement> element,
    int format,
    ffi.Pointer<gint64> duration,
  ) {
    return _gst_element_query_duration(
      element,
      format,
      duration,
    );
  }

  late final _gst_element_query_durationPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_element_query_duration');
  late final _gst_element_query_duration =
      _gst_element_query_durationPtr.asFunction<
          int Function(ffi.Pointer<GstElement>, int, ffi.Pointer<gint64>)>();

  int gst_element_query_convert(
    ffi.Pointer<GstElement> element,
    int src_format,
    int src_val,
    int dest_format,
    ffi.Pointer<gint64> dest_val,
  ) {
    return _gst_element_query_convert(
      element,
      src_format,
      src_val,
      dest_format,
      dest_val,
    );
  }

  late final _gst_element_query_convertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement>, ffi.Int32, gint64,
              ffi.Int32, ffi.Pointer<gint64>)>>('gst_element_query_convert');
  late final _gst_element_query_convert =
      _gst_element_query_convertPtr.asFunction<
          int Function(
              ffi.Pointer<GstElement>, int, int, int, ffi.Pointer<gint64>)>();

  void gst_pad_use_fixed_caps(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_use_fixed_caps(
      pad,
    );
  }

  late final _gst_pad_use_fixed_capsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstPad>)>>(
          'gst_pad_use_fixed_caps');
  late final _gst_pad_use_fixed_caps = _gst_pad_use_fixed_capsPtr
      .asFunction<void Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstElement> gst_pad_get_parent_element(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_parent_element(
      pad,
    );
  }

  late final _gst_pad_get_parent_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<GstPad>)>>('gst_pad_get_parent_element');
  late final _gst_pad_get_parent_element = _gst_pad_get_parent_elementPtr
      .asFunction<ffi.Pointer<GstElement> Function(ffi.Pointer<GstPad>)>();

  int gst_pad_proxy_query_accept_caps(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_pad_proxy_query_accept_caps(
      pad,
      query,
    );
  }

  late final _gst_pad_proxy_query_accept_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstQuery>)>>('gst_pad_proxy_query_accept_caps');
  late final _gst_pad_proxy_query_accept_caps =
      _gst_pad_proxy_query_accept_capsPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstQuery>)>();

  int gst_pad_proxy_query_caps(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstQuery> query,
  ) {
    return _gst_pad_proxy_query_caps(
      pad,
      query,
    );
  }

  late final _gst_pad_proxy_query_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstQuery>)>>('gst_pad_proxy_query_caps');
  late final _gst_pad_proxy_query_caps = _gst_pad_proxy_query_capsPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstQuery>)>();

  int gst_pad_query_position(
    ffi.Pointer<GstPad> pad,
    int format,
    ffi.Pointer<gint64> cur,
  ) {
    return _gst_pad_query_position(
      pad,
      format,
      cur,
    );
  }

  late final _gst_pad_query_positionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_pad_query_position');
  late final _gst_pad_query_position = _gst_pad_query_positionPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, int, ffi.Pointer<gint64>)>();

  int gst_pad_query_duration(
    ffi.Pointer<GstPad> pad,
    int format,
    ffi.Pointer<gint64> duration,
  ) {
    return _gst_pad_query_duration(
      pad,
      format,
      duration,
    );
  }

  late final _gst_pad_query_durationPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_pad_query_duration');
  late final _gst_pad_query_duration = _gst_pad_query_durationPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, int, ffi.Pointer<gint64>)>();

  int gst_pad_query_convert(
    ffi.Pointer<GstPad> pad,
    int src_format,
    int src_val,
    int dest_format,
    ffi.Pointer<gint64> dest_val,
  ) {
    return _gst_pad_query_convert(
      pad,
      src_format,
      src_val,
      dest_format,
      dest_val,
    );
  }

  late final _gst_pad_query_convertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32, gint64, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_pad_query_convert');
  late final _gst_pad_query_convert = _gst_pad_query_convertPtr.asFunction<
      int Function(ffi.Pointer<GstPad>, int, int, int, ffi.Pointer<gint64>)>();

  ffi.Pointer<GstCaps> gst_pad_query_caps(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstCaps> filter,
  ) {
    return _gst_pad_query_caps(
      pad,
      filter,
    );
  }

  late final _gst_pad_query_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstCaps>)>>('gst_pad_query_caps');
  late final _gst_pad_query_caps = _gst_pad_query_capsPtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<GstPad>, ffi.Pointer<GstCaps>)>();

  int gst_pad_query_accept_caps(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_pad_query_accept_caps(
      pad,
      caps,
    );
  }

  late final _gst_pad_query_accept_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstCaps>)>>('gst_pad_query_accept_caps');
  late final _gst_pad_query_accept_caps = _gst_pad_query_accept_capsPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstCaps>)>();

  int gst_pad_link_maybe_ghosting(
    ffi.Pointer<GstPad> src,
    ffi.Pointer<GstPad> sink,
  ) {
    return _gst_pad_link_maybe_ghosting(
      src,
      sink,
    );
  }

  late final _gst_pad_link_maybe_ghostingPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstPad>)>>('gst_pad_link_maybe_ghosting');
  late final _gst_pad_link_maybe_ghosting = _gst_pad_link_maybe_ghostingPtr
      .asFunction<int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>)>();

  int gst_pad_link_maybe_ghosting_full(
    ffi.Pointer<GstPad> src,
    ffi.Pointer<GstPad> sink,
    int flags,
  ) {
    return _gst_pad_link_maybe_ghosting_full(
      src,
      sink,
      flags,
    );
  }

  late final _gst_pad_link_maybe_ghosting_fullPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>,
              ffi.Int32)>>('gst_pad_link_maybe_ghosting_full');
  late final _gst_pad_link_maybe_ghosting_full =
      _gst_pad_link_maybe_ghosting_fullPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstPad>, int)>();

  int gst_pad_peer_query_position(
    ffi.Pointer<GstPad> pad,
    int format,
    ffi.Pointer<gint64> cur,
  ) {
    return _gst_pad_peer_query_position(
      pad,
      format,
      cur,
    );
  }

  late final _gst_pad_peer_query_positionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_pad_peer_query_position');
  late final _gst_pad_peer_query_position =
      _gst_pad_peer_query_positionPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, int, ffi.Pointer<gint64>)>();

  int gst_pad_peer_query_duration(
    ffi.Pointer<GstPad> pad,
    int format,
    ffi.Pointer<gint64> duration,
  ) {
    return _gst_pad_peer_query_duration(
      pad,
      format,
      duration,
    );
  }

  late final _gst_pad_peer_query_durationPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_pad_peer_query_duration');
  late final _gst_pad_peer_query_duration =
      _gst_pad_peer_query_durationPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, int, ffi.Pointer<gint64>)>();

  int gst_pad_peer_query_convert(
    ffi.Pointer<GstPad> pad,
    int src_format,
    int src_val,
    int dest_format,
    ffi.Pointer<gint64> dest_val,
  ) {
    return _gst_pad_peer_query_convert(
      pad,
      src_format,
      src_val,
      dest_format,
      dest_val,
    );
  }

  late final _gst_pad_peer_query_convertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>, ffi.Int32, gint64, ffi.Int32,
              ffi.Pointer<gint64>)>>('gst_pad_peer_query_convert');
  late final _gst_pad_peer_query_convert =
      _gst_pad_peer_query_convertPtr.asFunction<
          int Function(
              ffi.Pointer<GstPad>, int, int, int, ffi.Pointer<gint64>)>();

  ffi.Pointer<GstCaps> gst_pad_peer_query_caps(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstCaps> filter,
  ) {
    return _gst_pad_peer_query_caps(
      pad,
      filter,
    );
  }

  late final _gst_pad_peer_query_capsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstCaps> Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstCaps>)>>('gst_pad_peer_query_caps');
  late final _gst_pad_peer_query_caps = _gst_pad_peer_query_capsPtr.asFunction<
      ffi.Pointer<GstCaps> Function(
          ffi.Pointer<GstPad>, ffi.Pointer<GstCaps>)>();

  int gst_pad_peer_query_accept_caps(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstCaps> caps,
  ) {
    return _gst_pad_peer_query_accept_caps(
      pad,
      caps,
    );
  }

  late final _gst_pad_peer_query_accept_capsPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstCaps>)>>('gst_pad_peer_query_accept_caps');
  late final _gst_pad_peer_query_accept_caps =
      _gst_pad_peer_query_accept_capsPtr.asFunction<
          int Function(ffi.Pointer<GstPad>, ffi.Pointer<GstCaps>)>();

  ffi.Pointer<ffi.Char> gst_pad_create_stream_id(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstElement> parent,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _gst_pad_create_stream_id(
      pad,
      parent,
      stream_id,
    );
  }

  late final _gst_pad_create_stream_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPad>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_pad_create_stream_id');
  late final _gst_pad_create_stream_id =
      _gst_pad_create_stream_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_pad_create_stream_id_printf(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstElement> parent,
    ffi.Pointer<ffi.Char> stream_id,
  ) {
    return _gst_pad_create_stream_id_printf(
      pad,
      parent,
      stream_id,
    );
  }

  late final _gst_pad_create_stream_id_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPad>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>)>>('gst_pad_create_stream_id_printf');
  late final _gst_pad_create_stream_id_printf =
      _gst_pad_create_stream_id_printfPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPad>,
              ffi.Pointer<GstElement>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gst_pad_create_stream_id_printf_valist(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstElement> parent,
    ffi.Pointer<ffi.Char> stream_id,
    ffi.Pointer<__va_list_tag> var_args,
  ) {
    return _gst_pad_create_stream_id_printf_valist(
      pad,
      parent,
      stream_id,
      var_args,
    );
  }

  late final _gst_pad_create_stream_id_printf_valistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<GstPad>,
                  ffi.Pointer<GstElement>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<__va_list_tag>)>>(
      'gst_pad_create_stream_id_printf_valist');
  late final _gst_pad_create_stream_id_printf_valist =
      _gst_pad_create_stream_id_printf_valistPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstPad>,
              ffi.Pointer<GstElement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> gst_pad_get_stream_id(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_stream_id(
      pad,
    );
  }

  late final _gst_pad_get_stream_idPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPad>)>>(
      'gst_pad_get_stream_id');
  late final _gst_pad_get_stream_id = _gst_pad_get_stream_idPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GstPad>)>();

  ffi.Pointer<GstStream> gst_pad_get_stream(
    ffi.Pointer<GstPad> pad,
  ) {
    return _gst_pad_get_stream(
      pad,
    );
  }

  late final _gst_pad_get_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstStream> Function(
              ffi.Pointer<GstPad>)>>('gst_pad_get_stream');
  late final _gst_pad_get_stream = _gst_pad_get_streamPtr
      .asFunction<ffi.Pointer<GstStream> Function(ffi.Pointer<GstPad>)>();

  void gst_bin_add_many(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<GstElement> element_1,
  ) {
    return _gst_bin_add_many(
      bin,
      element_1,
    );
  }

  late final _gst_bin_add_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBin>,
              ffi.Pointer<GstElement>)>>('gst_bin_add_many');
  late final _gst_bin_add_many = _gst_bin_add_manyPtr.asFunction<
      void Function(ffi.Pointer<GstBin>, ffi.Pointer<GstElement>)>();

  void gst_bin_remove_many(
    ffi.Pointer<GstBin> bin,
    ffi.Pointer<GstElement> element_1,
  ) {
    return _gst_bin_remove_many(
      bin,
      element_1,
    );
  }

  late final _gst_bin_remove_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBin>,
              ffi.Pointer<GstElement>)>>('gst_bin_remove_many');
  late final _gst_bin_remove_many = _gst_bin_remove_manyPtr.asFunction<
      void Function(ffi.Pointer<GstBin>, ffi.Pointer<GstElement>)>();

  ffi.Pointer<GstPad> gst_bin_find_unlinked_pad(
    ffi.Pointer<GstBin> bin,
    int direction,
  ) {
    return _gst_bin_find_unlinked_pad(
      bin,
      direction,
    );
  }

  late final _gst_bin_find_unlinked_padPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstBin>, ffi.Int32)>>('gst_bin_find_unlinked_pad');
  late final _gst_bin_find_unlinked_pad = _gst_bin_find_unlinked_padPtr
      .asFunction<ffi.Pointer<GstPad> Function(ffi.Pointer<GstBin>, int)>();

  int gst_bin_sync_children_states(
    ffi.Pointer<GstBin> bin,
  ) {
    return _gst_bin_sync_children_states(
      bin,
    );
  }

  late final _gst_bin_sync_children_statesPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBin>)>>(
          'gst_bin_sync_children_states');
  late final _gst_bin_sync_children_states = _gst_bin_sync_children_statesPtr
      .asFunction<int Function(ffi.Pointer<GstBin>)>();

  ffi.Pointer<GstElement> gst_parse_bin_from_description(
    ffi.Pointer<ffi.Char> bin_description,
    int ghost_unlinked_pads,
    ffi.Pointer<ffi.Pointer<GError>> err,
  ) {
    return _gst_parse_bin_from_description(
      bin_description,
      ghost_unlinked_pads,
      err,
    );
  }

  late final _gst_parse_bin_from_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstElement> Function(ffi.Pointer<ffi.Char>, gboolean,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gst_parse_bin_from_description');
  late final _gst_parse_bin_from_description =
      _gst_parse_bin_from_descriptionPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  ffi.Pointer<GstElement> gst_parse_bin_from_description_full(
    ffi.Pointer<ffi.Char> bin_description,
    int ghost_unlinked_pads,
    ffi.Pointer<GstParseContext> context,
    int flags,
    ffi.Pointer<ffi.Pointer<GError>> err,
  ) {
    return _gst_parse_bin_from_description_full(
      bin_description,
      ghost_unlinked_pads,
      context,
      flags,
      err,
    );
  }

  late final _gst_parse_bin_from_description_fullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<GstElement> Function(
                  ffi.Pointer<ffi.Char>,
                  gboolean,
                  ffi.Pointer<GstParseContext>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<GError>>)>>(
      'gst_parse_bin_from_description_full');
  late final _gst_parse_bin_from_description_full =
      _gst_parse_bin_from_description_fullPtr.asFunction<
          ffi.Pointer<GstElement> Function(
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<GstParseContext>,
              int,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int gst_util_get_timestamp() {
    return _gst_util_get_timestamp();
  }

  late final _gst_util_get_timestampPtr =
      _lookup<ffi.NativeFunction<GstClockTime Function()>>(
          'gst_util_get_timestamp');
  late final _gst_util_get_timestamp =
      _gst_util_get_timestampPtr.asFunction<int Function()>();

  ffi.Pointer gst_util_array_binary_search(
    ffi.Pointer array,
    int num_elements,
    int element_size,
    GCompareDataFunc search_func,
    int mode,
    gconstpointer search_data,
    ffi.Pointer user_data,
  ) {
    return _gst_util_array_binary_search(
      array,
      num_elements,
      element_size,
      search_func,
      mode,
      search_data,
      user_data,
    );
  }

  late final _gst_util_array_binary_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer,
              guint,
              gsize,
              GCompareDataFunc,
              ffi.Int32,
              gconstpointer,
              ffi.Pointer)>>('gst_util_array_binary_search');
  late final _gst_util_array_binary_search =
      _gst_util_array_binary_searchPtr.asFunction<
          ffi.Pointer Function(ffi.Pointer, int, int, GCompareDataFunc, int,
              gconstpointer, ffi.Pointer)>();

  int gst_util_greatest_common_divisor(
    int a,
    int b,
  ) {
    return _gst_util_greatest_common_divisor(
      a,
      b,
    );
  }

  late final _gst_util_greatest_common_divisorPtr =
      _lookup<ffi.NativeFunction<gint Function(gint, gint)>>(
          'gst_util_greatest_common_divisor');
  late final _gst_util_greatest_common_divisor =
      _gst_util_greatest_common_divisorPtr.asFunction<int Function(int, int)>();

  int gst_util_greatest_common_divisor_int64(
    int a,
    int b,
  ) {
    return _gst_util_greatest_common_divisor_int64(
      a,
      b,
    );
  }

  late final _gst_util_greatest_common_divisor_int64Ptr =
      _lookup<ffi.NativeFunction<gint64 Function(gint64, gint64)>>(
          'gst_util_greatest_common_divisor_int64');
  late final _gst_util_greatest_common_divisor_int64 =
      _gst_util_greatest_common_divisor_int64Ptr
          .asFunction<int Function(int, int)>();

  void gst_util_simplify_fraction(
    ffi.Pointer<gint> numerator,
    ffi.Pointer<gint> denominator,
    int n_terms,
    int threshold,
  ) {
    return _gst_util_simplify_fraction(
      numerator,
      denominator,
      n_terms,
      threshold,
    );
  }

  late final _gst_util_simplify_fractionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gint>, ffi.Pointer<gint>, guint,
              guint)>>('gst_util_simplify_fraction');
  late final _gst_util_simplify_fraction =
      _gst_util_simplify_fractionPtr.asFunction<
          void Function(ffi.Pointer<gint>, ffi.Pointer<gint>, int, int)>();

  void gst_util_fraction_to_double(
    int src_n,
    int src_d,
    ffi.Pointer<gdouble> dest,
  ) {
    return _gst_util_fraction_to_double(
      src_n,
      src_d,
      dest,
    );
  }

  late final _gst_util_fraction_to_doublePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(gint, gint, ffi.Pointer<gdouble>)>>(
      'gst_util_fraction_to_double');
  late final _gst_util_fraction_to_double = _gst_util_fraction_to_doublePtr
      .asFunction<void Function(int, int, ffi.Pointer<gdouble>)>();

  void gst_util_double_to_fraction(
    double src,
    ffi.Pointer<gint> dest_n,
    ffi.Pointer<gint> dest_d,
  ) {
    return _gst_util_double_to_fraction(
      src,
      dest_n,
      dest_d,
    );
  }

  late final _gst_util_double_to_fractionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gdouble, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gst_util_double_to_fraction');
  late final _gst_util_double_to_fraction =
      _gst_util_double_to_fractionPtr.asFunction<
          void Function(double, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int gst_util_fraction_multiply(
    int a_n,
    int a_d,
    int b_n,
    int b_d,
    ffi.Pointer<gint> res_n,
    ffi.Pointer<gint> res_d,
  ) {
    return _gst_util_fraction_multiply(
      a_n,
      a_d,
      b_n,
      b_d,
      res_n,
      res_d,
    );
  }

  late final _gst_util_fraction_multiplyPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gint, gint, gint, gint, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gst_util_fraction_multiply');
  late final _gst_util_fraction_multiply =
      _gst_util_fraction_multiplyPtr.asFunction<
          int Function(
              int, int, int, int, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int gst_util_fraction_add(
    int a_n,
    int a_d,
    int b_n,
    int b_d,
    ffi.Pointer<gint> res_n,
    ffi.Pointer<gint> res_d,
  ) {
    return _gst_util_fraction_add(
      a_n,
      a_d,
      b_n,
      b_d,
      res_n,
      res_d,
    );
  }

  late final _gst_util_fraction_addPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(gint, gint, gint, gint, ffi.Pointer<gint>,
              ffi.Pointer<gint>)>>('gst_util_fraction_add');
  late final _gst_util_fraction_add = _gst_util_fraction_addPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<gint>, ffi.Pointer<gint>)>();

  int gst_util_fraction_compare(
    int a_n,
    int a_d,
    int b_n,
    int b_d,
  ) {
    return _gst_util_fraction_compare(
      a_n,
      a_d,
      b_n,
      b_d,
    );
  }

  late final _gst_util_fraction_comparePtr =
      _lookup<ffi.NativeFunction<gint Function(gint, gint, gint, gint)>>(
          'gst_util_fraction_compare');
  late final _gst_util_fraction_compare = _gst_util_fraction_comparePtr
      .asFunction<int Function(int, int, int, int)>();

  int gst_calculate_linear_regression(
    ffi.Pointer<GstClockTime> xy,
    ffi.Pointer<GstClockTime> temp,
    int n,
    ffi.Pointer<GstClockTime> m_num,
    ffi.Pointer<GstClockTime> m_denom,
    ffi.Pointer<GstClockTime> b,
    ffi.Pointer<GstClockTime> xbase,
    ffi.Pointer<gdouble> r_squared,
  ) {
    return _gst_calculate_linear_regression(
      xy,
      temp,
      n,
      m_num,
      m_denom,
      b,
      xbase,
      r_squared,
    );
  }

  late final _gst_calculate_linear_regressionPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              guint,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<gdouble>)>>('gst_calculate_linear_regression');
  late final _gst_calculate_linear_regression =
      _gst_calculate_linear_regressionPtr.asFunction<
          int Function(
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              int,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<GstClockTime>,
              ffi.Pointer<gdouble>)>();

  void gst_type_mark_as_plugin_api(
    int type,
    int flags,
  ) {
    return _gst_type_mark_as_plugin_api(
      type,
      flags,
    );
  }

  late final _gst_type_mark_as_plugin_apiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GType, ffi.Int32)>>(
          'gst_type_mark_as_plugin_api');
  late final _gst_type_mark_as_plugin_api =
      _gst_type_mark_as_plugin_apiPtr.asFunction<void Function(int, int)>();

  int gst_type_is_plugin_api(
    int type,
    ffi.Pointer<ffi.Int32> flags,
  ) {
    return _gst_type_is_plugin_api(
      type,
      flags,
    );
  }

  late final _gst_type_is_plugin_apiPtr = _lookup<
          ffi.NativeFunction<gboolean Function(GType, ffi.Pointer<ffi.Int32>)>>(
      'gst_type_is_plugin_api');
  late final _gst_type_is_plugin_api = _gst_type_is_plugin_apiPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int32>)>();

  int gst_util_ceil_log2(
    int v,
  ) {
    return _gst_util_ceil_log2(
      v,
    );
  }

  late final _gst_util_ceil_log2Ptr =
      _lookup<ffi.NativeFunction<guint Function(guint32)>>(
          'gst_util_ceil_log2');
  late final _gst_util_ceil_log2 =
      _gst_util_ceil_log2Ptr.asFunction<int Function(int)>();

  int gst_util_filename_compare(
    ffi.Pointer<ffi.Char> a,
    ffi.Pointer<ffi.Char> b,
  ) {
    return _gst_util_filename_compare(
      a,
      b,
    );
  }

  late final _gst_util_filename_comparePtr = _lookup<
      ffi.NativeFunction<
          gint Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('gst_util_filename_compare');
  late final _gst_util_filename_compare = _gst_util_filename_comparePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void gst_init(
    ffi.Pointer<ffi.Int> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argv,
  ) {
    return _gst_init(
      argc,
      argv,
    );
  }

  late final _gst_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>('gst_init');
  late final _gst_init = _gst_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  int gst_init_check(
    ffi.Pointer<ffi.Int> argc,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> argv,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _gst_init_check(
      argc,
      argv,
      error,
    );
  }

  late final _gst_init_checkPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('gst_init_check');
  late final _gst_init_check = _gst_init_checkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.Pointer<GError>>)>();

  int gst_is_initialized() {
    return _gst_is_initialized();
  }

  late final _gst_is_initializedPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('gst_is_initialized');
  late final _gst_is_initialized =
      _gst_is_initializedPtr.asFunction<int Function()>();

  ffi.Pointer<GOptionGroup> gst_init_get_option_group() {
    return _gst_init_get_option_group();
  }

  late final _gst_init_get_option_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GOptionGroup> Function()>>(
          'gst_init_get_option_group');
  late final _gst_init_get_option_group = _gst_init_get_option_groupPtr
      .asFunction<ffi.Pointer<GOptionGroup> Function()>();

  void gst_deinit() {
    return _gst_deinit();
  }

  late final _gst_deinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gst_deinit');
  late final _gst_deinit = _gst_deinitPtr.asFunction<void Function()>();

  void gst_version(
    ffi.Pointer<guint> major,
    ffi.Pointer<guint> minor,
    ffi.Pointer<guint> micro,
    ffi.Pointer<guint> nano,
  ) {
    return _gst_version(
      major,
      minor,
      micro,
      nano,
    );
  }

  late final _gst_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<guint>, ffi.Pointer<guint>,
              ffi.Pointer<guint>, ffi.Pointer<guint>)>>('gst_version');
  late final _gst_version = _gst_versionPtr.asFunction<
      void Function(ffi.Pointer<guint>, ffi.Pointer<guint>, ffi.Pointer<guint>,
          ffi.Pointer<guint>)>();

  ffi.Pointer<ffi.Char> gst_version_string() {
    return _gst_version_string();
  }

  late final _gst_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'gst_version_string');
  late final _gst_version_string =
      _gst_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int gst_segtrap_is_enabled() {
    return _gst_segtrap_is_enabled();
  }

  late final _gst_segtrap_is_enabledPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'gst_segtrap_is_enabled');
  late final _gst_segtrap_is_enabled =
      _gst_segtrap_is_enabledPtr.asFunction<int Function()>();

  void gst_segtrap_set_enabled(
    int enabled,
  ) {
    return _gst_segtrap_set_enabled(
      enabled,
    );
  }

  late final _gst_segtrap_set_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'gst_segtrap_set_enabled');
  late final _gst_segtrap_set_enabled =
      _gst_segtrap_set_enabledPtr.asFunction<void Function(int)>();

  int gst_registry_fork_is_enabled() {
    return _gst_registry_fork_is_enabled();
  }

  late final _gst_registry_fork_is_enabledPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>(
          'gst_registry_fork_is_enabled');
  late final _gst_registry_fork_is_enabled =
      _gst_registry_fork_is_enabledPtr.asFunction<int Function()>();

  void gst_registry_fork_set_enabled(
    int enabled,
  ) {
    return _gst_registry_fork_set_enabled(
      enabled,
    );
  }

  late final _gst_registry_fork_set_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gboolean)>>(
          'gst_registry_fork_set_enabled');
  late final _gst_registry_fork_set_enabled =
      _gst_registry_fork_set_enabledPtr.asFunction<void Function(int)>();

  int gst_update_registry() {
    return _gst_update_registry();
  }

  late final _gst_update_registryPtr =
      _lookup<ffi.NativeFunction<gboolean Function()>>('gst_update_registry');
  late final _gst_update_registry =
      _gst_update_registryPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gst_get_main_executable_path() {
    return _gst_get_main_executable_path();
  }

  late final _gst_get_main_executable_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'gst_get_main_executable_path');
  late final _gst_get_main_executable_path = _gst_get_main_executable_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();
}

final class max_align_t extends ffi.Opaque {}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Struct {
  external __sigval_t sigev_value;

  @ffi.Int()
  external int sigev_signo;

  @ffi.Int()
  external int sigev_notify;

  external UnnamedUnion1 _sigev_un;
}

typedef __sigval_t = sigval;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Int> _pad;

  @__pid_t()
  external int _tid;

  external UnnamedStruct1 _sigev_thread;
}

typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(__sigval_t)>>
      _function;

  external ffi.Pointer<pthread_attr_t> _attribute;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef time_t = __time_t;
typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef pid_t = __pid_t;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

final class _GDoubleIEEE754 extends ffi.Opaque {}

final class _GFloatIEEE754 extends ffi.Opaque {}

final class _GTimeVal extends ffi.Struct {
  @glong()
  external int tv_sec;

  @glong()
  external int tv_usec;
}

typedef glong = ffi.Long;
typedef Dartglong = int;

final class _GBytes extends ffi.Opaque {}

final class _GArray extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  @guint()
  external int len;
}

typedef guint = ffi.UnsignedInt;
typedef Dartguint = int;

final class _GByteArray extends ffi.Struct {
  external ffi.Pointer<guint8> data;

  @guint()
  external int len;
}

typedef guint8 = ffi.UnsignedChar;
typedef Dartguint8 = int;

final class _GPtrArray extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer> pdata;

  @guint()
  external int len;
}

typedef GArray = _GArray;
typedef gboolean = gint;
typedef gint = ffi.Int;
typedef Dartgint = int;
typedef gsize = ffi.UnsignedLong;
typedef Dartgsize = int;
typedef gconstpointer = ffi.Pointer<ffi.Void>;
typedef GCompareFunc = ffi.Pointer<ffi.NativeFunction<GCompareFuncFunction>>;
typedef GCompareFuncFunction = gint Function(gconstpointer a, gconstpointer b);
typedef DartGCompareFuncFunction = Dartgint Function(
    gconstpointer a, gconstpointer b);
typedef GCompareDataFunc
    = ffi.Pointer<ffi.NativeFunction<GCompareDataFuncFunction>>;
typedef GCompareDataFuncFunction = gint Function(
    gconstpointer a, gconstpointer b, ffi.Pointer user_data);
typedef DartGCompareDataFuncFunction = Dartgint Function(
    gconstpointer a, gconstpointer b, ffi.Pointer user_data);
typedef GDestroyNotify
    = ffi.Pointer<ffi.NativeFunction<GDestroyNotifyFunction>>;
typedef GDestroyNotifyFunction = ffi.Void Function(ffi.Pointer data);
typedef DartGDestroyNotifyFunction = void Function(ffi.Pointer data);
typedef GPtrArray = _GPtrArray;

/// GCopyFunc:
/// @src: (not nullable): A pointer to the data which should be copied
/// @data: Additional data
///
/// A function of this signature is used to copy the node data
/// when doing a deep-copy of a tree.
///
/// Returns: (not nullable): A pointer to the copy
///
/// Since: 2.4
typedef GCopyFunc = ffi.Pointer<ffi.NativeFunction<GCopyFuncFunction>>;
typedef GCopyFuncFunction = ffi.Pointer Function(
    gconstpointer src, ffi.Pointer data);
typedef GFunc = ffi.Pointer<ffi.NativeFunction<GFuncFunction>>;
typedef GFuncFunction = ffi.Void Function(
    ffi.Pointer data, ffi.Pointer user_data);
typedef DartGFuncFunction = void Function(
    ffi.Pointer data, ffi.Pointer user_data);
typedef GEqualFunc = ffi.Pointer<ffi.NativeFunction<GEqualFuncFunction>>;
typedef GEqualFuncFunction = gboolean Function(
    gconstpointer a, gconstpointer b);
typedef DartGEqualFuncFunction = Dartgint Function(
    gconstpointer a, gconstpointer b);
typedef GByteArray = _GByteArray;
typedef GBytes = _GBytes;
typedef GQuark = guint32;
typedef guint32 = ffi.UnsignedInt;
typedef Dartguint32 = int;

final class _GError extends ffi.Struct {
  @GQuark()
  external int domain;

  @gint()
  external int code;

  external ffi.Pointer<ffi.Char> message;
}

/// GErrorInitFunc:
/// @error: extended error
///
/// Specifies the type of function which is called just after an
/// extended error instance is created and its fields filled. It should
/// only initialize the fields in the private data, which can be
/// received with the generated `*_get_private()` function.
///
/// Normally, it is better to use G_DEFINE_EXTENDED_ERROR(), as it
/// already takes care of getting the private data from @error.
///
/// Since: 2.68
typedef GErrorInitFunc
    = ffi.Pointer<ffi.NativeFunction<GErrorInitFuncFunction>>;
typedef GErrorInitFuncFunction = ffi.Void Function(ffi.Pointer<GError> error);
typedef DartGErrorInitFuncFunction = void Function(ffi.Pointer<GError> error);

/// GError:
/// @domain: error domain, e.g. %G_FILE_ERROR
/// @code: error code, e.g. %G_FILE_ERROR_NOENT
/// @message: human-readable informative error message
///
/// The `GError` structure contains information about
/// an error that has occurred.
typedef GError = _GError;

/// GErrorCopyFunc:
/// @src_error: source extended error
/// @dest_error: destination extended error
///
/// Specifies the type of function which is called when an extended
/// error instance is copied. It is passed the pointer to the
/// destination error and source error, and should copy only the fields
/// of the private data from @src_error to @dest_error.
///
/// Normally, it is better to use G_DEFINE_EXTENDED_ERROR(), as it
/// already takes care of getting the private data from @src_error and
/// @dest_error.
///
/// Since: 2.68
typedef GErrorCopyFunc
    = ffi.Pointer<ffi.NativeFunction<GErrorCopyFuncFunction>>;
typedef GErrorCopyFuncFunction = ffi.Void Function(
    ffi.Pointer<GError> src_error, ffi.Pointer<GError> dest_error);
typedef DartGErrorCopyFuncFunction = void Function(
    ffi.Pointer<GError> src_error, ffi.Pointer<GError> dest_error);

/// GErrorClearFunc:
/// @error: extended error to clear
///
/// Specifies the type of function which is called when an extended
/// error instance is freed. It is passed the error pointer about to be
/// freed, and should free the error's private data fields.
///
/// Normally, it is better to use G_DEFINE_EXTENDED_ERROR(), as it
/// already takes care of getting the private data from @error.
///
/// Since: 2.68
typedef GErrorClearFunc
    = ffi.Pointer<ffi.NativeFunction<GErrorClearFuncFunction>>;
typedef GErrorClearFuncFunction = ffi.Void Function(ffi.Pointer<GError> error);
typedef DartGErrorClearFuncFunction = void Function(ffi.Pointer<GError> error);

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

/// GUserDirectory:
/// @G_USER_DIRECTORY_DESKTOP: the user's Desktop directory
/// @G_USER_DIRECTORY_DOCUMENTS: the user's Documents directory
/// @G_USER_DIRECTORY_DOWNLOAD: the user's Downloads directory
/// @G_USER_DIRECTORY_MUSIC: the user's Music directory
/// @G_USER_DIRECTORY_PICTURES: the user's Pictures directory
/// @G_USER_DIRECTORY_PUBLIC_SHARE: the user's shared directory
/// @G_USER_DIRECTORY_TEMPLATES: the user's Templates directory
/// @G_USER_DIRECTORY_VIDEOS: the user's Movies directory
/// @G_USER_N_DIRECTORIES: the number of enum values
///
/// These are logical ids for special directories which are defined
/// depending on the platform used. You should use g_get_user_special_dir()
/// to retrieve the full path associated to the logical id.
///
/// The #GUserDirectory enumeration can be extended at later date. Not
/// every platform has a directory for every logical id in this
/// enumeration.
///
/// Since: 2.14
abstract class GUserDirectory {
  static const int G_USER_DIRECTORY_DESKTOP = 0;
  static const int G_USER_DIRECTORY_DOCUMENTS = 1;
  static const int G_USER_DIRECTORY_DOWNLOAD = 2;
  static const int G_USER_DIRECTORY_MUSIC = 3;
  static const int G_USER_DIRECTORY_PICTURES = 4;
  static const int G_USER_DIRECTORY_PUBLIC_SHARE = 5;
  static const int G_USER_DIRECTORY_TEMPLATES = 6;
  static const int G_USER_DIRECTORY_VIDEOS = 7;
  static const int G_USER_N_DIRECTORIES = 8;
}

final class _GDebugKey extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @guint()
  external int value;
}

/// GDebugKey:
/// @key: the string
/// @value: the flag
///
/// Associates a string with a bit flag.
/// Used in g_parse_debug_string().
typedef GDebugKey = _GDebugKey;
typedef gulong = ffi.UnsignedLong;
typedef Dartgulong = int;

abstract class GFormatSizeFlags {
  static const int G_FORMAT_SIZE_DEFAULT = 0;
  static const int G_FORMAT_SIZE_LONG_FORMAT = 1;
  static const int G_FORMAT_SIZE_IEC_UNITS = 2;
  static const int G_FORMAT_SIZE_BITS = 4;
  static const int G_FORMAT_SIZE_ONLY_VALUE = 8;
  static const int G_FORMAT_SIZE_ONLY_UNIT = 16;
}

typedef guint64 = ffi.UnsignedLong;
typedef Dartguint64 = int;
typedef goffset = gint64;
typedef gint64 = ffi.Long;
typedef Dartgint64 = int;

/// GVoidFunc:
///
/// Declares a type of function which takes no arguments
/// and has no return value. It is used to specify the type
/// function passed to g_atexit().
typedef GVoidFunc = ffi.Pointer<ffi.NativeFunction<GVoidFuncFunction>>;
typedef GVoidFuncFunction = ffi.Void Function();
typedef DartGVoidFuncFunction = void Function();

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct4 __value32;
}

final class UnnamedStruct4 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __compar_fn_t = ffi.Pointer<ffi.NativeFunction<__compar_fn_tFunction>>;
typedef __compar_fn_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart__compar_fn_tFunction = int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);

abstract class GThreadError {
  static const int G_THREAD_ERROR_AGAIN = 0;
}

final class _GThread extends ffi.Struct {
  external GThreadFunc func;

  external ffi.Pointer data;

  @gboolean()
  external int joinable;

  @ffi.Int32()
  external int priority;
}

typedef GThreadFunc = ffi.Pointer<ffi.NativeFunction<GThreadFuncFunction>>;
typedef GThreadFuncFunction = ffi.Pointer Function(ffi.Pointer data);

abstract class GThreadPriority {
  static const int G_THREAD_PRIORITY_LOW = 0;
  static const int G_THREAD_PRIORITY_NORMAL = 1;
  static const int G_THREAD_PRIORITY_HIGH = 2;
  static const int G_THREAD_PRIORITY_URGENT = 3;
}

final class _GMutex extends ffi.Union {
  external ffi.Pointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GRecMutex extends ffi.Struct {
  external ffi.Pointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GRWLock extends ffi.Struct {
  external ffi.Pointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GCond extends ffi.Struct {
  external ffi.Pointer p;

  @ffi.Array.multi([2])
  external ffi.Array<guint> i;
}

final class _GPrivate extends ffi.Struct {
  external ffi.Pointer p;

  external GDestroyNotify notify;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer> future;
}

final class _GOnce extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external ffi.Pointer retval;
}

abstract class GOnceStatus {
  static const int G_ONCE_STATUS_NOTCALLED = 0;
  static const int G_ONCE_STATUS_PROGRESS = 1;
  static const int G_ONCE_STATUS_READY = 2;
}

typedef GThread = _GThread;
typedef GMutex = _GMutex;
typedef GRWLock = _GRWLock;
typedef GRecMutex = _GRecMutex;
typedef GCond = _GCond;
typedef GPrivate = _GPrivate;
typedef GOnce = _GOnce;

final class _GAsyncQueue extends ffi.Opaque {}

typedef GAsyncQueue = _GAsyncQueue;
typedef GTimeVal = _GTimeVal;

final class siginfo_t extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @ffi.Int()
  external int __pad0;

  external UnnamedUnion2 _sifields;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([28])
  external ffi.Array<ffi.Int> _pad;

  external UnnamedStruct5 _kill;

  external UnnamedStruct6 _timer;

  external UnnamedStruct7 _rt;

  external UnnamedStruct8 _sigchld;

  external UnnamedStruct9 _sigfault;

  external UnnamedStruct11 _sigpoll;

  external UnnamedStruct12 _sigsys;
}

final class UnnamedStruct5 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;
}

typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;

final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Int()
  external int si_tid;

  @ffi.Int()
  external int si_overrun;

  external __sigval_t si_sigval;
}

final class UnnamedStruct7 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  external __sigval_t si_sigval;
}

final class UnnamedStruct8 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  @__clock_t()
  external int si_utime;

  @__clock_t()
  external int si_stime;
}

final class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> si_addr;

  @ffi.Short()
  external int si_addr_lsb;

  external UnnamedUnion3 _bounds;
}

final class UnnamedUnion3 extends ffi.Union {
  external UnnamedStruct10 _addr_bnd;

  @__uint32_t()
  external int _pkey;
}

final class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _lower;

  external ffi.Pointer<ffi.Void> _upper;
}

final class UnnamedStruct11 extends ffi.Struct {
  @ffi.Long()
  external int si_band;

  @ffi.Int()
  external int si_fd;
}

final class UnnamedStruct12 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _call_addr;

  @ffi.Int()
  external int _syscall;

  @ffi.UnsignedInt()
  external int _arch;
}

typedef __sighandler_t
    = ffi.Pointer<ffi.NativeFunction<__sighandler_tFunction>>;
typedef __sighandler_tFunction = ffi.Void Function(ffi.Int);
typedef Dart__sighandler_tFunction = void Function(int);
typedef sigset_t = __sigset_t;

final class sigaction extends ffi.Struct {
  external UnnamedUnion4 __sigaction_handler;

  external __sigset_t sa_mask;

  @ffi.Int()
  external int sa_flags;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> sa_restorer;
}

final class UnnamedUnion4 extends ffi.Union {
  external __sighandler_t sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>>
      sa_sigaction;
}

final class _fpx_sw_bytes extends ffi.Struct {
  @__uint32_t()
  external int magic1;

  @__uint32_t()
  external int extended_size;

  @__uint64_t()
  external int xstate_bv;

  @__uint32_t()
  external int xstate_size;

  @ffi.Array.multi([7])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;

final class _fpreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;
}

final class _fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

final class _xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

final class _fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;

final class sigcontext extends ffi.Struct {
  @__uint64_t()
  external int r8;

  @__uint64_t()
  external int r9;

  @__uint64_t()
  external int r10;

  @__uint64_t()
  external int r11;

  @__uint64_t()
  external int r12;

  @__uint64_t()
  external int r13;

  @__uint64_t()
  external int r14;

  @__uint64_t()
  external int r15;

  @__uint64_t()
  external int rdi;

  @__uint64_t()
  external int rsi;

  @__uint64_t()
  external int rbp;

  @__uint64_t()
  external int rbx;

  @__uint64_t()
  external int rdx;

  @__uint64_t()
  external int rax;

  @__uint64_t()
  external int rcx;

  @__uint64_t()
  external int rsp;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int eflags;

  @ffi.UnsignedShort()
  external int cs;

  @ffi.UnsignedShort()
  external int gs;

  @ffi.UnsignedShort()
  external int fs;

  @ffi.UnsignedShort()
  external int __pad0;

  @__uint64_t()
  external int err;

  @__uint64_t()
  external int trapno;

  @__uint64_t()
  external int oldmask;

  @__uint64_t()
  external int cr2;

  external UnnamedUnion5 unnamed;

  @ffi.Array.multi([8])
  external ffi.Array<__uint64_t> __reserved1;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<_fpstate> fpstate;

  @__uint64_t()
  external int __fpstate_word;
}

final class _xsave_hdr extends ffi.Struct {
  @__uint64_t()
  external int xstate_bv;

  @ffi.Array.multi([2])
  external ffi.Array<__uint64_t> __glibc_reserved1;

  @ffi.Array.multi([5])
  external ffi.Array<__uint64_t> __glibc_reserved2;
}

final class _ymmh_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> ymmh_space;
}

final class _xstate extends ffi.Struct {
  external _fpstate fpstate;

  external _xsave_hdr xstate_hdr;

  external _ymmh_state ymmh;
}

final class stack_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_flags;

  @ffi.Size()
  external int ss_size;
}

final class _libc_fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

final class _libc_xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

final class _libc_fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_libc_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_libc_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

final class mcontext_t extends ffi.Struct {
  @ffi.Array.multi([23])
  external ffi.Array<greg_t> gregs;

  external fpregset_t fpregs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLongLong> __reserved1;
}

typedef greg_t = ffi.LongLong;
typedef Dartgreg_t = int;
typedef fpregset_t = ffi.Pointer<_libc_fpstate>;

final class ucontext_t extends ffi.Struct {
  @ffi.UnsignedLong()
  external int uc_flags;

  external ffi.Pointer<ucontext_t> uc_link;

  external stack_t uc_stack;

  external mcontext_t uc_mcontext;

  external sigset_t uc_sigmask;

  external _libc_fpstate __fpregs_mem;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedLongLong> __ssp;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;
typedef guchar = ffi.UnsignedChar;
typedef Dartguchar = int;
typedef guintptr = ffi.UnsignedLong;
typedef Dartguintptr = int;

final class _GTimeZone extends ffi.Opaque {}

/// GTimeType:
/// @G_TIME_TYPE_STANDARD: the time is in local standard time
/// @G_TIME_TYPE_DAYLIGHT: the time is in local daylight time
/// @G_TIME_TYPE_UNIVERSAL: the time is in UTC
///
/// Disambiguates a given time in two ways.
///
/// First, specifies if the given time is in universal or local time.
///
/// Second, if the time is in local time, specifies if it is local
/// standard time or local daylight time.  This is important for the case
/// where the same local time occurs twice (during daylight savings time
/// transitions, for example).
abstract class GTimeType {
  static const int G_TIME_TYPE_STANDARD = 0;
  static const int G_TIME_TYPE_DAYLIGHT = 1;
  static const int G_TIME_TYPE_UNIVERSAL = 2;
}

typedef GTimeZone = _GTimeZone;
typedef gint32 = ffi.Int;
typedef Dartgint32 = int;

final class _GDateTime extends ffi.Opaque {}

/// GDateTime:
///
/// `GDateTime` is a structure that combines a Gregorian date and time
/// into a single structure.
///
/// `GDateTime` provides many conversion and methods to manipulate dates and times.
/// Time precision is provided down to microseconds and the time can range
/// (proleptically) from 0001-01-01 00:00:00 to 9999-12-31 23:59:59.999999.
/// `GDateTime` follows POSIX time in the sense that it is oblivious to leap
/// seconds.
///
/// `GDateTime` is an immutable object; once it has been created it cannot
/// be modified further. All modifiers will create a new `GDateTime`.
/// Nearly all such functions can fail due to the date or time going out
/// of range, in which case %NULL will be returned.
///
/// `GDateTime` is reference counted: the reference count is increased by calling
/// [method@GLib.DateTime.ref] and decreased by calling [method@GLib.DateTime.unref].
/// When the reference count drops to 0, the resources allocated by the `GDateTime`
/// structure are released.
///
/// Many parts of the API may produce non-obvious results. As an
/// example, adding two months to January 31st will yield March 31st
/// whereas adding one month and then one month again will yield either
/// March 28th or March 29th.  Also note that adding 24 hours is not
/// always the same as adding one day (since days containing daylight
/// savings time transitions are either 23 or 25 hours in length).
///
/// Since: 2.26
typedef GDateTime = _GDateTime;
typedef gdouble = ffi.Double;
typedef Dartgdouble = double;

/// GTimeSpan:
///
/// A value representing an interval of time, in microseconds.
///
/// Since: 2.26
typedef GTimeSpan = gint64;

/// GBookmarkFileError:
/// @G_BOOKMARK_FILE_ERROR_INVALID_URI: URI was ill-formed
/// @G_BOOKMARK_FILE_ERROR_INVALID_VALUE: a requested field was not found
/// @G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: a requested application did
/// not register a bookmark
/// @G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: a requested URI was not found
/// @G_BOOKMARK_FILE_ERROR_READ: document was ill formed
/// @G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: the text being parsed was
/// in an unknown encoding
/// @G_BOOKMARK_FILE_ERROR_WRITE: an error occurred while writing
/// @G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: requested file was not found
///
/// Error codes returned by bookmark file parsing.
abstract class GBookmarkFileError {
  static const int G_BOOKMARK_FILE_ERROR_INVALID_URI = 0;
  static const int G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1;
  static const int G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2;
  static const int G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3;
  static const int G_BOOKMARK_FILE_ERROR_READ = 4;
  static const int G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5;
  static const int G_BOOKMARK_FILE_ERROR_WRITE = 6;
  static const int G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7;
}

final class _GBookmarkFile extends ffi.Opaque {}

/// GBookmarkFile:
///
/// `GBookmarkFile` lets you parse, edit or create files containing bookmarks.
///
/// Bookmarks refer to a URI, along with some meta-data about the resource
/// pointed by the URI like its MIME type, the application that is registering
/// the bookmark and the icon that should be used to represent the bookmark.
/// The data is stored using the
/// [Desktop Bookmark Specification](http://www.gnome.org/~ebassi/bookmark-spec).
///
/// The syntax of the bookmark files is described in detail inside the
/// Desktop Bookmark Specification, here is a quick summary: bookmark
/// files use a sub-class of the XML Bookmark Exchange Language
/// specification, consisting of valid UTF-8 encoded XML, under the
/// `<xbel>` root element; each bookmark is stored inside a
/// `<bookmark>` element, using its URI: no relative paths can
/// be used inside a bookmark file. The bookmark may have a user defined
/// title and description, to be used instead of the URI. Under the
/// `<metadata>` element, with its owner attribute set to
/// `http://freedesktop.org`, is stored the meta-data about a resource
/// pointed by its URI. The meta-data consists of the resource's MIME
/// type; the applications that have registered a bookmark; the groups
/// to which a bookmark belongs to; a visibility flag, used to set the
/// bookmark as "private" to the applications and groups that has it
/// registered; the URI and MIME type of an icon, to be used when
/// displaying the bookmark inside a GUI.
///
/// Here is an example of a bookmark file:
/// [bookmarks.xbel](https://gitlab.gnome.org/GNOME/glib/-/blob/HEAD/glib/tests/bookmarks.xbel)
///
/// A bookmark file might contain more than one bookmark; each bookmark
/// is accessed through its URI.
///
/// The important caveat of bookmark files is that when you add a new
/// bookmark you must also add the application that is registering it, using
/// [method@GLib.BookmarkFile.add_application] or [method@GLib.BookmarkFile.set_application_info].
/// If a bookmark has no applications then it won't be dumped when creating
/// the on disk representation, using [method@GLib.BookmarkFile.to_data] or
/// [method@GLib.BookmarkFile.to_file].
///
/// Since: 2.12
typedef GBookmarkFile = _GBookmarkFile;

/// GChecksumType:
/// @G_CHECKSUM_MD5: Use the MD5 hashing algorithm
/// @G_CHECKSUM_SHA1: Use the SHA-1 hashing algorithm
/// @G_CHECKSUM_SHA256: Use the SHA-256 hashing algorithm
/// @G_CHECKSUM_SHA384: Use the SHA-384 hashing algorithm (Since: 2.51)
/// @G_CHECKSUM_SHA512: Use the SHA-512 hashing algorithm (Since: 2.36)
///
/// The hashing algorithm to be used by #GChecksum when performing the
/// digest of some data.
///
/// Note that the #GChecksumType enumeration may be extended at a later
/// date to include new hashing algorithm types.
///
/// Since: 2.16
abstract class GChecksumType {
  static const int G_CHECKSUM_MD5 = 0;
  static const int G_CHECKSUM_SHA1 = 1;
  static const int G_CHECKSUM_SHA256 = 2;
  static const int G_CHECKSUM_SHA512 = 3;
  static const int G_CHECKSUM_SHA384 = 4;
}

final class _GChecksum extends ffi.Opaque {}

typedef gssize = ffi.Long;
typedef Dartgssize = int;
typedef GChecksum = _GChecksum;

/// GConvertError:
/// @G_CONVERT_ERROR_NO_CONVERSION: Conversion between the requested character
/// sets is not supported.
/// @G_CONVERT_ERROR_ILLEGAL_SEQUENCE: Invalid byte sequence in conversion input;
/// or the character sequence could not be represented in the target
/// character set.
/// @G_CONVERT_ERROR_FAILED: Conversion failed for some reason.
/// @G_CONVERT_ERROR_PARTIAL_INPUT: Partial character sequence at end of input.
/// @G_CONVERT_ERROR_BAD_URI: URI is invalid.
/// @G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: Pathname is not an absolute path.
/// @G_CONVERT_ERROR_NO_MEMORY: No memory available. Since: 2.40
/// @G_CONVERT_ERROR_EMBEDDED_NUL: An embedded NUL character is present in
/// conversion output where a NUL-terminated string is expected.
/// Since: 2.56
///
/// Error codes returned by character set conversion routines.
abstract class GConvertError {
  static const int G_CONVERT_ERROR_NO_CONVERSION = 0;
  static const int G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1;
  static const int G_CONVERT_ERROR_FAILED = 2;
  static const int G_CONVERT_ERROR_PARTIAL_INPUT = 3;
  static const int G_CONVERT_ERROR_BAD_URI = 4;
  static const int G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5;
  static const int G_CONVERT_ERROR_NO_MEMORY = 6;
  static const int G_CONVERT_ERROR_EMBEDDED_NUL = 7;
}

final class _GIConv extends ffi.Opaque {}

/// GIConv: (skip)
///
/// The GIConv struct wraps an iconv() conversion descriptor. It contains
/// private data and should only be accessed using the following functions.
typedef GIConv = ffi.Pointer<_GIConv>;

final class _GData extends ffi.Opaque {}

typedef GData = _GData;
typedef GDuplicateFunc
    = ffi.Pointer<ffi.NativeFunction<GDuplicateFuncFunction>>;
typedef GDuplicateFuncFunction = ffi.Pointer Function(
    ffi.Pointer data, ffi.Pointer user_data);
typedef GDataForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GDataForeachFuncFunction>>;
typedef GDataForeachFuncFunction = ffi.Void Function(
    GQuark key_id, ffi.Pointer data, ffi.Pointer user_data);
typedef DartGDataForeachFuncFunction = void Function(
    Dartguint32 key_id, ffi.Pointer data, ffi.Pointer user_data);

final class _GDate extends ffi.Opaque {}

abstract class GDateDMY {
  static const int G_DATE_DAY = 0;
  static const int G_DATE_MONTH = 1;
  static const int G_DATE_YEAR = 2;
}

abstract class GDateWeekday {
  static const int G_DATE_BAD_WEEKDAY = 0;
  static const int G_DATE_MONDAY = 1;
  static const int G_DATE_TUESDAY = 2;
  static const int G_DATE_WEDNESDAY = 3;
  static const int G_DATE_THURSDAY = 4;
  static const int G_DATE_FRIDAY = 5;
  static const int G_DATE_SATURDAY = 6;
  static const int G_DATE_SUNDAY = 7;
}

abstract class GDateMonth {
  static const int G_DATE_BAD_MONTH = 0;
  static const int G_DATE_JANUARY = 1;
  static const int G_DATE_FEBRUARY = 2;
  static const int G_DATE_MARCH = 3;
  static const int G_DATE_APRIL = 4;
  static const int G_DATE_MAY = 5;
  static const int G_DATE_JUNE = 6;
  static const int G_DATE_JULY = 7;
  static const int G_DATE_AUGUST = 8;
  static const int G_DATE_SEPTEMBER = 9;
  static const int G_DATE_OCTOBER = 10;
  static const int G_DATE_NOVEMBER = 11;
  static const int G_DATE_DECEMBER = 12;
}

typedef GDate = _GDate;
typedef GDateDay = guint8;
typedef GDateYear = guint16;
typedef guint16 = ffi.UnsignedShort;
typedef Dartguint16 = int;
typedef GTime = gint32;

final class dirent extends ffi.Struct {
  @__ino_t()
  external int d_ino;

  @__off_t()
  external int d_off;

  @ffi.UnsignedShort()
  external int d_reclen;

  @ffi.UnsignedChar()
  external int d_type;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> d_name;
}

typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __off_t = ffi.Long;
typedef Dart__off_t = int;

final class __dirstream extends ffi.Opaque {}

typedef DIR = __dirstream;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;

final class _GDir extends ffi.Opaque {}

typedef GDir = _GDir;

abstract class GFileError {
  static const int G_FILE_ERROR_EXIST = 0;
  static const int G_FILE_ERROR_ISDIR = 1;
  static const int G_FILE_ERROR_ACCES = 2;
  static const int G_FILE_ERROR_NAMETOOLONG = 3;
  static const int G_FILE_ERROR_NOENT = 4;
  static const int G_FILE_ERROR_NOTDIR = 5;
  static const int G_FILE_ERROR_NXIO = 6;
  static const int G_FILE_ERROR_NODEV = 7;
  static const int G_FILE_ERROR_ROFS = 8;
  static const int G_FILE_ERROR_TXTBSY = 9;
  static const int G_FILE_ERROR_FAULT = 10;
  static const int G_FILE_ERROR_LOOP = 11;
  static const int G_FILE_ERROR_NOSPC = 12;
  static const int G_FILE_ERROR_NOMEM = 13;
  static const int G_FILE_ERROR_MFILE = 14;
  static const int G_FILE_ERROR_NFILE = 15;
  static const int G_FILE_ERROR_BADF = 16;
  static const int G_FILE_ERROR_INVAL = 17;
  static const int G_FILE_ERROR_PIPE = 18;
  static const int G_FILE_ERROR_AGAIN = 19;
  static const int G_FILE_ERROR_INTR = 20;
  static const int G_FILE_ERROR_IO = 21;
  static const int G_FILE_ERROR_PERM = 22;
  static const int G_FILE_ERROR_NOSYS = 23;
  static const int G_FILE_ERROR_FAILED = 24;
}

abstract class GFileTest {
  static const int G_FILE_TEST_IS_REGULAR = 1;
  static const int G_FILE_TEST_IS_SYMLINK = 2;
  static const int G_FILE_TEST_IS_DIR = 4;
  static const int G_FILE_TEST_IS_EXECUTABLE = 8;
  static const int G_FILE_TEST_EXISTS = 16;
}

/// GFileSetContentsFlags:
/// @G_FILE_SET_CONTENTS_NONE: No guarantees about file consistency or durability.
/// The most dangerous setting, which is slightly faster than other settings.
/// @G_FILE_SET_CONTENTS_CONSISTENT: Guarantee file consistency: after a crash,
/// either the old version of the file or the new version of the file will be
/// available, but not a mixture. On Unix systems this equates to an `fsync()`
/// on the file and use of an atomic `rename()` of the new version of the file
/// over the old.
/// @G_FILE_SET_CONTENTS_DURABLE: Guarantee file durability: after a crash, the
/// new version of the file will be available. On Unix systems this equates to
/// an `fsync()` on the file (if %G_FILE_SET_CONTENTS_CONSISTENT is unset), or
/// the effects of %G_FILE_SET_CONTENTS_CONSISTENT plus an `fsync()` on the
/// directory containing the file after calling `rename()`.
/// @G_FILE_SET_CONTENTS_ONLY_EXISTING: Only apply consistency and durability
/// guarantees if the file already exists. This may speed up file operations
/// if the file doesn’t currently exist, but may result in a corrupted version
/// of the new file if the system crashes while writing it.
///
/// Flags to pass to g_file_set_contents_full() to affect its safety and
/// performance.
///
/// Since: 2.66
abstract class GFileSetContentsFlags {
  static const int G_FILE_SET_CONTENTS_NONE = 0;
  static const int G_FILE_SET_CONTENTS_CONSISTENT = 1;
  static const int G_FILE_SET_CONTENTS_DURABLE = 2;
  static const int G_FILE_SET_CONTENTS_ONLY_EXISTING = 4;
}

final class _GMemVTable extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer Function(gsize n_bytes)>>
      malloc;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer mem, gsize n_bytes)>>
      realloc;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer mem)>>
      free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer Function(gsize n_blocks, gsize n_block_bytes)>> calloc;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer Function(gsize n_bytes)>>
      try_malloc;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Pointer Function(ffi.Pointer mem, gsize n_bytes)>>
      try_realloc;
}

/// GMemVTable:
/// @malloc: function to use for allocating memory.
/// @realloc: function to use for reallocating memory.
/// @free: function to use to free memory.
/// @calloc: function to use for allocating zero-filled memory.
/// @try_malloc: function to use for allocating memory without a default error handler.
/// @try_realloc: function to use for reallocating memory without a default error handler.
///
/// A set of functions used to perform memory allocation. The same #GMemVTable must
/// be used for all allocations in the same program; a call to g_mem_set_vtable(),
/// if it exists, should be prior to any use of GLib.
///
/// This functions related to this has been deprecated in 2.46, and no longer work.
typedef GMemVTable = _GMemVTable;

final class _GNode extends ffi.Struct {
  external ffi.Pointer data;

  external ffi.Pointer<GNode> next;

  external ffi.Pointer<GNode> prev;

  external ffi.Pointer<GNode> parent;

  external ffi.Pointer<GNode> children;
}

typedef GNode = _GNode;

abstract class GTraverseFlags {
  static const int G_TRAVERSE_LEAVES = 1;
  static const int G_TRAVERSE_NON_LEAVES = 2;
  static const int G_TRAVERSE_ALL = 3;
  static const int G_TRAVERSE_MASK = 3;
  static const int G_TRAVERSE_LEAFS = 1;
  static const int G_TRAVERSE_NON_LEAFS = 2;
}

abstract class GTraverseType {
  static const int G_IN_ORDER = 0;
  static const int G_PRE_ORDER = 1;
  static const int G_POST_ORDER = 2;
  static const int G_LEVEL_ORDER = 3;
}

typedef GNodeTraverseFunc
    = ffi.Pointer<ffi.NativeFunction<GNodeTraverseFuncFunction>>;
typedef GNodeTraverseFuncFunction = gboolean Function(
    ffi.Pointer<GNode> node, ffi.Pointer data);
typedef DartGNodeTraverseFuncFunction = Dartgint Function(
    ffi.Pointer<GNode> node, ffi.Pointer data);
typedef GNodeForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GNodeForeachFuncFunction>>;
typedef GNodeForeachFuncFunction = ffi.Void Function(
    ffi.Pointer<GNode> node, ffi.Pointer data);
typedef DartGNodeForeachFuncFunction = void Function(
    ffi.Pointer<GNode> node, ffi.Pointer data);

final class _GList extends ffi.Struct {
  external ffi.Pointer data;

  external ffi.Pointer<GList> next;

  external ffi.Pointer<GList> prev;
}

typedef GList = _GList;

final class _GHashTable extends ffi.Opaque {}

final class _GHashTableIter extends ffi.Struct {
  external ffi.Pointer dummy1;

  external ffi.Pointer dummy2;

  external ffi.Pointer dummy3;

  @ffi.Int()
  external int dummy4;

  @gboolean()
  external int dummy5;

  external ffi.Pointer dummy6;
}

typedef GHashTable = _GHashTable;
typedef GHashFunc = ffi.Pointer<ffi.NativeFunction<GHashFuncFunction>>;
typedef GHashFuncFunction = guint Function(gconstpointer key);
typedef DartGHashFuncFunction = Dartguint Function(gconstpointer key);
typedef GHFunc = ffi.Pointer<ffi.NativeFunction<GHFuncFunction>>;
typedef GHFuncFunction = ffi.Void Function(
    ffi.Pointer key, ffi.Pointer value, ffi.Pointer user_data);
typedef DartGHFuncFunction = void Function(
    ffi.Pointer key, ffi.Pointer value, ffi.Pointer user_data);
typedef GHRFunc = ffi.Pointer<ffi.NativeFunction<GHRFuncFunction>>;
typedef GHRFuncFunction = gboolean Function(
    ffi.Pointer key, ffi.Pointer value, ffi.Pointer user_data);
typedef DartGHRFuncFunction = Dartgint Function(
    ffi.Pointer key, ffi.Pointer value, ffi.Pointer user_data);
typedef GHashTableIter = _GHashTableIter;

final class _GHmac extends ffi.Opaque {}

typedef GHmac = _GHmac;

final class _GHook extends ffi.Struct {
  external ffi.Pointer data;

  external ffi.Pointer<GHook> next;

  external ffi.Pointer<GHook> prev;

  @guint()
  external int ref_count;

  @gulong()
  external int hook_id;

  @guint()
  external int flags;

  external ffi.Pointer func;

  external GDestroyNotify destroy;
}

typedef GHook = _GHook;

final class _GHookList extends ffi.Opaque {}

abstract class GHookFlagMask {
  static const int G_HOOK_FLAG_ACTIVE = 1;
  static const int G_HOOK_FLAG_IN_CALL = 2;
  static const int G_HOOK_FLAG_MASK = 15;
}

typedef GHookList = _GHookList;
typedef GHookCompareFunc
    = ffi.Pointer<ffi.NativeFunction<GHookCompareFuncFunction>>;
typedef GHookCompareFuncFunction = gint Function(
    ffi.Pointer<GHook> new_hook, ffi.Pointer<GHook> sibling);
typedef DartGHookCompareFuncFunction = Dartgint Function(
    ffi.Pointer<GHook> new_hook, ffi.Pointer<GHook> sibling);
typedef GHookFindFunc = ffi.Pointer<ffi.NativeFunction<GHookFindFuncFunction>>;
typedef GHookFindFuncFunction = gboolean Function(
    ffi.Pointer<GHook> hook, ffi.Pointer data);
typedef DartGHookFindFuncFunction = Dartgint Function(
    ffi.Pointer<GHook> hook, ffi.Pointer data);
typedef GHookMarshaller
    = ffi.Pointer<ffi.NativeFunction<GHookMarshallerFunction>>;
typedef GHookMarshallerFunction = ffi.Void Function(
    ffi.Pointer<GHook> hook, ffi.Pointer marshal_data);
typedef DartGHookMarshallerFunction = void Function(
    ffi.Pointer<GHook> hook, ffi.Pointer marshal_data);
typedef GHookCheckMarshaller
    = ffi.Pointer<ffi.NativeFunction<GHookCheckMarshallerFunction>>;
typedef GHookCheckMarshallerFunction = gboolean Function(
    ffi.Pointer<GHook> hook, ffi.Pointer marshal_data);
typedef DartGHookCheckMarshallerFunction = Dartgint Function(
    ffi.Pointer<GHook> hook, ffi.Pointer marshal_data);

/// GPollFD:
/// @fd: the file descriptor to poll (or a HANDLE on Win32)
/// @events: a bitwise combination from #GIOCondition, specifying which
/// events should be polled for. Typically for reading from a file
/// descriptor you would use %G_IO_IN | %G_IO_HUP | %G_IO_ERR, and
/// for writing you would use %G_IO_OUT | %G_IO_ERR.
/// @revents: a bitwise combination of flags from #GIOCondition, returned
/// from the poll() function to indicate which events occurred.
///
/// Represents a file descriptor, which events to poll for, and which events
/// occurred.
final class _GPollFD extends ffi.Struct {
  @gint()
  external int fd;

  @gushort()
  external int events;

  @gushort()
  external int revents;
}

typedef gushort = ffi.UnsignedShort;
typedef Dartgushort = int;
typedef GPollFD = _GPollFD;

final class _GSList extends ffi.Struct {
  external ffi.Pointer data;

  external ffi.Pointer<GSList> next;
}

typedef GSList = _GSList;

abstract class GIOCondition {
  static const int G_IO_IN = 1;
  static const int G_IO_OUT = 4;
  static const int G_IO_PRI = 2;
  static const int G_IO_ERR = 8;
  static const int G_IO_HUP = 16;
  static const int G_IO_NVAL = 32;
}

/// GMainContextFlags:
/// @G_MAIN_CONTEXT_FLAGS_NONE: Default behaviour.
/// @G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING: Assume that polling for events will
/// free the thread to process other jobs. That's useful if you're using
/// `g_main_context_{prepare,query,check,dispatch}` to integrate GMainContext in
/// other event loops.
///
/// Flags to pass to g_main_context_new_with_flags() which affect the behaviour
/// of a #GMainContext.
///
/// Since: 2.72
abstract class GMainContextFlags {
  static const int G_MAIN_CONTEXT_FLAGS_NONE = 0;
  static const int G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1;
}

final class _GMainContext extends ffi.Opaque {}

final class _GMainLoop extends ffi.Opaque {}

final class _GSource extends ffi.Struct {
  external ffi.Pointer callback_data;

  external ffi.Pointer<GSourceCallbackFuncs> callback_funcs;

  external ffi.Pointer<GSourceFuncs> source_funcs;

  @guint()
  external int ref_count;

  external ffi.Pointer<GMainContext> context;

  @gint()
  external int priority;

  @guint()
  external int flags;

  @guint()
  external int source_id;

  external ffi.Pointer<GSList> poll_fds;

  external ffi.Pointer<GSource> prev;

  external ffi.Pointer<GSource> next;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<GSourcePrivate> priv;
}

/// GSourceCallbackFuncs:
/// @ref: Called when a reference is added to the callback object
/// @unref: Called when a reference to the callback object is dropped
/// @get: Called to extract the callback function and data from the
/// callback object.
///
/// The `GSourceCallbackFuncs` struct contains
/// functions for managing callback objects.
typedef GSourceCallbackFuncs = _GSourceCallbackFuncs;

final class _GSourceCallbackFuncs extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer cb_data)>> ref;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer cb_data)>>
      unref;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer cb_data,
              ffi.Pointer<GSource> source,
              ffi.Pointer<GSourceFunc> func,
              ffi.Pointer<ffi.Pointer> data)>> get1;
}

/// GSource:
///
/// The `GSource` struct is an opaque data type
/// representing an event source.
typedef GSource = _GSource;

/// GSourceFunc:
/// @user_data: data passed to the function, set when the source was
/// created with one of the above functions
///
/// Specifies the type of function passed to g_timeout_add(),
/// g_timeout_add_full(), g_idle_add(), and g_idle_add_full().
///
/// When calling g_source_set_callback(), you may need to cast a function of a
/// different type to this type. Use G_SOURCE_FUNC() to avoid warnings about
/// incompatible function types.
///
/// Returns: %FALSE if the source should be removed. %G_SOURCE_CONTINUE and
/// %G_SOURCE_REMOVE are more memorable names for the return value.
typedef GSourceFunc = ffi.Pointer<ffi.NativeFunction<GSourceFuncFunction>>;
typedef GSourceFuncFunction = gboolean Function(ffi.Pointer user_data);
typedef DartGSourceFuncFunction = Dartgint Function(ffi.Pointer user_data);

/// GSourceFuncs:
/// @prepare: Called before all the file descriptors are polled. If the
/// source can determine that it is ready here (without waiting for the
/// results of the poll() call) it should return %TRUE. It can also return
/// a @timeout_ value which should be the maximum timeout (in milliseconds)
/// which should be passed to the poll() call. The actual timeout used will
/// be -1 if all sources returned -1, or it will be the minimum of all
/// the @timeout_ values returned which were >= 0.  Since 2.36 this may
/// be %NULL, in which case the effect is as if the function always returns
/// %FALSE with a timeout of -1.  If @prepare returns a
/// timeout and the source also has a ready time set, then the
/// lower of the two will be used.
/// @check: Called after all the file descriptors are polled. The source
/// should return %TRUE if it is ready to be dispatched. Note that some
/// time may have passed since the previous prepare function was called,
/// so the source should be checked again here.  Since 2.36 this may
/// be %NULL, in which case the effect is as if the function always returns
/// %FALSE.
/// @dispatch: Called to dispatch the event source, after it has returned
/// %TRUE in either its @prepare or its @check function, or if a ready time
/// has been reached. The @dispatch function receives a callback function and
/// user data. The callback function may be %NULL if the source was never
/// connected to a callback using g_source_set_callback(). The @dispatch
/// function should call the callback function with @user_data and whatever
/// additional parameters are needed for this type of event source. The
/// return value of the @dispatch function should be %G_SOURCE_REMOVE if the
/// source should be removed or %G_SOURCE_CONTINUE to keep it.
/// @finalize: Called when the source is finalized. At this point, the source
/// will have been destroyed, had its callback cleared, and have been removed
/// from its #GMainContext, but it will still have its final reference count,
/// so methods can be called on it from within this function.
///
/// The `GSourceFuncs` struct contains a table of
/// functions used to handle event sources in a generic manner.
///
/// For idle sources, the prepare and check functions always return %TRUE
/// to indicate that the source is always ready to be processed. The prepare
/// function also returns a timeout value of 0 to ensure that the poll() call
/// doesn't block (since that would be time wasted which could have been spent
/// running the idle function).
///
/// For timeout sources, the prepare and check functions both return %TRUE
/// if the timeout interval has expired. The prepare function also returns
/// a timeout value to ensure that the poll() call doesn't block too long
/// and miss the next timeout.
///
/// For file descriptor sources, the prepare function typically returns %FALSE,
/// since it must wait until poll() has been called before it knows whether
/// any events need to be processed. It sets the returned timeout to -1 to
/// indicate that it doesn't mind how long the poll() call blocks. In the
/// check function, it tests the results of the poll() call to see if the
/// required condition has been met, and returns %TRUE if so.
typedef GSourceFuncs = _GSourceFuncs;

final class _GSourceFuncs extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GSource> source, ffi.Pointer<gint> timeout_)>>
      prepare;

  external ffi.Pointer<
      ffi.NativeFunction<gboolean Function(ffi.Pointer<GSource> source)>> check;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GSource> source, GSourceFunc callback,
              ffi.Pointer user_data)>> dispatch;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GSource> source)>>
      finalize;

  external GSourceFunc closure_callback;

  external GSourceDummyMarshal closure_marshal;
}

/// GSourceDummyMarshal:
///
/// This is just a placeholder for #GClosureMarshal,
/// which cannot be used here for dependency reasons.
typedef GSourceDummyMarshal
    = ffi.Pointer<ffi.NativeFunction<GSourceDummyMarshalFunction>>;
typedef GSourceDummyMarshalFunction = ffi.Void Function();
typedef DartGSourceDummyMarshalFunction = void Function();

/// GMainContext:
///
/// The `GMainContext` struct is an opaque data
/// type representing a set of sources to be handled in a main loop.
typedef GMainContext = _GMainContext;
typedef GSourcePrivate = _GSourcePrivate;

final class _GSourcePrivate extends ffi.Opaque {}

/// GPollFunc:
/// @ufds: an array of #GPollFD elements
/// @nfsd: the number of elements in @ufds
/// @timeout_: the maximum time to wait for an event of the file descriptors.
/// A negative value indicates an infinite timeout.
///
/// Specifies the type of function passed to g_main_context_set_poll_func().
/// The semantics of the function should match those of the poll() system call.
///
/// Returns: the number of #GPollFD elements which have events or errors
/// reported, or -1 if an error occurred.
typedef GPollFunc = ffi.Pointer<ffi.NativeFunction<GPollFuncFunction>>;
typedef GPollFuncFunction = gint Function(
    ffi.Pointer<GPollFD> ufds, guint nfsd, gint timeout_);
typedef DartGPollFuncFunction = Dartgint Function(
    ffi.Pointer<GPollFD> ufds, Dartguint nfsd, Dartgint timeout_);

/// GMainLoop:
///
/// The `GMainLoop` struct is an opaque data type
/// representing the main event loop of a GLib or GTK application.
typedef GMainLoop = _GMainLoop;

/// GSourceDisposeFunc:
/// @source: #GSource that is currently being disposed
///
/// Dispose function for @source. See g_source_set_dispose_function() for
/// details.
///
/// Since: 2.64
typedef GSourceDisposeFunc
    = ffi.Pointer<ffi.NativeFunction<GSourceDisposeFuncFunction>>;
typedef GSourceDisposeFuncFunction = ffi.Void Function(
    ffi.Pointer<GSource> source);
typedef DartGSourceDisposeFuncFunction = void Function(
    ffi.Pointer<GSource> source);
typedef GPid = ffi.Int;
typedef DartGPid = int;

/// GClearHandleFunc:
/// @handle_id: the handle ID to clear
///
/// Specifies the type of function passed to g_clear_handle_id().
/// The implementation is expected to free the resource identified
/// by @handle_id; for instance, if @handle_id is a #GSource ID,
/// g_source_remove() can be used.
///
/// Since: 2.56
typedef GClearHandleFunc
    = ffi.Pointer<ffi.NativeFunction<GClearHandleFuncFunction>>;
typedef GClearHandleFuncFunction = ffi.Void Function(guint handle_id);
typedef DartGClearHandleFuncFunction = void Function(Dartguint handle_id);

/// GSourceOnceFunc:
/// @user_data: data passed to the function, set when the source was
/// created
///
/// A source function that is only called once before being removed from the main
/// context automatically.
///
/// See: g_idle_add_once(), g_timeout_add_once()
///
/// Since: 2.74
typedef GSourceOnceFunc
    = ffi.Pointer<ffi.NativeFunction<GSourceOnceFuncFunction>>;
typedef GSourceOnceFuncFunction = ffi.Void Function(ffi.Pointer user_data);
typedef DartGSourceOnceFuncFunction = void Function(ffi.Pointer user_data);

/// GChildWatchFunc:
/// @pid: the process id of the child process
/// @wait_status: Status information about the child process, encoded
/// in a platform-specific manner
/// @user_data: user data passed to g_child_watch_add()
///
/// Prototype of a #GChildWatchSource callback, called when a child
/// process has exited.
///
/// To interpret @wait_status, see the documentation
/// for g_spawn_check_wait_status(). In particular,
/// on Unix platforms, note that it is usually not equal
/// to the integer passed to `exit()` or returned from `main()`.
typedef GChildWatchFunc
    = ffi.Pointer<ffi.NativeFunction<GChildWatchFuncFunction>>;
typedef GChildWatchFuncFunction = ffi.Void Function(
    GPid pid, gint wait_status, ffi.Pointer user_data);
typedef DartGChildWatchFuncFunction = void Function(
    DartGPid pid, Dartgint wait_status, ffi.Pointer user_data);

/// GUnicodeType:
/// @G_UNICODE_CONTROL: General category "Other, Control" (Cc)
/// @G_UNICODE_FORMAT: General category "Other, Format" (Cf)
/// @G_UNICODE_UNASSIGNED: General category "Other, Not Assigned" (Cn)
/// @G_UNICODE_PRIVATE_USE: General category "Other, Private Use" (Co)
/// @G_UNICODE_SURROGATE: General category "Other, Surrogate" (Cs)
/// @G_UNICODE_LOWERCASE_LETTER: General category "Letter, Lowercase" (Ll)
/// @G_UNICODE_MODIFIER_LETTER: General category "Letter, Modifier" (Lm)
/// @G_UNICODE_OTHER_LETTER: General category "Letter, Other" (Lo)
/// @G_UNICODE_TITLECASE_LETTER: General category "Letter, Titlecase" (Lt)
/// @G_UNICODE_UPPERCASE_LETTER: General category "Letter, Uppercase" (Lu)
/// @G_UNICODE_SPACING_MARK: General category "Mark, Spacing" (Mc)
/// @G_UNICODE_ENCLOSING_MARK: General category "Mark, Enclosing" (Me)
/// @G_UNICODE_NON_SPACING_MARK: General category "Mark, Nonspacing" (Mn)
/// @G_UNICODE_DECIMAL_NUMBER: General category "Number, Decimal Digit" (Nd)
/// @G_UNICODE_LETTER_NUMBER: General category "Number, Letter" (Nl)
/// @G_UNICODE_OTHER_NUMBER: General category "Number, Other" (No)
/// @G_UNICODE_CONNECT_PUNCTUATION: General category "Punctuation, Connector" (Pc)
/// @G_UNICODE_DASH_PUNCTUATION: General category "Punctuation, Dash" (Pd)
/// @G_UNICODE_CLOSE_PUNCTUATION: General category "Punctuation, Close" (Pe)
/// @G_UNICODE_FINAL_PUNCTUATION: General category "Punctuation, Final quote" (Pf)
/// @G_UNICODE_INITIAL_PUNCTUATION: General category "Punctuation, Initial quote" (Pi)
/// @G_UNICODE_OTHER_PUNCTUATION: General category "Punctuation, Other" (Po)
/// @G_UNICODE_OPEN_PUNCTUATION: General category "Punctuation, Open" (Ps)
/// @G_UNICODE_CURRENCY_SYMBOL: General category "Symbol, Currency" (Sc)
/// @G_UNICODE_MODIFIER_SYMBOL: General category "Symbol, Modifier" (Sk)
/// @G_UNICODE_MATH_SYMBOL: General category "Symbol, Math" (Sm)
/// @G_UNICODE_OTHER_SYMBOL: General category "Symbol, Other" (So)
/// @G_UNICODE_LINE_SEPARATOR: General category "Separator, Line" (Zl)
/// @G_UNICODE_PARAGRAPH_SEPARATOR: General category "Separator, Paragraph" (Zp)
/// @G_UNICODE_SPACE_SEPARATOR: General category "Separator, Space" (Zs)
///
/// These are the possible character classifications from the
/// Unicode specification.
/// See [Unicode Character Database](http://www.unicode.org/reports/tr44/#General_Category_Values).
abstract class GUnicodeType {
  static const int G_UNICODE_CONTROL = 0;
  static const int G_UNICODE_FORMAT = 1;
  static const int G_UNICODE_UNASSIGNED = 2;
  static const int G_UNICODE_PRIVATE_USE = 3;
  static const int G_UNICODE_SURROGATE = 4;
  static const int G_UNICODE_LOWERCASE_LETTER = 5;
  static const int G_UNICODE_MODIFIER_LETTER = 6;
  static const int G_UNICODE_OTHER_LETTER = 7;
  static const int G_UNICODE_TITLECASE_LETTER = 8;
  static const int G_UNICODE_UPPERCASE_LETTER = 9;
  static const int G_UNICODE_SPACING_MARK = 10;
  static const int G_UNICODE_ENCLOSING_MARK = 11;
  static const int G_UNICODE_NON_SPACING_MARK = 12;
  static const int G_UNICODE_DECIMAL_NUMBER = 13;
  static const int G_UNICODE_LETTER_NUMBER = 14;
  static const int G_UNICODE_OTHER_NUMBER = 15;
  static const int G_UNICODE_CONNECT_PUNCTUATION = 16;
  static const int G_UNICODE_DASH_PUNCTUATION = 17;
  static const int G_UNICODE_CLOSE_PUNCTUATION = 18;
  static const int G_UNICODE_FINAL_PUNCTUATION = 19;
  static const int G_UNICODE_INITIAL_PUNCTUATION = 20;
  static const int G_UNICODE_OTHER_PUNCTUATION = 21;
  static const int G_UNICODE_OPEN_PUNCTUATION = 22;
  static const int G_UNICODE_CURRENCY_SYMBOL = 23;
  static const int G_UNICODE_MODIFIER_SYMBOL = 24;
  static const int G_UNICODE_MATH_SYMBOL = 25;
  static const int G_UNICODE_OTHER_SYMBOL = 26;
  static const int G_UNICODE_LINE_SEPARATOR = 27;
  static const int G_UNICODE_PARAGRAPH_SEPARATOR = 28;
  static const int G_UNICODE_SPACE_SEPARATOR = 29;
}

/// GUnicodeBreakType:
/// @G_UNICODE_BREAK_MANDATORY: Mandatory Break (BK)
/// @G_UNICODE_BREAK_CARRIAGE_RETURN: Carriage Return (CR)
/// @G_UNICODE_BREAK_LINE_FEED: Line Feed (LF)
/// @G_UNICODE_BREAK_COMBINING_MARK: Attached Characters and Combining Marks (CM)
/// @G_UNICODE_BREAK_SURROGATE: Surrogates (SG)
/// @G_UNICODE_BREAK_ZERO_WIDTH_SPACE: Zero Width Space (ZW)
/// @G_UNICODE_BREAK_INSEPARABLE: Inseparable (IN)
/// @G_UNICODE_BREAK_NON_BREAKING_GLUE: Non-breaking ("Glue") (GL)
/// @G_UNICODE_BREAK_CONTINGENT: Contingent Break Opportunity (CB)
/// @G_UNICODE_BREAK_SPACE: Space (SP)
/// @G_UNICODE_BREAK_AFTER: Break Opportunity After (BA)
/// @G_UNICODE_BREAK_BEFORE: Break Opportunity Before (BB)
/// @G_UNICODE_BREAK_BEFORE_AND_AFTER: Break Opportunity Before and After (B2)
/// @G_UNICODE_BREAK_HYPHEN: Hyphen (HY)
/// @G_UNICODE_BREAK_NON_STARTER: Nonstarter (NS)
/// @G_UNICODE_BREAK_OPEN_PUNCTUATION: Opening Punctuation (OP)
/// @G_UNICODE_BREAK_CLOSE_PUNCTUATION: Closing Punctuation (CL)
/// @G_UNICODE_BREAK_QUOTATION: Ambiguous Quotation (QU)
/// @G_UNICODE_BREAK_EXCLAMATION: Exclamation/Interrogation (EX)
/// @G_UNICODE_BREAK_IDEOGRAPHIC: Ideographic (ID)
/// @G_UNICODE_BREAK_NUMERIC: Numeric (NU)
/// @G_UNICODE_BREAK_INFIX_SEPARATOR: Infix Separator (Numeric) (IS)
/// @G_UNICODE_BREAK_SYMBOL: Symbols Allowing Break After (SY)
/// @G_UNICODE_BREAK_ALPHABETIC: Ordinary Alphabetic and Symbol Characters (AL)
/// @G_UNICODE_BREAK_PREFIX: Prefix (Numeric) (PR)
/// @G_UNICODE_BREAK_POSTFIX: Postfix (Numeric) (PO)
/// @G_UNICODE_BREAK_COMPLEX_CONTEXT: Complex Content Dependent (South East Asian) (SA)
/// @G_UNICODE_BREAK_AMBIGUOUS: Ambiguous (Alphabetic or Ideographic) (AI)
/// @G_UNICODE_BREAK_UNKNOWN: Unknown (XX)
/// @G_UNICODE_BREAK_NEXT_LINE: Next Line (NL)
/// @G_UNICODE_BREAK_WORD_JOINER: Word Joiner (WJ)
/// @G_UNICODE_BREAK_HANGUL_L_JAMO: Hangul L Jamo (JL)
/// @G_UNICODE_BREAK_HANGUL_V_JAMO: Hangul V Jamo (JV)
/// @G_UNICODE_BREAK_HANGUL_T_JAMO: Hangul T Jamo (JT)
/// @G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: Hangul LV Syllable (H2)
/// @G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: Hangul LVT Syllable (H3)
/// @G_UNICODE_BREAK_CLOSE_PARANTHESIS: Closing Parenthesis (CP). Since 2.28. Deprecated: 2.70: Use %G_UNICODE_BREAK_CLOSE_PARENTHESIS instead.
/// @G_UNICODE_BREAK_CLOSE_PARENTHESIS: Closing Parenthesis (CP). Since 2.70
/// @G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: Conditional Japanese Starter (CJ). Since: 2.32
/// @G_UNICODE_BREAK_HEBREW_LETTER: Hebrew Letter (HL). Since: 2.32
/// @G_UNICODE_BREAK_REGIONAL_INDICATOR: Regional Indicator (RI). Since: 2.36
/// @G_UNICODE_BREAK_EMOJI_BASE: Emoji Base (EB). Since: 2.50
/// @G_UNICODE_BREAK_EMOJI_MODIFIER: Emoji Modifier (EM). Since: 2.50
/// @G_UNICODE_BREAK_ZERO_WIDTH_JOINER: Zero Width Joiner (ZWJ). Since: 2.50
/// @G_UNICODE_BREAK_AKSARA: Aksara (AK). Since: 2.80
/// @G_UNICODE_BREAK_AKSARA_PRE_BASE (AP). Since: 2.80
/// @G_UNICODE_BREAK_AKSARA_START (AS). Since: 2.80
/// @G_UNICODE_BREAK_VIRAMA_FINAL (VF). Since: 2.80
/// @G_UNICODE_BREAK_VIRAMA (VI). Since: 2.80
///
/// These are the possible line break classifications.
///
/// Since new Unicode versions may add new types here, applications should be ready
/// to handle unknown values. They may be regarded as %G_UNICODE_BREAK_UNKNOWN.
///
/// See [Unicode Line Breaking Algorithm](https://www.unicode.org/reports/tr14/).
abstract class GUnicodeBreakType {
  static const int G_UNICODE_BREAK_MANDATORY = 0;
  static const int G_UNICODE_BREAK_CARRIAGE_RETURN = 1;
  static const int G_UNICODE_BREAK_LINE_FEED = 2;
  static const int G_UNICODE_BREAK_COMBINING_MARK = 3;
  static const int G_UNICODE_BREAK_SURROGATE = 4;
  static const int G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5;
  static const int G_UNICODE_BREAK_INSEPARABLE = 6;
  static const int G_UNICODE_BREAK_NON_BREAKING_GLUE = 7;
  static const int G_UNICODE_BREAK_CONTINGENT = 8;
  static const int G_UNICODE_BREAK_SPACE = 9;
  static const int G_UNICODE_BREAK_AFTER = 10;
  static const int G_UNICODE_BREAK_BEFORE = 11;
  static const int G_UNICODE_BREAK_BEFORE_AND_AFTER = 12;
  static const int G_UNICODE_BREAK_HYPHEN = 13;
  static const int G_UNICODE_BREAK_NON_STARTER = 14;
  static const int G_UNICODE_BREAK_OPEN_PUNCTUATION = 15;
  static const int G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16;
  static const int G_UNICODE_BREAK_QUOTATION = 17;
  static const int G_UNICODE_BREAK_EXCLAMATION = 18;
  static const int G_UNICODE_BREAK_IDEOGRAPHIC = 19;
  static const int G_UNICODE_BREAK_NUMERIC = 20;
  static const int G_UNICODE_BREAK_INFIX_SEPARATOR = 21;
  static const int G_UNICODE_BREAK_SYMBOL = 22;
  static const int G_UNICODE_BREAK_ALPHABETIC = 23;
  static const int G_UNICODE_BREAK_PREFIX = 24;
  static const int G_UNICODE_BREAK_POSTFIX = 25;
  static const int G_UNICODE_BREAK_COMPLEX_CONTEXT = 26;
  static const int G_UNICODE_BREAK_AMBIGUOUS = 27;
  static const int G_UNICODE_BREAK_UNKNOWN = 28;
  static const int G_UNICODE_BREAK_NEXT_LINE = 29;
  static const int G_UNICODE_BREAK_WORD_JOINER = 30;
  static const int G_UNICODE_BREAK_HANGUL_L_JAMO = 31;
  static const int G_UNICODE_BREAK_HANGUL_V_JAMO = 32;
  static const int G_UNICODE_BREAK_HANGUL_T_JAMO = 33;
  static const int G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34;
  static const int G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35;
  static const int G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36;
  static const int G_UNICODE_BREAK_CLOSE_PARENTHESIS = 36;
  static const int G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37;
  static const int G_UNICODE_BREAK_HEBREW_LETTER = 38;
  static const int G_UNICODE_BREAK_REGIONAL_INDICATOR = 39;
  static const int G_UNICODE_BREAK_EMOJI_BASE = 40;
  static const int G_UNICODE_BREAK_EMOJI_MODIFIER = 41;
  static const int G_UNICODE_BREAK_ZERO_WIDTH_JOINER = 42;
  static const int G_UNICODE_BREAK_AKSARA = 43;
  static const int G_UNICODE_BREAK_AKSARA_PRE_BASE = 44;
  static const int G_UNICODE_BREAK_AKSARA_START = 45;
  static const int G_UNICODE_BREAK_VIRAMA_FINAL = 46;
  static const int G_UNICODE_BREAK_VIRAMA = 47;
}

/// GUnicodeScript:
/// @G_UNICODE_SCRIPT_INVALID_CODE:
/// a value never returned from g_unichar_get_script()
/// @G_UNICODE_SCRIPT_COMMON:     a character used by multiple different scripts
/// @G_UNICODE_SCRIPT_INHERITED:  a mark glyph that takes its script from the
/// base glyph to which it is attached
/// @G_UNICODE_SCRIPT_ARABIC:     Arabic
/// @G_UNICODE_SCRIPT_ARMENIAN:   Armenian
/// @G_UNICODE_SCRIPT_BENGALI:    Bengali
/// @G_UNICODE_SCRIPT_BOPOMOFO:   Bopomofo
/// @G_UNICODE_SCRIPT_CHEROKEE:   Cherokee
/// @G_UNICODE_SCRIPT_COPTIC:     Coptic
/// @G_UNICODE_SCRIPT_CYRILLIC:   Cyrillic
/// @G_UNICODE_SCRIPT_DESERET:    Deseret
/// @G_UNICODE_SCRIPT_DEVANAGARI: Devanagari
/// @G_UNICODE_SCRIPT_ETHIOPIC:   Ethiopic
/// @G_UNICODE_SCRIPT_GEORGIAN:   Georgian
/// @G_UNICODE_SCRIPT_GOTHIC:     Gothic
/// @G_UNICODE_SCRIPT_GREEK:      Greek
/// @G_UNICODE_SCRIPT_GUJARATI:   Gujarati
/// @G_UNICODE_SCRIPT_GURMUKHI:   Gurmukhi
/// @G_UNICODE_SCRIPT_HAN:        Han
/// @G_UNICODE_SCRIPT_HANGUL:     Hangul
/// @G_UNICODE_SCRIPT_HEBREW:     Hebrew
/// @G_UNICODE_SCRIPT_HIRAGANA:   Hiragana
/// @G_UNICODE_SCRIPT_KANNADA:    Kannada
/// @G_UNICODE_SCRIPT_KATAKANA:   Katakana
/// @G_UNICODE_SCRIPT_KHMER:      Khmer
/// @G_UNICODE_SCRIPT_LAO:        Lao
/// @G_UNICODE_SCRIPT_LATIN:      Latin
/// @G_UNICODE_SCRIPT_MALAYALAM:  Malayalam
/// @G_UNICODE_SCRIPT_MONGOLIAN:  Mongolian
/// @G_UNICODE_SCRIPT_MYANMAR:    Myanmar
/// @G_UNICODE_SCRIPT_OGHAM:      Ogham
/// @G_UNICODE_SCRIPT_OLD_ITALIC: Old Italic
/// @G_UNICODE_SCRIPT_ORIYA:      Oriya
/// @G_UNICODE_SCRIPT_RUNIC:      Runic
/// @G_UNICODE_SCRIPT_SINHALA:    Sinhala
/// @G_UNICODE_SCRIPT_SYRIAC:     Syriac
/// @G_UNICODE_SCRIPT_TAMIL:      Tamil
/// @G_UNICODE_SCRIPT_TELUGU:     Telugu
/// @G_UNICODE_SCRIPT_THAANA:     Thaana
/// @G_UNICODE_SCRIPT_THAI:       Thai
/// @G_UNICODE_SCRIPT_TIBETAN:    Tibetan
/// @G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL:
/// Canadian Aboriginal
/// @G_UNICODE_SCRIPT_YI:         Yi
/// @G_UNICODE_SCRIPT_TAGALOG:    Tagalog
/// @G_UNICODE_SCRIPT_HANUNOO:    Hanunoo
/// @G_UNICODE_SCRIPT_BUHID:      Buhid
/// @G_UNICODE_SCRIPT_TAGBANWA:   Tagbanwa
/// @G_UNICODE_SCRIPT_BRAILLE:    Braille
/// @G_UNICODE_SCRIPT_CYPRIOT:    Cypriot
/// @G_UNICODE_SCRIPT_LIMBU:      Limbu
/// @G_UNICODE_SCRIPT_OSMANYA:    Osmanya
/// @G_UNICODE_SCRIPT_SHAVIAN:    Shavian
/// @G_UNICODE_SCRIPT_LINEAR_B:   Linear B
/// @G_UNICODE_SCRIPT_TAI_LE:     Tai Le
/// @G_UNICODE_SCRIPT_UGARITIC:   Ugaritic
/// @G_UNICODE_SCRIPT_NEW_TAI_LUE:
/// New Tai Lue
/// @G_UNICODE_SCRIPT_BUGINESE:   Buginese
/// @G_UNICODE_SCRIPT_GLAGOLITIC: Glagolitic
/// @G_UNICODE_SCRIPT_TIFINAGH:   Tifinagh
/// @G_UNICODE_SCRIPT_SYLOTI_NAGRI:
/// Syloti Nagri
/// @G_UNICODE_SCRIPT_OLD_PERSIAN:
/// Old Persian
/// @G_UNICODE_SCRIPT_KHAROSHTHI: Kharoshthi
/// @G_UNICODE_SCRIPT_UNKNOWN:    an unassigned code point
/// @G_UNICODE_SCRIPT_BALINESE:   Balinese
/// @G_UNICODE_SCRIPT_CUNEIFORM:  Cuneiform
/// @G_UNICODE_SCRIPT_PHOENICIAN: Phoenician
/// @G_UNICODE_SCRIPT_PHAGS_PA:   Phags-pa
/// @G_UNICODE_SCRIPT_NKO:        N'Ko
/// @G_UNICODE_SCRIPT_KAYAH_LI:   Kayah Li. Since 2.16.3
/// @G_UNICODE_SCRIPT_LEPCHA:     Lepcha. Since 2.16.3
/// @G_UNICODE_SCRIPT_REJANG:     Rejang. Since 2.16.3
/// @G_UNICODE_SCRIPT_SUNDANESE:  Sundanese. Since 2.16.3
/// @G_UNICODE_SCRIPT_SAURASHTRA: Saurashtra. Since 2.16.3
/// @G_UNICODE_SCRIPT_CHAM:       Cham. Since 2.16.3
/// @G_UNICODE_SCRIPT_OL_CHIKI:   Ol Chiki. Since 2.16.3
/// @G_UNICODE_SCRIPT_VAI:        Vai. Since 2.16.3
/// @G_UNICODE_SCRIPT_CARIAN:     Carian. Since 2.16.3
/// @G_UNICODE_SCRIPT_LYCIAN:     Lycian. Since 2.16.3
/// @G_UNICODE_SCRIPT_LYDIAN:     Lydian. Since 2.16.3
/// @G_UNICODE_SCRIPT_AVESTAN:    Avestan. Since 2.26
/// @G_UNICODE_SCRIPT_BAMUM:      Bamum. Since 2.26
/// @G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS:
/// Egyptian Hieroglpyhs. Since 2.26
/// @G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC:
/// Imperial Aramaic. Since 2.26
/// @G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI:
/// Inscriptional Pahlavi. Since 2.26
/// @G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN:
/// Inscriptional Parthian. Since 2.26
/// @G_UNICODE_SCRIPT_JAVANESE:   Javanese. Since 2.26
/// @G_UNICODE_SCRIPT_KAITHI:     Kaithi. Since 2.26
/// @G_UNICODE_SCRIPT_LISU:       Lisu. Since 2.26
/// @G_UNICODE_SCRIPT_MEETEI_MAYEK:
/// Meetei Mayek. Since 2.26
/// @G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN:
/// Old South Arabian. Since 2.26
/// @G_UNICODE_SCRIPT_OLD_TURKIC: Old Turkic. Since 2.28
/// @G_UNICODE_SCRIPT_SAMARITAN:  Samaritan. Since 2.26
/// @G_UNICODE_SCRIPT_TAI_THAM:   Tai Tham. Since 2.26
/// @G_UNICODE_SCRIPT_TAI_VIET:   Tai Viet. Since 2.26
/// @G_UNICODE_SCRIPT_BATAK:      Batak. Since 2.28
/// @G_UNICODE_SCRIPT_BRAHMI:     Brahmi. Since 2.28
/// @G_UNICODE_SCRIPT_MANDAIC:    Mandaic. Since 2.28
/// @G_UNICODE_SCRIPT_CHAKMA:               Chakma. Since: 2.32
/// @G_UNICODE_SCRIPT_MEROITIC_CURSIVE:     Meroitic Cursive. Since: 2.32
/// @G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: Meroitic Hieroglyphs. Since: 2.32
/// @G_UNICODE_SCRIPT_MIAO:                 Miao. Since: 2.32
/// @G_UNICODE_SCRIPT_SHARADA:              Sharada. Since: 2.32
/// @G_UNICODE_SCRIPT_SORA_SOMPENG:         Sora Sompeng. Since: 2.32
/// @G_UNICODE_SCRIPT_TAKRI:                Takri. Since: 2.32
/// @G_UNICODE_SCRIPT_BASSA_VAH:            Bassa. Since: 2.42
/// @G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN:   Caucasian Albanian. Since: 2.42
/// @G_UNICODE_SCRIPT_DUPLOYAN:             Duployan. Since: 2.42
/// @G_UNICODE_SCRIPT_ELBASAN:              Elbasan. Since: 2.42
/// @G_UNICODE_SCRIPT_GRANTHA:              Grantha. Since: 2.42
/// @G_UNICODE_SCRIPT_KHOJKI:               Kjohki. Since: 2.42
/// @G_UNICODE_SCRIPT_KHUDAWADI:            Khudawadi, Sindhi. Since: 2.42
/// @G_UNICODE_SCRIPT_LINEAR_A:             Linear A. Since: 2.42
/// @G_UNICODE_SCRIPT_MAHAJANI:             Mahajani. Since: 2.42
/// @G_UNICODE_SCRIPT_MANICHAEAN:           Manichaean. Since: 2.42
/// @G_UNICODE_SCRIPT_MENDE_KIKAKUI:        Mende Kikakui. Since: 2.42
/// @G_UNICODE_SCRIPT_MODI:                 Modi. Since: 2.42
/// @G_UNICODE_SCRIPT_MRO:                  Mro. Since: 2.42
/// @G_UNICODE_SCRIPT_NABATAEAN:            Nabataean. Since: 2.42
/// @G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN:    Old North Arabian. Since: 2.42
/// @G_UNICODE_SCRIPT_OLD_PERMIC:           Old Permic. Since: 2.42
/// @G_UNICODE_SCRIPT_PAHAWH_HMONG:         Pahawh Hmong. Since: 2.42
/// @G_UNICODE_SCRIPT_PALMYRENE:            Palmyrene. Since: 2.42
/// @G_UNICODE_SCRIPT_PAU_CIN_HAU:          Pau Cin Hau. Since: 2.42
/// @G_UNICODE_SCRIPT_PSALTER_PAHLAVI:      Psalter Pahlavi. Since: 2.42
/// @G_UNICODE_SCRIPT_SIDDHAM:              Siddham. Since: 2.42
/// @G_UNICODE_SCRIPT_TIRHUTA:              Tirhuta. Since: 2.42
/// @G_UNICODE_SCRIPT_WARANG_CITI:          Warang Citi. Since: 2.42
/// @G_UNICODE_SCRIPT_AHOM:                 Ahom. Since: 2.48
/// @G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS: Anatolian Hieroglyphs. Since: 2.48
/// @G_UNICODE_SCRIPT_HATRAN:               Hatran. Since: 2.48
/// @G_UNICODE_SCRIPT_MULTANI:              Multani. Since: 2.48
/// @G_UNICODE_SCRIPT_OLD_HUNGARIAN:        Old Hungarian. Since: 2.48
/// @G_UNICODE_SCRIPT_SIGNWRITING:          Signwriting. Since: 2.48
/// @G_UNICODE_SCRIPT_ADLAM:                Adlam. Since: 2.50
/// @G_UNICODE_SCRIPT_BHAIKSUKI:            Bhaiksuki. Since: 2.50
/// @G_UNICODE_SCRIPT_MARCHEN:              Marchen. Since: 2.50
/// @G_UNICODE_SCRIPT_NEWA:                 Newa. Since: 2.50
/// @G_UNICODE_SCRIPT_OSAGE:                Osage. Since: 2.50
/// @G_UNICODE_SCRIPT_TANGUT:               Tangut. Since: 2.50
/// @G_UNICODE_SCRIPT_MASARAM_GONDI:        Masaram Gondi. Since: 2.54
/// @G_UNICODE_SCRIPT_NUSHU:                Nushu. Since: 2.54
/// @G_UNICODE_SCRIPT_SOYOMBO:              Soyombo. Since: 2.54
/// @G_UNICODE_SCRIPT_ZANABAZAR_SQUARE:     Zanabazar Square. Since: 2.54
/// @G_UNICODE_SCRIPT_DOGRA:                Dogra. Since: 2.58
/// @G_UNICODE_SCRIPT_GUNJALA_GONDI:        Gunjala Gondi. Since: 2.58
/// @G_UNICODE_SCRIPT_HANIFI_ROHINGYA:      Hanifi Rohingya. Since: 2.58
/// @G_UNICODE_SCRIPT_MAKASAR:              Makasar. Since: 2.58
/// @G_UNICODE_SCRIPT_MEDEFAIDRIN:          Medefaidrin. Since: 2.58
/// @G_UNICODE_SCRIPT_OLD_SOGDIAN:          Old Sogdian. Since: 2.58
/// @G_UNICODE_SCRIPT_SOGDIAN:              Sogdian. Since: 2.58
/// @G_UNICODE_SCRIPT_ELYMAIC:              Elym. Since: 2.62
/// @G_UNICODE_SCRIPT_NANDINAGARI:          Nand. Since: 2.62
/// @G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG: Rohg. Since: 2.62
/// @G_UNICODE_SCRIPT_WANCHO:               Wcho. Since: 2.62
/// @G_UNICODE_SCRIPT_CHORASMIAN:           Chorasmian. Since: 2.66
/// @G_UNICODE_SCRIPT_DIVES_AKURU:          Dives Akuru. Since: 2.66
/// @G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT:  Khitan small script. Since: 2.66
/// @G_UNICODE_SCRIPT_YEZIDI:               Yezidi. Since: 2.66
/// @G_UNICODE_SCRIPT_CYPRO_MINOAN:         Cypro-Minoan. Since: 2.72
/// @G_UNICODE_SCRIPT_OLD_UYGHUR:           Old Uyghur. Since: 2.72
/// @G_UNICODE_SCRIPT_TANGSA:               Tangsa. Since: 2.72
/// @G_UNICODE_SCRIPT_TOTO:                 Toto. Since: 2.72
/// @G_UNICODE_SCRIPT_VITHKUQI:             Vithkuqi. Since: 2.72
/// @G_UNICODE_SCRIPT_MATH:                 Mathematical notation. Since: 2.72
/// @G_UNICODE_SCRIPT_KAWI:                 Kawi. Since 2.74
/// @G_UNICODE_SCRIPT_NAG_MUNDARI:          Nag Mundari. Since 2.74
///
/// The #GUnicodeScript enumeration identifies different writing
/// systems. The values correspond to the names as defined in the
/// Unicode standard. The enumeration has been added in GLib 2.14,
/// and is interchangeable with #PangoScript.
///
/// Note that new types may be added in the future. Applications
/// should be ready to handle unknown values.
/// See [Unicode Standard Annex #24: Script names](http://www.unicode.org/reports/tr24/).
abstract class GUnicodeScript {
  static const int G_UNICODE_SCRIPT_INVALID_CODE = -1;
  static const int G_UNICODE_SCRIPT_COMMON = 0;
  static const int G_UNICODE_SCRIPT_INHERITED = 1;
  static const int G_UNICODE_SCRIPT_ARABIC = 2;
  static const int G_UNICODE_SCRIPT_ARMENIAN = 3;
  static const int G_UNICODE_SCRIPT_BENGALI = 4;
  static const int G_UNICODE_SCRIPT_BOPOMOFO = 5;
  static const int G_UNICODE_SCRIPT_CHEROKEE = 6;
  static const int G_UNICODE_SCRIPT_COPTIC = 7;
  static const int G_UNICODE_SCRIPT_CYRILLIC = 8;
  static const int G_UNICODE_SCRIPT_DESERET = 9;
  static const int G_UNICODE_SCRIPT_DEVANAGARI = 10;
  static const int G_UNICODE_SCRIPT_ETHIOPIC = 11;
  static const int G_UNICODE_SCRIPT_GEORGIAN = 12;
  static const int G_UNICODE_SCRIPT_GOTHIC = 13;
  static const int G_UNICODE_SCRIPT_GREEK = 14;
  static const int G_UNICODE_SCRIPT_GUJARATI = 15;
  static const int G_UNICODE_SCRIPT_GURMUKHI = 16;
  static const int G_UNICODE_SCRIPT_HAN = 17;
  static const int G_UNICODE_SCRIPT_HANGUL = 18;
  static const int G_UNICODE_SCRIPT_HEBREW = 19;
  static const int G_UNICODE_SCRIPT_HIRAGANA = 20;
  static const int G_UNICODE_SCRIPT_KANNADA = 21;
  static const int G_UNICODE_SCRIPT_KATAKANA = 22;
  static const int G_UNICODE_SCRIPT_KHMER = 23;
  static const int G_UNICODE_SCRIPT_LAO = 24;
  static const int G_UNICODE_SCRIPT_LATIN = 25;
  static const int G_UNICODE_SCRIPT_MALAYALAM = 26;
  static const int G_UNICODE_SCRIPT_MONGOLIAN = 27;
  static const int G_UNICODE_SCRIPT_MYANMAR = 28;
  static const int G_UNICODE_SCRIPT_OGHAM = 29;
  static const int G_UNICODE_SCRIPT_OLD_ITALIC = 30;
  static const int G_UNICODE_SCRIPT_ORIYA = 31;
  static const int G_UNICODE_SCRIPT_RUNIC = 32;
  static const int G_UNICODE_SCRIPT_SINHALA = 33;
  static const int G_UNICODE_SCRIPT_SYRIAC = 34;
  static const int G_UNICODE_SCRIPT_TAMIL = 35;
  static const int G_UNICODE_SCRIPT_TELUGU = 36;
  static const int G_UNICODE_SCRIPT_THAANA = 37;
  static const int G_UNICODE_SCRIPT_THAI = 38;
  static const int G_UNICODE_SCRIPT_TIBETAN = 39;
  static const int G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40;
  static const int G_UNICODE_SCRIPT_YI = 41;
  static const int G_UNICODE_SCRIPT_TAGALOG = 42;
  static const int G_UNICODE_SCRIPT_HANUNOO = 43;
  static const int G_UNICODE_SCRIPT_BUHID = 44;
  static const int G_UNICODE_SCRIPT_TAGBANWA = 45;
  static const int G_UNICODE_SCRIPT_BRAILLE = 46;
  static const int G_UNICODE_SCRIPT_CYPRIOT = 47;
  static const int G_UNICODE_SCRIPT_LIMBU = 48;
  static const int G_UNICODE_SCRIPT_OSMANYA = 49;
  static const int G_UNICODE_SCRIPT_SHAVIAN = 50;
  static const int G_UNICODE_SCRIPT_LINEAR_B = 51;
  static const int G_UNICODE_SCRIPT_TAI_LE = 52;
  static const int G_UNICODE_SCRIPT_UGARITIC = 53;
  static const int G_UNICODE_SCRIPT_NEW_TAI_LUE = 54;
  static const int G_UNICODE_SCRIPT_BUGINESE = 55;
  static const int G_UNICODE_SCRIPT_GLAGOLITIC = 56;
  static const int G_UNICODE_SCRIPT_TIFINAGH = 57;
  static const int G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58;
  static const int G_UNICODE_SCRIPT_OLD_PERSIAN = 59;
  static const int G_UNICODE_SCRIPT_KHAROSHTHI = 60;
  static const int G_UNICODE_SCRIPT_UNKNOWN = 61;
  static const int G_UNICODE_SCRIPT_BALINESE = 62;
  static const int G_UNICODE_SCRIPT_CUNEIFORM = 63;
  static const int G_UNICODE_SCRIPT_PHOENICIAN = 64;
  static const int G_UNICODE_SCRIPT_PHAGS_PA = 65;
  static const int G_UNICODE_SCRIPT_NKO = 66;
  static const int G_UNICODE_SCRIPT_KAYAH_LI = 67;
  static const int G_UNICODE_SCRIPT_LEPCHA = 68;
  static const int G_UNICODE_SCRIPT_REJANG = 69;
  static const int G_UNICODE_SCRIPT_SUNDANESE = 70;
  static const int G_UNICODE_SCRIPT_SAURASHTRA = 71;
  static const int G_UNICODE_SCRIPT_CHAM = 72;
  static const int G_UNICODE_SCRIPT_OL_CHIKI = 73;
  static const int G_UNICODE_SCRIPT_VAI = 74;
  static const int G_UNICODE_SCRIPT_CARIAN = 75;
  static const int G_UNICODE_SCRIPT_LYCIAN = 76;
  static const int G_UNICODE_SCRIPT_LYDIAN = 77;
  static const int G_UNICODE_SCRIPT_AVESTAN = 78;
  static const int G_UNICODE_SCRIPT_BAMUM = 79;
  static const int G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80;
  static const int G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81;
  static const int G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82;
  static const int G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83;
  static const int G_UNICODE_SCRIPT_JAVANESE = 84;
  static const int G_UNICODE_SCRIPT_KAITHI = 85;
  static const int G_UNICODE_SCRIPT_LISU = 86;
  static const int G_UNICODE_SCRIPT_MEETEI_MAYEK = 87;
  static const int G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88;
  static const int G_UNICODE_SCRIPT_OLD_TURKIC = 89;
  static const int G_UNICODE_SCRIPT_SAMARITAN = 90;
  static const int G_UNICODE_SCRIPT_TAI_THAM = 91;
  static const int G_UNICODE_SCRIPT_TAI_VIET = 92;
  static const int G_UNICODE_SCRIPT_BATAK = 93;
  static const int G_UNICODE_SCRIPT_BRAHMI = 94;
  static const int G_UNICODE_SCRIPT_MANDAIC = 95;
  static const int G_UNICODE_SCRIPT_CHAKMA = 96;
  static const int G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97;
  static const int G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98;
  static const int G_UNICODE_SCRIPT_MIAO = 99;
  static const int G_UNICODE_SCRIPT_SHARADA = 100;
  static const int G_UNICODE_SCRIPT_SORA_SOMPENG = 101;
  static const int G_UNICODE_SCRIPT_TAKRI = 102;
  static const int G_UNICODE_SCRIPT_BASSA_VAH = 103;
  static const int G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104;
  static const int G_UNICODE_SCRIPT_DUPLOYAN = 105;
  static const int G_UNICODE_SCRIPT_ELBASAN = 106;
  static const int G_UNICODE_SCRIPT_GRANTHA = 107;
  static const int G_UNICODE_SCRIPT_KHOJKI = 108;
  static const int G_UNICODE_SCRIPT_KHUDAWADI = 109;
  static const int G_UNICODE_SCRIPT_LINEAR_A = 110;
  static const int G_UNICODE_SCRIPT_MAHAJANI = 111;
  static const int G_UNICODE_SCRIPT_MANICHAEAN = 112;
  static const int G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113;
  static const int G_UNICODE_SCRIPT_MODI = 114;
  static const int G_UNICODE_SCRIPT_MRO = 115;
  static const int G_UNICODE_SCRIPT_NABATAEAN = 116;
  static const int G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117;
  static const int G_UNICODE_SCRIPT_OLD_PERMIC = 118;
  static const int G_UNICODE_SCRIPT_PAHAWH_HMONG = 119;
  static const int G_UNICODE_SCRIPT_PALMYRENE = 120;
  static const int G_UNICODE_SCRIPT_PAU_CIN_HAU = 121;
  static const int G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122;
  static const int G_UNICODE_SCRIPT_SIDDHAM = 123;
  static const int G_UNICODE_SCRIPT_TIRHUTA = 124;
  static const int G_UNICODE_SCRIPT_WARANG_CITI = 125;
  static const int G_UNICODE_SCRIPT_AHOM = 126;
  static const int G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127;
  static const int G_UNICODE_SCRIPT_HATRAN = 128;
  static const int G_UNICODE_SCRIPT_MULTANI = 129;
  static const int G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130;
  static const int G_UNICODE_SCRIPT_SIGNWRITING = 131;
  static const int G_UNICODE_SCRIPT_ADLAM = 132;
  static const int G_UNICODE_SCRIPT_BHAIKSUKI = 133;
  static const int G_UNICODE_SCRIPT_MARCHEN = 134;
  static const int G_UNICODE_SCRIPT_NEWA = 135;
  static const int G_UNICODE_SCRIPT_OSAGE = 136;
  static const int G_UNICODE_SCRIPT_TANGUT = 137;
  static const int G_UNICODE_SCRIPT_MASARAM_GONDI = 138;
  static const int G_UNICODE_SCRIPT_NUSHU = 139;
  static const int G_UNICODE_SCRIPT_SOYOMBO = 140;
  static const int G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = 141;
  static const int G_UNICODE_SCRIPT_DOGRA = 142;
  static const int G_UNICODE_SCRIPT_GUNJALA_GONDI = 143;
  static const int G_UNICODE_SCRIPT_HANIFI_ROHINGYA = 144;
  static const int G_UNICODE_SCRIPT_MAKASAR = 145;
  static const int G_UNICODE_SCRIPT_MEDEFAIDRIN = 146;
  static const int G_UNICODE_SCRIPT_OLD_SOGDIAN = 147;
  static const int G_UNICODE_SCRIPT_SOGDIAN = 148;
  static const int G_UNICODE_SCRIPT_ELYMAIC = 149;
  static const int G_UNICODE_SCRIPT_NANDINAGARI = 150;
  static const int G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = 151;
  static const int G_UNICODE_SCRIPT_WANCHO = 152;
  static const int G_UNICODE_SCRIPT_CHORASMIAN = 153;
  static const int G_UNICODE_SCRIPT_DIVES_AKURU = 154;
  static const int G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT = 155;
  static const int G_UNICODE_SCRIPT_YEZIDI = 156;
  static const int G_UNICODE_SCRIPT_CYPRO_MINOAN = 157;
  static const int G_UNICODE_SCRIPT_OLD_UYGHUR = 158;
  static const int G_UNICODE_SCRIPT_TANGSA = 159;
  static const int G_UNICODE_SCRIPT_TOTO = 160;
  static const int G_UNICODE_SCRIPT_VITHKUQI = 161;
  static const int G_UNICODE_SCRIPT_MATH = 162;
  static const int G_UNICODE_SCRIPT_KAWI = 163;
  static const int G_UNICODE_SCRIPT_NAG_MUNDARI = 164;
}

/// gunichar:
///
/// A type which can hold any UTF-32 or UCS-4 character code,
/// also known as a Unicode code point.
///
/// If you want to produce the UTF-8 representation of a #gunichar,
/// use g_ucs4_to_utf8(). See also g_utf8_to_ucs4() for the reverse
/// process.
///
/// To print/scan values of this type as integer, use
/// %G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.
///
/// The notation to express a Unicode code point in running text is
/// as a hexadecimal number with four to six digits and uppercase
/// letters, prefixed by the string "U+". Leading zeros are omitted,
/// unless the code point would have fewer than four hexadecimal digits.
/// For example, "U+0041 LATIN CAPITAL LETTER A". To print a code point
/// in the U+-notation, use the format string "U+\%04"G_GINT32_FORMAT"X".
/// To scan, use the format string "U+\%06"G_GINT32_FORMAT"X".
///
/// |[
/// gunichar c;
/// sscanf ("U+0041", "U+%06"G_GINT32_FORMAT"X", &amp;c)
/// g_print ("Read U+%04"G_GINT32_FORMAT"X", c);
/// ]|
typedef gunichar = guint32;

/// gunichar2:
///
/// A type which can hold any UTF-16 code
/// point<footnote id="utf16_surrogate_pairs">UTF-16 also has so called
/// <firstterm>surrogate pairs</firstterm> to encode characters beyond
/// the BMP as pairs of 16bit numbers. Surrogate pairs cannot be stored
/// in a single gunichar2 field, but all GLib functions accepting gunichar2
/// arrays will correctly interpret surrogate pairs.</footnote>.
///
/// To print/scan values of this type to/from text you need to convert
/// to/from UTF-8, using g_utf16_to_utf8()/g_utf8_to_utf16().
///
/// To print/scan values of this type as integer, use
/// %G_GINT16_MODIFIER and/or %G_GUINT16_FORMAT.
typedef gunichar2 = guint16;

/// GNormalizeMode:
/// @G_NORMALIZE_DEFAULT: standardize differences that do not affect the
/// text content, such as the above-mentioned accent representation
/// @G_NORMALIZE_NFD: another name for %G_NORMALIZE_DEFAULT
/// @G_NORMALIZE_DEFAULT_COMPOSE: like %G_NORMALIZE_DEFAULT, but with
/// composed forms rather than a maximally decomposed form
/// @G_NORMALIZE_NFC: another name for %G_NORMALIZE_DEFAULT_COMPOSE
/// @G_NORMALIZE_ALL: beyond %G_NORMALIZE_DEFAULT also standardize the
/// "compatibility" characters in Unicode, such as SUPERSCRIPT THREE
/// to the standard forms (in this case DIGIT THREE). Formatting
/// information may be lost but for most text operations such
/// characters should be considered the same
/// @G_NORMALIZE_NFKD: another name for %G_NORMALIZE_ALL
/// @G_NORMALIZE_ALL_COMPOSE: like %G_NORMALIZE_ALL, but with composed
/// forms rather than a maximally decomposed form
/// @G_NORMALIZE_NFKC: another name for %G_NORMALIZE_ALL_COMPOSE
///
/// Defines how a Unicode string is transformed in a canonical
/// form, standardizing such issues as whether a character with
/// an accent is represented as a base character and combining
/// accent or as a single precomposed character. Unicode strings
/// should generally be normalized before comparing them.
abstract class GNormalizeMode {
  static const int G_NORMALIZE_DEFAULT = 0;
  static const int G_NORMALIZE_NFD = 0;
  static const int G_NORMALIZE_DEFAULT_COMPOSE = 1;
  static const int G_NORMALIZE_NFC = 1;
  static const int G_NORMALIZE_ALL = 2;
  static const int G_NORMALIZE_NFKD = 2;
  static const int G_NORMALIZE_ALL_COMPOSE = 3;
  static const int G_NORMALIZE_NFKC = 3;
}

abstract class GAsciiType {
  static const int G_ASCII_ALNUM = 1;
  static const int G_ASCII_ALPHA = 2;
  static const int G_ASCII_CNTRL = 4;
  static const int G_ASCII_DIGIT = 8;
  static const int G_ASCII_GRAPH = 16;
  static const int G_ASCII_LOWER = 32;
  static const int G_ASCII_PRINT = 64;
  static const int G_ASCII_PUNCT = 128;
  static const int G_ASCII_SPACE = 256;
  static const int G_ASCII_UPPER = 512;
  static const int G_ASCII_XDIGIT = 1024;
}

/// GNumberParserError:
/// @G_NUMBER_PARSER_ERROR_INVALID: string was not a valid number
/// @G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS: string was a number, but out of bounds
///
/// Error codes returned by functions converting a string to a number.
///
/// Since: 2.54
abstract class GNumberParserError {
  static const int G_NUMBER_PARSER_ERROR_INVALID = 0;
  static const int G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1;
}

final class _GString extends ffi.Struct {
  external ffi.Pointer<ffi.Char> str;

  @gsize()
  external int len;

  @gsize()
  external int allocated_len;
}

typedef GString = _GString;

final class _GIOChannel extends ffi.Opaque {}

final class _GIOFuncs extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel> channel,
              ffi.Pointer<ffi.Char> buf,
              gsize count,
              ffi.Pointer<gsize> bytes_read,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_read;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GIOChannel> channel,
              ffi.Pointer<ffi.Char> buf,
              gsize count,
              ffi.Pointer<gsize> bytes_written,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_write;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel> channel, gint64 offset,
              ffi.Int32 type, ffi.Pointer<ffi.Pointer<GError>> err)>> io_seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel> channel,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_close;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GSource> Function(
                  ffi.Pointer<GIOChannel> channel, ffi.Int32 condition)>>
      io_create_watch;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GIOChannel> channel)>>
      io_free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GIOChannel> channel, ffi.Int32 flags,
              ffi.Pointer<ffi.Pointer<GError>> err)>> io_set_flags;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<GIOChannel> channel)>>
      io_get_flags;
}

abstract class GIOStatus {
  static const int G_IO_STATUS_ERROR = 0;
  static const int G_IO_STATUS_NORMAL = 1;
  static const int G_IO_STATUS_EOF = 2;
  static const int G_IO_STATUS_AGAIN = 3;
}

typedef GIOChannel = _GIOChannel;

abstract class GSeekType {
  static const int G_SEEK_CUR = 0;
  static const int G_SEEK_SET = 1;
  static const int G_SEEK_END = 2;
}

abstract class GIOFlags {
  static const int G_IO_FLAG_NONE = 0;
  static const int G_IO_FLAG_APPEND = 1;
  static const int G_IO_FLAG_NONBLOCK = 2;
  static const int G_IO_FLAG_IS_READABLE = 4;
  static const int G_IO_FLAG_IS_WRITABLE = 8;
  static const int G_IO_FLAG_IS_WRITEABLE = 8;
  static const int G_IO_FLAG_IS_SEEKABLE = 16;
  static const int G_IO_FLAG_MASK = 31;
  static const int G_IO_FLAG_GET_MASK = 31;
  static const int G_IO_FLAG_SET_MASK = 3;
}

abstract class GIOError {
  static const int G_IO_ERROR_NONE = 0;
  static const int G_IO_ERROR_AGAIN = 1;
  static const int G_IO_ERROR_INVAL = 2;
  static const int G_IO_ERROR_UNKNOWN = 3;
}

abstract class GIOChannelError {
  static const int G_IO_CHANNEL_ERROR_FBIG = 0;
  static const int G_IO_CHANNEL_ERROR_INVAL = 1;
  static const int G_IO_CHANNEL_ERROR_IO = 2;
  static const int G_IO_CHANNEL_ERROR_ISDIR = 3;
  static const int G_IO_CHANNEL_ERROR_NOSPC = 4;
  static const int G_IO_CHANNEL_ERROR_NXIO = 5;
  static const int G_IO_CHANNEL_ERROR_OVERFLOW = 6;
  static const int G_IO_CHANNEL_ERROR_PIPE = 7;
  static const int G_IO_CHANNEL_ERROR_FAILED = 8;
}

typedef GIOFunc = ffi.Pointer<ffi.NativeFunction<GIOFuncFunction>>;
typedef GIOFuncFunction = gboolean Function(
    ffi.Pointer<GIOChannel> source, ffi.Int32 condition, ffi.Pointer data);
typedef DartGIOFuncFunction = Dartgint Function(
    ffi.Pointer<GIOChannel> source, int condition, ffi.Pointer data);

abstract class GKeyFileError {
  static const int G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0;
  static const int G_KEY_FILE_ERROR_PARSE = 1;
  static const int G_KEY_FILE_ERROR_NOT_FOUND = 2;
  static const int G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3;
  static const int G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4;
  static const int G_KEY_FILE_ERROR_INVALID_VALUE = 5;
}

final class _GKeyFile extends ffi.Opaque {}

abstract class GKeyFileFlags {
  static const int G_KEY_FILE_NONE = 0;
  static const int G_KEY_FILE_KEEP_COMMENTS = 1;
  static const int G_KEY_FILE_KEEP_TRANSLATIONS = 2;
}

typedef GKeyFile = _GKeyFile;

final class _GMappedFile extends ffi.Opaque {}

typedef GMappedFile = _GMappedFile;

/// GMarkupError:
/// @G_MARKUP_ERROR_BAD_UTF8: text being parsed was not valid UTF-8
/// @G_MARKUP_ERROR_EMPTY: document contained nothing, or only whitespace
/// @G_MARKUP_ERROR_PARSE: document was ill-formed
/// @G_MARKUP_ERROR_UNKNOWN_ELEMENT: error should be set by #GMarkupParser
/// functions; element wasn't known
/// @G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: error should be set by #GMarkupParser
/// functions; attribute wasn't known
/// @G_MARKUP_ERROR_INVALID_CONTENT: error should be set by #GMarkupParser
/// functions; content was invalid
/// @G_MARKUP_ERROR_MISSING_ATTRIBUTE: error should be set by #GMarkupParser
/// functions; a required attribute was missing
///
/// Error codes returned by markup parsing.
abstract class GMarkupError {
  static const int G_MARKUP_ERROR_BAD_UTF8 = 0;
  static const int G_MARKUP_ERROR_EMPTY = 1;
  static const int G_MARKUP_ERROR_PARSE = 2;
  static const int G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3;
  static const int G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4;
  static const int G_MARKUP_ERROR_INVALID_CONTENT = 5;
  static const int G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6;
}

/// GMarkupParseFlags:
/// @G_MARKUP_DEFAULT_FLAGS: No special behaviour. Since: 2.74
/// @G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: flag you should not use
/// @G_MARKUP_TREAT_CDATA_AS_TEXT: When this flag is set, CDATA marked
/// sections are not passed literally to the @passthrough function of
/// the parser. Instead, the content of the section (without the
/// `<![CDATA[` and `]]>`) is
/// passed to the @text function. This flag was added in GLib 2.12
/// @G_MARKUP_PREFIX_ERROR_POSITION: Normally errors caught by GMarkup
/// itself have line/column information prefixed to them to let the
/// caller know the location of the error. When this flag is set the
/// location information is also prefixed to errors generated by the
/// #GMarkupParser implementation functions
/// @G_MARKUP_IGNORE_QUALIFIED: Ignore (don't report) qualified
/// attributes and tags, along with their contents.  A qualified
/// attribute or tag is one that contains ':' in its name (ie: is in
/// another namespace).  Since: 2.40.
///
/// Flags that affect the behaviour of the parser.
abstract class GMarkupParseFlags {
  static const int G_MARKUP_DEFAULT_FLAGS = 0;
  static const int G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1;
  static const int G_MARKUP_TREAT_CDATA_AS_TEXT = 2;
  static const int G_MARKUP_PREFIX_ERROR_POSITION = 4;
  static const int G_MARKUP_IGNORE_QUALIFIED = 8;
}

final class _GMarkupParseContext extends ffi.Opaque {}

/// GMarkupParser:
/// @start_element: Callback to invoke when the opening tag of an element
/// is seen. The callback's @attribute_names and @attribute_values parameters
/// are %NULL-terminated.
/// @end_element: Callback to invoke when the closing tag of an element
/// is seen. Note that this is also called for empty tags like
/// `<empty/>`.
/// @text: Callback to invoke when some text is seen (text is always
/// inside an element). Note that the text of an element may be spread
/// over multiple calls of this function. If the
/// %G_MARKUP_TREAT_CDATA_AS_TEXT flag is set, this function is also
/// called for the content of CDATA marked sections.
/// @passthrough: Callback to invoke for comments, processing instructions
/// and doctype declarations; if you're re-writing the parsed document,
/// write the passthrough text back out in the same position. If the
/// %G_MARKUP_TREAT_CDATA_AS_TEXT flag is not set, this function is also
/// called for CDATA marked sections.
/// @error: Callback to invoke when an error occurs.
///
/// Any of the fields in #GMarkupParser can be %NULL, in which case they
/// will be ignored. Except for the @error function, any of these callbacks
/// can set an error; in particular the %G_MARKUP_ERROR_UNKNOWN_ELEMENT,
/// %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE, and %G_MARKUP_ERROR_INVALID_CONTENT
/// errors are intended to be set from these callbacks. If you set an error
/// from a callback, g_markup_parse_context_parse() will report that error
/// back to its caller.
final class _GMarkupParser extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<ffi.Char> element_name,
              ffi.Pointer<ffi.Pointer<ffi.Char>> attribute_names,
              ffi.Pointer<ffi.Pointer<ffi.Char>> attribute_values,
              ffi.Pointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> start_element;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<ffi.Char> element_name,
              ffi.Pointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> end_element;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<ffi.Char> text,
              gsize text_len,
              ffi.Pointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> text;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<ffi.Char> passthrough_text,
              gsize text_len,
              ffi.Pointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> passthrough;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GMarkupParseContext> context,
              ffi.Pointer<GError> error, ffi.Pointer user_data)>> error;
}

/// GMarkupParseContext:
///
/// A parse context is used to parse a stream of bytes that
/// you expect to contain marked-up text.
///
/// See g_markup_parse_context_new(), #GMarkupParser, and so
/// on for more details.
typedef GMarkupParseContext = _GMarkupParseContext;
typedef GMarkupParser = _GMarkupParser;

abstract class GMarkupCollectType {
  static const int G_MARKUP_COLLECT_INVALID = 0;
  static const int G_MARKUP_COLLECT_STRING = 1;
  static const int G_MARKUP_COLLECT_STRDUP = 2;
  static const int G_MARKUP_COLLECT_BOOLEAN = 3;
  static const int G_MARKUP_COLLECT_TRISTATE = 4;
  static const int G_MARKUP_COLLECT_OPTIONAL = 65536;
}

final class _GVariantType extends ffi.Opaque {}

typedef GVariantType = _GVariantType;

final class _GVariant extends ffi.Opaque {}

abstract class GVariantClass {
  static const int G_VARIANT_CLASS_BOOLEAN = 98;
  static const int G_VARIANT_CLASS_BYTE = 121;
  static const int G_VARIANT_CLASS_INT16 = 110;
  static const int G_VARIANT_CLASS_UINT16 = 113;
  static const int G_VARIANT_CLASS_INT32 = 105;
  static const int G_VARIANT_CLASS_UINT32 = 117;
  static const int G_VARIANT_CLASS_INT64 = 120;
  static const int G_VARIANT_CLASS_UINT64 = 116;
  static const int G_VARIANT_CLASS_HANDLE = 104;
  static const int G_VARIANT_CLASS_DOUBLE = 100;
  static const int G_VARIANT_CLASS_STRING = 115;
  static const int G_VARIANT_CLASS_OBJECT_PATH = 111;
  static const int G_VARIANT_CLASS_SIGNATURE = 103;
  static const int G_VARIANT_CLASS_VARIANT = 118;
  static const int G_VARIANT_CLASS_MAYBE = 109;
  static const int G_VARIANT_CLASS_ARRAY = 97;
  static const int G_VARIANT_CLASS_TUPLE = 40;
  static const int G_VARIANT_CLASS_DICT_ENTRY = 123;
}

typedef GVariant = _GVariant;
typedef gint16 = ffi.Short;
typedef Dartgint16 = int;

final class _GVariantIter extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<guintptr> x;
}

typedef GVariantIter = _GVariantIter;

final class _GVariantBuilder extends ffi.Struct {
  external UnnamedUnion6 u;
}

final class UnnamedUnion6 extends ffi.Union {
  external UnnamedStruct13 s;

  @ffi.Array.multi([16])
  external ffi.Array<guintptr> x;
}

final class UnnamedStruct13 extends ffi.Struct {
  @gsize()
  external int partial_magic;

  external ffi.Pointer<GVariantType> type;

  @ffi.Array.multi([14])
  external ffi.Array<guintptr> y;
}

abstract class GVariantParseError {
  static const int G_VARIANT_PARSE_ERROR_FAILED = 0;
  static const int G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1;
  static const int G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2;
  static const int G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3;
  static const int G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4;
  static const int G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5;
  static const int G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6;
  static const int G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7;
  static const int G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8;
  static const int G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9;
  static const int G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10;
  static const int G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11;
  static const int G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12;
  static const int G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13;
  static const int G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14;
  static const int G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15;
  static const int G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16;
  static const int G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17;
  static const int G_VARIANT_PARSE_ERROR_RECURSION = 18;
}

typedef GVariantBuilder = _GVariantBuilder;

final class _GVariantDict extends ffi.Struct {
  external UnnamedUnion7 u;
}

final class UnnamedUnion7 extends ffi.Union {
  external UnnamedStruct14 s;

  @ffi.Array.multi([16])
  external ffi.Array<guintptr> x;
}

final class UnnamedStruct14 extends ffi.Struct {
  external ffi.Pointer<GVariant> asv;

  @gsize()
  external int partial_magic;

  @ffi.Array.multi([14])
  external ffi.Array<guintptr> y;
}

typedef GVariantDict = _GVariantDict;

abstract class GLogLevelFlags {
  static const int G_LOG_FLAG_RECURSION = 1;
  static const int G_LOG_FLAG_FATAL = 2;
  static const int G_LOG_LEVEL_ERROR = 4;
  static const int G_LOG_LEVEL_CRITICAL = 8;
  static const int G_LOG_LEVEL_WARNING = 16;
  static const int G_LOG_LEVEL_MESSAGE = 32;
  static const int G_LOG_LEVEL_INFO = 64;
  static const int G_LOG_LEVEL_DEBUG = 128;
  static const int G_LOG_LEVEL_MASK = -4;
}

typedef GLogFunc = ffi.Pointer<ffi.NativeFunction<GLogFuncFunction>>;
typedef GLogFuncFunction = ffi.Void Function(ffi.Pointer<ffi.Char> log_domain,
    ffi.Int32 log_level, ffi.Pointer<ffi.Char> message, ffi.Pointer user_data);
typedef DartGLogFuncFunction = void Function(ffi.Pointer<ffi.Char> log_domain,
    int log_level, ffi.Pointer<ffi.Char> message, ffi.Pointer user_data);

/// GLogWriterOutput:
/// @G_LOG_WRITER_HANDLED: Log writer has handled the log entry.
/// @G_LOG_WRITER_UNHANDLED: Log writer could not handle the log entry.
///
/// Return values from #GLogWriterFuncs to indicate whether the given log entry
/// was successfully handled by the writer, or whether there was an error in
/// handling it (and hence a fallback writer should be used).
///
/// If a #GLogWriterFunc ignores a log entry, it should return
/// %G_LOG_WRITER_HANDLED.
///
/// Since: 2.50
abstract class GLogWriterOutput {
  static const int G_LOG_WRITER_HANDLED = 1;
  static const int G_LOG_WRITER_UNHANDLED = 0;
}

final class _GLogField extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  external gconstpointer value;

  @gssize()
  external int length;
}

/// GLogField:
/// @key: field name (UTF-8 string)
/// @value: field value (arbitrary bytes)
/// @length: length of @value, in bytes, or -1 if it is nul-terminated
///
/// Structure representing a single field in a structured log entry. See
/// g_log_structured() for details.
///
/// Log fields may contain arbitrary values, including binary with embedded nul
/// bytes. If the field contains a string, the string must be UTF-8 encoded and
/// have a trailing nul byte. Otherwise, @length must be set to a non-negative
/// value.
///
/// Since: 2.50
typedef GLogField = _GLogField;

/// GLogWriterFunc:
/// @log_level: log level of the message
/// @fields: (array length=n_fields): fields forming the message
/// @n_fields: number of @fields
/// @user_data: user data passed to g_log_set_writer_func()
///
/// Writer function for log entries. A log entry is a collection of one or more
/// #GLogFields, using the standard [field names from journal
/// specification](https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html).
/// See g_log_structured() for more information.
///
/// Writer functions must ignore fields which they do not recognise, unless they
/// can write arbitrary binary output, as field values may be arbitrary binary.
///
/// @log_level is guaranteed to be included in @fields as the `PRIORITY` field,
/// but is provided separately for convenience of deciding whether or where to
/// output the log entry.
///
/// Writer functions should return %G_LOG_WRITER_HANDLED if they handled the log
/// message successfully or if they deliberately ignored it. If there was an
/// error handling the message (for example, if the writer function is meant to
/// send messages to a remote logging server and there is a network error), it
/// should return %G_LOG_WRITER_UNHANDLED. This allows writer functions to be
/// chained and fall back to simpler handlers in case of failure.
///
/// Returns: %G_LOG_WRITER_HANDLED if the log entry was handled successfully;
/// %G_LOG_WRITER_UNHANDLED otherwise
///
/// Since: 2.50
typedef GLogWriterFunc
    = ffi.Pointer<ffi.NativeFunction<GLogWriterFuncFunction>>;
typedef GLogWriterFuncFunction = ffi.Int32 Function(ffi.Int32 log_level,
    ffi.Pointer<GLogField> fields, gsize n_fields, ffi.Pointer user_data);
typedef DartGLogWriterFuncFunction = int Function(int log_level,
    ffi.Pointer<GLogField> fields, Dartgsize n_fields, ffi.Pointer user_data);

/// GPrintFunc:
/// @string: the message to output
///
/// Specifies the type of the print handler functions.
/// These are called with the complete formatted string to output.
typedef GPrintFunc = ffi.Pointer<ffi.NativeFunction<GPrintFuncFunction>>;
typedef GPrintFuncFunction = ffi.Void Function(ffi.Pointer<ffi.Char> string);
typedef DartGPrintFuncFunction = void Function(ffi.Pointer<ffi.Char> string);

final class _GOptionContext extends ffi.Opaque {}

final class _GOptionGroup extends ffi.Opaque {}

/// GOptionEntry:
/// @long_name: The long name of an option can be used to specify it
/// in a commandline as `--long_name`. Every option must have a
/// long name. To resolve conflicts if multiple option groups contain
/// the same long name, it is also possible to specify the option as
/// `--groupname-long_name`.
/// @short_name: If an option has a short name, it can be specified
/// `-short_name` in a commandline. @short_name must be  a printable
/// ASCII character different from '-', or zero if the option has no
/// short name.
/// @flags: Flags from #GOptionFlags
/// @arg: The type of the option, as a #GOptionArg
/// @arg_data: If the @arg type is %G_OPTION_ARG_CALLBACK, then @arg_data
/// must point to a #GOptionArgFunc callback function, which will be
/// called to handle the extra argument. Otherwise, @arg_data is a
/// pointer to a location to store the value, the required type of
/// the location depends on the @arg type:
/// - %G_OPTION_ARG_NONE: %gboolean
/// - %G_OPTION_ARG_STRING: %gchar*
/// - %G_OPTION_ARG_INT: %gint
/// - %G_OPTION_ARG_FILENAME: %gchar*
/// - %G_OPTION_ARG_STRING_ARRAY: %gchar**
/// - %G_OPTION_ARG_FILENAME_ARRAY: %gchar**
/// - %G_OPTION_ARG_DOUBLE: %gdouble
/// If @arg type is %G_OPTION_ARG_STRING or %G_OPTION_ARG_FILENAME,
/// the location will contain a newly allocated string if the option
/// was given. That string needs to be freed by the callee using g_free().
/// Likewise if @arg type is %G_OPTION_ARG_STRING_ARRAY or
/// %G_OPTION_ARG_FILENAME_ARRAY, the data should be freed using g_strfreev().
/// @description: the description for the option in `--help`
/// output. The @description is translated using the @translate_func
/// of the group, see g_option_group_set_translation_domain().
/// @arg_description: The placeholder to use for the extra argument parsed
/// by the option in `--help` output. The @arg_description is translated
/// using the @translate_func of the group, see
/// g_option_group_set_translation_domain().
///
/// A GOptionEntry struct defines a single option. To have an effect, they
/// must be added to a #GOptionGroup with g_option_context_add_main_entries()
/// or g_option_group_add_entries().
final class _GOptionEntry extends ffi.Struct {
  external ffi.Pointer<ffi.Char> long_name;

  @ffi.Char()
  external int short_name;

  @gint()
  external int flags;

  @ffi.Int32()
  external int arg;

  external ffi.Pointer arg_data;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> arg_description;
}

/// GOptionArg:
/// @G_OPTION_ARG_NONE: No extra argument. This is useful for simple flags or booleans.
/// @G_OPTION_ARG_STRING: The option takes a UTF-8 string argument.
/// @G_OPTION_ARG_INT: The option takes an integer argument.
/// @G_OPTION_ARG_CALLBACK: The option provides a callback (of type
/// #GOptionArgFunc) to parse the extra argument.
/// @G_OPTION_ARG_FILENAME: The option takes a filename as argument, which will
/// be in the GLib filename encoding rather than UTF-8.
/// @G_OPTION_ARG_STRING_ARRAY: The option takes a string argument, multiple
/// uses of the option are collected into an array of strings.
/// @G_OPTION_ARG_FILENAME_ARRAY: The option takes a filename as argument,
/// multiple uses of the option are collected into an array of strings.
/// @G_OPTION_ARG_DOUBLE: The option takes a double argument. The argument
/// can be formatted either for the user's locale or for the "C" locale.
/// Since 2.12
/// @G_OPTION_ARG_INT64: The option takes a 64-bit integer. Like
/// %G_OPTION_ARG_INT but for larger numbers. The number can be in
/// decimal base, or in hexadecimal (when prefixed with `0x`, for
/// example, `0xffffffff`). Since 2.12
///
/// The #GOptionArg enum values determine which type of extra argument the
/// options expect to find. If an option expects an extra argument, it can
/// be specified in several ways; with a short option: `-x arg`, with a long
/// option: `--name arg` or combined in a single argument: `--name=arg`.
abstract class GOptionArg {
  static const int G_OPTION_ARG_NONE = 0;
  static const int G_OPTION_ARG_STRING = 1;
  static const int G_OPTION_ARG_INT = 2;
  static const int G_OPTION_ARG_CALLBACK = 3;
  static const int G_OPTION_ARG_FILENAME = 4;
  static const int G_OPTION_ARG_STRING_ARRAY = 5;
  static const int G_OPTION_ARG_FILENAME_ARRAY = 6;
  static const int G_OPTION_ARG_DOUBLE = 7;
  static const int G_OPTION_ARG_INT64 = 8;
}

/// GOptionFlags:
/// @G_OPTION_FLAG_NONE: No flags. Since: 2.42.
/// @G_OPTION_FLAG_HIDDEN: The option doesn't appear in `--help` output.
/// @G_OPTION_FLAG_IN_MAIN: The option appears in the main section of the
/// `--help` output, even if it is defined in a group.
/// @G_OPTION_FLAG_REVERSE: For options of the %G_OPTION_ARG_NONE kind, this
/// flag indicates that the sense of the option is reversed. i.e. %FALSE will
/// be stored into the argument rather than %TRUE.
/// @G_OPTION_FLAG_NO_ARG: For options of the %G_OPTION_ARG_CALLBACK kind,
/// this flag indicates that the callback does not take any argument
/// (like a %G_OPTION_ARG_NONE option). Since 2.8
/// @G_OPTION_FLAG_FILENAME: For options of the %G_OPTION_ARG_CALLBACK
/// kind, this flag indicates that the argument should be passed to the
/// callback in the GLib filename encoding rather than UTF-8. Since 2.8
/// @G_OPTION_FLAG_OPTIONAL_ARG: For options of the %G_OPTION_ARG_CALLBACK
/// kind, this flag indicates that the argument supply is optional.
/// If no argument is given then data of %GOptionParseFunc will be
/// set to NULL. Since 2.8
/// @G_OPTION_FLAG_NOALIAS: This flag turns off the automatic conflict
/// resolution which prefixes long option names with `groupname-` if
/// there is a conflict. This option should only be used in situations
/// where aliasing is necessary to model some legacy commandline interface.
/// It is not safe to use this option, unless all option groups are under
/// your direct control. Since 2.8.
///
/// Flags which modify individual options.
abstract class GOptionFlags {
  static const int G_OPTION_FLAG_NONE = 0;
  static const int G_OPTION_FLAG_HIDDEN = 1;
  static const int G_OPTION_FLAG_IN_MAIN = 2;
  static const int G_OPTION_FLAG_REVERSE = 4;
  static const int G_OPTION_FLAG_NO_ARG = 8;
  static const int G_OPTION_FLAG_FILENAME = 16;
  static const int G_OPTION_FLAG_OPTIONAL_ARG = 32;
  static const int G_OPTION_FLAG_NOALIAS = 64;
}

/// GOptionError:
/// @G_OPTION_ERROR_UNKNOWN_OPTION: An option was not known to the parser.
/// This error will only be reported, if the parser hasn't been instructed
/// to ignore unknown options, see g_option_context_set_ignore_unknown_options().
/// @G_OPTION_ERROR_BAD_VALUE: A value couldn't be parsed.
/// @G_OPTION_ERROR_FAILED: A #GOptionArgFunc callback failed.
///
/// Error codes returned by option parsing.
abstract class GOptionError {
  static const int G_OPTION_ERROR_UNKNOWN_OPTION = 0;
  static const int G_OPTION_ERROR_BAD_VALUE = 1;
  static const int G_OPTION_ERROR_FAILED = 2;
}

/// GOptionContext:
///
/// A `GOptionContext` struct defines which options
/// are accepted by the commandline option parser. The struct has only private
/// fields and should not be directly accessed.
typedef GOptionContext = _GOptionContext;
typedef GOptionEntry = _GOptionEntry;

/// GTranslateFunc:
/// @str: the untranslated string
/// @data: user data specified when installing the function, e.g.
/// in g_option_group_set_translate_func()
///
/// The type of functions which are used to translate user-visible
/// strings, for <option>--help</option> output.
///
/// Returns: a translation of the string for the current locale.
/// The returned string is owned by GLib and must not be freed.
typedef GTranslateFunc
    = ffi.Pointer<ffi.NativeFunction<GTranslateFuncFunction>>;
typedef GTranslateFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> str, ffi.Pointer data);

/// GOptionGroup:
///
/// A `GOptionGroup` struct defines the options in a single
/// group. The struct has only private fields and should not be directly accessed.
///
/// All options in a group share the same translation function. Libraries which
/// need to parse commandline options are expected to provide a function for
/// getting a `GOptionGroup` holding their options, which
/// the application can then add to its #GOptionContext.
typedef GOptionGroup = _GOptionGroup;

/// GOptionParseFunc:
/// @context: The active #GOptionContext
/// @group: The group to which the function belongs
/// @data: User data added to the #GOptionGroup containing the option when it
/// was created with g_option_group_new()
/// @error: A return location for error details
///
/// The type of function that can be called before and after parsing.
///
/// Returns: %TRUE if the function completed successfully, %FALSE if an error
/// occurred, in which case @error should be set with g_set_error()
typedef GOptionParseFunc
    = ffi.Pointer<ffi.NativeFunction<GOptionParseFuncFunction>>;
typedef GOptionParseFuncFunction = gboolean Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);
typedef DartGOptionParseFuncFunction = Dartgint Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);

/// GOptionErrorFunc:
/// @context: The active #GOptionContext
/// @group: The group to which the function belongs
/// @data: User data added to the #GOptionGroup containing the option when it
/// was created with g_option_group_new()
/// @error: The #GError containing details about the parse error
///
/// The type of function to be used as callback when a parse error occurs.
typedef GOptionErrorFunc
    = ffi.Pointer<ffi.NativeFunction<GOptionErrorFuncFunction>>;
typedef GOptionErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);
typedef DartGOptionErrorFuncFunction = void Function(
    ffi.Pointer<GOptionContext> context,
    ffi.Pointer<GOptionGroup> group,
    ffi.Pointer data,
    ffi.Pointer<ffi.Pointer<GError>> error);

final class _GPathBuf extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Pointer> dummy;
}

typedef GPathBuf = _GPathBuf;

final class _GPatternSpec extends ffi.Opaque {}

typedef GPatternSpec = _GPatternSpec;

/// GQueue:
/// @head: a pointer to the first element of the queue
/// @tail: a pointer to the last element of the queue
/// @length: the number of elements in the queue
///
/// Contains the public fields of a
/// [Queue][glib-Double-ended-Queues].
final class _GQueue extends ffi.Struct {
  external ffi.Pointer<GList> head;

  external ffi.Pointer<GList> tail;

  @guint()
  external int length;
}

typedef GQueue = _GQueue;

final class _GRand extends ffi.Opaque {}

typedef GRand = _GRand;
typedef grefcount = gint;
typedef gatomicrefcount = gint;

/// GRegexError:
/// @G_REGEX_ERROR_COMPILE: Compilation of the regular expression failed.
/// @G_REGEX_ERROR_OPTIMIZE: Optimization of the regular expression failed.
/// @G_REGEX_ERROR_REPLACE: Replacement failed due to an ill-formed replacement
/// string.
/// @G_REGEX_ERROR_MATCH: The match process failed.
/// @G_REGEX_ERROR_INTERNAL: Internal error of the regular expression engine.
/// Since 2.16
/// @G_REGEX_ERROR_STRAY_BACKSLASH: "\\" at end of pattern. Since 2.16
/// @G_REGEX_ERROR_MISSING_CONTROL_CHAR: "\\c" at end of pattern. Since 2.16
/// @G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: Unrecognized character follows "\\".
/// Since 2.16
/// @G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: Numbers out of order in "{}"
/// quantifier. Since 2.16
/// @G_REGEX_ERROR_QUANTIFIER_TOO_BIG: Number too big in "{}" quantifier.
/// Since 2.16
/// @G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: Missing terminating "]" for
/// character class. Since 2.16
/// @G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: Invalid escape sequence
/// in character class. Since 2.16
/// @G_REGEX_ERROR_RANGE_OUT_OF_ORDER: Range out of order in character class.
/// Since 2.16
/// @G_REGEX_ERROR_NOTHING_TO_REPEAT: Nothing to repeat. Since 2.16
/// @G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: Unrecognized character after "(?",
/// "(?<" or "(?P". Since 2.16
/// @G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: POSIX named classes are
/// supported only within a class. Since 2.16
/// @G_REGEX_ERROR_UNMATCHED_PARENTHESIS: Missing terminating ")" or ")"
/// without opening "(". Since 2.16
/// @G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: Reference to non-existent
/// subpattern. Since 2.16
/// @G_REGEX_ERROR_UNTERMINATED_COMMENT: Missing terminating ")" after comment.
/// Since 2.16
/// @G_REGEX_ERROR_EXPRESSION_TOO_LARGE: Regular expression too large.
/// Since 2.16
/// @G_REGEX_ERROR_MEMORY_ERROR: Failed to get memory. Since 2.16
/// @G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: Lookbehind assertion is not
/// fixed length. Since 2.16
/// @G_REGEX_ERROR_MALFORMED_CONDITION: Malformed number or name after "(?(".
/// Since 2.16
/// @G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: Conditional group contains
/// more than two branches. Since 2.16
/// @G_REGEX_ERROR_ASSERTION_EXPECTED: Assertion expected after "(?(".
/// Since 2.16
/// @G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: Unknown POSIX class name.
/// Since 2.16
/// @G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: POSIX collating
/// elements are not supported. Since 2.16
/// @G_REGEX_ERROR_HEX_CODE_TOO_LARGE: Character value in "\\x{...}" sequence
/// is too large. Since 2.16
/// @G_REGEX_ERROR_INVALID_CONDITION: Invalid condition "(?(0)". Since 2.16
/// @G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: \\C not allowed in
/// lookbehind assertion. Since 2.16
/// @G_REGEX_ERROR_INFINITE_LOOP: Recursive call could loop indefinitely.
/// Since 2.16
/// @G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: Missing terminator
/// in subpattern name. Since 2.16
/// @G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: Two named subpatterns have
/// the same name. Since 2.16
/// @G_REGEX_ERROR_MALFORMED_PROPERTY: Malformed "\\P" or "\\p" sequence.
/// Since 2.16
/// @G_REGEX_ERROR_UNKNOWN_PROPERTY: Unknown property name after "\\P" or
/// "\\p". Since 2.16
/// @G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: Subpattern name is too long
/// (maximum 32 characters). Since 2.16
/// @G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: Too many named subpatterns (maximum
/// 10,000). Since 2.16
/// @G_REGEX_ERROR_INVALID_OCTAL_VALUE: Octal value is greater than "\\377".
/// Since 2.16
/// @G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: "DEFINE" group contains more
/// than one branch. Since 2.16
/// @G_REGEX_ERROR_DEFINE_REPETION: Repeating a "DEFINE" group is not allowed.
/// This error is never raised. Since: 2.16 Deprecated: 2.34
/// @G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: Inconsistent newline options.
/// Since 2.16
/// @G_REGEX_ERROR_MISSING_BACK_REFERENCE: "\\g" is not followed by a braced,
/// angle-bracketed, or quoted name or number, or by a plain number. Since: 2.16
/// @G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: relative reference must not be zero. Since: 2.34
/// @G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: the backtracing
/// control verb used does not allow an argument. Since: 2.34
/// @G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: unknown backtracing
/// control verb. Since: 2.34
/// @G_REGEX_ERROR_NUMBER_TOO_BIG: number is too big in escape sequence. Since: 2.34
/// @G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: Missing subpattern name. Since: 2.34
/// @G_REGEX_ERROR_MISSING_DIGIT: Missing digit. Since 2.34
/// @G_REGEX_ERROR_INVALID_DATA_CHARACTER: In JavaScript compatibility mode,
/// "[" is an invalid data character. Since: 2.34
/// @G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: different names for subpatterns of the
/// same number are not allowed. Since: 2.34
/// @G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: the backtracing control
/// verb requires an argument. Since: 2.34
/// @G_REGEX_ERROR_INVALID_CONTROL_CHAR: "\\c" must be followed by an ASCII
/// character. Since: 2.34
/// @G_REGEX_ERROR_MISSING_NAME: "\\k" is not followed by a braced, angle-bracketed, or
/// quoted name. Since: 2.34
/// @G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: "\\N" is not supported in a class. Since: 2.34
/// @G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: too many forward references. Since: 2.34
/// @G_REGEX_ERROR_NAME_TOO_LONG: the name is too long in "(*MARK)", "(*PRUNE)",
/// "(*SKIP)", or "(*THEN)". Since: 2.34
/// @G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: the character value in the \\u sequence is
/// too large. Since: 2.34
///
/// Error codes returned by regular expressions functions.
///
/// Since: 2.14
abstract class GRegexError {
  static const int G_REGEX_ERROR_COMPILE = 0;
  static const int G_REGEX_ERROR_OPTIMIZE = 1;
  static const int G_REGEX_ERROR_REPLACE = 2;
  static const int G_REGEX_ERROR_MATCH = 3;
  static const int G_REGEX_ERROR_INTERNAL = 4;
  static const int G_REGEX_ERROR_STRAY_BACKSLASH = 101;
  static const int G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102;
  static const int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103;
  static const int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104;
  static const int G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105;
  static const int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106;
  static const int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107;
  static const int G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108;
  static const int G_REGEX_ERROR_NOTHING_TO_REPEAT = 109;
  static const int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112;
  static const int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113;
  static const int G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114;
  static const int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115;
  static const int G_REGEX_ERROR_UNTERMINATED_COMMENT = 118;
  static const int G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120;
  static const int G_REGEX_ERROR_MEMORY_ERROR = 121;
  static const int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125;
  static const int G_REGEX_ERROR_MALFORMED_CONDITION = 126;
  static const int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127;
  static const int G_REGEX_ERROR_ASSERTION_EXPECTED = 128;
  static const int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130;
  static const int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131;
  static const int G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134;
  static const int G_REGEX_ERROR_INVALID_CONDITION = 135;
  static const int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136;
  static const int G_REGEX_ERROR_INFINITE_LOOP = 140;
  static const int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142;
  static const int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143;
  static const int G_REGEX_ERROR_MALFORMED_PROPERTY = 146;
  static const int G_REGEX_ERROR_UNKNOWN_PROPERTY = 147;
  static const int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148;
  static const int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149;
  static const int G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151;
  static const int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154;
  static const int G_REGEX_ERROR_DEFINE_REPETION = 155;
  static const int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156;
  static const int G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157;
  static const int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158;
  static const int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN =
      159;
  static const int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160;
  static const int G_REGEX_ERROR_NUMBER_TOO_BIG = 161;
  static const int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162;
  static const int G_REGEX_ERROR_MISSING_DIGIT = 163;
  static const int G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164;
  static const int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165;
  static const int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED =
      166;
  static const int G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168;
  static const int G_REGEX_ERROR_MISSING_NAME = 169;
  static const int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171;
  static const int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172;
  static const int G_REGEX_ERROR_NAME_TOO_LONG = 175;
  static const int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176;
}

/// GRegexCompileFlags:
/// @G_REGEX_DEFAULT: No special options set. Since: 2.74
/// @G_REGEX_CASELESS: Letters in the pattern match both upper- and
/// lowercase letters. This option can be changed within a pattern
/// by a "(?i)" option setting.
/// @G_REGEX_MULTILINE: By default, GRegex treats the strings as consisting
/// of a single line of characters (even if it actually contains
/// newlines). The "start of line" metacharacter ("^") matches only
/// at the start of the string, while the "end of line" metacharacter
/// ("$") matches only at the end of the string, or before a terminating
/// newline (unless %G_REGEX_DOLLAR_ENDONLY is set). When
/// %G_REGEX_MULTILINE is set, the "start of line" and "end of line"
/// constructs match immediately following or immediately before any
/// newline in the string, respectively, as well as at the very start
/// and end. This can be changed within a pattern by a "(?m)" option
/// setting.
/// @G_REGEX_DOTALL: A dot metacharacter (".") in the pattern matches all
/// characters, including newlines. Without it, newlines are excluded.
/// This option can be changed within a pattern by a ("?s") option setting.
/// @G_REGEX_EXTENDED: Whitespace data characters in the pattern are
/// totally ignored except when escaped or inside a character class.
/// Whitespace does not include the VT character (code 11). In addition,
/// characters between an unescaped "#" outside a character class and
/// the next newline character, inclusive, are also ignored. This can
/// be changed within a pattern by a "(?x)" option setting.
/// @G_REGEX_ANCHORED: The pattern is forced to be "anchored", that is,
/// it is constrained to match only at the first matching point in the
/// string that is being searched. This effect can also be achieved by
/// appropriate constructs in the pattern itself such as the "^"
/// metacharacter.
/// @G_REGEX_DOLLAR_ENDONLY: A dollar metacharacter ("$") in the pattern
/// matches only at the end of the string. Without this option, a
/// dollar also matches immediately before the final character if
/// it is a newline (but not before any other newlines). This option
/// is ignored if %G_REGEX_MULTILINE is set.
/// @G_REGEX_UNGREEDY: Inverts the "greediness" of the quantifiers so that
/// they are not greedy by default, but become greedy if followed by "?".
/// It can also be set by a "(?U)" option setting within the pattern.
/// @G_REGEX_RAW: Usually strings must be valid UTF-8 strings, using this
/// flag they are considered as a raw sequence of bytes.
/// @G_REGEX_NO_AUTO_CAPTURE: Disables the use of numbered capturing
/// parentheses in the pattern. Any opening parenthesis that is not
/// followed by "?" behaves as if it were followed by "?:" but named
/// parentheses can still be used for capturing (and they acquire numbers
/// in the usual way).
/// @G_REGEX_OPTIMIZE: Since 2.74 and the port to pcre2, requests JIT
/// compilation, which, if the just-in-time compiler is available, further
/// processes a compiled pattern into machine code that executes much
/// faster. However, it comes at the cost of extra processing before the
/// match is performed, so it is most beneficial to use this when the same
/// compiled pattern is used for matching many times. Before 2.74 this
/// option used the built-in non-JIT optimizations in pcre1.
/// @G_REGEX_FIRSTLINE: Limits an unanchored pattern to match before (or at) the
/// first newline. Since: 2.34
/// @G_REGEX_DUPNAMES: Names used to identify capturing subpatterns need not
/// be unique. This can be helpful for certain types of pattern when it
/// is known that only one instance of the named subpattern can ever be
/// matched.
/// @G_REGEX_NEWLINE_CR: Usually any newline character or character sequence is
/// recognized. If this option is set, the only recognized newline character
/// is '\r'.
/// @G_REGEX_NEWLINE_LF: Usually any newline character or character sequence is
/// recognized. If this option is set, the only recognized newline character
/// is '\n'.
/// @G_REGEX_NEWLINE_CRLF: Usually any newline character or character sequence is
/// recognized. If this option is set, the only recognized newline character
/// sequence is '\r\n'.
/// @G_REGEX_NEWLINE_ANYCRLF: Usually any newline character or character sequence
/// is recognized. If this option is set, the only recognized newline character
/// sequences are '\r', '\n', and '\r\n'. Since: 2.34
/// @G_REGEX_BSR_ANYCRLF: Usually any newline character or character sequence
/// is recognised. If this option is set, then "\R" only recognizes the newline
/// characters '\r', '\n' and '\r\n'. Since: 2.34
/// @G_REGEX_JAVASCRIPT_COMPAT: Changes behaviour so that it is compatible with
/// JavaScript rather than PCRE. Since GLib 2.74 this is no longer supported,
/// as libpcre2 does not support it. Since: 2.34 Deprecated: 2.74
///
/// Flags specifying compile-time options.
///
/// Since: 2.14
abstract class GRegexCompileFlags {
  static const int G_REGEX_DEFAULT = 0;
  static const int G_REGEX_CASELESS = 1;
  static const int G_REGEX_MULTILINE = 2;
  static const int G_REGEX_DOTALL = 4;
  static const int G_REGEX_EXTENDED = 8;
  static const int G_REGEX_ANCHORED = 16;
  static const int G_REGEX_DOLLAR_ENDONLY = 32;
  static const int G_REGEX_UNGREEDY = 512;
  static const int G_REGEX_RAW = 2048;
  static const int G_REGEX_NO_AUTO_CAPTURE = 4096;
  static const int G_REGEX_OPTIMIZE = 8192;
  static const int G_REGEX_FIRSTLINE = 262144;
  static const int G_REGEX_DUPNAMES = 524288;
  static const int G_REGEX_NEWLINE_CR = 1048576;
  static const int G_REGEX_NEWLINE_LF = 2097152;
  static const int G_REGEX_NEWLINE_CRLF = 3145728;
  static const int G_REGEX_NEWLINE_ANYCRLF = 5242880;
  static const int G_REGEX_BSR_ANYCRLF = 8388608;
  static const int G_REGEX_JAVASCRIPT_COMPAT = 33554432;
}

/// GRegexMatchFlags:
/// @G_REGEX_MATCH_DEFAULT: No special options set. Since: 2.74
/// @G_REGEX_MATCH_ANCHORED: The pattern is forced to be "anchored", that is,
/// it is constrained to match only at the first matching point in the
/// string that is being searched. This effect can also be achieved by
/// appropriate constructs in the pattern itself such as the "^"
/// metacharacter.
/// @G_REGEX_MATCH_NOTBOL: Specifies that first character of the string is
/// not the beginning of a line, so the circumflex metacharacter should
/// not match before it. Setting this without %G_REGEX_MULTILINE (at
/// compile time) causes circumflex never to match. This option affects
/// only the behaviour of the circumflex metacharacter, it does not
/// affect "\A".
/// @G_REGEX_MATCH_NOTEOL: Specifies that the end of the subject string is
/// not the end of a line, so the dollar metacharacter should not match
/// it nor (except in multiline mode) a newline immediately before it.
/// Setting this without %G_REGEX_MULTILINE (at compile time) causes
/// dollar never to match. This option affects only the behaviour of
/// the dollar metacharacter, it does not affect "\Z" or "\z".
/// @G_REGEX_MATCH_NOTEMPTY: An empty string is not considered to be a valid
/// match if this option is set. If there are alternatives in the pattern,
/// they are tried. If all the alternatives match the empty string, the
/// entire match fails. For example, if the pattern "a?b?" is applied to
/// a string not beginning with "a" or "b", it matches the empty string
/// at the start of the string. With this flag set, this match is not
/// valid, so GRegex searches further into the string for occurrences
/// of "a" or "b".
/// @G_REGEX_MATCH_PARTIAL: Turns on the partial matching feature, for more
/// documentation on partial matching see g_match_info_is_partial_match().
/// @G_REGEX_MATCH_NEWLINE_CR: Overrides the newline definition set when
/// creating a new #GRegex, setting the '\r' character as line terminator.
/// @G_REGEX_MATCH_NEWLINE_LF: Overrides the newline definition set when
/// creating a new #GRegex, setting the '\n' character as line terminator.
/// @G_REGEX_MATCH_NEWLINE_CRLF: Overrides the newline definition set when
/// creating a new #GRegex, setting the '\r\n' characters sequence as line terminator.
/// @G_REGEX_MATCH_NEWLINE_ANY: Overrides the newline definition set when
/// creating a new #GRegex, any Unicode newline sequence
/// is recognised as a newline. These are '\r', '\n' and '\rn', and the
/// single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
/// U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
/// U+2029 PARAGRAPH SEPARATOR.
/// @G_REGEX_MATCH_NEWLINE_ANYCRLF: Overrides the newline definition set when
/// creating a new #GRegex; any '\r', '\n', or '\r\n' character sequence
/// is recognized as a newline. Since: 2.34
/// @G_REGEX_MATCH_BSR_ANYCRLF: Overrides the newline definition for "\R" set when
/// creating a new #GRegex; only '\r', '\n', or '\r\n' character sequences
/// are recognized as a newline by "\R". Since: 2.34
/// @G_REGEX_MATCH_BSR_ANY: Overrides the newline definition for "\R" set when
/// creating a new #GRegex; any Unicode newline character or character sequence
/// are recognized as a newline by "\R". These are '\r', '\n' and '\rn', and the
/// single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),
/// U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and
/// U+2029 PARAGRAPH SEPARATOR. Since: 2.34
/// @G_REGEX_MATCH_PARTIAL_SOFT: An alias for %G_REGEX_MATCH_PARTIAL. Since: 2.34
/// @G_REGEX_MATCH_PARTIAL_HARD: Turns on the partial matching feature. In contrast to
/// to %G_REGEX_MATCH_PARTIAL_SOFT, this stops matching as soon as a partial match
/// is found, without continuing to search for a possible complete match. See
/// g_match_info_is_partial_match() for more information. Since: 2.34
/// @G_REGEX_MATCH_NOTEMPTY_ATSTART: Like %G_REGEX_MATCH_NOTEMPTY, but only applied to
/// the start of the matched string. For anchored
/// patterns this can only happen for pattern containing "\K". Since: 2.34
///
/// Flags specifying match-time options.
///
/// Since: 2.14
abstract class GRegexMatchFlags {
  static const int G_REGEX_MATCH_DEFAULT = 0;
  static const int G_REGEX_MATCH_ANCHORED = 16;
  static const int G_REGEX_MATCH_NOTBOL = 128;
  static const int G_REGEX_MATCH_NOTEOL = 256;
  static const int G_REGEX_MATCH_NOTEMPTY = 1024;
  static const int G_REGEX_MATCH_PARTIAL = 32768;
  static const int G_REGEX_MATCH_NEWLINE_CR = 1048576;
  static const int G_REGEX_MATCH_NEWLINE_LF = 2097152;
  static const int G_REGEX_MATCH_NEWLINE_CRLF = 3145728;
  static const int G_REGEX_MATCH_NEWLINE_ANY = 4194304;
  static const int G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880;
  static const int G_REGEX_MATCH_BSR_ANYCRLF = 8388608;
  static const int G_REGEX_MATCH_BSR_ANY = 16777216;
  static const int G_REGEX_MATCH_PARTIAL_SOFT = 32768;
  static const int G_REGEX_MATCH_PARTIAL_HARD = 134217728;
  static const int G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456;
}

final class _GRegex extends ffi.Opaque {}

final class _GMatchInfo extends ffi.Opaque {}

typedef GRegex = _GRegex;

/// GMatchInfo:
///
/// A GMatchInfo is an opaque struct used to return information about
/// matches.
typedef GMatchInfo = _GMatchInfo;

/// GRegexEvalCallback:
/// @match_info: the #GMatchInfo generated by the match.
/// Use g_match_info_get_regex() and g_match_info_get_string() if you
/// need the #GRegex or the matched string.
/// @result: a #GString containing the new string
/// @user_data: user data passed to g_regex_replace_eval()
///
/// Specifies the type of the function passed to g_regex_replace_eval().
/// It is called for each occurrence of the pattern in the string passed
/// to g_regex_replace_eval(), and it should append the replacement to
/// @result.
///
/// Returns: %FALSE to continue the replacement process, %TRUE to stop it
///
/// Since: 2.14
typedef GRegexEvalCallback
    = ffi.Pointer<ffi.NativeFunction<GRegexEvalCallbackFunction>>;
typedef GRegexEvalCallbackFunction = gboolean Function(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<GString> result,
    ffi.Pointer user_data);
typedef DartGRegexEvalCallbackFunction = Dartgint Function(
    ffi.Pointer<GMatchInfo> match_info,
    ffi.Pointer<GString> result,
    ffi.Pointer user_data);

final class _GScanner extends ffi.Struct {
  external ffi.Pointer user_data;

  @guint()
  external int max_parse_errors;

  @guint()
  external int parse_errors;

  external ffi.Pointer<ffi.Char> input_name;

  external ffi.Pointer<GData> qdata;

  external ffi.Pointer<GScannerConfig> config;

  @ffi.Int32()
  external int token;

  external GTokenValue value;

  @guint()
  external int line;

  @guint()
  external int position;

  @ffi.Int32()
  external int next_token;

  external GTokenValue next_value;

  @guint()
  external int next_line;

  @guint()
  external int next_position;

  external ffi.Pointer<GHashTable> symbol_table;

  @gint()
  external int input_fd;

  external ffi.Pointer<ffi.Char> text;

  external ffi.Pointer<ffi.Char> text_end;

  external ffi.Pointer<ffi.Char> buffer;

  @guint()
  external int scope_id;

  external GScannerMsgFunc msg_handler;
}

typedef GScannerConfig = _GScannerConfig;

final class _GScannerConfig extends ffi.Opaque {}

abstract class GTokenType {
  static const int G_TOKEN_EOF = 0;
  static const int G_TOKEN_LEFT_PAREN = 40;
  static const int G_TOKEN_RIGHT_PAREN = 41;
  static const int G_TOKEN_LEFT_CURLY = 123;
  static const int G_TOKEN_RIGHT_CURLY = 125;
  static const int G_TOKEN_LEFT_BRACE = 91;
  static const int G_TOKEN_RIGHT_BRACE = 93;
  static const int G_TOKEN_EQUAL_SIGN = 61;
  static const int G_TOKEN_COMMA = 44;
  static const int G_TOKEN_NONE = 256;
  static const int G_TOKEN_ERROR = 257;
  static const int G_TOKEN_CHAR = 258;
  static const int G_TOKEN_BINARY = 259;
  static const int G_TOKEN_OCTAL = 260;
  static const int G_TOKEN_INT = 261;
  static const int G_TOKEN_HEX = 262;
  static const int G_TOKEN_FLOAT = 263;
  static const int G_TOKEN_STRING = 264;
  static const int G_TOKEN_SYMBOL = 265;
  static const int G_TOKEN_IDENTIFIER = 266;
  static const int G_TOKEN_IDENTIFIER_NULL = 267;
  static const int G_TOKEN_COMMENT_SINGLE = 268;
  static const int G_TOKEN_COMMENT_MULTI = 269;
  static const int G_TOKEN_LAST = 270;
}

typedef GTokenValue = _GTokenValue;

final class _GTokenValue extends ffi.Union {
  external ffi.Pointer v_symbol;

  external ffi.Pointer<ffi.Char> v_identifier;

  @gulong()
  external int v_binary;

  @gulong()
  external int v_octal;

  @gulong()
  external int v_int;

  @guint64()
  external int v_int64;

  @gdouble()
  external double v_float;

  @gulong()
  external int v_hex;

  external ffi.Pointer<ffi.Char> v_string;

  external ffi.Pointer<ffi.Char> v_comment;

  @guchar()
  external int v_char;

  @guint()
  external int v_error;
}

typedef GScannerMsgFunc
    = ffi.Pointer<ffi.NativeFunction<GScannerMsgFuncFunction>>;
typedef GScannerMsgFuncFunction = ffi.Void Function(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<ffi.Char> message,
    gboolean error);
typedef DartGScannerMsgFuncFunction = void Function(
    ffi.Pointer<GScanner> scanner,
    ffi.Pointer<ffi.Char> message,
    Dartgint error);
typedef GScanner = _GScanner;

abstract class GErrorType {
  static const int G_ERR_UNKNOWN = 0;
  static const int G_ERR_UNEXP_EOF = 1;
  static const int G_ERR_UNEXP_EOF_IN_STRING = 2;
  static const int G_ERR_UNEXP_EOF_IN_COMMENT = 3;
  static const int G_ERR_NON_DIGIT_IN_CONST = 4;
  static const int G_ERR_DIGIT_RADIX = 5;
  static const int G_ERR_FLOAT_RADIX = 6;
  static const int G_ERR_FLOAT_MALFORMED = 7;
}

final class _GSequence extends ffi.Opaque {}

final class _GSequenceNode extends ffi.Opaque {}

typedef GSequence = _GSequence;
typedef GSequenceIter = _GSequenceNode;
typedef GSequenceIterCompareFunc
    = ffi.Pointer<ffi.NativeFunction<GSequenceIterCompareFuncFunction>>;
typedef GSequenceIterCompareFuncFunction = gint Function(
    ffi.Pointer<GSequenceIter> a,
    ffi.Pointer<GSequenceIter> b,
    ffi.Pointer data);
typedef DartGSequenceIterCompareFuncFunction = Dartgint Function(
    ffi.Pointer<GSequenceIter> a,
    ffi.Pointer<GSequenceIter> b,
    ffi.Pointer data);

abstract class GShellError {
  static const int G_SHELL_ERROR_BAD_QUOTING = 0;
  static const int G_SHELL_ERROR_EMPTY_STRING = 1;
  static const int G_SHELL_ERROR_FAILED = 2;
}

abstract class GSliceConfig {
  static const int G_SLICE_CONFIG_ALWAYS_MALLOC = 1;
  static const int G_SLICE_CONFIG_BYPASS_MAGAZINES = 2;
  static const int G_SLICE_CONFIG_WORKING_SET_MSECS = 3;
  static const int G_SLICE_CONFIG_COLOR_INCREMENT = 4;
  static const int G_SLICE_CONFIG_CHUNK_SIZES = 5;
  static const int G_SLICE_CONFIG_CONTENTION_COUNTER = 6;
}

/// GSpawnError:
/// @G_SPAWN_ERROR_FORK: Fork failed due to lack of memory.
/// @G_SPAWN_ERROR_READ: Read or select on pipes failed.
/// @G_SPAWN_ERROR_CHDIR: Changing to working directory failed.
/// @G_SPAWN_ERROR_ACCES: execv() returned `EACCES`
/// @G_SPAWN_ERROR_PERM: execv() returned `EPERM`
/// @G_SPAWN_ERROR_TOO_BIG: execv() returned `E2BIG`
/// @G_SPAWN_ERROR_2BIG: deprecated alias for %G_SPAWN_ERROR_TOO_BIG (deprecated since GLib 2.32)
/// @G_SPAWN_ERROR_NOEXEC: execv() returned `ENOEXEC`
/// @G_SPAWN_ERROR_NAMETOOLONG: execv() returned `ENAMETOOLONG`
/// @G_SPAWN_ERROR_NOENT: execv() returned `ENOENT`
/// @G_SPAWN_ERROR_NOMEM: execv() returned `ENOMEM`
/// @G_SPAWN_ERROR_NOTDIR: execv() returned `ENOTDIR`
/// @G_SPAWN_ERROR_LOOP: execv() returned `ELOOP`
/// @G_SPAWN_ERROR_TXTBUSY: execv() returned `ETXTBUSY`
/// @G_SPAWN_ERROR_IO: execv() returned `EIO`
/// @G_SPAWN_ERROR_NFILE: execv() returned `ENFILE`
/// @G_SPAWN_ERROR_MFILE: execv() returned `EMFILE`
/// @G_SPAWN_ERROR_INVAL: execv() returned `EINVAL`
/// @G_SPAWN_ERROR_ISDIR: execv() returned `EISDIR`
/// @G_SPAWN_ERROR_LIBBAD: execv() returned `ELIBBAD`
/// @G_SPAWN_ERROR_FAILED: Some other fatal failure,
/// `error->message` should explain.
///
/// Error codes returned by spawning processes.
abstract class GSpawnError {
  static const int G_SPAWN_ERROR_FORK = 0;
  static const int G_SPAWN_ERROR_READ = 1;
  static const int G_SPAWN_ERROR_CHDIR = 2;
  static const int G_SPAWN_ERROR_ACCES = 3;
  static const int G_SPAWN_ERROR_PERM = 4;
  static const int G_SPAWN_ERROR_TOO_BIG = 5;
  static const int G_SPAWN_ERROR_2BIG = 5;
  static const int G_SPAWN_ERROR_NOEXEC = 6;
  static const int G_SPAWN_ERROR_NAMETOOLONG = 7;
  static const int G_SPAWN_ERROR_NOENT = 8;
  static const int G_SPAWN_ERROR_NOMEM = 9;
  static const int G_SPAWN_ERROR_NOTDIR = 10;
  static const int G_SPAWN_ERROR_LOOP = 11;
  static const int G_SPAWN_ERROR_TXTBUSY = 12;
  static const int G_SPAWN_ERROR_IO = 13;
  static const int G_SPAWN_ERROR_NFILE = 14;
  static const int G_SPAWN_ERROR_MFILE = 15;
  static const int G_SPAWN_ERROR_INVAL = 16;
  static const int G_SPAWN_ERROR_ISDIR = 17;
  static const int G_SPAWN_ERROR_LIBBAD = 18;
  static const int G_SPAWN_ERROR_FAILED = 19;
}

/// GSpawnFlags:
/// @G_SPAWN_DEFAULT: no flags, default behaviour
/// @G_SPAWN_LEAVE_DESCRIPTORS_OPEN: the parent's open file descriptors will
/// be inherited by the child; otherwise all descriptors except stdin,
/// stdout and stderr will be closed before calling exec() in the child.
/// @G_SPAWN_DO_NOT_REAP_CHILD: the child will not be automatically reaped;
/// you must use g_child_watch_add() yourself (or call waitpid() or handle
/// `SIGCHLD` yourself), or the child will become a zombie.
/// @G_SPAWN_SEARCH_PATH: `argv[0]` need not be an absolute path, it will be
/// looked for in the user's `PATH`.
/// @G_SPAWN_STDOUT_TO_DEV_NULL: the child's standard output will be discarded,
/// instead of going to the same location as the parent's standard output.
/// @G_SPAWN_STDERR_TO_DEV_NULL: the child's standard error will be discarded.
/// @G_SPAWN_CHILD_INHERITS_STDIN: the child will inherit the parent's standard
/// input (by default, the child's standard input is attached to `/dev/null`).
/// @G_SPAWN_FILE_AND_ARGV_ZERO: the first element of `argv` is the file to
/// execute, while the remaining elements are the actual argument vector
/// to pass to the file. Normally g_spawn_async_with_pipes() uses `argv[0]`
/// as the file to execute, and passes all of `argv` to the child.
/// @G_SPAWN_SEARCH_PATH_FROM_ENVP: if `argv[0]` is not an absolute path,
/// it will be looked for in the `PATH` from the passed child environment.
/// Since: 2.34
/// @G_SPAWN_CLOEXEC_PIPES: create all pipes with the `O_CLOEXEC` flag set.
/// Since: 2.40
/// @G_SPAWN_CHILD_INHERITS_STDOUT: the child will inherit the parent's standard output.
/// Since: 2.74
/// @G_SPAWN_CHILD_INHERITS_STDERR: the child will inherit the parent's standard error.
/// Since: 2.74
/// @G_SPAWN_STDIN_FROM_DEV_NULL: the child's standard input is attached to `/dev/null`.
/// Since: 2.74
///
/// Flags passed to g_spawn_sync(), g_spawn_async() and g_spawn_async_with_pipes().
abstract class GSpawnFlags {
  static const int G_SPAWN_DEFAULT = 0;
  static const int G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1;
  static const int G_SPAWN_DO_NOT_REAP_CHILD = 2;
  static const int G_SPAWN_SEARCH_PATH = 4;
  static const int G_SPAWN_STDOUT_TO_DEV_NULL = 8;
  static const int G_SPAWN_STDERR_TO_DEV_NULL = 16;
  static const int G_SPAWN_CHILD_INHERITS_STDIN = 32;
  static const int G_SPAWN_FILE_AND_ARGV_ZERO = 64;
  static const int G_SPAWN_SEARCH_PATH_FROM_ENVP = 128;
  static const int G_SPAWN_CLOEXEC_PIPES = 256;

  /// G_SPAWN_CHILD_INHERITS_STDOUT:
  ///
  /// The child will inherit the parent's standard output.
  ///
  /// Since: 2.74
  static const int G_SPAWN_CHILD_INHERITS_STDOUT = 512;

  /// G_SPAWN_CHILD_INHERITS_STDERR:
  ///
  /// The child will inherit the parent's standard error.
  ///
  /// Since: 2.74
  static const int G_SPAWN_CHILD_INHERITS_STDERR = 1024;

  /// G_SPAWN_STDIN_FROM_DEV_NULL:
  ///
  /// The child's standard input is attached to `/dev/null`.
  ///
  /// Since: 2.74
  static const int G_SPAWN_STDIN_FROM_DEV_NULL = 2048;
}

/// GSpawnChildSetupFunc:
/// @data: user data passed to the function.
///
/// Specifies the type of the setup function passed to g_spawn_async(),
/// g_spawn_sync() and g_spawn_async_with_pipes(), which can, in very
/// limited ways, be used to affect the child's execution.
///
/// On POSIX platforms, the function is called in the child after GLib
/// has performed all the setup it plans to perform, but before calling
/// exec(). Actions taken in this function will only affect the child,
/// not the parent.
///
/// On Windows, the function is called in the parent. Its usefulness on
/// Windows is thus questionable. In many cases executing the child setup
/// function in the parent can have ill effects, and you should be very
/// careful when porting software to Windows that uses child setup
/// functions.
///
/// However, even on POSIX, you are extremely limited in what you can
/// safely do from a #GSpawnChildSetupFunc, because any mutexes that were
/// held by other threads in the parent process at the time of the fork()
/// will still be locked in the child process, and they will never be
/// unlocked (since the threads that held them don't exist in the child).
/// POSIX allows only async-signal-safe functions (see signal(7)) to be
/// called in the child between fork() and exec(), which drastically limits
/// the usefulness of child setup functions.
///
/// In particular, it is not safe to call any function which may
/// call malloc(), which includes POSIX functions such as setenv().
/// If you need to set up the child environment differently from
/// the parent, you should use g_get_environ(), g_environ_setenv(),
/// and g_environ_unsetenv(), and then pass the complete environment
/// list to the `g_spawn...` function.
typedef GSpawnChildSetupFunc
    = ffi.Pointer<ffi.NativeFunction<GSpawnChildSetupFuncFunction>>;
typedef GSpawnChildSetupFuncFunction = ffi.Void Function(ffi.Pointer data);
typedef DartGSpawnChildSetupFuncFunction = void Function(ffi.Pointer data);

final class _GStringChunk extends ffi.Opaque {}

typedef GStringChunk = _GStringChunk;

final class _GStrvBuilder extends ffi.Opaque {}

typedef GStrvBuilder = _GStrvBuilder;
typedef GStrv = ffi.Pointer<ffi.Pointer<ffi.Char>>;

final class GTestCase extends ffi.Opaque {}

final class GTestSuite extends ffi.Opaque {}

typedef GTestFunc = ffi.Pointer<ffi.NativeFunction<GTestFuncFunction>>;
typedef GTestFuncFunction = ffi.Void Function();
typedef DartGTestFuncFunction = void Function();
typedef GTestDataFunc = ffi.Pointer<ffi.NativeFunction<GTestDataFuncFunction>>;
typedef GTestDataFuncFunction = ffi.Void Function(gconstpointer user_data);
typedef DartGTestDataFuncFunction = void Function(gconstpointer user_data);

/// GTestTrapFlags:
/// @G_TEST_TRAP_DEFAULT: Default behaviour. Since: 2.74
/// @G_TEST_TRAP_SILENCE_STDOUT: Redirect stdout of the test child to
/// `/dev/null` so it cannot be observed on the console during test
/// runs. The actual output is still captured though to allow later
/// tests with g_test_trap_assert_stdout().
/// @G_TEST_TRAP_SILENCE_STDERR: Redirect stderr of the test child to
/// `/dev/null` so it cannot be observed on the console during test
/// runs. The actual output is still captured though to allow later
/// tests with g_test_trap_assert_stderr().
/// @G_TEST_TRAP_INHERIT_STDIN: If this flag is given, stdin of the
/// child process is shared with stdin of its parent process.
/// It is redirected to `/dev/null` otherwise.
///
/// Test traps are guards around forked tests.
/// These flags determine what traps to set.
///
/// Deprecated: 2.38: #GTestTrapFlags is used only with g_test_trap_fork(),
/// which is deprecated. g_test_trap_subprocess() uses
/// #GTestSubprocessFlags.
abstract class GTestTrapFlags {
  static const int G_TEST_TRAP_DEFAULT = 0;
  static const int G_TEST_TRAP_SILENCE_STDOUT = 128;
  static const int G_TEST_TRAP_SILENCE_STDERR = 256;
  static const int G_TEST_TRAP_INHERIT_STDIN = 512;
}

abstract class GTestSubprocessFlags {
  static const int G_TEST_SUBPROCESS_DEFAULT = 0;
  static const int G_TEST_SUBPROCESS_INHERIT_STDIN = 1;
  static const int G_TEST_SUBPROCESS_INHERIT_STDOUT = 2;
  static const int G_TEST_SUBPROCESS_INHERIT_STDERR = 4;
}

typedef GTestFixtureFunc
    = ffi.Pointer<ffi.NativeFunction<GTestFixtureFuncFunction>>;
typedef GTestFixtureFuncFunction = ffi.Void Function(
    ffi.Pointer fixture, gconstpointer user_data);
typedef DartGTestFixtureFuncFunction = void Function(
    ffi.Pointer fixture, gconstpointer user_data);

final class GTestConfig extends ffi.Struct {
  @gboolean()
  external int test_initialized;

  @gboolean()
  external int test_quick;

  @gboolean()
  external int test_perf;

  @gboolean()
  external int test_verbose;

  @gboolean()
  external int test_quiet;

  @gboolean()
  external int test_undefined;
}

abstract class GTestResult {
  static const int G_TEST_RUN_SUCCESS = 0;
  static const int G_TEST_RUN_SKIPPED = 1;
  static const int G_TEST_RUN_FAILURE = 2;
  static const int G_TEST_RUN_INCOMPLETE = 3;
}

abstract class GTestLogType {
  static const int G_TEST_LOG_NONE = 0;
  static const int G_TEST_LOG_ERROR = 1;
  static const int G_TEST_LOG_START_BINARY = 2;
  static const int G_TEST_LOG_LIST_CASE = 3;
  static const int G_TEST_LOG_SKIP_CASE = 4;
  static const int G_TEST_LOG_START_CASE = 5;
  static const int G_TEST_LOG_STOP_CASE = 6;
  static const int G_TEST_LOG_MIN_RESULT = 7;
  static const int G_TEST_LOG_MAX_RESULT = 8;
  static const int G_TEST_LOG_MESSAGE = 9;
  static const int G_TEST_LOG_START_SUITE = 10;
  static const int G_TEST_LOG_STOP_SUITE = 11;
}

final class GTestLogMsg extends ffi.Opaque {}

final class GTestLogBuffer extends ffi.Struct {
  external ffi.Pointer<GString> data;

  external ffi.Pointer<GSList> msgs;
}

/// GTestLogFatalFunc:
/// @log_domain: the log domain of the message
/// @log_level: the log level of the message (including the fatal and recursion flags)
/// @message: the message to process
/// @user_data: user data, set in g_test_log_set_fatal_handler()
///
/// Specifies the prototype of fatal log handler functions.
///
/// Returns: %TRUE if the program should abort, %FALSE otherwise
///
/// Since: 2.22
typedef GTestLogFatalFunc
    = ffi.Pointer<ffi.NativeFunction<GTestLogFatalFuncFunction>>;
typedef GTestLogFatalFuncFunction = gboolean Function(
    ffi.Pointer<ffi.Char> log_domain,
    ffi.Int32 log_level,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer user_data);
typedef DartGTestLogFatalFuncFunction = Dartgint Function(
    ffi.Pointer<ffi.Char> log_domain,
    int log_level,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer user_data);

abstract class GTestFileType {
  static const int G_TEST_DIST = 0;
  static const int G_TEST_BUILT = 1;
}

final class _GThreadPool extends ffi.Struct {
  external GFunc func;

  external ffi.Pointer user_data;

  @gboolean()
  external int exclusive;
}

typedef GThreadPool = _GThreadPool;

final class _GTimer extends ffi.Opaque {}

typedef GTimer = _GTimer;

final class _GTrashStack extends ffi.Struct {
  external ffi.Pointer<GTrashStack> next;
}

typedef GTrashStack = _GTrashStack;

final class _GTree extends ffi.Opaque {}

final class _GTreeNode extends ffi.Opaque {}

typedef GTree = _GTree;

/// GTreeNode:
///
/// An opaque type which identifies a specific node in a #GTree.
///
/// Since: 2.68
typedef GTreeNode = _GTreeNode;
typedef GTraverseFunc = ffi.Pointer<ffi.NativeFunction<GTraverseFuncFunction>>;
typedef GTraverseFuncFunction = gboolean Function(
    ffi.Pointer key, ffi.Pointer value, ffi.Pointer data);
typedef DartGTraverseFuncFunction = Dartgint Function(
    ffi.Pointer key, ffi.Pointer value, ffi.Pointer data);

/// GTraverseNodeFunc:
/// @node: a #GTreeNode
/// @data: user data passed to g_tree_foreach_node()
///
/// Specifies the type of function passed to g_tree_foreach_node(). It is
/// passed each node, together with the @user_data parameter passed to
/// g_tree_foreach_node(). If the function returns %TRUE, the traversal is
/// stopped.
///
/// Returns: %TRUE to stop the traversal
/// Since: 2.68
typedef GTraverseNodeFunc
    = ffi.Pointer<ffi.NativeFunction<GTraverseNodeFuncFunction>>;
typedef GTraverseNodeFuncFunction = gboolean Function(
    ffi.Pointer<GTreeNode> node, ffi.Pointer data);
typedef DartGTraverseNodeFuncFunction = Dartgint Function(
    ffi.Pointer<GTreeNode> node, ffi.Pointer data);

final class _GUri extends ffi.Opaque {}

typedef GUri = _GUri;

/// GUriFlags:
/// @G_URI_FLAGS_NONE: No flags set.
/// @G_URI_FLAGS_PARSE_RELAXED: Parse the URI more relaxedly than the
/// [RFC 3986](https://tools.ietf.org/html/rfc3986) grammar specifies,
/// fixing up or ignoring common mistakes in URIs coming from external
/// sources. This is also needed for some obscure URI schemes where `;`
/// separates the host from the path. Don’t use this flag unless you need to.
/// @G_URI_FLAGS_HAS_PASSWORD: The userinfo field may contain a password,
/// which will be separated from the username by `:`.
/// @G_URI_FLAGS_HAS_AUTH_PARAMS: The userinfo may contain additional
/// authentication-related parameters, which will be separated from
/// the username and/or password by `;`.
/// @G_URI_FLAGS_NON_DNS: The host component should not be assumed to be a
/// DNS hostname or IP address (for example, for `smb` URIs with NetBIOS
/// hostnames).
/// @G_URI_FLAGS_ENCODED: When parsing a URI, this indicates that `%`-encoded
/// characters in the userinfo, path, query, and fragment fields
/// should not be decoded. (And likewise the host field if
/// %G_URI_FLAGS_NON_DNS is also set.) When building a URI, it indicates
/// that you have already `%`-encoded the components, and so #GUri
/// should not do any encoding itself.
/// @G_URI_FLAGS_ENCODED_QUERY: Same as %G_URI_FLAGS_ENCODED, for the query
/// field only.
/// @G_URI_FLAGS_ENCODED_PATH: Same as %G_URI_FLAGS_ENCODED, for the path only.
/// @G_URI_FLAGS_ENCODED_FRAGMENT: Same as %G_URI_FLAGS_ENCODED, for the
/// fragment only.
/// @G_URI_FLAGS_SCHEME_NORMALIZE: A scheme-based normalization will be applied.
/// For example, when parsing an HTTP URI changing omitted path to `/` and
/// omitted port to `80`; and when building a URI, changing empty path to `/`
/// and default port `80`). This only supports a subset of known schemes. (Since: 2.68)
///
/// Flags that describe a URI.
///
/// When parsing a URI, if you need to choose different flags based on
/// the type of URI, you can use g_uri_peek_scheme() on the URI string
/// to check the scheme first, and use that to decide what flags to
/// parse it with.
///
/// Since: 2.66
abstract class GUriFlags {
  static const int G_URI_FLAGS_NONE = 0;
  static const int G_URI_FLAGS_PARSE_RELAXED = 1;
  static const int G_URI_FLAGS_HAS_PASSWORD = 2;
  static const int G_URI_FLAGS_HAS_AUTH_PARAMS = 4;
  static const int G_URI_FLAGS_ENCODED = 8;
  static const int G_URI_FLAGS_NON_DNS = 16;
  static const int G_URI_FLAGS_ENCODED_QUERY = 32;
  static const int G_URI_FLAGS_ENCODED_PATH = 64;
  static const int G_URI_FLAGS_ENCODED_FRAGMENT = 128;
  static const int G_URI_FLAGS_SCHEME_NORMALIZE = 256;
}

/// GUriHideFlags:
/// @G_URI_HIDE_NONE: No flags set.
/// @G_URI_HIDE_USERINFO: Hide the userinfo.
/// @G_URI_HIDE_PASSWORD: Hide the password.
/// @G_URI_HIDE_AUTH_PARAMS: Hide the auth_params.
/// @G_URI_HIDE_QUERY: Hide the query.
/// @G_URI_HIDE_FRAGMENT: Hide the fragment.
///
/// Flags describing what parts of the URI to hide in
/// g_uri_to_string_partial(). Note that %G_URI_HIDE_PASSWORD and
/// %G_URI_HIDE_AUTH_PARAMS will only work if the #GUri was parsed with
/// the corresponding flags.
///
/// Since: 2.66
abstract class GUriHideFlags {
  static const int G_URI_HIDE_NONE = 0;
  static const int G_URI_HIDE_USERINFO = 1;
  static const int G_URI_HIDE_PASSWORD = 2;
  static const int G_URI_HIDE_AUTH_PARAMS = 4;
  static const int G_URI_HIDE_QUERY = 8;
  static const int G_URI_HIDE_FRAGMENT = 16;
}

/// GUriParamsFlags:
/// @G_URI_PARAMS_NONE: No flags set.
/// @G_URI_PARAMS_CASE_INSENSITIVE: Parameter names are case insensitive.
/// @G_URI_PARAMS_WWW_FORM: Replace `+` with space character. Only useful for
/// URLs on the web, using the `https` or `http` schemas.
/// @G_URI_PARAMS_PARSE_RELAXED: See %G_URI_FLAGS_PARSE_RELAXED.
///
/// Flags modifying the way parameters are handled by g_uri_parse_params() and
/// #GUriParamsIter.
///
/// Since: 2.66
abstract class GUriParamsFlags {
  static const int G_URI_PARAMS_NONE = 0;
  static const int G_URI_PARAMS_CASE_INSENSITIVE = 1;
  static const int G_URI_PARAMS_WWW_FORM = 2;
  static const int G_URI_PARAMS_PARSE_RELAXED = 4;
}

final class _GUriParamsIter extends ffi.Struct {
  @gint()
  external int dummy0;

  external ffi.Pointer dummy1;

  external ffi.Pointer dummy2;

  @ffi.Array.multi([256])
  external ffi.Array<guint8> dummy3;
}

typedef GUriParamsIter = _GUriParamsIter;

/// GUriError:
/// @G_URI_ERROR_FAILED: Generic error if no more specific error is available.
/// See the error message for details.
/// @G_URI_ERROR_BAD_SCHEME: The scheme of a URI could not be parsed.
/// @G_URI_ERROR_BAD_USER: The user/userinfo of a URI could not be parsed.
/// @G_URI_ERROR_BAD_PASSWORD: The password of a URI could not be parsed.
/// @G_URI_ERROR_BAD_AUTH_PARAMS: The authentication parameters of a URI could not be parsed.
/// @G_URI_ERROR_BAD_HOST: The host of a URI could not be parsed.
/// @G_URI_ERROR_BAD_PORT: The port of a URI could not be parsed.
/// @G_URI_ERROR_BAD_PATH: The path of a URI could not be parsed.
/// @G_URI_ERROR_BAD_QUERY: The query of a URI could not be parsed.
/// @G_URI_ERROR_BAD_FRAGMENT: The fragment of a URI could not be parsed.
///
/// Error codes returned by #GUri methods.
///
/// Since: 2.66
abstract class GUriError {
  static const int G_URI_ERROR_FAILED = 0;
  static const int G_URI_ERROR_BAD_SCHEME = 1;
  static const int G_URI_ERROR_BAD_USER = 2;
  static const int G_URI_ERROR_BAD_PASSWORD = 3;
  static const int G_URI_ERROR_BAD_AUTH_PARAMS = 4;
  static const int G_URI_ERROR_BAD_HOST = 5;
  static const int G_URI_ERROR_BAD_PORT = 6;
  static const int G_URI_ERROR_BAD_PATH = 7;
  static const int G_URI_ERROR_BAD_QUERY = 8;
  static const int G_URI_ERROR_BAD_FRAGMENT = 9;
}

final class _GAllocator extends ffi.Opaque {}

final class _GMemChunk extends ffi.Opaque {}

typedef GMemChunk = _GMemChunk;
typedef GAllocator = _GAllocator;

final class _GCache extends ffi.Opaque {}

typedef GCache = _GCache;
typedef GCacheNewFunc = ffi.Pointer<ffi.NativeFunction<GCacheNewFuncFunction>>;
typedef GCacheNewFuncFunction = ffi.Pointer Function(ffi.Pointer key);
typedef GCacheDestroyFunc
    = ffi.Pointer<ffi.NativeFunction<GCacheDestroyFuncFunction>>;
typedef GCacheDestroyFuncFunction = ffi.Void Function(ffi.Pointer value);
typedef DartGCacheDestroyFuncFunction = void Function(ffi.Pointer value);
typedef GCacheDupFunc = ffi.Pointer<ffi.NativeFunction<GCacheDupFuncFunction>>;
typedef GCacheDupFuncFunction = ffi.Pointer Function(ffi.Pointer value);

final class _GCompletion extends ffi.Struct {
  external ffi.Pointer<GList> items;

  external GCompletionFunc func;

  external ffi.Pointer<ffi.Char> prefix;

  external ffi.Pointer<GList> cache;

  external GCompletionStrncmpFunc strncmp_func;
}

typedef GCompletionFunc
    = ffi.Pointer<ffi.NativeFunction<GCompletionFuncFunction>>;
typedef GCompletionFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer item);
typedef GCompletionStrncmpFunc
    = ffi.Pointer<ffi.NativeFunction<GCompletionStrncmpFuncFunction>>;
typedef GCompletionStrncmpFuncFunction = gint Function(
    ffi.Pointer<ffi.Char> s1, ffi.Pointer<ffi.Char> s2, gsize n);
typedef DartGCompletionStrncmpFuncFunction = Dartgint Function(
    ffi.Pointer<ffi.Char> s1, ffi.Pointer<ffi.Char> s2, Dartgsize n);
typedef GCompletion = _GCompletion;

final class _GRelation extends ffi.Opaque {}

final class _GTuples extends ffi.Struct {
  @guint()
  external int len;
}

typedef GRelation = _GRelation;
typedef GTuples = _GTuples;

final class _GThreadFunctions extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<GMutex> Function()>>
      mutex_new;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex> mutex)>>
      mutex_lock;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GMutex> mutex)>>
      mutex_trylock;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex> mutex)>>
      mutex_unlock;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GMutex> mutex)>>
      mutex_free;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<GCond> Function()>>
      cond_new;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond> cond)>>
      cond_signal;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond> cond)>>
      cond_broadcast;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GCond> cond, ffi.Pointer<GMutex> mutex)>> cond_wait;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GCond> cond, ffi.Pointer<GMutex> mutex,
              ffi.Pointer<GTimeVal> end_time)>> cond_timed_wait;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GCond> cond)>>
      cond_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GPrivate> Function(GDestroyNotify destructor)>>
      private_new;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer Function(ffi.Pointer<GPrivate> private_key)>> private_get;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GPrivate> private_key, ffi.Pointer data)>>
      private_set;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              GThreadFunc func,
              ffi.Pointer data,
              gulong stack_size,
              gboolean joinable,
              gboolean bound,
              ffi.Int32 priority,
              ffi.Pointer thread,
              ffi.Pointer<ffi.Pointer<GError>> error)>> thread_create;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> thread_yield;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer thread)>>
      thread_join;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> thread_exit;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer thread, ffi.Int32 priority)>>
      thread_set_priority;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer thread)>>
      thread_self;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer thread1, ffi.Pointer thread2)>>
      thread_equal;
}

typedef GThreadFunctions = _GThreadFunctions;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

final class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.UnsignedLong;
typedef Dart__cpu_mask = int;

final class __jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __jmpbuf;

  @ffi.Int()
  external int __mask_was_saved;

  external __sigset_t __saved_mask;
}

final class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class __cancel_jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

final class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__cancel_jmp_buf_tag> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

final class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;

final class GStaticMutex extends ffi.Struct {
  external ffi.Pointer<GMutex> mutex;

  external pthread_mutex_t unused;
}

final class _GStaticRecMutex extends ffi.Struct {
  external GStaticMutex mutex;

  @guint()
  external int depth;

  external UnnamedUnion8 unused;
}

final class UnnamedUnion8 extends ffi.Union {
  @pthread_t()
  external int owner;

  @gdouble()
  external double dummy;
}

typedef GStaticRecMutex = _GStaticRecMutex;

final class _GStaticRWLock extends ffi.Struct {
  external GStaticMutex mutex;

  external ffi.Pointer<GCond> read_cond;

  external ffi.Pointer<GCond> write_cond;

  @guint()
  external int read_counter;

  @gboolean()
  external int have_writer;

  @guint()
  external int want_to_read;

  @guint()
  external int want_to_write;
}

typedef GStaticRWLock = _GStaticRWLock;

final class _GStaticPrivate extends ffi.Struct {
  @guint()
  external int index;
}

typedef GStaticPrivate = _GStaticPrivate;

/// GValue:
///
/// An opaque structure used to hold different types of values.
///
/// The data within the structure has protected scope: it is accessible only
/// to functions within a #GTypeValueTable structure, or implementations of
/// the g_value_*() API. That is, code portions which implement new fundamental
/// types.
///
/// #GValue users cannot make any assumptions about how data is stored
/// within the 2 element @data union, and the @g_type member should
/// only be accessed through the G_VALUE_TYPE() macro.
final class _GValue extends ffi.Struct {
  @GType()
  external int g_type;

  @ffi.Array.multi([2])
  external ffi.Array<UnnamedUnion9> data;
}

typedef GType = gsize;

final class UnnamedUnion9 extends ffi.Union {
  @gint()
  external int v_int;

  @guint()
  external int v_uint;

  @glong()
  external int v_long;

  @gulong()
  external int v_ulong;

  @gint64()
  external int v_int64;

  @guint64()
  external int v_uint64;

  @gfloat()
  external double v_float;

  @gdouble()
  external double v_double;

  external ffi.Pointer v_pointer;
}

typedef gfloat = ffi.Float;
typedef Dartgfloat = double;

final class _GTypeCValue extends ffi.Opaque {}

final class _GTypePlugin extends ffi.Opaque {}

/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
final class _GTypeClass extends ffi.Struct {
  @GType()
  external int g_type;
}

/// GTypeInterface:
///
/// An opaque structure used as the base of all interface types.
final class _GTypeInterface extends ffi.Struct {
  @GType()
  external int g_type;

  @GType()
  external int g_instance_type;
}

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
final class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<GTypeClass> g_class;
}

typedef GTypeClass = _GTypeClass;

/// GTypeInfo:
/// @class_size: Size of the class structure (required for interface, classed and instantiatable types)
/// @base_init: Location of the base initialization function (optional)
/// @base_finalize: Location of the base finalization function (optional)
/// @class_init: Location of the class initialization function for
/// classed and instantiatable types. Location of the default vtable
/// inititalization function for interface types. (optional) This function
/// is used both to fill in virtual functions in the class or default vtable,
/// and to do type-specific setup such as registering signals and object
/// properties.
/// @class_finalize: Location of the class finalization function for
/// classed and instantiatable types. Location of the default vtable
/// finalization function for interface types. (optional)
/// @class_data: User-supplied data passed to the class init/finalize functions
/// @instance_size: Size of the instance (object) structure (required for instantiatable types only)
/// @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10 this field is ignored.
/// @instance_init: Location of the instance initialization function (optional, for instantiatable types only)
/// @value_table: A #GTypeValueTable function table for generic handling of GValues
/// of this type (usually only useful for fundamental types)
///
/// This structure is used to provide the type system with the information
/// required to initialize and destruct (finalize) a type's class and
/// its instances.
///
/// The initialized structure is passed to the g_type_register_static() function
/// (or is copied into the provided #GTypeInfo structure in the
/// g_type_plugin_complete_type_info()). The type system will perform a deep
/// copy of this structure, so its memory does not need to be persistent
/// across invocation of g_type_register_static().
final class _GTypeInfo extends ffi.Struct {
  @guint16()
  external int class_size;

  external GBaseInitFunc base_init;

  external GBaseFinalizeFunc base_finalize;

  external GClassInitFunc class_init;

  external GClassFinalizeFunc class_finalize;

  external gconstpointer class_data;

  @guint16()
  external int instance_size;

  @guint16()
  external int n_preallocs;

  external GInstanceInitFunc instance_init;

  external ffi.Pointer<GTypeValueTable> value_table;
}

/// GBaseInitFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to initialize
///
/// A callback function used by the type system to do base initialization
/// of the class structures of derived types.
///
/// This function is called as part of the initialization process of all derived
/// classes and should reallocate or reset all dynamic class members copied over
/// from the parent class.
///
/// For example, class members (such as strings) that are not sufficiently
/// handled by a plain memory copy of the parent class into the derived class
/// have to be altered. See GClassInitFunc() for a discussion of the class
/// initialization process.
typedef GBaseInitFunc = ffi.Pointer<ffi.NativeFunction<GBaseInitFuncFunction>>;
typedef GBaseInitFuncFunction = ffi.Void Function(ffi.Pointer g_class);
typedef DartGBaseInitFuncFunction = void Function(ffi.Pointer g_class);

/// GBaseFinalizeFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to finalize
///
/// A callback function used by the type system to finalize those portions
/// of a derived types class structure that were setup from the corresponding
/// GBaseInitFunc() function.
///
/// Class finalization basically works the inverse way in which class
/// initialization is performed.
///
/// See GClassInitFunc() for a discussion of the class initialization process.
typedef GBaseFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<GBaseFinalizeFuncFunction>>;
typedef GBaseFinalizeFuncFunction = ffi.Void Function(ffi.Pointer g_class);
typedef DartGBaseFinalizeFuncFunction = void Function(ffi.Pointer g_class);

/// GClassInitFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to initialize.
/// @class_data: The @class_data member supplied via the #GTypeInfo structure.
///
/// A callback function used by the type system to initialize the class
/// of a specific type.
///
/// This function should initialize all static class members.
///
/// The initialization process of a class involves:
///
/// - Copying common members from the parent class over to the
/// derived class structure.
/// - Zero initialization of the remaining members not copied
/// over from the parent class.
/// - Invocation of the GBaseInitFunc() initializers of all parent
/// types and the class' type.
/// - Invocation of the class' GClassInitFunc() initializer.
///
/// Since derived classes are partially initialized through a memory copy
/// of the parent class, the general rule is that GBaseInitFunc() and
/// GBaseFinalizeFunc() should take care of necessary reinitialization
/// and release of those class members that were introduced by the type
/// that specified these GBaseInitFunc()/GBaseFinalizeFunc().
/// GClassInitFunc() should only care about initializing static
/// class members, while dynamic class members (such as allocated strings
/// or reference counted resources) are better handled by a GBaseInitFunc()
/// for this type, so proper initialization of the dynamic class members
/// is performed for class initialization of derived types as well.
///
/// An example may help to correspond the intend of the different class
/// initializers:
///
/// |[<!-- language="C" -->
/// typedef struct {
/// GObjectClass parent_class;
/// gint         static_integer;
/// gchar       *dynamic_string;
/// } TypeAClass;
/// static void
/// type_a_base_class_init (TypeAClass *class)
/// {
/// class->dynamic_string = g_strdup ("some string");
/// }
/// static void
/// type_a_base_class_finalize (TypeAClass *class)
/// {
/// g_free (class->dynamic_string);
/// }
/// static void
/// type_a_class_init (TypeAClass *class)
/// {
/// class->static_integer = 42;
/// }
///
/// typedef struct {
/// TypeAClass   parent_class;
/// gfloat       static_float;
/// GString     *dynamic_gstring;
/// } TypeBClass;
/// static void
/// type_b_base_class_init (TypeBClass *class)
/// {
/// class->dynamic_gstring = g_string_new ("some other string");
/// }
/// static void
/// type_b_base_class_finalize (TypeBClass *class)
/// {
/// g_string_free (class->dynamic_gstring);
/// }
/// static void
/// type_b_class_init (TypeBClass *class)
/// {
/// class->static_float = 3.14159265358979323846;
/// }
/// ]|
///
/// Initialization of TypeBClass will first cause initialization of
/// TypeAClass (derived classes reference their parent classes, see
/// g_type_class_ref() on this).
///
/// Initialization of TypeAClass roughly involves zero-initializing its fields,
/// then calling its GBaseInitFunc() type_a_base_class_init() to allocate
/// its dynamic members (dynamic_string), and finally calling its GClassInitFunc()
/// type_a_class_init() to initialize its static members (static_integer).
/// The first step in the initialization process of TypeBClass is then
/// a plain memory copy of the contents of TypeAClass into TypeBClass and
/// zero-initialization of the remaining fields in TypeBClass.
/// The dynamic members of TypeAClass within TypeBClass now need
/// reinitialization which is performed by calling type_a_base_class_init()
/// with an argument of TypeBClass.
///
/// After that, the GBaseInitFunc() of TypeBClass, type_b_base_class_init()
/// is called to allocate the dynamic members of TypeBClass (dynamic_gstring),
/// and finally the GClassInitFunc() of TypeBClass, type_b_class_init(),
/// is called to complete the initialization process with the static members
/// (static_float).
///
/// Corresponding finalization counter parts to the GBaseInitFunc() functions
/// have to be provided to release allocated resources at class finalization
/// time.
typedef GClassInitFunc
    = ffi.Pointer<ffi.NativeFunction<GClassInitFuncFunction>>;
typedef GClassInitFuncFunction = ffi.Void Function(
    ffi.Pointer g_class, ffi.Pointer class_data);
typedef DartGClassInitFuncFunction = void Function(
    ffi.Pointer g_class, ffi.Pointer class_data);

/// GClassFinalizeFunc:
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure to finalize
/// @class_data: The @class_data member supplied via the #GTypeInfo structure
///
/// A callback function used by the type system to finalize a class.
///
/// This function is rarely needed, as dynamically allocated class resources
/// should be handled by GBaseInitFunc() and GBaseFinalizeFunc().
///
/// Also, specification of a GClassFinalizeFunc() in the #GTypeInfo
/// structure of a static type is invalid, because classes of static types
/// will never be finalized (they are artificially kept alive when their
/// reference count drops to zero).
typedef GClassFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<GClassFinalizeFuncFunction>>;
typedef GClassFinalizeFuncFunction = ffi.Void Function(
    ffi.Pointer g_class, ffi.Pointer class_data);
typedef DartGClassFinalizeFuncFunction = void Function(
    ffi.Pointer g_class, ffi.Pointer class_data);

/// GInstanceInitFunc:
/// @instance: The instance to initialize
/// @g_class: (type GObject.TypeClass): The class of the type the instance is
/// created for
///
/// A callback function used by the type system to initialize a new
/// instance of a type.
///
/// This function initializes all instance members and allocates any resources
/// required by it.
///
/// Initialization of a derived instance involves calling all its parent
/// types instance initializers, so the class member of the instance
/// is altered during its initialization to always point to the class that
/// belongs to the type the current initializer was introduced for.
///
/// The extended members of @instance are guaranteed to have been filled with
/// zeros before this function is called.
typedef GInstanceInitFunc
    = ffi.Pointer<ffi.NativeFunction<GInstanceInitFuncFunction>>;
typedef GInstanceInitFuncFunction = ffi.Void Function(
    ffi.Pointer<GTypeInstance> instance, ffi.Pointer g_class);
typedef DartGInstanceInitFuncFunction = void Function(
    ffi.Pointer<GTypeInstance> instance, ffi.Pointer g_class);
typedef GTypeInstance = _GTypeInstance;
typedef GTypeValueTable = _GTypeValueTable;

/// GTypeValueTable:
/// @value_init: Function to initialize a GValue
/// @value_free: Function to free a GValue
/// @value_copy: Function to copy a GValue
/// @value_peek_pointer: Function to peek the contents of a GValue if they fit
/// into a pointer
/// @collect_format: A string format describing how to collect the contents of
/// this value bit-by-bit. Each character in the format represents
/// an argument to be collected, and the characters themselves indicate
/// the type of the argument. Currently supported arguments are:
/// - `'i'`: Integers, passed as `collect_values[].v_int`
/// - `'l'`: Longs, passed as `collect_values[].v_long`
/// - `'d'`: Doubles, passed as `collect_values[].v_double`
/// - `'p'`: Pointers, passed as `collect_values[].v_pointer`
/// It should be noted that for variable argument list construction,
/// ANSI C promotes every type smaller than an integer to an int, and
/// floats to doubles. So for collection of short int or char, `'i'`
/// needs to be used, and for collection of floats `'d'`.
/// @collect_value: Function to initialize a GValue from the values
/// collected from variadic arguments
/// @lcopy_format: Format description of the arguments to collect for @lcopy_value,
/// analogous to @collect_format. Usually, @lcopy_format string consists
/// only of `'p'`s to provide lcopy_value() with pointers to storage locations.
/// @lcopy_value: Function to store the contents of a value into the
/// locations collected from variadic arguments
///
/// The #GTypeValueTable provides the functions required by the #GValue
/// implementation, to serve as a container for values of a type.
final class _GTypeValueTable extends ffi.Struct {
  external GTypeValueInitFunc value_init;

  external GTypeValueFreeFunc value_free;

  external GTypeValueCopyFunc value_copy;

  external GTypeValuePeekPointerFunc value_peek_pointer;

  external ffi.Pointer<ffi.Char> collect_format;

  external GTypeValueCollectFunc collect_value;

  external ffi.Pointer<ffi.Char> lcopy_format;

  external GTypeValueLCopyFunc lcopy_value;
}

/// GTypeValueInitFunc:
/// @value: the value to initialize
///
/// Initializes the value contents by setting the fields of the `value->data`
/// array.
///
/// The data array of the #GValue passed into this function was zero-filled
/// with `memset()`, so no care has to be taken to free any old contents.
/// For example, in the case of a string value that may never be %NULL, the
/// implementation might look like:
///
/// |[<!-- language="C" -->
/// value->data[0].v_pointer = g_strdup ("");
/// ]|
///
/// Since: 2.78
typedef GTypeValueInitFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeValueInitFuncFunction>>;
typedef GTypeValueInitFuncFunction = ffi.Void Function(
    ffi.Pointer<GValue> value);
typedef DartGTypeValueInitFuncFunction = void Function(
    ffi.Pointer<GValue> value);
typedef GValue = _GValue;

/// GTypeValueFreeFunc:
/// @value: the value to free
///
/// Frees any old contents that might be left in the `value->data` array of
/// the given value.
///
/// No resources may remain allocated through the #GValue contents after this
/// function returns. E.g. for our above string type:
///
/// |[<!-- language="C" -->
/// // only free strings without a specific flag for static storage
/// if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS))
/// g_free (value->data[0].v_pointer);
/// ]|
///
/// Since: 2.78
typedef GTypeValueFreeFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeValueFreeFuncFunction>>;
typedef GTypeValueFreeFuncFunction = ffi.Void Function(
    ffi.Pointer<GValue> value);
typedef DartGTypeValueFreeFuncFunction = void Function(
    ffi.Pointer<GValue> value);

/// GTypeValueCopyFunc:
/// @src_value: the value to copy
/// @dest_value: (out): the location of the copy
///
/// Copies the content of a #GValue into another.
///
/// The @dest_value is a #GValue with zero-filled data section and @src_value
/// is a properly initialized #GValue of same type, or derived type.
///
/// The purpose of this function is to copy the contents of @src_value
/// into @dest_value in a way, that even after @src_value has been freed, the
/// contents of @dest_value remain valid. String type example:
///
/// |[<!-- language="C" -->
/// dest_value->data[0].v_pointer = g_strdup (src_value->data[0].v_pointer);
/// ]|
///
/// Since: 2.78
typedef GTypeValueCopyFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeValueCopyFuncFunction>>;
typedef GTypeValueCopyFuncFunction = ffi.Void Function(
    ffi.Pointer<GValue> src_value, ffi.Pointer<GValue> dest_value);
typedef DartGTypeValueCopyFuncFunction = void Function(
    ffi.Pointer<GValue> src_value, ffi.Pointer<GValue> dest_value);

/// GTypeValuePeekPointerFunc:
/// @value: the value to peek
///
/// If the value contents fit into a pointer, such as objects or strings,
/// return this pointer, so the caller can peek at the current contents.
///
/// To extend on our above string example:
///
/// |[<!-- language="C" -->
/// return value->data[0].v_pointer;
/// ]|
///
/// Returns: (transfer none): a pointer to the value contents
///
/// Since: 2.78
typedef GTypeValuePeekPointerFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeValuePeekPointerFuncFunction>>;
typedef GTypeValuePeekPointerFuncFunction = ffi.Pointer Function(
    ffi.Pointer<GValue> value);

/// GTypeValueCollectFunc:
/// @value: the value to initialize
/// @n_collect_values: the number of collected values
/// @collect_values: (array length=n_collect_values): the collected values
/// @collect_flags: optional flags
///
/// This function is responsible for converting the values collected from
/// a variadic argument list into contents suitable for storage in a #GValue.
///
/// This function should setup @value similar to #GTypeValueInitFunc; e.g.
/// for a string value that does not allow `NULL` pointers, it needs to either
/// emit an error, or do an implicit conversion by storing an empty string.
///
/// The @value passed in to this function has a zero-filled data array, so
/// just like for #GTypeValueInitFunc it is guaranteed to not contain any old
/// contents that might need freeing.
///
/// The @n_collect_values argument is the string length of the `collect_format`
/// field of #GTypeValueTable, and `collect_values` is an array of #GTypeCValue
/// with length of @n_collect_values, containing the collected values according
/// to `collect_format`.
///
/// The @collect_flags argument provided as a hint by the caller. It may
/// contain the flag %G_VALUE_NOCOPY_CONTENTS indicating that the collected
/// value contents may be considered ‘static’ for the duration of the @value
/// lifetime. Thus an extra copy of the contents stored in @collect_values is
/// not required for assignment to @value.
///
/// For our above string example, we continue with:
///
/// |[<!-- language="C" -->
/// if (!collect_values[0].v_pointer)
/// value->data[0].v_pointer = g_strdup ("");
/// else if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
/// {
/// value->data[0].v_pointer = collect_values[0].v_pointer;
/// // keep a flag for the value_free() implementation to not free this string
/// value->data[1].v_uint = G_VALUE_NOCOPY_CONTENTS;
/// }
/// else
/// value->data[0].v_pointer = g_strdup (collect_values[0].v_pointer);
/// return NULL;
/// ]|
///
/// It should be noted, that it is generally a bad idea to follow the
/// %G_VALUE_NOCOPY_CONTENTS hint for reference counted types. Due to
/// reentrancy requirements and reference count assertions performed
/// by the signal emission code, reference counts should always be
/// incremented for reference counted contents stored in the `value->data`
/// array. To deviate from our string example for a moment, and taking
/// a look at an exemplary implementation for `GTypeValueTable.collect_value()`
/// of `GObject`:
///
/// |[<!-- language="C" -->
/// GObject *object = G_OBJECT (collect_values[0].v_pointer);
/// g_return_val_if_fail (object != NULL,
/// g_strdup_printf ("Object %p passed as invalid NULL pointer", object));
/// // never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types
/// value->data[0].v_pointer = g_object_ref (object);
/// return NULL;
/// ]|
///
/// The reference count for valid objects is always incremented, regardless
/// of `collect_flags`. For invalid objects, the example returns a newly
/// allocated string without altering `value`.
///
/// Upon success, `collect_value()` needs to return `NULL`. If, however,
/// an error condition occurred, `collect_value()` should return a newly
/// allocated string containing an error diagnostic.
///
/// The calling code makes no assumptions about the `value` contents being
/// valid upon error returns, `value` is simply thrown away without further
/// freeing. As such, it is a good idea to not allocate `GValue` contents
/// prior to returning an error; however, `collect_values()` is not obliged
/// to return a correctly setup @value for error returns, simply because
/// any non-`NULL` return is considered a fatal programming error, and
/// further program behaviour is undefined.
///
/// Returns: (transfer full) (nullable): `NULL` on success, otherwise a
/// newly allocated error string on failure
///
/// Since: 2.78
typedef GTypeValueCollectFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeValueCollectFuncFunction>>;
typedef GTypeValueCollectFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<GValue> value,
    guint n_collect_values,
    ffi.Pointer<GTypeCValue> collect_values,
    guint collect_flags);
typedef DartGTypeValueCollectFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<GValue> value,
    Dartguint n_collect_values,
    ffi.Pointer<GTypeCValue> collect_values,
    Dartguint collect_flags);
typedef GTypeCValue = _GTypeCValue;

/// GTypeValueLCopyFunc:
/// @value: the value to lcopy
/// @n_collect_values: the number of collected values
/// @collect_values: (array length=n_collect_values): the collected
/// locations for storage
/// @collect_flags: optional flags
///
/// This function is responsible for storing the `value`
/// contents into arguments passed through a variadic argument list which
/// got collected into `collect_values` according to `lcopy_format`.
///
/// The `n_collect_values` argument equals the string length of
/// `lcopy_format`, and `collect_flags` may contain %G_VALUE_NOCOPY_CONTENTS.
///
/// In contrast to #GTypeValueCollectFunc, this function is obliged to always
/// properly support %G_VALUE_NOCOPY_CONTENTS.
///
/// Similar to #GTypeValueCollectFunc the function may prematurely abort by
/// returning a newly allocated string describing an error condition. To
/// complete the string example:
///
/// |[<!-- language="C" -->
/// gchar **string_p = collect_values[0].v_pointer;
/// g_return_val_if_fail (string_p != NULL,
/// g_strdup ("string location passed as NULL"));
///
/// if (collect_flags & G_VALUE_NOCOPY_CONTENTS)
/// *string_p = value->data[0].v_pointer;
/// else
/// *string_p = g_strdup (value->data[0].v_pointer);
/// ]|
///
/// And an illustrative version of this function for reference-counted
/// types:
///
/// |[<!-- language="C" -->
/// GObject **object_p = collect_values[0].v_pointer;
/// g_return_val_if_fail (object_p != NULL,
/// g_strdup ("object location passed as NULL"));
///
/// if (value->data[0].v_pointer == NULL)
/// *object_p = NULL;
/// else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) // always honour
/// *object_p = value->data[0].v_pointer;
/// else
/// *object_p = g_object_ref (value->data[0].v_pointer);
///
/// return NULL;
/// ]|
///
/// Returns: (transfer full) (nullable): `NULL` on success, otherwise
/// a newly allocated error string on failure
///
/// Since: 2.78
typedef GTypeValueLCopyFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeValueLCopyFuncFunction>>;
typedef GTypeValueLCopyFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<GValue> value,
    guint n_collect_values,
    ffi.Pointer<GTypeCValue> collect_values,
    guint collect_flags);
typedef DartGTypeValueLCopyFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<GValue> value,
    Dartguint n_collect_values,
    ffi.Pointer<GTypeCValue> collect_values,
    Dartguint collect_flags);

/// GTypeFundamentalInfo:
/// @type_flags: #GTypeFundamentalFlags describing the characteristics of the fundamental type
///
/// A structure that provides information to the type system which is
/// used specifically for managing fundamental types.
final class _GTypeFundamentalInfo extends ffi.Struct {
  @ffi.Int32()
  external int type_flags;
}

/// GTypeFundamentalFlags:
/// @G_TYPE_FLAG_CLASSED: Indicates a classed type
/// @G_TYPE_FLAG_INSTANTIATABLE: Indicates an instantiatable type (implies classed)
/// @G_TYPE_FLAG_DERIVABLE: Indicates a flat derivable type
/// @G_TYPE_FLAG_DEEP_DERIVABLE: Indicates a deep derivable type (implies derivable)
///
/// Bit masks used to check or determine specific characteristics of a
/// fundamental type.
abstract class GTypeFundamentalFlags {
  static const int G_TYPE_FLAG_CLASSED = 1;
  static const int G_TYPE_FLAG_INSTANTIATABLE = 2;
  static const int G_TYPE_FLAG_DERIVABLE = 4;
  static const int G_TYPE_FLAG_DEEP_DERIVABLE = 8;
}

/// GInterfaceInfo:
/// @interface_init: location of the interface initialization function
/// @interface_finalize: location of the interface finalization function
/// @interface_data: user-supplied data passed to the interface init/finalize functions
///
/// A structure that provides information to the type system which is
/// used specifically for managing interface types.
final class _GInterfaceInfo extends ffi.Struct {
  external GInterfaceInitFunc interface_init;

  external GInterfaceFinalizeFunc interface_finalize;

  external ffi.Pointer interface_data;
}

/// GInterfaceInitFunc:
/// @g_iface: (type GObject.TypeInterface): The interface structure to initialize
/// @iface_data: The @interface_data supplied via the #GInterfaceInfo structure
///
/// A callback function used by the type system to initialize a new
/// interface.
///
/// This function should initialize all internal data and* allocate any
/// resources required by the interface.
///
/// The members of @iface_data are guaranteed to have been filled with
/// zeros before this function is called.
typedef GInterfaceInitFunc
    = ffi.Pointer<ffi.NativeFunction<GInterfaceInitFuncFunction>>;
typedef GInterfaceInitFuncFunction = ffi.Void Function(
    ffi.Pointer g_iface, ffi.Pointer iface_data);
typedef DartGInterfaceInitFuncFunction = void Function(
    ffi.Pointer g_iface, ffi.Pointer iface_data);

/// GInterfaceFinalizeFunc:
/// @g_iface: (type GObject.TypeInterface): The interface structure to finalize
/// @iface_data: The @interface_data supplied via the #GInterfaceInfo structure
///
/// A callback function used by the type system to finalize an interface.
///
/// This function should destroy any internal data and release any resources
/// allocated by the corresponding GInterfaceInitFunc() function.
typedef GInterfaceFinalizeFunc
    = ffi.Pointer<ffi.NativeFunction<GInterfaceFinalizeFuncFunction>>;
typedef GInterfaceFinalizeFuncFunction = ffi.Void Function(
    ffi.Pointer g_iface, ffi.Pointer iface_data);
typedef DartGInterfaceFinalizeFuncFunction = void Function(
    ffi.Pointer g_iface, ffi.Pointer iface_data);

/// GTypeQuery:
/// @type: the #GType value of the type
/// @type_name: the name of the type
/// @class_size: the size of the class structure
/// @instance_size: the size of the instance structure
///
/// A structure holding information for a specific type.
///
/// See also: g_type_query()
final class _GTypeQuery extends ffi.Struct {
  @GType()
  external int type;

  external ffi.Pointer<ffi.Char> type_name;

  @guint()
  external int class_size;

  @guint()
  external int instance_size;
}

/// GTypeDebugFlags:
/// @G_TYPE_DEBUG_NONE: Print no messages
/// @G_TYPE_DEBUG_OBJECTS: Print messages about object bookkeeping
/// @G_TYPE_DEBUG_SIGNALS: Print messages about signal emissions
/// @G_TYPE_DEBUG_MASK: Mask covering all debug flags
/// @G_TYPE_DEBUG_INSTANCE_COUNT: Keep a count of instances of each type
///
/// These flags used to be passed to g_type_init_with_debug_flags() which
/// is now deprecated.
///
/// If you need to enable debugging features, use the `GOBJECT_DEBUG`
/// environment variable.
///
/// Deprecated: 2.36: g_type_init() is now done automatically
abstract class GTypeDebugFlags {
  static const int G_TYPE_DEBUG_NONE = 0;
  static const int G_TYPE_DEBUG_OBJECTS = 1;
  static const int G_TYPE_DEBUG_SIGNALS = 2;
  static const int G_TYPE_DEBUG_INSTANCE_COUNT = 4;
  static const int G_TYPE_DEBUG_MASK = 7;
}

typedef GTypeQuery = _GTypeQuery;

/// GTypeFlags:
/// @G_TYPE_FLAG_NONE: No special flags. Since: 2.74
/// @G_TYPE_FLAG_ABSTRACT: Indicates an abstract type. No instances can be
/// created for an abstract type
/// @G_TYPE_FLAG_VALUE_ABSTRACT: Indicates an abstract value type, i.e. a type
/// that introduces a value table, but can't be used for
/// g_value_init()
/// @G_TYPE_FLAG_FINAL: Indicates a final type. A final type is a non-derivable
/// leaf node in a deep derivable type hierarchy tree. Since: 2.70
/// @G_TYPE_FLAG_DEPRECATED: The type is deprecated and may be removed in a
/// future version. A warning will be emitted if it is instantiated while
/// running with `G_ENABLE_DIAGNOSTIC=1`. Since 2.76
///
/// Bit masks used to check or determine characteristics of a type.
abstract class GTypeFlags {
  static const int G_TYPE_FLAG_NONE = 0;
  static const int G_TYPE_FLAG_ABSTRACT = 16;
  static const int G_TYPE_FLAG_VALUE_ABSTRACT = 32;
  static const int G_TYPE_FLAG_FINAL = 64;
  static const int G_TYPE_FLAG_DEPRECATED = 128;
}

typedef GTypeInfo = _GTypeInfo;
typedef GTypePlugin = _GTypePlugin;
typedef GTypeFundamentalInfo = _GTypeFundamentalInfo;
typedef GInterfaceInfo = _GInterfaceInfo;

/// GTypeClassCacheFunc:
/// @cache_data: data that was given to the g_type_add_class_cache_func() call
/// @g_class: (type GObject.TypeClass): The #GTypeClass structure which is
/// unreferenced
///
/// A callback function which is called when the reference count of a class
/// drops to zero.
///
/// It may use g_type_class_ref() to prevent the class from being freed. You
/// should not call g_type_class_unref() from a #GTypeClassCacheFunc function
/// to prevent infinite recursion, use g_type_class_unref_uncached() instead.
///
/// The functions have to check the class id passed in to figure
/// whether they actually want to cache the class of this type, since all
/// classes are routed through the same #GTypeClassCacheFunc chain.
///
/// Returns: %TRUE to stop further #GTypeClassCacheFuncs from being
/// called, %FALSE to continue
typedef GTypeClassCacheFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeClassCacheFuncFunction>>;
typedef GTypeClassCacheFuncFunction = gboolean Function(
    ffi.Pointer cache_data, ffi.Pointer<GTypeClass> g_class);
typedef DartGTypeClassCacheFuncFunction = Dartgint Function(
    ffi.Pointer cache_data, ffi.Pointer<GTypeClass> g_class);

/// GTypeInterfaceCheckFunc:
/// @check_data: data passed to g_type_add_interface_check()
/// @g_iface: (type GObject.TypeInterface): the interface that has been
/// initialized
///
/// A callback called after an interface vtable is initialized.
///
/// See g_type_add_interface_check().
///
/// Since: 2.4
typedef GTypeInterfaceCheckFunc
    = ffi.Pointer<ffi.NativeFunction<GTypeInterfaceCheckFuncFunction>>;
typedef GTypeInterfaceCheckFuncFunction = ffi.Void Function(
    ffi.Pointer check_data, ffi.Pointer g_iface);
typedef DartGTypeInterfaceCheckFuncFunction = void Function(
    ffi.Pointer check_data, ffi.Pointer g_iface);

/// GValueTransform:
/// @src_value: Source value.
/// @dest_value: Target value.
///
/// The type of value transformation functions which can be registered with
/// g_value_register_transform_func().
///
/// @dest_value will be initialized to the correct destination type.
typedef GValueTransform
    = ffi.Pointer<ffi.NativeFunction<GValueTransformFunction>>;
typedef GValueTransformFunction = ffi.Void Function(
    ffi.Pointer<GValue> src_value, ffi.Pointer<GValue> dest_value);
typedef DartGValueTransformFunction = void Function(
    ffi.Pointer<GValue> src_value, ffi.Pointer<GValue> dest_value);

/// GParamFlags:
/// @G_PARAM_READABLE: the parameter is readable
/// @G_PARAM_WRITABLE: the parameter is writable
/// @G_PARAM_READWRITE: alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE
/// @G_PARAM_CONSTRUCT: the parameter will be set upon object construction
/// @G_PARAM_CONSTRUCT_ONLY: the parameter can only be set upon object construction
/// @G_PARAM_LAX_VALIDATION: upon parameter conversion (see g_param_value_convert())
/// strict validation is not required
/// @G_PARAM_STATIC_NAME: the string used as name when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_NICK: the string used as nick when constructing the
/// parameter is guaranteed to remain valid and
/// unmmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_BLURB: the string used as blurb when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_EXPLICIT_NOTIFY: calls to g_object_set_property() for this
/// property will not automatically result in a "notify" signal being
/// emitted: the implementation must call g_object_notify() themselves
/// in case the property actually changes.  Since: 2.42.
/// @G_PARAM_PRIVATE: internal
/// @G_PARAM_DEPRECATED: the parameter is deprecated and will be removed
/// in a future version. A warning will be generated if it is used
/// while running with G_ENABLE_DIAGNOSTIC=1.
/// Since 2.26
///
/// Through the #GParamFlags flag values, certain aspects of parameters
/// can be configured.
///
/// See also: %G_PARAM_STATIC_STRINGS
abstract class GParamFlags {
  static const int G_PARAM_READABLE = 1;
  static const int G_PARAM_WRITABLE = 2;
  static const int G_PARAM_READWRITE = 3;
  static const int G_PARAM_CONSTRUCT = 4;
  static const int G_PARAM_CONSTRUCT_ONLY = 8;
  static const int G_PARAM_LAX_VALIDATION = 16;
  static const int G_PARAM_STATIC_NAME = 32;
  static const int G_PARAM_PRIVATE = 32;
  static const int G_PARAM_STATIC_NICK = 64;
  static const int G_PARAM_STATIC_BLURB = 128;
  static const int G_PARAM_EXPLICIT_NOTIFY = 1073741824;
  static const int G_PARAM_DEPRECATED = -2147483648;
}

final class _GParamSpec extends ffi.Struct {
  external GTypeInstance g_type_instance;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int32()
  external int flags;

  @GType()
  external int value_type;

  @GType()
  external int owner_type;

  external ffi.Pointer<ffi.Char> _nick;

  external ffi.Pointer<ffi.Char> _blurb;

  external ffi.Pointer<GData> qdata;

  @guint()
  external int ref_count;

  @guint()
  external int param_id;
}

/// GParamSpecClass:
/// @g_type_class: the parent class
/// @value_type: the #GValue type for this parameter
/// @finalize: The instance finalization function (optional), should chain
/// up to the finalize method of the parent class.
/// @value_set_default: Resets a @value to the default value for this type
/// (recommended, the default is g_value_reset()), see
/// g_param_value_set_default().
/// @value_validate: Ensures that the contents of @value comply with the
/// specifications set out by this type (optional), see
/// g_param_value_validate().
/// @values_cmp: Compares @value1 with @value2 according to this type
/// (recommended, the default is memcmp()), see g_param_values_cmp().
/// @value_is_valid: Checks if contents of @value comply with the specifications
/// set out by this type, without modifying the value. This vfunc is optional.
/// If it isn't set, GObject will use @value_validate. Since 2.74
///
/// The class structure for the GParamSpec type.
/// Normally, GParamSpec classes are filled by
/// g_param_type_register_static().
final class _GParamSpecClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @GType()
  external int value_type;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec> pspec)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_set_default;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_validate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GParamSpec> pspec,
              ffi.Pointer<GValue> value1,
              ffi.Pointer<GValue> value2)>> values_cmp;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_is_valid;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer> dummy;
}

typedef GParamSpec = _GParamSpec;

/// GParameter:
/// @name: the parameter name
/// @value: the parameter value
///
/// The GParameter struct is an auxiliary structure used
/// to hand parameter name/value pairs to g_object_newv().
///
/// Deprecated: 2.54: This type is not introspectable.
final class _GParameter extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external GValue value;
}

final class _GParamSpecPool extends ffi.Opaque {}

/// GParamSpecTypeInfo:
/// @instance_size: Size of the instance (object) structure.
/// @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
/// @instance_init: Location of the instance initialization function (optional).
/// @value_type: The #GType of values conforming to this #GParamSpec
/// @finalize: The instance finalization function (optional).
/// @value_set_default: Resets a @value to the default value for @pspec
/// (recommended, the default is g_value_reset()), see
/// g_param_value_set_default().
/// @value_validate: Ensures that the contents of @value comply with the
/// specifications set out by @pspec (optional), see
/// g_param_value_validate().
/// @values_cmp: Compares @value1 with @value2 according to @pspec
/// (recommended, the default is memcmp()), see g_param_values_cmp().
///
/// This structure is used to provide the type system with the information
/// required to initialize and destruct (finalize) a parameter's class and
/// instances thereof.
///
/// The initialized structure is passed to the g_param_type_register_static()
/// The type system will perform a deep copy of this structure, so its memory
/// does not need to be persistent across invocation of
/// g_param_type_register_static().
final class _GParamSpecTypeInfo extends ffi.Struct {
  @guint16()
  external int instance_size;

  @guint16()
  external int n_preallocs;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec> pspec)>>
      instance_init;

  @GType()
  external int value_type;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GParamSpec> pspec)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_set_default;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GParamSpec> pspec, ffi.Pointer<GValue> value)>>
      value_validate;

  external ffi.Pointer<
      ffi.NativeFunction<
          gint Function(
              ffi.Pointer<GParamSpec> pspec,
              ffi.Pointer<GValue> value1,
              ffi.Pointer<GValue> value2)>> values_cmp;
}

typedef GParamSpecTypeInfo = _GParamSpecTypeInfo;
typedef GParamSpecPool = _GParamSpecPool;

final class _GClosure extends ffi.Opaque {}

final class _GClosureNotifyData extends ffi.Struct {
  external ffi.Pointer data;

  external GClosureNotify notify;
}

/// GClosureNotify:
/// @data: data specified when registering the notification callback
/// @closure: the #GClosure on which the notification is emitted
///
/// The type used for the various notification callbacks which can be registered
/// on closures.
typedef GClosureNotify
    = ffi.Pointer<ffi.NativeFunction<GClosureNotifyFunction>>;
typedef GClosureNotifyFunction = ffi.Void Function(
    ffi.Pointer data, ffi.Pointer<GClosure> closure);
typedef DartGClosureNotifyFunction = void Function(
    ffi.Pointer data, ffi.Pointer<GClosure> closure);
typedef GClosure = _GClosure;

final class _GCClosure extends ffi.Opaque {}

/// GCallback:
///
/// The type used for callback functions in structure definitions and function
/// signatures.
///
/// This doesn't mean that all callback functions must take no  parameters and
/// return void. The required signature of a callback function is determined by
/// the context in which is used (e.g. the signal to which it is connected).
///
/// Use G_CALLBACK() to cast the callback function to a #GCallback.
typedef GCallback = ffi.Pointer<ffi.NativeFunction<GCallbackFunction>>;
typedef GCallbackFunction = ffi.Void Function();
typedef DartGCallbackFunction = void Function();

/// GClosureMarshal:
/// @closure: the #GClosure to which the marshaller belongs
/// @return_value: (nullable): a #GValue to store the return
/// value. May be %NULL if the callback of @closure doesn't return a
/// value.
/// @n_param_values: the length of the @param_values array
/// @param_values: (array length=n_param_values): an array of
/// #GValues holding the arguments on which to invoke the
/// callback of @closure
/// @invocation_hint: (nullable): the invocation hint given as the
/// last argument to g_closure_invoke()
/// @marshal_data: (nullable): additional data specified when
/// registering the marshaller, see g_closure_set_marshal() and
/// g_closure_set_meta_marshal()
///
/// The type used for marshaller functions.
typedef GClosureMarshal
    = ffi.Pointer<ffi.NativeFunction<GClosureMarshalFunction>>;
typedef GClosureMarshalFunction = ffi.Void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    guint n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data);
typedef DartGClosureMarshalFunction = void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    Dartguint n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer invocation_hint,
    ffi.Pointer marshal_data);

/// GSignalQuery:
/// @signal_id: The signal id of the signal being queried, or 0 if the
/// signal to be queried was unknown.
/// @signal_name: The signal name.
/// @itype: The interface/instance type that this signal can be emitted for.
/// @signal_flags: The signal flags as passed in to g_signal_new().
/// @return_type: The return type for user callbacks.
/// @n_params: The number of parameters that user callbacks take.
/// @param_types: (array length=n_params): The individual parameter types for
/// user callbacks, note that the effective callback signature is:
/// |[<!-- language="C" -->
/// @return_type callback (#gpointer     data1,
/// [param_types param_names,]
/// gpointer     data2);
/// ]|
///
/// A structure holding in-depth information for a specific signal.
///
/// See also: g_signal_query()
final class _GSignalQuery extends ffi.Struct {
  @guint()
  external int signal_id;

  external ffi.Pointer<ffi.Char> signal_name;

  @GType()
  external int itype;

  @ffi.Int32()
  external int signal_flags;

  @GType()
  external int return_type;

  @guint()
  external int n_params;

  external ffi.Pointer<GType> param_types;
}

/// GSignalFlags:
/// @G_SIGNAL_RUN_FIRST: Invoke the object method handler in the first emission stage.
/// @G_SIGNAL_RUN_LAST: Invoke the object method handler in the third emission stage.
/// @G_SIGNAL_RUN_CLEANUP: Invoke the object method handler in the last emission stage.
/// @G_SIGNAL_NO_RECURSE: Signals being emitted for an object while currently being in
/// emission for this very object will not be emitted recursively,
/// but instead cause the first emission to be restarted.
/// @G_SIGNAL_DETAILED: This signal supports "::detail" appendices to the signal name
/// upon handler connections and emissions.
/// @G_SIGNAL_ACTION: Action signals are signals that may freely be emitted on alive
/// objects from user code via g_signal_emit() and friends, without
/// the need of being embedded into extra code that performs pre or
/// post emission adjustments on the object. They can also be thought
/// of as object methods which can be called generically by
/// third-party code.
/// @G_SIGNAL_NO_HOOKS: No emissions hooks are supported for this signal.
/// @G_SIGNAL_MUST_COLLECT: Varargs signal emission will always collect the
/// arguments, even if there are no signal handlers connected.  Since 2.30.
/// @G_SIGNAL_DEPRECATED: The signal is deprecated and will be removed
/// in a future version. A warning will be generated if it is connected while
/// running with G_ENABLE_DIAGNOSTIC=1.  Since 2.32.
/// @G_SIGNAL_ACCUMULATOR_FIRST_RUN: Only used in #GSignalAccumulator accumulator
/// functions for the #GSignalInvocationHint::run_type field to mark the first
/// call to the accumulator function for a signal emission.  Since 2.68.
///
/// The signal flags are used to specify a signal's behaviour.
abstract class GSignalFlags {
  static const int G_SIGNAL_RUN_FIRST = 1;
  static const int G_SIGNAL_RUN_LAST = 2;
  static const int G_SIGNAL_RUN_CLEANUP = 4;
  static const int G_SIGNAL_NO_RECURSE = 8;
  static const int G_SIGNAL_DETAILED = 16;
  static const int G_SIGNAL_ACTION = 32;
  static const int G_SIGNAL_NO_HOOKS = 64;
  static const int G_SIGNAL_MUST_COLLECT = 128;
  static const int G_SIGNAL_DEPRECATED = 256;
  static const int G_SIGNAL_ACCUMULATOR_FIRST_RUN = 131072;
}

/// GSignalInvocationHint:
/// @signal_id: The signal id of the signal invoking the callback
/// @detail: The detail passed on for this emission
/// @run_type: The stage the signal emission is currently in, this
/// field will contain one of %G_SIGNAL_RUN_FIRST,
/// %G_SIGNAL_RUN_LAST or %G_SIGNAL_RUN_CLEANUP and %G_SIGNAL_ACCUMULATOR_FIRST_RUN.
/// %G_SIGNAL_ACCUMULATOR_FIRST_RUN is only set for the first run of the accumulator
/// function for a signal emission.
///
/// The #GSignalInvocationHint structure is used to pass on additional information
/// to callbacks during a signal emission.
final class _GSignalInvocationHint extends ffi.Struct {
  @guint()
  external int signal_id;

  @GQuark()
  external int detail;

  @ffi.Int32()
  external int run_type;
}

/// GConnectFlags:
/// @G_CONNECT_DEFAULT: Default behaviour (no special flags). Since: 2.74
/// @G_CONNECT_AFTER: If set, the handler should be called after the
/// default handler of the signal. Normally, the handler is called before
/// the default handler.
/// @G_CONNECT_SWAPPED: If set, the instance and data should be swapped when
/// calling the handler; see g_signal_connect_swapped() for an example.
///
/// The connection flags are used to specify the behaviour of a signal's
/// connection.
abstract class GConnectFlags {
  static const int G_CONNECT_DEFAULT = 0;
  static const int G_CONNECT_AFTER = 1;
  static const int G_CONNECT_SWAPPED = 2;
}

/// GSignalMatchType:
/// @G_SIGNAL_MATCH_ID: The signal id must be equal.
/// @G_SIGNAL_MATCH_DETAIL: The signal detail must be equal.
/// @G_SIGNAL_MATCH_CLOSURE: The closure must be the same.
/// @G_SIGNAL_MATCH_FUNC: The C closure callback must be the same.
/// @G_SIGNAL_MATCH_DATA: The closure data must be the same.
/// @G_SIGNAL_MATCH_UNBLOCKED: Only unblocked signals may be matched.
///
/// The match types specify what g_signal_handlers_block_matched(),
/// g_signal_handlers_unblock_matched() and g_signal_handlers_disconnect_matched()
/// match signals by.
abstract class GSignalMatchType {
  static const int G_SIGNAL_MATCH_ID = 1;
  static const int G_SIGNAL_MATCH_DETAIL = 2;
  static const int G_SIGNAL_MATCH_CLOSURE = 4;
  static const int G_SIGNAL_MATCH_FUNC = 8;
  static const int G_SIGNAL_MATCH_DATA = 16;
  static const int G_SIGNAL_MATCH_UNBLOCKED = 32;
}

/// GSignalAccumulator:
/// @ihint: Signal invocation hint, see #GSignalInvocationHint.
/// @return_accu: Accumulator to collect callback return values in, this
/// is the return value of the current signal emission.
/// @handler_return: A #GValue holding the return value of the signal handler.
/// @data: Callback data that was specified when creating the signal.
///
/// The signal accumulator is a special callback function that can be used
/// to collect return values of the various callbacks that are called
/// during a signal emission.
///
/// The signal accumulator is specified at signal creation time, if it is
/// left %NULL, no accumulation of callback return values is performed.
/// The return value of signal emissions is then the value returned by the
/// last callback.
///
/// Returns: The accumulator function returns whether the signal emission
/// should be aborted. Returning %TRUE will continue with
/// the signal emission. Returning %FALSE will abort the current emission.
/// Since 2.62, returning %FALSE will skip to the CLEANUP stage. In this case,
/// emission will occur as normal in the CLEANUP stage and the handler's
/// return value will be accumulated.
typedef GSignalAccumulator
    = ffi.Pointer<ffi.NativeFunction<GSignalAccumulatorFunction>>;
typedef GSignalAccumulatorFunction = gboolean Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    ffi.Pointer data);
typedef DartGSignalAccumulatorFunction = Dartgint Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    ffi.Pointer<GValue> return_accu,
    ffi.Pointer<GValue> handler_return,
    ffi.Pointer data);
typedef GSignalInvocationHint = _GSignalInvocationHint;

/// GSignalCMarshaller:
///
/// This is the signature of marshaller functions, required to marshall
/// arrays of parameter values to signal emissions into C language callback
/// invocations.
///
/// It is merely an alias to #GClosureMarshal since the #GClosure mechanism
/// takes over responsibility of actual function invocation for the signal
/// system.
typedef GSignalCMarshaller = GClosureMarshal;

/// GSignalCVaMarshaller:
///
/// This is the signature of va_list marshaller functions, an optional
/// marshaller that can be used in some situations to avoid
/// marshalling the signal argument into GValues.
typedef GSignalCVaMarshaller = GVaClosureMarshal;

/// GVaClosureMarshal:
/// @closure: the #GClosure to which the marshaller belongs
/// @return_value: (nullable): a #GValue to store the return
/// value. May be %NULL if the callback of @closure doesn't return a
/// value.
/// @instance: (type GObject.TypeInstance): the instance on which the closure is
/// invoked.
/// @args: va_list of arguments to be passed to the closure.
/// @marshal_data: (nullable): additional data specified when
/// registering the marshaller, see g_closure_set_marshal() and
/// g_closure_set_meta_marshal()
/// @n_params: the length of the @param_types array
/// @param_types: (array length=n_params): the #GType of each argument from
/// @args.
///
/// This is the signature of va_list marshaller functions, an optional
/// marshaller that can be used in some situations to avoid
/// marshalling the signal argument into GValues.
typedef GVaClosureMarshal
    = ffi.Pointer<ffi.NativeFunction<GVaClosureMarshalFunction>>;
typedef GVaClosureMarshalFunction = ffi.Void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    ffi.Int n_params,
    ffi.Pointer<GType> param_types);
typedef DartGVaClosureMarshalFunction = void Function(
    ffi.Pointer<GClosure> closure,
    ffi.Pointer<GValue> return_value,
    ffi.Pointer instance,
    ffi.Pointer<__va_list_tag> args,
    ffi.Pointer marshal_data,
    int n_params,
    ffi.Pointer<GType> param_types);
typedef GSignalQuery = _GSignalQuery;

/// GSignalEmissionHook:
/// @ihint: Signal invocation hint, see #GSignalInvocationHint.
/// @n_param_values: the number of parameters to the function, including
/// the instance on which the signal was emitted.
/// @param_values: (array length=n_param_values): the instance on which
/// the signal was emitted, followed by the parameters of the emission.
/// @data: user data associated with the hook.
///
/// A simple function pointer to get invoked when the signal is emitted.
///
/// Emission hooks allow you to tie a hook to the signal type, so that it will
/// trap all emissions of that signal, from any object.
///
/// You may not attach these to signals created with the %G_SIGNAL_NO_HOOKS flag.
///
/// Returns: whether it wants to stay connected. If it returns %FALSE, the signal
/// hook is disconnected (and destroyed).
typedef GSignalEmissionHook
    = ffi.Pointer<ffi.NativeFunction<GSignalEmissionHookFunction>>;
typedef GSignalEmissionHookFunction = gboolean Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    guint n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer data);
typedef DartGSignalEmissionHookFunction = Dartgint Function(
    ffi.Pointer<GSignalInvocationHint> ihint,
    Dartguint n_param_values,
    ffi.Pointer<GValue> param_values,
    ffi.Pointer data);

/// GBoxedCopyFunc:
/// @boxed: (not nullable): The boxed structure to be copied.
///
/// This function is provided by the user and should produce a copy
/// of the passed in boxed structure.
///
/// Returns: (not nullable): The newly created copy of the boxed structure.
typedef GBoxedCopyFunc
    = ffi.Pointer<ffi.NativeFunction<GBoxedCopyFuncFunction>>;
typedef GBoxedCopyFuncFunction = ffi.Pointer Function(ffi.Pointer boxed);

/// GBoxedFreeFunc:
/// @boxed: (not nullable): The boxed structure to be freed.
///
/// This function is provided by the user and should free the boxed
/// structure passed.
typedef GBoxedFreeFunc
    = ffi.Pointer<ffi.NativeFunction<GBoxedFreeFuncFunction>>;
typedef GBoxedFreeFuncFunction = ffi.Void Function(ffi.Pointer boxed);
typedef DartGBoxedFreeFuncFunction = void Function(ffi.Pointer boxed);

final class _GObject extends ffi.Struct {
  external GTypeInstance g_type_instance;

  @guint()
  external int ref_count;

  external ffi.Pointer<GData> qdata;
}

/// GObjectClass:
/// @g_type_class: the parent class
/// @constructor: the @constructor function is called by g_object_new () to
/// complete the object initialization after all the construction properties are
/// set. The first thing a @constructor implementation must do is chain up to the
/// @constructor of the parent class. Overriding @constructor should be rarely
/// needed, e.g. to handle construct properties, or to implement singletons.
/// @set_property: the generic setter for all properties of this type. Should be
/// overridden for every type with properties. If implementations of
/// @set_property don't emit property change notification explicitly, this will
/// be done implicitly by the type system. However, if the notify signal is
/// emitted explicitly, the type system will not emit it a second time.
/// @get_property: the generic getter for all properties of this type. Should be
/// overridden for every type with properties.
/// @dispose: the @dispose function is supposed to drop all references to other
/// objects, but keep the instance otherwise intact, so that client method
/// invocations still work. It may be run multiple times (due to reference
/// loops). Before returning, @dispose should chain up to the @dispose method
/// of the parent class.
/// @finalize: instance finalization function, should finish the finalization of
/// the instance begun in @dispose and chain up to the @finalize method of the
/// parent class.
/// @dispatch_properties_changed: emits property change notification for a bunch
/// of properties. Overriding @dispatch_properties_changed should be rarely
/// needed.
/// @notify: the class closure for the notify signal
/// @constructed: the @constructed function is called by g_object_new() as the
/// final step of the object creation process.  At the point of the call, all
/// construction properties have been set on the object.  The purpose of this
/// call is to allow for object initialisation steps that can only be performed
/// after construction properties have been set.  @constructed implementors
/// should chain up to the @constructed call of their parent class to allow it
/// to complete its initialisation.
///
/// The class structure for the GObject type.
///
/// |[<!-- language="C" -->
/// // Example of implementing a singleton using a constructor.
/// static MySingleton *the_singleton = NULL;
///
/// static GObject*
/// my_singleton_constructor (GType                  type,
/// guint                  n_construct_params,
/// GObjectConstructParam *construct_params)
/// {
/// GObject *object;
///
/// if (!the_singleton)
/// {
/// object = G_OBJECT_CLASS (parent_class)->constructor (type,
/// n_construct_params,
/// construct_params);
/// the_singleton = MY_SINGLETON (object);
/// }
/// else
/// object = g_object_ref (G_OBJECT (the_singleton));
///
/// return object;
/// }
/// ]|
final class _GObjectClass extends ffi.Struct {
  external GTypeClass g_type_class;

  external ffi.Pointer<GSList> construct_properties;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(
                  GType type,
                  guint n_construct_properties,
                  ffi.Pointer<GObjectConstructParam> construct_properties)>>
      constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject> object,
              guint property_id,
              ffi.Pointer<GValue> value,
              ffi.Pointer<GParamSpec> pspec)>> set_property;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject> object,
              guint property_id,
              ffi.Pointer<GValue> value,
              ffi.Pointer<GParamSpec> pspec)>> get_property;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      dispose;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObject> object, guint n_pspecs,
                  ffi.Pointer<ffi.Pointer<GParamSpec>> pspecs)>>
      dispatch_properties_changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GObject> object, ffi.Pointer<GParamSpec> pspec)>>
      notify;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      constructed;

  @gsize()
  external int flags;

  @gsize()
  external int n_construct_properties;

  external ffi.Pointer pspecs;

  @gsize()
  external int n_pspecs;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer> pdummy;
}

typedef GObject = _GObject;
typedef GObjectConstructParam = _GObjectConstructParam;

/// GObjectConstructParam:
/// @pspec: the #GParamSpec of the construct parameter
/// @value: the value to set the parameter to
///
/// The GObjectConstructParam struct is an auxiliary structure used to hand
/// #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass.
final class _GObjectConstructParam extends ffi.Struct {
  external ffi.Pointer<GParamSpec> pspec;

  external ffi.Pointer<GValue> value;
}

typedef GObjectClass = _GObjectClass;
typedef GParameter = _GParameter;

/// GWeakNotify:
/// @data: data that was provided when the weak reference was established
/// @where_the_object_was: the object being disposed
///
/// A #GWeakNotify function can be added to an object as a callback that gets
/// triggered when the object is finalized.
///
/// Since the object is already being disposed when the #GWeakNotify is called,
/// there's not much you could do with the object, apart from e.g. using its
/// address as hash-index or the like.
///
/// In particular, this means it’s invalid to call g_object_ref(),
/// g_weak_ref_init(), g_weak_ref_set(), g_object_add_toggle_ref(),
/// g_object_weak_ref(), g_object_add_weak_pointer() or any function which calls
/// them on the object from this callback.
typedef GWeakNotify = ffi.Pointer<ffi.NativeFunction<GWeakNotifyFunction>>;
typedef GWeakNotifyFunction = ffi.Void Function(
    ffi.Pointer data, ffi.Pointer<GObject> where_the_object_was);
typedef DartGWeakNotifyFunction = void Function(
    ffi.Pointer data, ffi.Pointer<GObject> where_the_object_was);

/// GToggleNotify:
/// @data: Callback data passed to g_object_add_toggle_ref()
/// @object: The object on which g_object_add_toggle_ref() was called.
/// @is_last_ref: %TRUE if the toggle reference is now the
/// last reference to the object. %FALSE if the toggle
/// reference was the last reference and there are now other
/// references.
///
/// A callback function used for notification when the state
/// of a toggle reference changes.
///
/// See also: g_object_add_toggle_ref()
typedef GToggleNotify = ffi.Pointer<ffi.NativeFunction<GToggleNotifyFunction>>;
typedef GToggleNotifyFunction = ffi.Void Function(
    ffi.Pointer data, ffi.Pointer<GObject> object, gboolean is_last_ref);
typedef DartGToggleNotifyFunction = void Function(
    ffi.Pointer data, ffi.Pointer<GObject> object, Dartgint is_last_ref);

final class GWeakRef extends ffi.Struct {
  external UnnamedUnion10 priv;
}

final class UnnamedUnion10 extends ffi.Union {
  external ffi.Pointer p;
}

final class _GBinding extends ffi.Opaque {}

/// GBindingFlags:
/// @G_BINDING_DEFAULT: The default binding; if the source property
/// changes, the target property is updated with its value.
/// @G_BINDING_BIDIRECTIONAL: Bidirectional binding; if either the
/// property of the source or the property of the target changes,
/// the other is updated.
/// @G_BINDING_SYNC_CREATE: Synchronize the values of the source and
/// target properties when creating the binding; the direction of
/// the synchronization is always from the source to the target.
/// @G_BINDING_INVERT_BOOLEAN: If the two properties being bound are
/// booleans, setting one to %TRUE will result in the other being
/// set to %FALSE and vice versa. This flag will only work for
/// boolean properties, and cannot be used when passing custom
/// transformation functions to g_object_bind_property_full().
///
/// Flags to be passed to g_object_bind_property() or
/// g_object_bind_property_full().
///
/// This enumeration can be extended at later date.
///
/// Since: 2.26
abstract class GBindingFlags {
  static const int G_BINDING_DEFAULT = 0;
  static const int G_BINDING_BIDIRECTIONAL = 1;
  static const int G_BINDING_SYNC_CREATE = 2;
  static const int G_BINDING_INVERT_BOOLEAN = 4;
}

typedef GBinding = _GBinding;

/// GBindingTransformFunc:
/// @binding: a #GBinding
/// @from_value: the #GValue containing the value to transform
/// @to_value: the #GValue in which to store the transformed value
/// @user_data: data passed to the transform function
///
/// A function to be called to transform @from_value to @to_value.
///
/// If this is the @transform_to function of a binding, then @from_value
/// is the @source_property on the @source object, and @to_value is the
/// @target_property on the @target object. If this is the
/// @transform_from function of a %G_BINDING_BIDIRECTIONAL binding,
/// then those roles are reversed.
///
/// Returns: %TRUE if the transformation was successful, and %FALSE
/// otherwise
///
/// Since: 2.26
typedef GBindingTransformFunc
    = ffi.Pointer<ffi.NativeFunction<GBindingTransformFuncFunction>>;
typedef GBindingTransformFuncFunction = gboolean Function(
    ffi.Pointer<GBinding> binding,
    ffi.Pointer<GValue> from_value,
    ffi.Pointer<GValue> to_value,
    ffi.Pointer user_data);
typedef DartGBindingTransformFuncFunction = Dartgint Function(
    ffi.Pointer<GBinding> binding,
    ffi.Pointer<GValue> from_value,
    ffi.Pointer<GValue> to_value,
    ffi.Pointer user_data);

final class _GBindingGroup extends ffi.Opaque {}

typedef GBindingGroup = _GBindingGroup;

/// GEnumClass:
/// @g_type_class: the parent class
/// @minimum: the smallest possible value.
/// @maximum: the largest possible value.
/// @n_values: the number of possible values.
/// @values: an array of #GEnumValue structs describing the
/// individual values.
///
/// The class of an enumeration type holds information about its
/// possible values.
final class _GEnumClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @gint()
  external int minimum;

  @gint()
  external int maximum;

  @guint()
  external int n_values;

  external ffi.Pointer<GEnumValue> values;
}

typedef GEnumValue = _GEnumValue;

/// GEnumValue:
/// @value: the enum value
/// @value_name: the name of the value
/// @value_nick: the nickname of the value
///
/// A structure which contains a single enum value, its name, and its
/// nickname.
final class _GEnumValue extends ffi.Struct {
  @gint()
  external int value;

  external ffi.Pointer<ffi.Char> value_name;

  external ffi.Pointer<ffi.Char> value_nick;
}

/// GFlagsClass:
/// @g_type_class: the parent class
/// @mask: a mask covering all possible values.
/// @n_values: the number of possible values.
/// @values: an array of #GFlagsValue structs describing the
/// individual values.
///
/// The class of a flags type holds information about its
/// possible values.
final class _GFlagsClass extends ffi.Struct {
  external GTypeClass g_type_class;

  @guint()
  external int mask;

  @guint()
  external int n_values;

  external ffi.Pointer<GFlagsValue> values;
}

typedef GFlagsValue = _GFlagsValue;

/// GFlagsValue:
/// @value: the flags value
/// @value_name: the name of the value
/// @value_nick: the nickname of the value
///
/// A structure which contains a single flags value, its name, and its
/// nickname.
final class _GFlagsValue extends ffi.Struct {
  @guint()
  external int value;

  external ffi.Pointer<ffi.Char> value_name;

  external ffi.Pointer<ffi.Char> value_nick;
}

typedef GEnumClass = _GEnumClass;
typedef GFlagsClass = _GFlagsClass;

/// GParamSpecChar:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for character properties.
final class _GParamSpecChar extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint8()
  external int minimum;

  @gint8()
  external int maximum;

  @gint8()
  external int default_value;
}

typedef gint8 = ffi.SignedChar;
typedef Dartgint8 = int;

/// GParamSpecUChar:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned character properties.
final class _GParamSpecUChar extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint8()
  external int minimum;

  @guint8()
  external int maximum;

  @guint8()
  external int default_value;
}

/// GParamSpecBoolean:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for boolean properties.
final class _GParamSpecBoolean extends ffi.Struct {
  external GParamSpec parent_instance;

  @gboolean()
  external int default_value;
}

/// GParamSpecInt:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for integer properties.
final class _GParamSpecInt extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint()
  external int minimum;

  @gint()
  external int maximum;

  @gint()
  external int default_value;
}

/// GParamSpecUInt:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned integer properties.
final class _GParamSpecUInt extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint()
  external int minimum;

  @guint()
  external int maximum;

  @guint()
  external int default_value;
}

/// GParamSpecLong:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for long integer properties.
final class _GParamSpecLong extends ffi.Struct {
  external GParamSpec parent_instance;

  @glong()
  external int minimum;

  @glong()
  external int maximum;

  @glong()
  external int default_value;
}

/// GParamSpecULong:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned long integer properties.
final class _GParamSpecULong extends ffi.Struct {
  external GParamSpec parent_instance;

  @gulong()
  external int minimum;

  @gulong()
  external int maximum;

  @gulong()
  external int default_value;
}

/// GParamSpecInt64:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for 64bit integer properties.
final class _GParamSpecInt64 extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint64()
  external int minimum;

  @gint64()
  external int maximum;

  @gint64()
  external int default_value;
}

/// GParamSpecUInt64:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unsigned 64bit integer properties.
final class _GParamSpecUInt64 extends ffi.Struct {
  external GParamSpec parent_instance;

  @guint64()
  external int minimum;

  @guint64()
  external int maximum;

  @guint64()
  external int default_value;
}

/// GParamSpecUnichar:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for unichar (unsigned integer) properties.
final class _GParamSpecUnichar extends ffi.Struct {
  external GParamSpec parent_instance;

  @gunichar()
  external int default_value;
}

/// GParamSpecEnum:
/// @parent_instance: private #GParamSpec portion
/// @enum_class: the #GEnumClass for the enum
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for enum
/// properties.
final class _GParamSpecEnum extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GEnumClass> enum_class;

  @gint()
  external int default_value;
}

/// GParamSpecFlags:
/// @parent_instance: private #GParamSpec portion
/// @flags_class: the #GFlagsClass for the flags
/// @default_value: default value for the property specified
///
/// A #GParamSpec derived structure that contains the meta data for flags
/// properties.
final class _GParamSpecFlags extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GFlagsClass> flags_class;

  @guint()
  external int default_value;
}

/// GParamSpecFloat:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
/// @epsilon: values closer than @epsilon will be considered identical
/// by g_param_values_cmp(); the default value is 1e-30.
///
/// A #GParamSpec derived structure that contains the meta data for float properties.
final class _GParamSpecFloat extends ffi.Struct {
  external GParamSpec parent_instance;

  @gfloat()
  external double minimum;

  @gfloat()
  external double maximum;

  @gfloat()
  external double default_value;

  @gfloat()
  external double epsilon;
}

/// GParamSpecDouble:
/// @parent_instance: private #GParamSpec portion
/// @minimum: minimum value for the property specified
/// @maximum: maximum value for the property specified
/// @default_value: default value for the property specified
/// @epsilon: values closer than @epsilon will be considered identical
/// by g_param_values_cmp(); the default value is 1e-90.
///
/// A #GParamSpec derived structure that contains the meta data for double properties.
final class _GParamSpecDouble extends ffi.Struct {
  external GParamSpec parent_instance;

  @gdouble()
  external double minimum;

  @gdouble()
  external double maximum;

  @gdouble()
  external double default_value;

  @gdouble()
  external double epsilon;
}

/// GParamSpecString:
/// @parent_instance: private #GParamSpec portion
/// @default_value: default value for the property specified
/// @cset_first: a string containing the allowed values for the first byte
/// @cset_nth: a string containing the allowed values for the subsequent bytes
/// @substitutor: the replacement byte for bytes which don't match @cset_first or @cset_nth.
/// @null_fold_if_empty: replace empty string by %NULL
/// @ensure_non_null: replace %NULL strings by an empty string
///
/// A #GParamSpec derived structure that contains the meta data for string
/// properties.
final class _GParamSpecString extends ffi.Opaque {}

/// GParamSpecParam:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for %G_TYPE_PARAM
/// properties.
final class _GParamSpecParam extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecBoxed:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for boxed properties.
final class _GParamSpecBoxed extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecPointer:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for pointer properties.
final class _GParamSpecPointer extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecValueArray:
/// @parent_instance: private #GParamSpec portion
/// @element_spec: a #GParamSpec describing the elements contained in arrays of this property, may be %NULL
/// @fixed_n_elements: if greater than 0, arrays of this property will always have this many elements
///
/// A #GParamSpec derived structure that contains the meta data for #GValueArray properties.
final class _GParamSpecValueArray extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> element_spec;

  @guint()
  external int fixed_n_elements;
}

/// GParamSpecObject:
/// @parent_instance: private #GParamSpec portion
///
/// A #GParamSpec derived structure that contains the meta data for object properties.
final class _GParamSpecObject extends ffi.Struct {
  external GParamSpec parent_instance;
}

/// GParamSpecOverride:
///
/// A #GParamSpec derived structure that redirects operations to
/// other types of #GParamSpec.
///
/// All operations other than getting or setting the value are redirected,
/// including accessing the nick and blurb, validating a value, and so
/// forth.
///
/// See g_param_spec_get_redirect_target() for retrieving the overridden
/// property. #GParamSpecOverride is used in implementing
/// g_object_class_override_property(), and will not be directly useful
/// unless you are implementing a new base type similar to GObject.
///
/// Since: 2.4
final class _GParamSpecOverride extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> overridden;
}

/// GParamSpecGType:
/// @parent_instance: private #GParamSpec portion
/// @is_a_type: a #GType whose subtypes can occur as values
///
/// A #GParamSpec derived structure that contains the meta data for #GType properties.
///
/// Since: 2.10
final class _GParamSpecGType extends ffi.Struct {
  external GParamSpec parent_instance;

  @GType()
  external int is_a_type;
}

/// GParamSpecVariant:
/// @parent_instance: private #GParamSpec portion
/// @type: a #GVariantType, or %NULL
/// @default_value: a #GVariant, or %NULL
///
/// A #GParamSpec derived structure that contains the meta data for #GVariant properties.
///
/// When comparing values with g_param_values_cmp(), scalar values with the same
/// type will be compared with g_variant_compare(). Other non-%NULL variants will
/// be checked for equality with g_variant_equal(), and their sort order is
/// otherwise undefined. %NULL is ordered before non-%NULL variants. Two %NULL
/// values compare equal.
///
/// Since: 2.26
final class _GParamSpecVariant extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GVariantType> type;

  external ffi.Pointer<GVariant> default_value;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> padding;
}

final class _GSignalGroup extends ffi.Opaque {}

typedef GSignalGroup = _GSignalGroup;

final class _GTypeModule extends ffi.Struct {
  external GObject parent_instance;

  @guint()
  external int use_count;

  external ffi.Pointer<GSList> type_infos;

  external ffi.Pointer<GSList> interface_infos;

  external ffi.Pointer<ffi.Char> name;
}

/// GTypeModuleClass:
/// @parent_class: the parent class
/// @load: loads the module and registers one or more types using
/// g_type_module_register_type().
/// @unload: unloads the module
///
/// In order to implement dynamic loading of types based on #GTypeModule,
/// the @load and @unload functions in #GTypeModuleClass must be implemented.
final class _GTypeModuleClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi
      .NativeFunction<gboolean Function(ffi.Pointer<GTypeModule> module)>> load;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GTypeModule> module)>>
      unload;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved1;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved2;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> reserved4;
}

typedef GTypeModule = _GTypeModule;

/// GTypePluginClass:
/// @use_plugin: Increases the use count of the plugin.
/// @unuse_plugin: Decreases the use count of the plugin.
/// @complete_type_info: Fills in the #GTypeInfo and
/// #GTypeValueTable structs for the type. The structs are initialized
/// with `memset(s, 0, sizeof (s))` before calling this function.
/// @complete_interface_info: Fills in missing parts of the #GInterfaceInfo
/// for the interface. The structs is initialized with
/// `memset(s, 0, sizeof (s))` before calling this function.
///
/// The #GTypePlugin interface is used by the type system in order to handle
/// the lifecycle of dynamically loaded types.
final class _GTypePluginClass extends ffi.Struct {
  external GTypeInterface base_iface;

  external GTypePluginUse use_plugin;

  external GTypePluginUnuse unuse_plugin;

  external GTypePluginCompleteTypeInfo complete_type_info;

  external GTypePluginCompleteInterfaceInfo complete_interface_info;
}

typedef GTypeInterface = _GTypeInterface;

/// GTypePluginUse:
/// @plugin: the #GTypePlugin whose use count should be increased
///
/// The type of the @use_plugin function of #GTypePluginClass, which gets called
/// to increase the use count of @plugin.
typedef GTypePluginUse
    = ffi.Pointer<ffi.NativeFunction<GTypePluginUseFunction>>;
typedef GTypePluginUseFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin);
typedef DartGTypePluginUseFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin);

/// GTypePluginUnuse:
/// @plugin: the #GTypePlugin whose use count should be decreased
///
/// The type of the @unuse_plugin function of #GTypePluginClass.
typedef GTypePluginUnuse
    = ffi.Pointer<ffi.NativeFunction<GTypePluginUnuseFunction>>;
typedef GTypePluginUnuseFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin);
typedef DartGTypePluginUnuseFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin);

/// GTypePluginCompleteTypeInfo:
/// @plugin: the #GTypePlugin
/// @g_type: the #GType whose info is completed
/// @info: the #GTypeInfo struct to fill in
/// @value_table: the #GTypeValueTable to fill in
///
/// The type of the @complete_type_info function of #GTypePluginClass.
typedef GTypePluginCompleteTypeInfo
    = ffi.Pointer<ffi.NativeFunction<GTypePluginCompleteTypeInfoFunction>>;
typedef GTypePluginCompleteTypeInfoFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin,
    GType g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table);
typedef DartGTypePluginCompleteTypeInfoFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin,
    Dartgsize g_type,
    ffi.Pointer<GTypeInfo> info,
    ffi.Pointer<GTypeValueTable> value_table);

/// GTypePluginCompleteInterfaceInfo:
/// @plugin: the #GTypePlugin
/// @instance_type: the #GType of an instantiatable type to which the interface
/// is added
/// @interface_type: the #GType of the interface whose info is completed
/// @info: the #GInterfaceInfo to fill in
///
/// The type of the @complete_interface_info function of #GTypePluginClass.
typedef GTypePluginCompleteInterfaceInfo
    = ffi.Pointer<ffi.NativeFunction<GTypePluginCompleteInterfaceInfoFunction>>;
typedef GTypePluginCompleteInterfaceInfoFunction = ffi.Void Function(
    ffi.Pointer<GTypePlugin> plugin,
    GType instance_type,
    GType interface_type,
    ffi.Pointer<GInterfaceInfo> info);
typedef DartGTypePluginCompleteInterfaceInfoFunction = void Function(
    ffi.Pointer<GTypePlugin> plugin,
    Dartgsize instance_type,
    Dartgsize interface_type,
    ffi.Pointer<GInterfaceInfo> info);

final class _GValueArray extends ffi.Struct {
  @guint()
  external int n_values;

  external ffi.Pointer<GValue> values;

  @guint()
  external int n_prealloced;
}

typedef GValueArray = _GValueArray;

final class _GstAtomicQueue extends ffi.Opaque {}

/// GstAtomicQueue:
///
/// Opaque atomic data queue.
///
/// Use the accessor functions to get the stored values.
typedef GstAtomicQueue = _GstAtomicQueue;

/// GstElement:
/// @state_lock: Used to serialize execution of gst_element_set_state()
/// @state_cond: Used to signal completion of a state change
/// @state_cookie: Used to detect concurrent execution of
/// gst_element_set_state() and gst_element_get_state()
/// @target_state: the target state of an element as set by the application
/// @current_state: the current state of an element
/// @next_state: the next state of an element, can be #GST_STATE_VOID_PENDING if
/// the element is in the correct state.
/// @pending_state: the final state the element should go to, can be
/// #GST_STATE_VOID_PENDING if the element is in the correct state
/// @last_return: the last return value of an element state change
/// @bus: the bus of the element. This bus is provided to the element by the
/// parent element or the application. A #GstPipeline has a bus of its own.
/// @clock: the clock of the element. This clock is usually provided to the
/// element by the toplevel #GstPipeline.
/// @base_time: the time of the clock right before the element is set to
/// PLAYING. Subtracting @base_time from the current clock time in the PLAYING
/// state will yield the running_time against the clock.
/// @start_time: the running_time of the last PAUSED state
/// @numpads: number of pads of the element, includes both source and sink pads.
/// @pads: (element-type Gst.Pad): list of pads
/// @numsrcpads: number of source pads of the element.
/// @srcpads: (element-type Gst.Pad): list of source pads
/// @numsinkpads: number of sink pads of the element.
/// @sinkpads: (element-type Gst.Pad): list of sink pads
/// @pads_cookie: updated whenever the a pad is added or removed
/// @contexts: (element-type Gst.Context): list of contexts
///
/// GStreamer element abstract base class.
final class _GstElement extends ffi.Struct {
  external GstObject object;

  external GRecMutex state_lock;

  external GCond state_cond;

  @guint32()
  external int state_cookie;

  @ffi.Int32()
  external int target_state;

  @ffi.Int32()
  external int current_state;

  @ffi.Int32()
  external int next_state;

  @ffi.Int32()
  external int pending_state;

  @ffi.Int32()
  external int last_return;

  external ffi.Pointer<GstBus> bus;

  external ffi.Pointer<GstClock> clock;

  @GstClockTimeDiff()
  external int base_time;

  @GstClockTime()
  external int start_time;

  @guint16()
  external int numpads;

  external ffi.Pointer<GList> pads;

  @guint16()
  external int numsrcpads;

  external ffi.Pointer<GList> srcpads;

  @guint16()
  external int numsinkpads;

  external ffi.Pointer<GList> sinkpads;

  @guint32()
  external int pads_cookie;

  external ffi.Pointer<GList> contexts;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstObject = _GstObject;

/// GstObject:
/// @lock: object LOCK
/// @name: The name of the object
/// @parent: this object's parent, weak ref
/// @flags: flags for this object
///
/// GStreamer base object class.
final class _GstObject extends ffi.Struct {
  external GInitiallyUnowned object;

  external GMutex lock;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<GstObject1> parent;

  @guint32()
  external int flags;

  external ffi.Pointer<GList> control_bindings;

  @guint64()
  external int control_rate;

  @guint64()
  external int last_sync;

  external ffi.Pointer _gst_reserved;
}

typedef GInitiallyUnowned = _GObject;
typedef GstObject1 = _GstObject;

/// GstState:
/// @GST_STATE_VOID_PENDING: no pending state.
/// @GST_STATE_NULL        : the NULL state or initial state of an element.
/// @GST_STATE_READY       : the element is ready to go to PAUSED.
/// @GST_STATE_PAUSED      : the element is PAUSED, it is ready to accept and
/// process data. Sink elements however only accept one
/// buffer and then block.
/// @GST_STATE_PLAYING     : the element is PLAYING, the #GstClock is running and
/// the data is flowing.
///
/// The possible states an element can be in. States can be changed using
/// gst_element_set_state() and checked using gst_element_get_state().
abstract class GstState {
  static const int GST_STATE_VOID_PENDING = 0;
  static const int GST_STATE_NULL = 1;
  static const int GST_STATE_READY = 2;
  static const int GST_STATE_PAUSED = 3;
  static const int GST_STATE_PLAYING = 4;
}

/// GstStateChangeReturn:
/// @GST_STATE_CHANGE_FAILURE   : the state change failed
/// @GST_STATE_CHANGE_SUCCESS   : the state change succeeded
/// @GST_STATE_CHANGE_ASYNC     : the state change will happen asynchronously
/// @GST_STATE_CHANGE_NO_PREROLL: the state change succeeded but the element
/// cannot produce data in %GST_STATE_PAUSED.
/// This typically happens with live sources.
///
/// The possible return values from a state change function such as
/// gst_element_set_state(). Only @GST_STATE_CHANGE_FAILURE is a real failure.
abstract class GstStateChangeReturn {
  static const int GST_STATE_CHANGE_FAILURE = 0;
  static const int GST_STATE_CHANGE_SUCCESS = 1;
  static const int GST_STATE_CHANGE_ASYNC = 2;
  static const int GST_STATE_CHANGE_NO_PREROLL = 3;
}

typedef GstBus = _GstBus;

/// GstBus:
/// @object: the parent structure
///
/// The opaque #GstBus data structure.
final class _GstBus extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<GstBusPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstBusPrivate = _GstBusPrivate;

final class _GstBusPrivate extends ffi.Opaque {}

typedef GstClock = _GstClock;

/// GstClock:
/// @object: the parent structure
///
/// #GstClock base structure.
final class _GstClock extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<GstClockPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstClockPrivate = _GstClockPrivate;

final class _GstClockPrivate extends ffi.Opaque {}

/// GstClockTimeDiff:
///
/// A datatype to hold a time difference, measured in nanoseconds.
typedef GstClockTimeDiff = gint64;

/// GstClockTime:
///
/// A datatype to hold a time, measured in nanoseconds.
typedef GstClockTime = guint64;

/// GstElementClass:
/// @parent_class: the parent class structure
/// @metadata: metadata for elements of this class
/// @elementfactory: the #GstElementFactory that creates these elements
/// @padtemplates: a #GList of #GstPadTemplate
/// @numpadtemplates: the number of padtemplates
/// @pad_templ_cookie: changed whenever the padtemplates change
/// @request_new_pad: called when a new pad is requested
/// @release_pad: called when a request pad is to be released
/// @get_state: get the state of the element
/// @set_state: set a new state on the element
/// @change_state: called by @set_state to perform an incremental state change
/// @set_bus: set a #GstBus on the element
/// @provide_clock: gets the #GstClock provided by the element
/// @set_clock: set the #GstClock on the element
/// @send_event: send a #GstEvent to the element
/// @query: perform a #GstQuery on the element
/// @state_changed: called immediately after a new state was set.
/// @post_message: called when a message is posted on the element. Chain up to
/// the parent class' handler to have it posted on the bus.
/// @set_context: set a #GstContext on the element
///
/// GStreamer element class. Override the vmethods to implement the element
/// functionality.
final class _GstElementClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer metadata;

  external ffi.Pointer<GstElementFactory> elementfactory;

  external ffi.Pointer<GList> padtemplates;

  @gint()
  external int numpadtemplates;

  @guint32()
  external int pad_templ_cookie;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstElement> element, ffi.Pointer<GstPad> pad)>>
      pad_added;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstElement> element, ffi.Pointer<GstPad> pad)>>
      pad_removed;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstElement> element)>>
      no_more_pads;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GstPad> Function(
              ffi.Pointer<GstElement> element,
              ffi.Pointer<GstPadTemplate> templ,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<GstCaps> caps)>> request_new_pad;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstElement> element, ffi.Pointer<GstPad> pad)>>
      release_pad;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstElement> element,
              ffi.Pointer<ffi.Int32> state,
              ffi.Pointer<ffi.Int32> pending,
              GstClockTime timeout)>> get_state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstElement> element, ffi.Int32 state)>> set_state;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<GstElement> element, ffi.Int32 transition)>>
      change_state;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement> element, ffi.Int32 oldstate,
              ffi.Int32 newstate, ffi.Int32 pending)>> state_changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstElement> element, ffi.Pointer<GstBus> bus)>>
      set_bus;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GstClock> Function(ffi.Pointer<GstElement> element)>>
      provide_clock;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement> element,
              ffi.Pointer<GstClock> clock)>> set_clock;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement> element,
              ffi.Pointer<GstEvent> event)>> send_event;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement> element,
              ffi.Pointer<GstQuery> query)>> query;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstElement> element,
              ffi.Pointer<GstMessage> message)>> post_message;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstElement> element,
              ffi.Pointer<GstContext> context)>> set_context;

  @ffi.Array.multi([18])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstObjectClass = _GstObjectClass;

/// GstObjectClass:
/// @parent_class: parent
/// @path_string_separator: separator used by gst_object_get_path_string()
/// @deep_notify: default signal handler
///
/// GStreamer base object class.
final class _GstObjectClass extends ffi.Struct {
  external GInitiallyUnownedClass parent_class;

  external ffi.Pointer<ffi.Char> path_string_separator;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstObject> object,
              ffi.Pointer<GstObject> orig,
              ffi.Pointer<GParamSpec> pspec)>> deep_notify;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GInitiallyUnownedClass = _GObjectClass;

/// GstElementFactory:
///
/// The opaque #GstElementFactory data structure.
typedef GstElementFactory = _GstElementFactory;

final class _GstElementFactory extends ffi.Opaque {}

typedef GstElement = _GstElement;
typedef GstPad = _GstPad;

/// GstPad:
/// @element_private: private data owned by the parent element
/// @padtemplate: padtemplate for this pad
/// @direction: the direction of the pad, cannot change after creating
/// the pad.
///
/// The #GstPad structure. Use the functions to update the variables.
final class _GstPad extends ffi.Opaque {}

typedef GstPadTemplate = _GstPadTemplate;

/// GstPadTemplate:
///
/// The padtemplate object.
final class _GstPadTemplate extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<ffi.Char> name_template;

  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int presence;

  external ffi.Pointer<GstCaps> caps;

  external UnnamedUnion11 ABI;
}

/// GstPadDirection:
/// @GST_PAD_UNKNOWN: direction is unknown.
/// @GST_PAD_SRC: the pad is a source pad.
/// @GST_PAD_SINK: the pad is a sink pad.
///
/// The direction of a pad.
abstract class GstPadDirection {
  static const int GST_PAD_UNKNOWN = 0;
  static const int GST_PAD_SRC = 1;
  static const int GST_PAD_SINK = 2;
}

/// GstPadPresence:
/// @GST_PAD_ALWAYS: the pad is always available
/// @GST_PAD_SOMETIMES: the pad will become available depending on the media stream
/// @GST_PAD_REQUEST: the pad is only available on request with
/// gst_element_request_pad().
///
/// Indicates when this pad will become available.
abstract class GstPadPresence {
  static const int GST_PAD_ALWAYS = 0;
  static const int GST_PAD_SOMETIMES = 1;
  static const int GST_PAD_REQUEST = 2;
}

typedef GstCaps = _GstCaps;

/// GstCaps:
/// @mini_object: the parent type
///
/// Object describing media types.
final class _GstCaps extends ffi.Struct {
  external GstMiniObject mini_object;
}

typedef GstMiniObject = _GstMiniObject;

/// GstMiniObject: (ref-func gst_mini_object_ref) (unref-func gst_mini_object_unref) (set-value-func g_value_set_boxed) (get-value-func g_value_get_boxed)
/// @type: the GType of the object
/// @refcount: atomic refcount
/// @lockstate: atomic state of the locks
/// @flags: extra flags.
/// @copy: a copy function
/// @dispose: a dispose function
/// @free: the free function
///
/// Base class for refcounted lightweight objects.
final class _GstMiniObject extends ffi.Struct {
  @GType()
  external int type;

  @gint()
  external int refcount;

  @gint()
  external int lockstate;

  @guint()
  external int flags;

  external GstMiniObjectCopyFunction copy;

  external GstMiniObjectDisposeFunction dispose;

  external GstMiniObjectFreeFunction free;

  @guint()
  external int priv_uint;

  external ffi.Pointer priv_pointer;
}

/// GstMiniObjectCopyFunction:
/// @obj: MiniObject to copy
///
/// Function prototype for methods to create copies of instances.
///
/// Returns: reference to cloned instance.
typedef GstMiniObjectCopyFunction
    = ffi.Pointer<ffi.NativeFunction<GstMiniObjectCopyFunctionFunction>>;
typedef GstMiniObjectCopyFunctionFunction = ffi.Pointer<GstMiniObject1>
    Function(ffi.Pointer<GstMiniObject1> obj);
typedef GstMiniObject1 = _GstMiniObject;

/// GstMiniObjectDisposeFunction:
/// @obj: MiniObject to dispose
///
/// Function prototype for when a miniobject has lost its last refcount.
/// Implementation of the mini object are allowed to revive the
/// passed object by doing a gst_mini_object_ref(). If the object is not
/// revived after the dispose function, the function should return %TRUE
/// and the memory associated with the object is freed.
///
/// Returns: %TRUE if the object should be cleaned up.
typedef GstMiniObjectDisposeFunction
    = ffi.Pointer<ffi.NativeFunction<GstMiniObjectDisposeFunctionFunction>>;
typedef GstMiniObjectDisposeFunctionFunction = gboolean Function(
    ffi.Pointer<GstMiniObject1> obj);
typedef DartGstMiniObjectDisposeFunctionFunction = Dartgint Function(
    ffi.Pointer<GstMiniObject1> obj);

/// GstMiniObjectFreeFunction:
/// @obj: MiniObject to free
///
/// Virtual function prototype for methods to free resources used by
/// mini-objects.
typedef GstMiniObjectFreeFunction
    = ffi.Pointer<ffi.NativeFunction<GstMiniObjectFreeFunctionFunction>>;
typedef GstMiniObjectFreeFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstMiniObject1> obj);
typedef DartGstMiniObjectFreeFunctionFunction = void Function(
    ffi.Pointer<GstMiniObject1> obj);

final class UnnamedUnion11 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;

  external UnnamedStruct15 abi;
}

final class UnnamedStruct15 extends ffi.Struct {
  @GType()
  external int gtype;

  external ffi.Pointer<GstCaps> documentation_caps;
}

/// GstStateChange:
/// @GST_STATE_CHANGE_NULL_TO_READY    : state change from NULL to READY.
/// * The element must check if the resources it needs are available. Device
/// sinks and -sources typically try to probe the device to constrain their
/// caps.
/// * The element opens the device (in case feature need to be probed).
/// @GST_STATE_CHANGE_READY_TO_PAUSED  : state change from READY to PAUSED.
/// * The element pads are activated in order to receive data in PAUSED.
/// Streaming threads are started.
/// * Some elements might need to return %GST_STATE_CHANGE_ASYNC and complete
/// the state change when they have enough information. It is a requirement
/// for sinks to return %GST_STATE_CHANGE_ASYNC and complete the state change
/// when they receive the first buffer or %GST_EVENT_EOS (preroll).
/// Sinks also block the dataflow when in PAUSED.
/// * A pipeline resets the running_time to 0.
/// * Live sources return %GST_STATE_CHANGE_NO_PREROLL and don't generate data.
/// @GST_STATE_CHANGE_PAUSED_TO_PLAYING: state change from PAUSED to PLAYING.
/// * Most elements ignore this state change.
/// * The pipeline selects a #GstClock and distributes this to all the children
/// before setting them to PLAYING. This means that it is only allowed to
/// synchronize on the #GstClock in the PLAYING state.
/// * The pipeline uses the #GstClock and the running_time to calculate the
/// base_time. The base_time is distributed to all children when performing
/// the state change.
/// * Sink elements stop blocking on the preroll buffer or event and start
/// rendering the data.
/// * Sinks can post %GST_MESSAGE_EOS in the PLAYING state. It is not allowed
/// to post %GST_MESSAGE_EOS when not in the PLAYING state.
/// * While streaming in PAUSED or PLAYING elements can create and remove
/// sometimes pads.
/// * Live sources start generating data and return %GST_STATE_CHANGE_SUCCESS.
/// @GST_STATE_CHANGE_PLAYING_TO_PAUSED: state change from PLAYING to PAUSED.
/// * Most elements ignore this state change.
/// * The pipeline calculates the running_time based on the last selected
/// #GstClock and the base_time. It stores this information to continue
/// playback when going back to the PLAYING state.
/// * Sinks unblock any #GstClock wait calls.
/// * When a sink does not have a pending buffer to play, it returns
/// #GST_STATE_CHANGE_ASYNC from this state change and completes the state
/// change when it receives a new buffer or an %GST_EVENT_EOS.
/// * Any queued %GST_MESSAGE_EOS items are removed since they will be reposted
/// when going back to the PLAYING state. The EOS messages are queued in
/// #GstBin containers.
/// * Live sources stop generating data and return %GST_STATE_CHANGE_NO_PREROLL.
/// @GST_STATE_CHANGE_PAUSED_TO_READY  : state change from PAUSED to READY.
/// * Sinks unblock any waits in the preroll.
/// * Elements unblock any waits on devices
/// * Chain or get_range functions return %GST_FLOW_FLUSHING.
/// * The element pads are deactivated so that streaming becomes impossible and
/// all streaming threads are stopped.
/// * The sink forgets all negotiated formats
/// * Elements remove all sometimes pads
/// @GST_STATE_CHANGE_READY_TO_NULL    : state change from READY to NULL.
/// * Elements close devices
/// * Elements reset any internal state.
/// @GST_STATE_CHANGE_NULL_TO_NULL       : state change from NULL to NULL. (Since: 1.14)
/// @GST_STATE_CHANGE_READY_TO_READY     : state change from READY to READY,
/// This might happen when going to PAUSED asynchronously failed, in that case
/// elements should make sure they are in a proper, coherent READY state. (Since: 1.14)
/// @GST_STATE_CHANGE_PAUSED_TO_PAUSED   : state change from PAUSED to PAUSED.
/// This might happen when elements were in PLAYING state and 'lost state',
/// they should make sure to go back to real 'PAUSED' state (prerolling for example). (Since: 1.14)
/// @GST_STATE_CHANGE_PLAYING_TO_PLAYING : state change from PLAYING to PLAYING. (Since: 1.14)
///
/// These are the different state changes an element goes through.
/// %GST_STATE_NULL &rArr; %GST_STATE_PLAYING is called an upwards state change
/// and %GST_STATE_PLAYING &rArr; %GST_STATE_NULL a downwards state change.
abstract class GstStateChange {
  static const int GST_STATE_CHANGE_NULL_TO_READY = 10;
  static const int GST_STATE_CHANGE_READY_TO_PAUSED = 19;
  static const int GST_STATE_CHANGE_PAUSED_TO_PLAYING = 28;
  static const int GST_STATE_CHANGE_PLAYING_TO_PAUSED = 35;
  static const int GST_STATE_CHANGE_PAUSED_TO_READY = 26;
  static const int GST_STATE_CHANGE_READY_TO_NULL = 17;
  static const int GST_STATE_CHANGE_NULL_TO_NULL = 9;
  static const int GST_STATE_CHANGE_READY_TO_READY = 18;
  static const int GST_STATE_CHANGE_PAUSED_TO_PAUSED = 27;
  static const int GST_STATE_CHANGE_PLAYING_TO_PLAYING = 36;
}

typedef GstEvent = _GstEvent;

/// GstEvent:
/// @mini_object: the parent structure
/// @type: the #GstEventType of the event
/// @timestamp: the timestamp of the event
/// @seqnum: the sequence number of the event
///
/// A #GstEvent.
final class _GstEvent extends ffi.Struct {
  external GstMiniObject mini_object;

  @ffi.Int32()
  external int type;

  @guint64()
  external int timestamp;

  @guint32()
  external int seqnum;
}

/// GstEventType:
/// @GST_EVENT_UNKNOWN: unknown event.
/// @GST_EVENT_FLUSH_START: Start a flush operation. This event clears all data
/// from the pipeline and unblock all streaming threads.
/// @GST_EVENT_FLUSH_STOP: Stop a flush operation. This event resets the
/// running-time of the pipeline.
/// @GST_EVENT_SELECT_STREAMS: A request to select one or more streams (Since: 1.10)
/// @GST_EVENT_STREAM_START: Event to mark the start of a new stream. Sent before any
/// other serialized event and only sent at the start of a new stream,
/// not after flushing seeks.
/// @GST_EVENT_CAPS: #GstCaps event. Notify the pad of a new media type.
/// @GST_EVENT_SEGMENT: A new media segment follows in the dataflow. The
/// segment events contains information for clipping buffers and
/// converting buffer timestamps to running-time and
/// stream-time.
/// @GST_EVENT_STREAM_COLLECTION: A new #GstStreamCollection is available (Since: 1.10)
/// @GST_EVENT_TAG: A new set of metadata tags has been found in the stream.
/// @GST_EVENT_BUFFERSIZE: Notification of buffering requirements. Currently not
/// used yet.
/// @GST_EVENT_SINK_MESSAGE: An event that sinks turn into a message. Used to
/// send messages that should be emitted in sync with
/// rendering.
/// @GST_EVENT_STREAM_GROUP_DONE: Indicates that there is no more data for
/// the stream group ID in the message. Sent before EOS
/// in some instances and should be handled mostly the same. (Since: 1.10)
/// @GST_EVENT_EOS: End-Of-Stream. No more data is to be expected to follow
/// without either a STREAM_START event, or a FLUSH_STOP and a SEGMENT
/// event.
/// @GST_EVENT_SEGMENT_DONE: Marks the end of a segment playback.
/// @GST_EVENT_GAP: Marks a gap in the datastream.
/// @GST_EVENT_TOC: An event which indicates that a new table of contents (TOC)
/// was found or updated.
/// @GST_EVENT_PROTECTION: An event which indicates that new or updated
/// encryption information has been found in the stream.
/// @GST_EVENT_QOS: A quality message. Used to indicate to upstream elements
/// that the downstream elements should adjust their processing
/// rate.
/// @GST_EVENT_SEEK: A request for a new playback position and rate.
/// @GST_EVENT_NAVIGATION: Navigation events are usually used for communicating
/// user requests, such as mouse or keyboard movements,
/// to upstream elements.
/// @GST_EVENT_LATENCY: Notification of new latency adjustment. Sinks will use
/// the latency information to adjust their synchronisation.
/// @GST_EVENT_STEP: A request for stepping through the media. Sinks will usually
/// execute the step operation.
/// @GST_EVENT_RECONFIGURE: A request for upstream renegotiating caps and reconfiguring.
/// @GST_EVENT_TOC_SELECT: A request for a new playback position based on TOC
/// entry's UID.
/// @GST_EVENT_INSTANT_RATE_CHANGE: Notify downstream that a playback rate override
/// should be applied as soon as possible. (Since: 1.18)
/// @GST_EVENT_INSTANT_RATE_SYNC_TIME: Sent by the pipeline to notify elements that handle the
/// instant-rate-change event about the running-time when
/// the rate multiplier should be applied (or was applied). (Since: 1.18)
/// @GST_EVENT_CUSTOM_UPSTREAM: Upstream custom event
/// @GST_EVENT_CUSTOM_DOWNSTREAM: Downstream custom event that travels in the
/// data flow.
/// @GST_EVENT_CUSTOM_DOWNSTREAM_OOB: Custom out-of-band downstream event.
/// @GST_EVENT_CUSTOM_DOWNSTREAM_STICKY: Custom sticky downstream event.
/// @GST_EVENT_CUSTOM_BOTH: Custom upstream or downstream event.
/// In-band when travelling downstream.
/// @GST_EVENT_CUSTOM_BOTH_OOB: Custom upstream or downstream out-of-band event.
///
/// #GstEventType lists the standard event types that can be sent in a pipeline.
///
/// The custom event types can be used for private messages between elements
/// that can't be expressed using normal
/// GStreamer buffer passing semantics. Custom events carry an arbitrary
/// #GstStructure.
/// Specific custom events are distinguished by the name of the structure.
abstract class GstEventType {
  static const int GST_EVENT_UNKNOWN = 0;
  static const int GST_EVENT_FLUSH_START = 2563;
  static const int GST_EVENT_FLUSH_STOP = 5127;
  static const int GST_EVENT_STREAM_START = 10254;
  static const int GST_EVENT_CAPS = 12814;
  static const int GST_EVENT_SEGMENT = 17934;
  static const int GST_EVENT_STREAM_COLLECTION = 19230;
  static const int GST_EVENT_TAG = 20510;
  static const int GST_EVENT_BUFFERSIZE = 23054;
  static const int GST_EVENT_SINK_MESSAGE = 25630;
  static const int GST_EVENT_STREAM_GROUP_DONE = 26894;
  static const int GST_EVENT_EOS = 28174;
  static const int GST_EVENT_TOC = 30750;
  static const int GST_EVENT_PROTECTION = 33310;
  static const int GST_EVENT_SEGMENT_DONE = 38406;
  static const int GST_EVENT_GAP = 40966;
  static const int GST_EVENT_INSTANT_RATE_CHANGE = 46090;
  static const int GST_EVENT_QOS = 48641;
  static const int GST_EVENT_SEEK = 51201;
  static const int GST_EVENT_NAVIGATION = 53761;
  static const int GST_EVENT_LATENCY = 56321;
  static const int GST_EVENT_STEP = 58881;
  static const int GST_EVENT_RECONFIGURE = 61441;
  static const int GST_EVENT_TOC_SELECT = 64001;
  static const int GST_EVENT_SELECT_STREAMS = 66561;
  static const int GST_EVENT_INSTANT_RATE_SYNC_TIME = 66817;
  static const int GST_EVENT_CUSTOM_UPSTREAM = 69121;
  static const int GST_EVENT_CUSTOM_DOWNSTREAM = 71686;
  static const int GST_EVENT_CUSTOM_DOWNSTREAM_OOB = 74242;
  static const int GST_EVENT_CUSTOM_DOWNSTREAM_STICKY = 76830;
  static const int GST_EVENT_CUSTOM_BOTH = 79367;
  static const int GST_EVENT_CUSTOM_BOTH_OOB = 81923;
}

typedef GstQuery = _GstQuery;

/// GstQuery:
/// @mini_object: The parent #GstMiniObject type
/// @type: the #GstQueryType
///
/// The #GstQuery structure.
final class _GstQuery extends ffi.Struct {
  external GstMiniObject mini_object;

  @ffi.Int32()
  external int type;
}

/// GstQueryType:
/// @GST_QUERY_UNKNOWN: unknown query type
/// @GST_QUERY_POSITION: current position in stream
/// @GST_QUERY_DURATION: total duration of the stream
/// @GST_QUERY_LATENCY: latency of stream
/// @GST_QUERY_JITTER: current jitter of stream
/// @GST_QUERY_RATE: current rate of the stream
/// @GST_QUERY_SEEKING: seeking capabilities
/// @GST_QUERY_SEGMENT: segment start/stop positions
/// @GST_QUERY_CONVERT: convert values between formats
/// @GST_QUERY_FORMATS: query supported formats for convert
/// @GST_QUERY_BUFFERING: query available media for efficient seeking.
/// @GST_QUERY_CUSTOM: a custom application or element defined query.
/// @GST_QUERY_URI: query the URI of the source or sink.
/// @GST_QUERY_ALLOCATION: the buffer allocation properties
/// @GST_QUERY_SCHEDULING: the scheduling properties
/// @GST_QUERY_ACCEPT_CAPS: the accept caps query
/// @GST_QUERY_CAPS: the caps query
/// @GST_QUERY_DRAIN: wait till all serialized data is consumed downstream
/// @GST_QUERY_CONTEXT: query the pipeline-local context from
/// downstream or upstream (since 1.2)
/// @GST_QUERY_BITRATE: the bitrate query (since 1.16)
/// @GST_QUERY_SELECTABLE: Query stream selection capability (Since: 1.22)
///
/// Standard predefined Query types
abstract class GstQueryType {
  static const int GST_QUERY_UNKNOWN = 0;
  static const int GST_QUERY_POSITION = 2563;
  static const int GST_QUERY_DURATION = 5123;
  static const int GST_QUERY_LATENCY = 7683;
  static const int GST_QUERY_JITTER = 10243;
  static const int GST_QUERY_RATE = 12803;
  static const int GST_QUERY_SEEKING = 15363;
  static const int GST_QUERY_SEGMENT = 17923;
  static const int GST_QUERY_CONVERT = 20483;
  static const int GST_QUERY_FORMATS = 23043;
  static const int GST_QUERY_BUFFERING = 28163;
  static const int GST_QUERY_CUSTOM = 30723;
  static const int GST_QUERY_URI = 33283;
  static const int GST_QUERY_ALLOCATION = 35846;
  static const int GST_QUERY_SCHEDULING = 38401;
  static const int GST_QUERY_ACCEPT_CAPS = 40963;
  static const int GST_QUERY_CAPS = 43523;
  static const int GST_QUERY_DRAIN = 46086;
  static const int GST_QUERY_CONTEXT = 48643;
  static const int GST_QUERY_BITRATE = 51202;

  /// GST_QUERY_SELECTABLE:
  ///
  /// Query stream selection capability.
  ///
  /// Since: 1.22
  static const int GST_QUERY_SELECTABLE = 53763;
}

typedef GstMessage = _GstMessage;

/// GstMessage:
/// @mini_object: the parent structure
/// @type: the #GstMessageType of the message
/// @timestamp: the timestamp of the message
/// @src: the src of the message
/// @seqnum: the sequence number of the message
///
/// A #GstMessage.
final class _GstMessage extends ffi.Struct {
  external GstMiniObject mini_object;

  @ffi.Int32()
  external int type;

  @guint64()
  external int timestamp;

  external ffi.Pointer<GstObject> src;

  @guint32()
  external int seqnum;

  external GMutex lock;

  external GCond cond;
}

/// GstMessageType:
/// @GST_MESSAGE_UNKNOWN: an undefined message
/// @GST_MESSAGE_EOS: end-of-stream reached in a pipeline. The application will
/// only receive this message in the PLAYING state and every time it sets a
/// pipeline to PLAYING that is in the EOS state. The application can perform a
/// flushing seek in the pipeline, which will undo the EOS state again.
/// @GST_MESSAGE_ERROR: an error occurred. When the application receives an error
/// message it should stop playback of the pipeline and not assume that more
/// data will be played. It is possible to specify a redirection url to the error
/// messages by setting a `redirect-location` field into the error message, application
/// or high level bins might use the information as required.
/// @GST_MESSAGE_WARNING: a warning occurred.
/// @GST_MESSAGE_INFO: an info message occurred
/// @GST_MESSAGE_TAG: a tag was found.
/// @GST_MESSAGE_BUFFERING: the pipeline is buffering. When the application
/// receives a buffering message in the PLAYING state for a non-live pipeline it
/// must PAUSE the pipeline until the buffering completes, when the percentage
/// field in the message is 100%. For live pipelines, no action must be
/// performed and the buffering percentage can be used to inform the user about
/// the progress.
/// @GST_MESSAGE_STATE_CHANGED: a state change happened
/// @GST_MESSAGE_STATE_DIRTY: an element changed state in a streaming thread.
/// This message is deprecated.
/// @GST_MESSAGE_STEP_DONE: a stepping operation finished.
/// @GST_MESSAGE_CLOCK_PROVIDE: an element notifies its capability of providing
/// a clock. This message is used internally and
/// never forwarded to the application.
/// @GST_MESSAGE_CLOCK_LOST: The current clock as selected by the pipeline became
/// unusable. The pipeline will select a new clock on
/// the next PLAYING state change. The application
/// should set the pipeline to PAUSED and back to
/// PLAYING when this message is received.
/// @GST_MESSAGE_NEW_CLOCK: a new clock was selected in the pipeline.
/// @GST_MESSAGE_STRUCTURE_CHANGE: the structure of the pipeline changed. This
/// message is used internally and never forwarded to the application.
/// @GST_MESSAGE_STREAM_STATUS: status about a stream, emitted when it starts,
/// stops, errors, etc..
/// @GST_MESSAGE_APPLICATION: message posted by the application, possibly
/// via an application-specific element.
/// @GST_MESSAGE_ELEMENT: element-specific message, see the specific element's
/// documentation
/// @GST_MESSAGE_SEGMENT_START: pipeline started playback of a segment. This
/// message is used internally and never forwarded to the application.
/// @GST_MESSAGE_SEGMENT_DONE: pipeline completed playback of a segment. This
/// message is forwarded to the application after all elements that posted
/// @GST_MESSAGE_SEGMENT_START posted a GST_MESSAGE_SEGMENT_DONE message.
/// @GST_MESSAGE_DURATION_CHANGED: The duration of a pipeline changed. The
/// application can get the new duration with a duration query.
/// @GST_MESSAGE_ASYNC_START: Posted by elements when they start an ASYNC
/// #GstStateChange. This message is not forwarded to the application but is used
/// internally.
/// @GST_MESSAGE_ASYNC_DONE: Posted by elements when they complete an ASYNC
/// #GstStateChange. The application will only receive this message from the toplevel
/// pipeline.
/// @GST_MESSAGE_LATENCY: Posted by elements when their latency changes. The
/// application should recalculate and distribute a new latency.
/// @GST_MESSAGE_REQUEST_STATE: Posted by elements when they want the pipeline to
/// change state. This message is a suggestion to the application which can
/// decide to perform the state change on (part of) the pipeline.
/// @GST_MESSAGE_STEP_START: A stepping operation was started.
/// @GST_MESSAGE_QOS: A buffer was dropped or an element changed its processing
/// strategy for Quality of Service reasons.
/// @GST_MESSAGE_PROGRESS: A progress message.
/// @GST_MESSAGE_TOC: A new table of contents (TOC) was found or previously found TOC
/// was updated.
/// @GST_MESSAGE_RESET_TIME: Message to request resetting the pipeline's
/// running time from the pipeline. This is an internal message which
/// applications will likely never receive.
/// @GST_MESSAGE_STREAM_START: Message indicating start of a new stream. Useful
/// e.g. when using playbin in gapless playback mode, to get notified when
/// the next title actually starts playing (which will be some time after
/// the URI for the next title has been set).
/// @GST_MESSAGE_NEED_CONTEXT: Message indicating that an element wants a specific context (Since: 1.2)
/// @GST_MESSAGE_HAVE_CONTEXT: Message indicating that an element created a context (Since: 1.2)
/// @GST_MESSAGE_EXTENDED: Message is an extended message type (see below).
/// These extended message IDs can't be used directly with mask-based API
/// like gst_bus_poll() or gst_bus_timed_pop_filtered(), but you can still
/// filter for GST_MESSAGE_EXTENDED and then check the result for the
/// specific type. (Since: 1.4)
/// @GST_MESSAGE_DEVICE_ADDED: Message indicating a #GstDevice was added to
/// a #GstDeviceProvider (Since: 1.4)
/// @GST_MESSAGE_DEVICE_REMOVED: Message indicating a #GstDevice was removed
/// from a #GstDeviceProvider (Since: 1.4)
/// @GST_MESSAGE_PROPERTY_NOTIFY: Message indicating a #GObject property has
/// changed (Since: 1.10)
/// @GST_MESSAGE_STREAM_COLLECTION: Message indicating a new #GstStreamCollection
/// is available (Since: 1.10)
/// @GST_MESSAGE_STREAMS_SELECTED: Message indicating the active selection of
/// #GstStreams has changed (Since: 1.10)
/// @GST_MESSAGE_REDIRECT: Message indicating to request the application to
/// try to play the given URL(s). Useful if for example a HTTP 302/303
/// response is received with a non-HTTP URL inside. (Since: 1.10)
/// @GST_MESSAGE_DEVICE_CHANGED: Message indicating a #GstDevice was changed
/// a #GstDeviceProvider (Since: 1.16)
/// @GST_MESSAGE_INSTANT_RATE_REQUEST: Message sent by elements to request the
/// running time from the pipeline when an instant rate change should
/// be applied (which may be in the past when the answer arrives). (Since: 1.18)
/// @GST_MESSAGE_ANY: mask for all of the above messages.
///
/// The different message types that are available.
abstract class GstMessageType {
  static const int GST_MESSAGE_UNKNOWN = 0;
  static const int GST_MESSAGE_EOS = 1;
  static const int GST_MESSAGE_ERROR = 2;
  static const int GST_MESSAGE_WARNING = 4;
  static const int GST_MESSAGE_INFO = 8;
  static const int GST_MESSAGE_TAG = 16;
  static const int GST_MESSAGE_BUFFERING = 32;
  static const int GST_MESSAGE_STATE_CHANGED = 64;
  static const int GST_MESSAGE_STATE_DIRTY = 128;
  static const int GST_MESSAGE_STEP_DONE = 256;
  static const int GST_MESSAGE_CLOCK_PROVIDE = 512;
  static const int GST_MESSAGE_CLOCK_LOST = 1024;
  static const int GST_MESSAGE_NEW_CLOCK = 2048;
  static const int GST_MESSAGE_STRUCTURE_CHANGE = 4096;
  static const int GST_MESSAGE_STREAM_STATUS = 8192;
  static const int GST_MESSAGE_APPLICATION = 16384;
  static const int GST_MESSAGE_ELEMENT = 32768;
  static const int GST_MESSAGE_SEGMENT_START = 65536;
  static const int GST_MESSAGE_SEGMENT_DONE = 131072;
  static const int GST_MESSAGE_DURATION_CHANGED = 262144;
  static const int GST_MESSAGE_LATENCY = 524288;
  static const int GST_MESSAGE_ASYNC_START = 1048576;
  static const int GST_MESSAGE_ASYNC_DONE = 2097152;
  static const int GST_MESSAGE_REQUEST_STATE = 4194304;
  static const int GST_MESSAGE_STEP_START = 8388608;
  static const int GST_MESSAGE_QOS = 16777216;
  static const int GST_MESSAGE_PROGRESS = 33554432;
  static const int GST_MESSAGE_TOC = 67108864;
  static const int GST_MESSAGE_RESET_TIME = 134217728;
  static const int GST_MESSAGE_STREAM_START = 268435456;
  static const int GST_MESSAGE_NEED_CONTEXT = 536870912;
  static const int GST_MESSAGE_HAVE_CONTEXT = 1073741824;
  static const int GST_MESSAGE_EXTENDED = -2147483648;
  static const int GST_MESSAGE_DEVICE_ADDED = -2147483647;
  static const int GST_MESSAGE_DEVICE_REMOVED = -2147483646;
  static const int GST_MESSAGE_PROPERTY_NOTIFY = -2147483645;
  static const int GST_MESSAGE_STREAM_COLLECTION = -2147483644;
  static const int GST_MESSAGE_STREAMS_SELECTED = -2147483643;
  static const int GST_MESSAGE_REDIRECT = -2147483642;
  static const int GST_MESSAGE_DEVICE_CHANGED = -2147483641;
  static const int GST_MESSAGE_INSTANT_RATE_REQUEST = -2147483640;
  static const int GST_MESSAGE_ANY = -1;
}

typedef GstContext = _GstContext;

final class _GstContext extends ffi.Opaque {}

/// GstObjectFlags:
/// @GST_OBJECT_FLAG_MAY_BE_LEAKED: the object is expected to stay alive even
/// after gst_deinit() has been called and so should be ignored by leak
/// detection tools. (Since: 1.10)
/// @GST_OBJECT_FLAG_CONSTRUCTED: flag that's set when the object has been
/// constructed. This can be used by API such as base class setters to
/// differentiate between the case where they're called from a subclass's
/// instance init function (and where the object isn't fully constructed yet,
/// and so one shouldn't do anything but set values in the instance structure),
/// and the case where the object is constructed. (Since: 1.24)
/// @GST_OBJECT_FLAG_LAST: subclasses can add additional flags starting from this flag
///
/// The standard flags that an gstobject may have.
abstract class GstObjectFlags {
  static const int GST_OBJECT_FLAG_MAY_BE_LEAKED = 1;
  static const int GST_OBJECT_FLAG_CONSTRUCTED = 2;
  static const int GST_OBJECT_FLAG_LAST = 16;
}

/// GstControlBinding:
/// @parent: the parent structure
/// @name: name of the property of this binding
/// @pspec: #GParamSpec for this property
///
/// The instance structure of #GstControlBinding.
final class _GstControlBinding extends ffi.Struct {
  external GstObject parent;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<GParamSpec> pspec;

  external ffi.Pointer<GstObject> object;

  @gboolean()
  external int disabled;

  external UnnamedUnion13 ABI;
}

final class UnnamedUnion13 extends ffi.Union {
  external UnnamedStruct17 abi;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

final class UnnamedStruct17 extends ffi.Struct {
  external ffi.Pointer<GstControlBindingPrivate> priv;
}

typedef GstControlBindingPrivate = _GstControlBindingPrivate;

final class _GstControlBindingPrivate extends ffi.Opaque {}

/// GstControlBindingClass:
/// @parent_class: Parent class
///
/// The class structure of #GstControlBinding.
final class _GstControlBindingClass extends ffi.Struct {
  external GstObjectClass parent_class;

  /// GstControlBindingClass::sync_values:
  /// @binding: the control binding
  /// @object: the object that has controlled properties
  /// @timestamp: the time that should be processed
  /// @last_sync: the last time this was called
  ///
  /// Update the target values
  ///
  /// Returns: %TRUE if the controller value could be applied to the object
  /// property, %FALSE otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlBinding> binding,
              ffi.Pointer<GstObject> object,
              GstClockTime timestamp,
              GstClockTime last_sync)>> sync_values;

  /// GstControlBindingClass::get_value:
  /// @binding: the control binding
  /// @timestamp: the time the control-change should be read from
  ///
  /// Fetch a single control-value
  ///
  /// Returns: (nullable): the GValue of the property at the given time,
  /// or %NULL if the property isn't controlled.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GValue> Function(ffi.Pointer<GstControlBinding> binding,
              GstClockTime timestamp)>> get_value;

  /// GstControlBindingClass::get_value_array:
  /// @binding: the control binding
  /// @timestamp: the time that should be processed
  /// @interval: the time spacing between subsequent values
  /// @n_values: the number of values
  /// @values: (array length=n_values): array to put control-values in
  ///
  /// Fetch a series of control-values
  ///
  /// Returns: %TRUE if the given array could be filled, %FALSE otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlBinding> binding,
              GstClockTime timestamp,
              GstClockTime interval,
              guint n_values,
              ffi.Pointer values)>> get_value_array;

  /// GstControlBindingClass::get_g_value_array:
  /// @binding: the control binding
  /// @timestamp: the time that should be processed
  /// @interval: the time spacing between subsequent values
  /// @n_values: the number of values
  /// @values: (array length=n_values): array to put control-values in
  ///
  /// Fetch a series of control-values as g_values
  ///
  /// Returns: %TRUE if the given array could be filled, %FALSE otherwise
  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstControlBinding> binding,
              GstClockTime timestamp,
              GstClockTime interval,
              guint n_values,
              ffi.Pointer<GValue> values)>> get_g_value_array;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstControlBinding = _GstControlBinding;

/// GstClockEntry:
/// @refcount: reference counter (read-only)
///
/// All pending timeouts or periodic notifies are converted into
/// an entry.
/// Note that GstClockEntry should be treated as an opaque structure. It must
/// not be extended or allocated using a custom allocator.
final class _GstClockEntry extends ffi.Struct {
  @gint()
  external int refcount;

  external ffi.Pointer<GstClock> clock;

  @ffi.Int32()
  external int type;

  @GstClockTime()
  external int time;

  @GstClockTime()
  external int interval;

  @ffi.Int32()
  external int status;

  external GstClockCallback func;

  external ffi.Pointer user_data;

  external GDestroyNotify destroy_data;

  @gboolean()
  external int unscheduled;

  @gboolean()
  external int woken_up;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstClockEntryType:
/// @GST_CLOCK_ENTRY_SINGLE: a single shot timeout
/// @GST_CLOCK_ENTRY_PERIODIC: a periodic timeout request
///
/// The type of the clock entry
abstract class GstClockEntryType {
  static const int GST_CLOCK_ENTRY_SINGLE = 0;
  static const int GST_CLOCK_ENTRY_PERIODIC = 1;
}

/// GstClockReturn:
/// @GST_CLOCK_OK: The operation succeeded.
/// @GST_CLOCK_EARLY: The operation was scheduled too late.
/// @GST_CLOCK_UNSCHEDULED: The clockID was unscheduled
/// @GST_CLOCK_BUSY: The ClockID is busy
/// @GST_CLOCK_BADTIME: A bad time was provided to a function.
/// @GST_CLOCK_ERROR: An error occurred
/// @GST_CLOCK_UNSUPPORTED: Operation is not supported
/// @GST_CLOCK_DONE: The ClockID is done waiting
///
/// The return value of a clock operation.
abstract class GstClockReturn {
  static const int GST_CLOCK_OK = 0;
  static const int GST_CLOCK_EARLY = 1;
  static const int GST_CLOCK_UNSCHEDULED = 2;
  static const int GST_CLOCK_BUSY = 3;
  static const int GST_CLOCK_BADTIME = 4;
  static const int GST_CLOCK_ERROR = 5;
  static const int GST_CLOCK_UNSUPPORTED = 6;
  static const int GST_CLOCK_DONE = 7;
}

/// GstClockCallback:
/// @clock: The clock that triggered the callback
/// @time: The time it was triggered
/// @id: The #GstClockID that expired
/// @user_data: user data passed in the gst_clock_id_wait_async() function
///
/// The function prototype of the callback.
///
/// Returns: %TRUE or %FALSE (currently unused)
typedef GstClockCallback
    = ffi.Pointer<ffi.NativeFunction<GstClockCallbackFunction>>;
typedef GstClockCallbackFunction = gboolean Function(
    ffi.Pointer<GstClock> clock,
    GstClockTime time,
    GstClockID id,
    ffi.Pointer user_data);
typedef DartGstClockCallbackFunction = Dartgint Function(
    ffi.Pointer<GstClock> clock,
    Dartguint64 time,
    GstClockID id,
    ffi.Pointer user_data);

/// GstClockID:
///
/// A datatype to hold the handle to an outstanding sync or async clock callback.
typedef GstClockID = ffi.Pointer;

/// GstClockClass:
/// @parent_class: the parent class structure
///
/// GStreamer clock class. Override the vmethods to implement the clock
/// functionality.
final class _GstClockClass extends ffi.Struct {
  external GstObjectClass parent_class;

  /// GstClockClass::change_resolution:
  /// @clock: the #GstClock
  /// @old_resolution: the previous resolution
  /// @new_resolution: the new resolution
  ///
  /// Change the resolution of the clock. Not all values might
  /// be acceptable.
  ///
  /// Returns: the new resolution
  external ffi.Pointer<
      ffi.NativeFunction<
          GstClockTime Function(
              ffi.Pointer<GstClock> clock,
              GstClockTime old_resolution,
              GstClockTime new_resolution)>> change_resolution;

  /// GstClockClass::get_resolution:
  /// @clock: the #GstClock
  ///
  /// Get the resolution of the clock.
  ///
  /// Returns: the current resolution
  external ffi.Pointer<
          ffi
          .NativeFunction<GstClockTime Function(ffi.Pointer<GstClock> clock)>>
      get_resolution;

  /// GstClockClass::get_internal_time:
  /// @clock: the #GstClock
  ///
  /// Get the internal unadjusted time of the clock.
  ///
  /// Implement #GstClockClass::wait instead.
  ///
  /// Returns: the internal time
  external ffi.Pointer<
          ffi
          .NativeFunction<GstClockTime Function(ffi.Pointer<GstClock> clock)>>
      get_internal_time;

  /// GstClockClass::wait:
  /// @clock: the #GstClock
  /// @entry: the entry to wait on
  /// @jitter: (out) (allow-none): a pointer that will contain the jitter
  ///
  /// Perform a blocking wait on the given #GstClockEntry and return
  /// the jitter.
  ///
  /// Returns: the result of the blocking wait. #GST_CLOCK_EARLY will be returned
  /// if the current clock time is past the time of @id, #GST_CLOCK_OK if
  /// @id was scheduled in time. #GST_CLOCK_UNSCHEDULED if @id was
  /// unscheduled with gst_clock_id_unschedule().
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstClock> clock,
              ffi.Pointer<GstClockEntry> entry,
              ffi.Pointer<GstClockTimeDiff> jitter)>> wait;

  /// GstClockClass::wait_async:
  /// @clock: the #GstClock
  /// @entry: the entry to wait on
  ///
  /// Perform an asynchronous wait on the given #GstClockEntry.
  ///
  /// Returns: the result of the non blocking wait.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<GstClock> clock,
              ffi.Pointer<GstClockEntry> entry)>> wait_async;

  /// GstClockClass::unschedule:
  /// @clock: the #GstClock
  /// @entry: the entry to unschedule
  ///
  /// Unblock a blocking or async wait operation.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstClock> clock,
              ffi.Pointer<GstClockEntry> entry)>> unschedule;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstClockEntry = _GstClockEntry;

/// GstClockFlags:
/// @GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC: clock can do a single sync timeout request
/// @GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC: clock can do a single async timeout request
/// @GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC: clock can do sync periodic timeout requests
/// @GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC: clock can do async periodic timeout callbacks
/// @GST_CLOCK_FLAG_CAN_SET_RESOLUTION: clock's resolution can be changed
/// @GST_CLOCK_FLAG_CAN_SET_MASTER: clock can be slaved to a master clock
/// @GST_CLOCK_FLAG_LAST: subclasses can add additional flags starting from this flag
///
/// The capabilities of this clock
abstract class GstClockFlags {
  static const int GST_CLOCK_FLAG_CAN_DO_SINGLE_SYNC = 16;
  static const int GST_CLOCK_FLAG_CAN_DO_SINGLE_ASYNC = 32;
  static const int GST_CLOCK_FLAG_CAN_DO_PERIODIC_SYNC = 64;
  static const int GST_CLOCK_FLAG_CAN_DO_PERIODIC_ASYNC = 128;
  static const int GST_CLOCK_FLAG_CAN_SET_RESOLUTION = 256;
  static const int GST_CLOCK_FLAG_CAN_SET_MASTER = 512;

  /// GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC:
  ///
  /// clock needs to be synced before it can be used
  ///
  /// Since: 1.6
  static const int GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC = 1024;
  static const int GST_CLOCK_FLAG_LAST = 4096;
}

/// GstControlSource:
/// @parent: the parent structure
/// @get_value: Function for returning a value for a given timestamp
/// @get_value_array: Function for returning a values array for a given timestamp
///
/// The instance structure of #GstControlSource.
final class _GstControlSource extends ffi.Struct {
  external GstObject parent;

  external GstControlSourceGetValue get_value;

  external GstControlSourceGetValueArray get_value_array;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstControlSourceGetValue:
/// @self: the #GstControlSource instance
/// @timestamp: timestamp for which a value should be calculated
/// @value: a value which will be set to the result.
///
/// Function for returning a value for a given timestamp.
///
/// Returns: %TRUE if the value was successfully calculated.
typedef GstControlSourceGetValue
    = ffi.Pointer<ffi.NativeFunction<GstControlSourceGetValueFunction>>;
typedef GstControlSourceGetValueFunction = gboolean Function(
    ffi.Pointer<GstControlSource> self,
    GstClockTime timestamp,
    ffi.Pointer<gdouble> value);
typedef DartGstControlSourceGetValueFunction = Dartgint Function(
    ffi.Pointer<GstControlSource> self,
    Dartguint64 timestamp,
    ffi.Pointer<gdouble> value);
typedef GstControlSource = _GstControlSource;

/// GstControlSourceGetValueArray:
/// @self: the #GstControlSource instance
/// @timestamp: timestamp for which a value should be calculated
/// @interval: the time spacing between subsequent values
/// @n_values: the number of values
/// @values: array to put control-values in
///
/// Function for returning an array of values starting at a given timestamp.
///
/// Returns: %TRUE if the values were successfully calculated.
typedef GstControlSourceGetValueArray
    = ffi.Pointer<ffi.NativeFunction<GstControlSourceGetValueArrayFunction>>;
typedef GstControlSourceGetValueArrayFunction = gboolean Function(
    ffi.Pointer<GstControlSource> self,
    GstClockTime timestamp,
    GstClockTime interval,
    guint n_values,
    ffi.Pointer<gdouble> values);
typedef DartGstControlSourceGetValueArrayFunction = Dartgint Function(
    ffi.Pointer<GstControlSource> self,
    Dartguint64 timestamp,
    Dartguint64 interval,
    Dartguint n_values,
    ffi.Pointer<gdouble> values);

/// GstControlSourceClass:
/// @parent_class: Parent class
///
/// The class structure of #GstControlSource.
final class _GstControlSourceClass extends ffi.Struct {
  external GstObjectClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstTimedValue:
/// @timestamp: timestamp of the value change
/// @value: the corresponding value
///
/// Structure for storing a timestamp and a value.
final class _GstTimedValue extends ffi.Struct {
  @GstClockTime()
  external int timestamp;

  @gdouble()
  external double value;
}

final class _GstValueArray extends ffi.Opaque {}

final class _GstPadPrivate extends ffi.Opaque {}

final class _GstPadClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad> pad, ffi.Pointer<GstPad> peer)>> linked;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstPad> pad, ffi.Pointer<GstPad> peer)>> unlinked;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstPadProbeInfo:
/// @type: the current probe type
/// @id: the id of the probe
/// @data: (allow-none): type specific data, check the @type field to know the
/// datatype.  This field can be %NULL.
/// @offset: offset of pull probe, this field is valid when @type contains
/// #GST_PAD_PROBE_TYPE_PULL
/// @size: size of pull probe, this field is valid when @type contains
/// #GST_PAD_PROBE_TYPE_PULL
///
/// Info passed in the #GstPadProbeCallback.
final class _GstPadProbeInfo extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @gulong()
  external int id;

  external ffi.Pointer data;

  @guint64()
  external int offset;

  @guint()
  external int size;

  external UnnamedUnion14 ABI;
}

/// GstPadProbeType:
/// @GST_PAD_PROBE_TYPE_INVALID: invalid probe type
/// @GST_PAD_PROBE_TYPE_IDLE: probe idle pads and block while the callback is called
/// @GST_PAD_PROBE_TYPE_BLOCK: probe and block pads
/// @GST_PAD_PROBE_TYPE_BUFFER: probe buffers
/// @GST_PAD_PROBE_TYPE_BUFFER_LIST: probe buffer lists
/// @GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM: probe downstream events
/// @GST_PAD_PROBE_TYPE_EVENT_UPSTREAM: probe upstream events
/// @GST_PAD_PROBE_TYPE_EVENT_FLUSH: probe flush events. This probe has to be
/// explicitly enabled and is not included in the
/// @@GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM or
/// @@GST_PAD_PROBE_TYPE_EVENT_UPSTREAM probe types.
/// @GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM: probe downstream queries
/// @GST_PAD_PROBE_TYPE_QUERY_UPSTREAM: probe upstream queries
/// @GST_PAD_PROBE_TYPE_PUSH: probe push
/// @GST_PAD_PROBE_TYPE_PULL: probe pull
/// @GST_PAD_PROBE_TYPE_BLOCKING: probe and block at the next opportunity, at data flow or when idle
/// @GST_PAD_PROBE_TYPE_DATA_DOWNSTREAM: probe downstream data (buffers, buffer lists, and events)
/// @GST_PAD_PROBE_TYPE_DATA_UPSTREAM: probe upstream data (events)
/// @GST_PAD_PROBE_TYPE_DATA_BOTH: probe upstream and downstream data (buffers, buffer lists, and events)
/// @GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM: probe and block downstream data (buffers, buffer lists, and events)
/// @GST_PAD_PROBE_TYPE_BLOCK_UPSTREAM: probe and block upstream data (events)
/// @GST_PAD_PROBE_TYPE_EVENT_BOTH: probe upstream and downstream events
/// @GST_PAD_PROBE_TYPE_QUERY_BOTH: probe upstream and downstream queries
/// @GST_PAD_PROBE_TYPE_ALL_BOTH: probe upstream events and queries and downstream buffers, buffer lists, events and queries
/// @GST_PAD_PROBE_TYPE_SCHEDULING: probe push and pull
///
/// The different probing types that can occur. When either one of
/// @GST_PAD_PROBE_TYPE_IDLE or @GST_PAD_PROBE_TYPE_BLOCK is used, the probe will be a
/// blocking probe.
abstract class GstPadProbeType {
  static const int GST_PAD_PROBE_TYPE_INVALID = 0;
  static const int GST_PAD_PROBE_TYPE_IDLE = 1;
  static const int GST_PAD_PROBE_TYPE_BLOCK = 2;
  static const int GST_PAD_PROBE_TYPE_BUFFER = 16;
  static const int GST_PAD_PROBE_TYPE_BUFFER_LIST = 32;
  static const int GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM = 64;
  static const int GST_PAD_PROBE_TYPE_EVENT_UPSTREAM = 128;
  static const int GST_PAD_PROBE_TYPE_EVENT_FLUSH = 256;
  static const int GST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM = 512;
  static const int GST_PAD_PROBE_TYPE_QUERY_UPSTREAM = 1024;
  static const int GST_PAD_PROBE_TYPE_PUSH = 4096;
  static const int GST_PAD_PROBE_TYPE_PULL = 8192;
  static const int GST_PAD_PROBE_TYPE_BLOCKING = 3;
  static const int GST_PAD_PROBE_TYPE_DATA_DOWNSTREAM = 112;
  static const int GST_PAD_PROBE_TYPE_DATA_UPSTREAM = 128;
  static const int GST_PAD_PROBE_TYPE_DATA_BOTH = 240;
  static const int GST_PAD_PROBE_TYPE_BLOCK_DOWNSTREAM = 114;
  static const int GST_PAD_PROBE_TYPE_BLOCK_UPSTREAM = 130;
  static const int GST_PAD_PROBE_TYPE_EVENT_BOTH = 192;
  static const int GST_PAD_PROBE_TYPE_QUERY_BOTH = 1536;
  static const int GST_PAD_PROBE_TYPE_ALL_BOTH = 1776;
  static const int GST_PAD_PROBE_TYPE_SCHEDULING = 12288;
}

final class UnnamedUnion14 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;

  external UnnamedStruct18 abi;
}

final class UnnamedStruct18 extends ffi.Struct {
  @ffi.Int32()
  external int flow_ret;
}

/// GstFlowReturn:
/// @GST_FLOW_OK:		 Data passing was ok.
/// @GST_FLOW_NOT_LINKED:	 Pad is not linked.
/// @GST_FLOW_FLUSHING:	         Pad is flushing.
/// @GST_FLOW_EOS:                Pad is EOS.
/// @GST_FLOW_NOT_NEGOTIATED:	 Pad is not negotiated.
/// @GST_FLOW_ERROR:		 Some (fatal) error occurred. Element generating
/// this error should post an error message using
/// GST_ELEMENT_ERROR() with more details.
/// @GST_FLOW_NOT_SUPPORTED:	 This operation is not supported.
/// @GST_FLOW_CUSTOM_SUCCESS:	 Elements can use values starting from
/// this (and higher) to define custom success
/// codes.
/// @GST_FLOW_CUSTOM_SUCCESS_1:	 Pre-defined custom success code (define your
/// custom success code to this to avoid compiler
/// warnings).
/// @GST_FLOW_CUSTOM_SUCCESS_2:	 Pre-defined custom success code.
/// @GST_FLOW_CUSTOM_ERROR:	 Elements can use values starting from
/// this (and lower) to define custom error codes.
/// @GST_FLOW_CUSTOM_ERROR_1:	 Pre-defined custom error code (define your
/// custom error code to this to avoid compiler
/// warnings).
/// @GST_FLOW_CUSTOM_ERROR_2:	 Pre-defined custom error code.
///
/// The result of passing data to a pad.
///
/// Note that the custom return values should not be exposed outside of the
/// element scope.
abstract class GstFlowReturn {
  static const int GST_FLOW_CUSTOM_SUCCESS_2 = 102;
  static const int GST_FLOW_CUSTOM_SUCCESS_1 = 101;
  static const int GST_FLOW_CUSTOM_SUCCESS = 100;
  static const int GST_FLOW_OK = 0;
  static const int GST_FLOW_NOT_LINKED = -1;
  static const int GST_FLOW_FLUSHING = -2;
  static const int GST_FLOW_EOS = -3;
  static const int GST_FLOW_NOT_NEGOTIATED = -4;
  static const int GST_FLOW_ERROR = -5;
  static const int GST_FLOW_NOT_SUPPORTED = -6;
  static const int GST_FLOW_CUSTOM_ERROR = -100;
  static const int GST_FLOW_CUSTOM_ERROR_1 = -101;
  static const int GST_FLOW_CUSTOM_ERROR_2 = -102;
}

/// GstPadMode:
/// @GST_PAD_MODE_NONE: Pad will not handle dataflow
/// @GST_PAD_MODE_PUSH: Pad handles dataflow in downstream push mode
/// @GST_PAD_MODE_PULL: Pad handles dataflow in upstream pull mode
///
/// The status of a GstPad. After activating a pad, which usually happens when the
/// parent element goes from READY to PAUSED, the GstPadMode defines if the
/// pad operates in push or pull mode.
abstract class GstPadMode {
  static const int GST_PAD_MODE_NONE = 0;
  static const int GST_PAD_MODE_PUSH = 1;
  static const int GST_PAD_MODE_PULL = 2;
}

/// GstMiniObjectFlags:
/// @GST_MINI_OBJECT_FLAG_LOCKABLE: the object can be locked and unlocked with
/// gst_mini_object_lock() and gst_mini_object_unlock().
/// @GST_MINI_OBJECT_FLAG_LOCK_READONLY: the object is permanently locked in
/// READONLY mode. Only read locks can be performed on the object.
/// @GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED: the object is expected to stay alive
/// even after gst_deinit() has been called and so should be ignored by leak
/// detection tools. (Since: 1.10)
/// @GST_MINI_OBJECT_FLAG_LAST: first flag that can be used by subclasses.
///
/// Flags for the mini object
abstract class GstMiniObjectFlags {
  static const int GST_MINI_OBJECT_FLAG_LOCKABLE = 1;
  static const int GST_MINI_OBJECT_FLAG_LOCK_READONLY = 2;
  static const int GST_MINI_OBJECT_FLAG_MAY_BE_LEAKED = 4;
  static const int GST_MINI_OBJECT_FLAG_LAST = 16;
}

/// GstLockFlags:
/// @GST_LOCK_FLAG_READ: lock for read access
/// @GST_LOCK_FLAG_WRITE: lock for write access
/// @GST_LOCK_FLAG_EXCLUSIVE: lock for exclusive access
/// @GST_LOCK_FLAG_LAST: first flag that can be used for custom purposes
///
/// Flags used when locking miniobjects
abstract class GstLockFlags {
  static const int GST_LOCK_FLAG_READ = 1;
  static const int GST_LOCK_FLAG_WRITE = 2;
  static const int GST_LOCK_FLAG_EXCLUSIVE = 4;
  static const int GST_LOCK_FLAG_LAST = 256;
}

/// GstMiniObjectNotify:
/// @user_data: data that was provided when the notify was added
/// @obj: the mini object
///
/// A #GstMiniObjectNotify function can be added to a mini object as a
/// callback that gets triggered when gst_mini_object_unref() drops the
/// last ref and @obj is about to be freed.
typedef GstMiniObjectNotify
    = ffi.Pointer<ffi.NativeFunction<GstMiniObjectNotifyFunction>>;
typedef GstMiniObjectNotifyFunction = ffi.Void Function(
    ffi.Pointer user_data, ffi.Pointer<GstMiniObject> obj);
typedef DartGstMiniObjectNotifyFunction = void Function(
    ffi.Pointer user_data, ffi.Pointer<GstMiniObject> obj);

/// GstMemory:
/// @mini_object: parent structure
/// @allocator: pointer to the #GstAllocator
/// @parent: parent memory block
/// @maxsize: the maximum size allocated
/// @align: the alignment of the memory
/// @offset: the offset where valid data starts
/// @size: the size of valid data
///
/// Base structure for memory implementations. Custom memory will put this structure
/// as the first member of their structure.
final class _GstMemory extends ffi.Struct {
  external GstMiniObject mini_object;

  external ffi.Pointer<GstAllocator> allocator;

  external ffi.Pointer<GstMemory> parent;

  @gsize()
  external int maxsize;

  @gsize()
  external int align;

  @gsize()
  external int offset;

  @gsize()
  external int size;
}

typedef GstAllocator = _GstAllocator;

/// GstAllocator:
/// @mem_map: the implementation of the GstMemoryMapFunction
/// @mem_unmap: the implementation of the GstMemoryUnmapFunction
/// @mem_copy: the implementation of the GstMemoryCopyFunction
/// @mem_share: the implementation of the GstMemoryShareFunction
/// @mem_is_span: the implementation of the GstMemoryIsSpanFunction
/// @mem_map_full: the implementation of the GstMemoryMapFullFunction.
/// Will be used instead of @mem_map if present. (Since: 1.6)
/// @mem_unmap_full: the implementation of the GstMemoryUnmapFullFunction.
/// Will be used instead of @mem_unmap if present. (Since: 1.6)
///
/// The #GstAllocator is used to create new memory.
final class _GstAllocator extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<ffi.Char> mem_type;

  external GstMemoryMapFunction mem_map;

  external GstMemoryUnmapFunction mem_unmap;

  external GstMemoryCopyFunction mem_copy;

  external GstMemoryShareFunction mem_share;

  external GstMemoryIsSpanFunction mem_is_span;

  external GstMemoryMapFullFunction mem_map_full;

  external GstMemoryUnmapFullFunction mem_unmap_full;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer> _gst_reserved;

  external ffi.Pointer<GstAllocatorPrivate> priv;
}

/// GstMemoryMapFunction:
/// @mem: a #GstMemory
/// @maxsize: size to map
/// @flags: access mode for the memory
///
/// Get the memory of @mem that can be accessed according to the mode specified
/// in @flags. The function should return a pointer that contains at least
/// @maxsize bytes.
///
/// Returns: a pointer to memory of which at least @maxsize bytes can be
/// accessed according to the access pattern in @flags.
typedef GstMemoryMapFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryMapFunctionFunction>>;
typedef GstMemoryMapFunctionFunction = ffi.Pointer Function(
    ffi.Pointer<GstMemory> mem, gsize maxsize, ffi.Int32 flags);
typedef DartGstMemoryMapFunctionFunction = ffi.Pointer Function(
    ffi.Pointer<GstMemory> mem, Dartgsize maxsize, int flags);
typedef GstMemory = _GstMemory;

/// GstMapFlags:
/// @GST_MAP_READ: map for read access
/// @GST_MAP_WRITE: map for write access
/// @GST_MAP_FLAG_LAST: first flag that can be used for custom purposes
///
/// Flags used when mapping memory
abstract class GstMapFlags {
  static const int GST_MAP_READ = 1;
  static const int GST_MAP_WRITE = 2;
  static const int GST_MAP_FLAG_LAST = 65536;
}

/// GstMemoryUnmapFunction:
/// @mem: a #GstMemory
///
/// Release the pointer previously retrieved with gst_memory_map().
typedef GstMemoryUnmapFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryUnmapFunctionFunction>>;
typedef GstMemoryUnmapFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstMemory> mem);
typedef DartGstMemoryUnmapFunctionFunction = void Function(
    ffi.Pointer<GstMemory> mem);

/// GstMemoryCopyFunction:
/// @mem: a #GstMemory
/// @offset: an offset
/// @size: a size or -1
///
/// Copy @size bytes from @mem starting at @offset and return them wrapped in a
/// new GstMemory object.
/// If @size is set to -1, all bytes starting at @offset are copied.
///
/// Returns: a new #GstMemory object wrapping a copy of the requested region in
/// @mem.
typedef GstMemoryCopyFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryCopyFunctionFunction>>;
typedef GstMemoryCopyFunctionFunction = ffi.Pointer<GstMemory> Function(
    ffi.Pointer<GstMemory> mem, gssize offset, gssize size);
typedef DartGstMemoryCopyFunctionFunction = ffi.Pointer<GstMemory> Function(
    ffi.Pointer<GstMemory> mem, Dartgssize offset, Dartgssize size);

/// GstMemoryShareFunction:
/// @mem: a #GstMemory
/// @offset: an offset
/// @size: a size or -1
///
/// Share @size bytes from @mem starting at @offset and return them wrapped in a
/// new GstMemory object. If @size is set to -1, all bytes starting at @offset are
/// shared. This function does not make a copy of the bytes in @mem.
///
/// Returns: a new #GstMemory object sharing the requested region in @mem.
typedef GstMemoryShareFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryShareFunctionFunction>>;
typedef GstMemoryShareFunctionFunction = ffi.Pointer<GstMemory> Function(
    ffi.Pointer<GstMemory> mem, gssize offset, gssize size);
typedef DartGstMemoryShareFunctionFunction = ffi.Pointer<GstMemory> Function(
    ffi.Pointer<GstMemory> mem, Dartgssize offset, Dartgssize size);

/// GstMemoryIsSpanFunction:
/// @mem1: a #GstMemory
/// @mem2: a #GstMemory
/// @offset: a result offset
///
/// Check if @mem1 and @mem2 occupy contiguous memory and return the offset of
/// @mem1 in the parent buffer in @offset.
///
/// Returns: %TRUE if @mem1 and @mem2 are in contiguous memory.
typedef GstMemoryIsSpanFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryIsSpanFunctionFunction>>;
typedef GstMemoryIsSpanFunctionFunction = gboolean Function(
    ffi.Pointer<GstMemory> mem1,
    ffi.Pointer<GstMemory> mem2,
    ffi.Pointer<gsize> offset);
typedef DartGstMemoryIsSpanFunctionFunction = Dartgint Function(
    ffi.Pointer<GstMemory> mem1,
    ffi.Pointer<GstMemory> mem2,
    ffi.Pointer<gsize> offset);

/// GstMemoryMapFullFunction:
/// @mem: a #GstMemory
/// @info: the #GstMapInfo to map with
/// @maxsize: size to map
///
/// Get the memory of @mem that can be accessed according to the mode specified
/// in @info's flags. The function should return a pointer that contains at least
/// @maxsize bytes.
///
/// Returns: a pointer to memory of which at least @maxsize bytes can be
/// accessed according to the access pattern in @info's flags.
typedef GstMemoryMapFullFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryMapFullFunctionFunction>>;
typedef GstMemoryMapFullFunctionFunction = ffi.Pointer Function(
    ffi.Pointer<GstMemory> mem, ffi.Pointer<GstMapInfo> info, gsize maxsize);
typedef DartGstMemoryMapFullFunctionFunction = ffi.Pointer Function(
    ffi.Pointer<GstMemory> mem,
    ffi.Pointer<GstMapInfo> info,
    Dartgsize maxsize);

/// GstMapInfo:
/// @memory: a pointer to the mapped memory
/// @flags: flags used when mapping the memory
/// @data: (array length=size): a pointer to the mapped data
/// @size: the valid size in @data
/// @maxsize: the maximum bytes in @data
/// @user_data: extra private user_data that the implementation of the memory
/// can use to store extra info.
///
/// A structure containing the result of a map operation such as
/// gst_memory_map(). It contains the data and size.
///
/// #GstMapInfo cannot be used with g_auto() because it is ambiguous whether it
/// needs to be unmapped using gst_buffer_unmap() or gst_memory_unmap(). Instead,
/// #GstBufferMapInfo and #GstMemoryMapInfo can be used in that case.
final class GstMapInfo extends ffi.Struct {
  external ffi.Pointer<GstMemory> memory;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<guint8> data;

  @gsize()
  external int size;

  @gsize()
  external int maxsize;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> user_data;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstMemoryUnmapFullFunction:
/// @mem: a #GstMemory
/// @info: a #GstMapInfo
///
/// Release the pointer previously retrieved with gst_memory_map() with @info.
typedef GstMemoryUnmapFullFunction
    = ffi.Pointer<ffi.NativeFunction<GstMemoryUnmapFullFunctionFunction>>;
typedef GstMemoryUnmapFullFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstMemory> mem, ffi.Pointer<GstMapInfo> info);
typedef DartGstMemoryUnmapFullFunctionFunction = void Function(
    ffi.Pointer<GstMemory> mem, ffi.Pointer<GstMapInfo> info);
typedef GstAllocatorPrivate = _GstAllocatorPrivate;

final class _GstAllocatorPrivate extends ffi.Opaque {}

/// GstMemoryFlags:
/// @GST_MEMORY_FLAG_READONLY: memory is readonly. It is not allowed to map the
/// memory with #GST_MAP_WRITE.
/// @GST_MEMORY_FLAG_NO_SHARE: memory must not be shared. Copies will have to be
/// made when this memory needs to be shared between buffers. (DEPRECATED:
/// do not use in new code, instead you should create a custom GstAllocator for
/// memory pooling instead of relying on the GstBuffer they were originally
/// attached to.)
/// @GST_MEMORY_FLAG_ZERO_PREFIXED: the memory prefix is filled with 0 bytes
/// @GST_MEMORY_FLAG_ZERO_PADDED: the memory padding is filled with 0 bytes
/// @GST_MEMORY_FLAG_PHYSICALLY_CONTIGUOUS: the memory is physically
/// contiguous. (Since: 1.2)
/// @GST_MEMORY_FLAG_NOT_MAPPABLE: the memory can't be mapped via
/// gst_memory_map() without any preconditions. (Since: 1.2)
/// @GST_MEMORY_FLAG_LAST: first flag that can be used for custom purposes
///
/// Flags for wrapped memory.
abstract class GstMemoryFlags {
  static const int GST_MEMORY_FLAG_READONLY = 2;
  static const int GST_MEMORY_FLAG_NO_SHARE = 16;
  static const int GST_MEMORY_FLAG_ZERO_PREFIXED = 32;
  static const int GST_MEMORY_FLAG_ZERO_PADDED = 64;
  static const int GST_MEMORY_FLAG_PHYSICALLY_CONTIGUOUS = 128;
  static const int GST_MEMORY_FLAG_NOT_MAPPABLE = 256;
  static const int GST_MEMORY_FLAG_LAST = 1048576;
}

/// GstAllocatorClass:
/// @object_class:  Object parent class
/// @alloc: implementation that acquires memory
/// @free: implementation that releases memory
///
/// The #GstAllocator is used to create new memory.
final class _GstAllocatorClass extends ffi.Struct {
  external GstObjectClass object_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GstMemory> Function(ffi.Pointer<GstAllocator> allocator,
              gsize size, ffi.Pointer<GstAllocationParams> params)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstAllocator> allocator,
              ffi.Pointer<GstMemory> memory)>> free;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstAllocationParams = _GstAllocationParams;

/// GstAllocationParams:
/// @flags: flags to control allocation
/// @align: the desired alignment of the memory
/// @prefix: the desired prefix
/// @padding: the desired padding
///
/// Parameters to control the allocation of memory
final class _GstAllocationParams extends ffi.Struct {
  @ffi.Int32()
  external int flags;

  @gsize()
  external int align;

  @gsize()
  external int prefix;

  @gsize()
  external int padding;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstAllocatorFlags:
/// @GST_ALLOCATOR_FLAG_CUSTOM_ALLOC: The allocator has a custom alloc function.
/// Only elements designed to work with this allocator should be using it,
/// other elements should ignore it from allocation propositions.
/// This implies %GST_ALLOCATOR_FLAG_NO_COPY.
/// @GST_ALLOCATOR_FLAG_NO_COPY: When copying a #GstMemory allocated with this
/// allocator, the copy will instead be allocated using the default allocator.
/// Use this when allocating a new memory is an heavy opperation that should
/// only be done with a #GstBufferPool for example. (Since: 1.24)
/// @GST_ALLOCATOR_FLAG_LAST: first flag that can be used for custom purposes
///
/// Flags for allocators.
/// /
/// /**
/// GST_ALLOCATOR_FLAG_NO_COPY:
///
/// When copying a #GstMemory allocated with this allocator, the copy will
/// instead be allocated using the default allocator. Use this when allocating a
/// new memory is an heavy opperation that should only be done with a
/// #GstBufferPool for example.
///
/// Since: 1.24
abstract class GstAllocatorFlags {
  static const int GST_ALLOCATOR_FLAG_CUSTOM_ALLOC = 16;
  static const int GST_ALLOCATOR_FLAG_NO_COPY = 32;
  static const int GST_ALLOCATOR_FLAG_LAST = 1048576;
}

final class _GstDateTime extends ffi.Opaque {}

/// GstDateTime:
///
/// Opaque, immutable, refcounted struct that stores date, time and timezone
/// information. It currently supports ranges from `0001-01-01` to
/// `9999-12-31` in the Gregorian proleptic calendar.
///
/// Use the accessor functions to get the stored values.
typedef GstDateTime = _GstDateTime;

/// GstStructure:
/// @type: the GType of a structure
///
/// The GstStructure object. Most fields are private.
final class _GstStructure extends ffi.Struct {
  @GType()
  external int type;

  @GQuark()
  external int name;
}

/// GstSerializeFlags:
/// @GST_SERIALIZE_FLAG_NONE: No special flags specified.
/// @GST_SERIALIZE_FLAG_BACKWARD_COMPAT: Serialize using the old format for
/// nested structures.
/// @GST_SERIALIZE_FLAG_STRICT: Serialization fails if a value cannot be
/// serialized instead of using placeholder "NULL" value (e.g. pointers,
/// objects). (Since 1.24)
///
/// Since: 1.20
abstract class GstSerializeFlags {
  static const int GST_SERIALIZE_FLAG_NONE = 0;
  static const int GST_SERIALIZE_FLAG_BACKWARD_COMPAT = 1;
  static const int GST_SERIALIZE_FLAG_STRICT = 2;
}

typedef GstStructure = _GstStructure;

/// GstStructureForeachFunc:
/// @field_id: the #GQuark of the field name
/// @value: the #GValue of the field
/// @user_data: user data
///
/// A function that will be called in gst_structure_foreach(). The function may
/// not modify @value.
///
/// Returns: %TRUE if the foreach operation should continue, %FALSE if
/// the foreach operation should stop with %FALSE.
typedef GstStructureForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GstStructureForeachFuncFunction>>;
typedef GstStructureForeachFuncFunction = gboolean Function(
    GQuark field_id, ffi.Pointer<GValue> value, ffi.Pointer user_data);
typedef DartGstStructureForeachFuncFunction = Dartgint Function(
    Dartguint32 field_id, ffi.Pointer<GValue> value, ffi.Pointer user_data);

/// GstStructureMapFunc:
/// @field_id: the #GQuark of the field name
/// @value: the #GValue of the field
/// @user_data: user data
///
/// A function that will be called in gst_structure_map_in_place(). The function
/// may modify @value.
///
/// Returns: %TRUE if the map operation should continue, %FALSE if
/// the map operation should stop with %FALSE.
typedef GstStructureMapFunc
    = ffi.Pointer<ffi.NativeFunction<GstStructureMapFuncFunction>>;
typedef GstStructureMapFuncFunction = gboolean Function(
    GQuark field_id, ffi.Pointer<GValue> value, ffi.Pointer user_data);
typedef DartGstStructureMapFuncFunction = Dartgint Function(
    Dartguint32 field_id, ffi.Pointer<GValue> value, ffi.Pointer user_data);

/// GstStructureFilterMapFunc:
/// @field_id: the #GQuark of the field name
/// @value: the #GValue of the field
/// @user_data: user data
///
/// A function that will be called in gst_structure_filter_and_map_in_place().
/// The function may modify @value, and the value will be removed from
/// the structure if %FALSE is returned.
///
/// Returns: %TRUE if the field should be preserved, %FALSE if it
/// should be removed.
typedef GstStructureFilterMapFunc
    = ffi.Pointer<ffi.NativeFunction<GstStructureFilterMapFuncFunction>>;
typedef GstStructureFilterMapFuncFunction = gboolean Function(
    GQuark field_id, ffi.Pointer<GValue> value, ffi.Pointer user_data);
typedef DartGstStructureFilterMapFuncFunction = Dartgint Function(
    Dartguint32 field_id, ffi.Pointer<GValue> value, ffi.Pointer user_data);

final class _GstCapsFeatures extends ffi.Opaque {}

typedef GstCapsFeatures = _GstCapsFeatures;

/// GstCapsFlags:
/// @GST_CAPS_FLAG_ANY: Caps has no specific content, but can contain
/// anything.
///
/// Extra flags for a caps.
abstract class GstCapsFlags {
  static const int GST_CAPS_FLAG_ANY = 16;
}

/// GstCapsIntersectMode:
/// @GST_CAPS_INTERSECT_ZIG_ZAG  : Zig-zags over both caps.
/// @GST_CAPS_INTERSECT_FIRST    : Keeps the first caps order.
///
/// Modes of caps intersection
///
/// %GST_CAPS_INTERSECT_ZIG_ZAG tries to preserve overall order of both caps
/// by iterating on the caps' structures as the following matrix shows:
///
/// ```
/// caps1
/// +-------------
/// | 1  2  4  7
/// caps2 | 3  5  8 10
/// | 6  9 11 12
/// ```
///
/// Used when there is no explicit precedence of one caps over the other. e.g.
/// tee's sink pad getcaps function, it will probe its src pad peers' for their
/// caps and intersect them with this mode.
///
/// %GST_CAPS_INTERSECT_FIRST is useful when an element wants to preserve
/// another element's caps priority order when intersecting with its own caps.
/// Example: If caps1 is `[A, B, C]` and caps2 is `[E, B, D, A]`, the result
/// would be `[A, B]`, maintaining the first caps priority on the intersection.
abstract class GstCapsIntersectMode {
  static const int GST_CAPS_INTERSECT_ZIG_ZAG = 0;
  static const int GST_CAPS_INTERSECT_FIRST = 1;
}

/// GstStaticCaps:
/// @caps: the cached #GstCaps
/// @string: a string describing a caps
///
/// Data structure to initialize #GstCaps from a string description usually
/// used in conjunction with GST_STATIC_CAPS() and gst_static_caps_get() to
/// instantiate a #GstCaps.
final class _GstStaticCaps extends ffi.Struct {
  external ffi.Pointer<GstCaps> caps;

  external ffi.Pointer<ffi.Char> string;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstStaticCaps = _GstStaticCaps;

/// GstCapsForeachFunc:
/// @features: the #GstCapsFeatures
/// @structure: the #GstStructure
/// @user_data: user data
///
/// A function that will be called in gst_caps_foreach(). The function may
/// not modify @features or @structure.
///
/// Returns: %TRUE if the foreach operation should continue, %FALSE if
/// the foreach operation should stop with %FALSE.
///
/// Since: 1.6
typedef GstCapsForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GstCapsForeachFuncFunction>>;
typedef GstCapsForeachFuncFunction = gboolean Function(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer user_data);
typedef DartGstCapsForeachFuncFunction = Dartgint Function(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer user_data);

/// GstCapsMapFunc:
/// @features: the #GstCapsFeatures
/// @structure: the #GstStructure
/// @user_data: user data
///
/// A function that will be called in gst_caps_map_in_place(). The function
/// may modify @features and @structure.
///
/// Returns: %TRUE if the map operation should continue, %FALSE if
/// the map operation should stop with %FALSE.
typedef GstCapsMapFunc
    = ffi.Pointer<ffi.NativeFunction<GstCapsMapFuncFunction>>;
typedef GstCapsMapFuncFunction = gboolean Function(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer user_data);
typedef DartGstCapsMapFuncFunction = Dartgint Function(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer user_data);

/// GstCapsFilterMapFunc:
/// @features: the #GstCapsFeatures
/// @structure: the #GstStructure
/// @user_data: user data
///
/// A function that will be called in gst_caps_filter_and_map_in_place().
/// The function may modify @features and @structure, and both will be
/// removed from the caps if %FALSE is returned.
///
/// Returns: %TRUE if the features and structure should be preserved,
/// %FALSE if it should be removed.
typedef GstCapsFilterMapFunc
    = ffi.Pointer<ffi.NativeFunction<GstCapsFilterMapFuncFunction>>;
typedef GstCapsFilterMapFuncFunction = gboolean Function(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer user_data);
typedef DartGstCapsFilterMapFuncFunction = Dartgint Function(
    ffi.Pointer<GstCapsFeatures> features,
    ffi.Pointer<GstStructure> structure,
    ffi.Pointer user_data);

/// GstBuffer:
/// @mini_object: the parent structure
/// @pool: pointer to the pool owner of the buffer
/// @pts: presentation timestamp of the buffer, can be #GST_CLOCK_TIME_NONE when the
/// pts is not known or relevant. The pts contains the timestamp when the
/// media should be presented to the user.
/// @dts: decoding timestamp of the buffer, can be #GST_CLOCK_TIME_NONE when the
/// dts is not known or relevant. The dts contains the timestamp when the
/// media should be processed.
/// @duration: duration in time of the buffer data, can be #GST_CLOCK_TIME_NONE
/// when the duration is not known or relevant.
/// @offset: a media specific offset for the buffer data.
/// For video frames, this is the frame number of this buffer.
/// For audio samples, this is the offset of the first sample in this buffer.
/// For file data or compressed data this is the byte offset of the first
/// byte in this buffer.
/// @offset_end: the last offset contained in this buffer. It has the same
/// format as @offset.
///
/// The structure of a #GstBuffer. Use the associated macros to access the public
/// variables.
final class _GstBuffer extends ffi.Struct {
  external GstMiniObject mini_object;

  external ffi.Pointer<GstBufferPool> pool;

  @GstClockTime()
  external int pts;

  @GstClockTime()
  external int dts;

  @GstClockTime()
  external int duration;

  @guint64()
  external int offset;

  @guint64()
  external int offset_end;
}

typedef GstBufferPool = _GstBufferPool;

/// GstBufferPool:
/// @object: the parent structure
/// @flushing: whether the pool is currently gathering back outstanding buffers
///
/// The structure of a #GstBufferPool. Use the associated macros to access the public
/// variables.
final class _GstBufferPool extends ffi.Struct {
  external GstObject object;

  @gint()
  external int flushing;

  external ffi.Pointer<GstBufferPoolPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstBufferPoolPrivate = _GstBufferPoolPrivate;

final class _GstBufferPoolPrivate extends ffi.Opaque {}

final class _GstByteArrayInterface extends ffi.Struct {
  external ffi.Pointer<guint8> data;

  @gsize()
  external int len;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstByteArrayInterface> self, gsize length)>> resize;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstByteArrayInterface:
/// @data: A pointer to an array of bytes.
/// @len: Number of bytes in @data.
/// @resize: Reallocate @data.
///
/// Interface for an array of bytes. It is expected to be subclassed to implement
/// @resize virtual method using language native array implementation, such as
/// GLib's #GByteArray, C++'s `std::vector<uint8_t>` or Rust's `Vec<u8>`.
///
/// @resize implementation could allocate more than requested to avoid repeated
/// reallocations. It can return %FALSE, or be set to %NULL, in the case the
/// array cannot grow.
///
/// Since: 1.24
typedef GstByteArrayInterface = _GstByteArrayInterface;

/// GstMeta:
/// @flags: extra flags for the metadata
/// @info: pointer to the #GstMetaInfo
///
/// Base structure for metadata. Custom metadata will put this structure
/// as the first member of their structure.
final class _GstMeta extends ffi.Struct {
  @ffi.Int32()
  external int flags;

  external ffi.Pointer<GstMetaInfo> info;
}

/// GstMetaFlags:
/// @GST_META_FLAG_NONE: no flags
/// @GST_META_FLAG_READONLY: metadata should not be modified
/// @GST_META_FLAG_POOLED: metadata is managed by a bufferpool
/// @GST_META_FLAG_LOCKED: metadata should not be removed
/// @GST_META_FLAG_LAST: additional flags can be added starting from this flag.
///
/// Extra metadata flags.
abstract class GstMetaFlags {
  static const int GST_META_FLAG_NONE = 0;
  static const int GST_META_FLAG_READONLY = 1;
  static const int GST_META_FLAG_POOLED = 2;
  static const int GST_META_FLAG_LOCKED = 4;
  static const int GST_META_FLAG_LAST = 65536;
}

typedef GstMetaInfo = _GstMetaInfo;

/// GstMetaInfo:
/// @api: tag identifying the metadata structure and api
/// @type: type identifying the implementor of the api
/// @size: size of the metadata
/// @init_func: function for initializing the metadata
/// @free_func: function for freeing the metadata
/// @transform_func: function for transforming the metadata
/// @serialize_func: function for serializing the metadata into a #GstStructure,
/// or %NULL if not supported by this meta. (Since 1.24)
/// @deserialize_func: function for deserializing the metadata from a
/// #GstStructure, or %NULL if not supported by this meta. (Since 1.24)
///
/// The #GstMetaInfo provides information about a specific metadata
/// structure.
final class _GstMetaInfo extends ffi.Struct {
  @GType()
  external int api;

  @GType()
  external int type;

  @gsize()
  external int size;

  external GstMetaInitFunction init_func;

  external GstMetaFreeFunction free_func;

  external GstMetaTransformFunction transform_func;

  external GstMetaSerializeFunction serialize_func;

  external GstMetaDeserializeFunction deserialize_func;

  external GstMetaClearFunction clear_func;
}

/// GstMetaInitFunction:
/// @meta: a #GstMeta
/// @params: parameters passed to the init function
/// @buffer: a #GstBuffer
///
/// Function called when @meta is initialized in @buffer.
typedef GstMetaInitFunction
    = ffi.Pointer<ffi.NativeFunction<GstMetaInitFunctionFunction>>;
typedef GstMetaInitFunctionFunction = gboolean Function(
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer params,
    ffi.Pointer<GstBuffer> buffer);
typedef DartGstMetaInitFunctionFunction = Dartgint Function(
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer params,
    ffi.Pointer<GstBuffer> buffer);
typedef GstMeta = _GstMeta;
typedef GstBuffer = _GstBuffer;

/// GstMetaFreeFunction:
/// @meta: a #GstMeta
/// @buffer: a #GstBuffer
///
/// Function called when @meta is freed in @buffer.
typedef GstMetaFreeFunction
    = ffi.Pointer<ffi.NativeFunction<GstMetaFreeFunctionFunction>>;
typedef GstMetaFreeFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstMeta> meta, ffi.Pointer<GstBuffer> buffer);
typedef DartGstMetaFreeFunctionFunction = void Function(
    ffi.Pointer<GstMeta> meta, ffi.Pointer<GstBuffer> buffer);

/// GstMetaTransformFunction:
/// @transbuf: a #GstBuffer
/// @meta: a #GstMeta
/// @buffer: a #GstBuffer
/// @type: the transform type
/// @data: transform specific data.
///
/// Function called for each @meta in @buffer as a result of performing a
/// transformation on @transbuf. Additional @type specific transform data
/// is passed to the function as @data.
///
/// Implementations should check the @type of the transform and parse
/// additional type specific fields in @data that should be used to update
/// the metadata on @transbuf.
///
/// Returns: %TRUE if the transform could be performed
typedef GstMetaTransformFunction
    = ffi.Pointer<ffi.NativeFunction<GstMetaTransformFunctionFunction>>;
typedef GstMetaTransformFunctionFunction = gboolean Function(
    ffi.Pointer<GstBuffer> transbuf,
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer<GstBuffer> buffer,
    GQuark type,
    ffi.Pointer data);
typedef DartGstMetaTransformFunctionFunction = Dartgint Function(
    ffi.Pointer<GstBuffer> transbuf,
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer<GstBuffer> buffer,
    Dartguint32 type,
    ffi.Pointer data);

/// GstMetaSerializeFunction:
/// @meta: a #GstMeta
/// @data: #GstByteArrayInterface to append serialization data
/// @version: (out): version of the serialization format
///
/// Serialize @meta into a format that can be stored or transmitted and later
/// deserialized by #GstMetaDeserializeFunction.
///
/// By default version is set to 0, it should be bumped if incompatible changes
/// are made to the format so %GstMetaDeserializeFunction can deserialize each
/// version.
///
/// Returns: %TRUE on success, %FALSE otherwise.
///
/// Since: 1.24
typedef GstMetaSerializeFunction
    = ffi.Pointer<ffi.NativeFunction<GstMetaSerializeFunctionFunction>>;
typedef GstMetaSerializeFunctionFunction = gboolean Function(
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer<GstByteArrayInterface> data,
    ffi.Pointer<guint8> version);
typedef DartGstMetaSerializeFunctionFunction = Dartgint Function(
    ffi.Pointer<GstMeta> meta,
    ffi.Pointer<GstByteArrayInterface> data,
    ffi.Pointer<guint8> version);

/// GstMetaDeserializeFunction:
/// @info: #GstMetaInfo of the meta
/// @buffer: a #GstBuffer
/// @data: data obtained from #GstMetaSerializeFunction
/// @size: size of data to avoid buffer overflow
///
/// Recreate a #GstMeta from serialized data returned by
/// #GstMetaSerializeFunction and add it to @buffer.
///
/// Returns: (transfer none) (nullable): the metadata owned by @buffer, or %NULL.
///
/// Since: 1.24
typedef GstMetaDeserializeFunction
    = ffi.Pointer<ffi.NativeFunction<GstMetaDeserializeFunctionFunction>>;
typedef GstMetaDeserializeFunctionFunction = ffi.Pointer<GstMeta> Function(
    ffi.Pointer<GstMetaInfo1> info,
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<guint8> data,
    gsize size,
    guint8 version);
typedef DartGstMetaDeserializeFunctionFunction = ffi.Pointer<GstMeta> Function(
    ffi.Pointer<GstMetaInfo1> info,
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<guint8> data,
    Dartgsize size,
    Dartguint8 version);
typedef GstMetaInfo1 = _GstMetaInfo;

/// GstMetaClearFunction:
/// @buffer: a #GstBuffer
/// @meta: a #GstMeta
///
/// Clears the content of the meta. This will be called by the GstBufferPool
/// when a pooled buffer is returned.
///
/// Since: 1.24
typedef GstMetaClearFunction
    = ffi.Pointer<ffi.NativeFunction<GstMetaClearFunctionFunction>>;
typedef GstMetaClearFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstBuffer> buffer, ffi.Pointer<GstMeta> meta);
typedef DartGstMetaClearFunctionFunction = void Function(
    ffi.Pointer<GstBuffer> buffer, ffi.Pointer<GstMeta> meta);

/// GstCustomMeta:
/// @meta: parent #GstMeta
/// @structure: a #GstStructure containing custom metadata. (Since: 1.24)
///
/// Extra custom metadata. The @structure field is the same as returned by
/// gst_custom_meta_get_structure().
///
/// Since 1.24 it can be serialized using gst_meta_serialize() and
/// gst_meta_deserialize(), but only if the #GstStructure does not contain any
/// fields that cannot be serialized, see %GST_SERIALIZE_FLAG_STRICT.
///
/// Since: 1.20
final class GstCustomMeta extends ffi.Struct {
  external GstMeta meta;

  external ffi.Pointer<GstStructure> structure;
}

/// GstMetaTransformCopy:
/// @region: %TRUE if only region is copied
/// @offset: the offset to copy, 0 if @region is %FALSE, otherwise > 0
/// @size: the size to copy, -1 or the buffer size when @region is %FALSE
///
/// Extra data passed to a "gst-copy" transform #GstMetaTransformFunction.
final class GstMetaTransformCopy extends ffi.Struct {
  @gboolean()
  external int region;

  @gsize()
  external int offset;

  @gsize()
  external int size;
}

/// GstCustomMetaTransformFunction:
/// @transbuf: a #GstBuffer
/// @meta: a #GstCustomMeta
/// @buffer: a #GstBuffer
/// @type: the transform type
/// @data: transform specific data.
/// @user_data: user data passed when registering the meta
///
/// Function called for each @meta in @buffer as a result of performing a
/// transformation that yields @transbuf. Additional @type specific transform
/// data is passed to the function as @data.
///
/// Implementations should check the @type of the transform and parse
/// additional type specific fields in @data that should be used to update
/// the metadata on @transbuf.
///
/// Returns: %TRUE if the transform could be performed
/// Since: 1.20
typedef GstCustomMetaTransformFunction
    = ffi.Pointer<ffi.NativeFunction<GstCustomMetaTransformFunctionFunction>>;
typedef GstCustomMetaTransformFunctionFunction = gboolean Function(
    ffi.Pointer<GstBuffer> transbuf,
    ffi.Pointer<GstCustomMeta> meta,
    ffi.Pointer<GstBuffer> buffer,
    GQuark type,
    ffi.Pointer data,
    ffi.Pointer user_data);
typedef DartGstCustomMetaTransformFunctionFunction = Dartgint Function(
    ffi.Pointer<GstBuffer> transbuf,
    ffi.Pointer<GstCustomMeta> meta,
    ffi.Pointer<GstBuffer> buffer,
    Dartguint32 type,
    ffi.Pointer data,
    ffi.Pointer user_data);

/// GstBufferFlags:
/// @GST_BUFFER_FLAG_LIVE:          the buffer is live data and should be discarded in
/// the PAUSED state.
/// @GST_BUFFER_FLAG_DECODE_ONLY:   the buffer contains data that should be dropped
/// because it will be clipped against the segment
/// boundaries or because it does not contain data
/// that should be shown to the user.
/// @GST_BUFFER_FLAG_DISCONT:       the buffer marks a data discontinuity in the stream.
/// This typically occurs after a seek or a dropped buffer
/// from a live or network source.
/// @GST_BUFFER_FLAG_RESYNC:        the buffer timestamps might have a discontinuity
/// and this buffer is a good point to resynchronize.
/// @GST_BUFFER_FLAG_CORRUPTED:     the buffer data is corrupted.
/// @GST_BUFFER_FLAG_MARKER:        the buffer contains a media specific marker. for
/// video this is the end of a frame boundary, for audio
/// this is the start of a talkspurt. for RTP
/// packets this matches the marker flag in the
/// RTP packet header.
/// @GST_BUFFER_FLAG_HEADER:        the buffer contains header information that is
/// needed to decode the following data.
/// @GST_BUFFER_FLAG_GAP:           the buffer has been created to fill a gap in the
/// stream and contains media neutral data (elements can
/// switch to optimized code path that ignores the buffer
/// content).
/// @GST_BUFFER_FLAG_DROPPABLE:     the buffer can be dropped without breaking the
/// stream, for example to reduce bandwidth.
/// @GST_BUFFER_FLAG_DELTA_UNIT:    this unit cannot be decoded independently.
/// @GST_BUFFER_FLAG_TAG_MEMORY:    this flag is set when memory of the buffer
/// is added/removed
/// @GST_BUFFER_FLAG_LAST:          additional media specific flags can be added starting from
/// this flag.
///
/// A set of buffer flags used to describe properties of a #GstBuffer.
abstract class GstBufferFlags {
  static const int GST_BUFFER_FLAG_LIVE = 16;
  static const int GST_BUFFER_FLAG_DECODE_ONLY = 32;
  static const int GST_BUFFER_FLAG_DISCONT = 64;
  static const int GST_BUFFER_FLAG_RESYNC = 128;
  static const int GST_BUFFER_FLAG_CORRUPTED = 256;
  static const int GST_BUFFER_FLAG_MARKER = 512;
  static const int GST_BUFFER_FLAG_HEADER = 1024;
  static const int GST_BUFFER_FLAG_GAP = 2048;
  static const int GST_BUFFER_FLAG_DROPPABLE = 4096;
  static const int GST_BUFFER_FLAG_DELTA_UNIT = 8192;
  static const int GST_BUFFER_FLAG_TAG_MEMORY = 16384;

  /// GST_BUFFER_FLAG_SYNC_AFTER:
  ///
  /// Elements which write to disk or permanent storage should ensure the data
  /// is synced after writing the contents of this buffer.
  ///
  /// Since: 1.6
  static const int GST_BUFFER_FLAG_SYNC_AFTER = 32768;

  /// GST_BUFFER_FLAG_NON_DROPPABLE:
  ///
  /// This buffer is important and should not be dropped.
  ///
  /// This can be used to mark important buffers, e.g. to flag RTP packets
  /// carrying keyframes or codec setup data for RTP Forward Error Correction
  /// purposes, or to prevent still video frames from being dropped by elements
  /// due to QoS.
  ///
  /// Since: 1.14
  static const int GST_BUFFER_FLAG_NON_DROPPABLE = 65536;
  static const int GST_BUFFER_FLAG_LAST = 1048576;
}

/// GstBufferCopyFlags:
/// @GST_BUFFER_COPY_NONE: copy nothing
/// @GST_BUFFER_COPY_FLAGS: flag indicating that buffer flags should be copied
/// @GST_BUFFER_COPY_TIMESTAMPS: flag indicating that buffer pts, dts,
/// duration, offset and offset_end should be copied
/// @GST_BUFFER_COPY_MEMORY: flag indicating that buffer memory should be reffed
/// and appended to already existing memory. Unless the memory is marked as
/// NO_SHARE, no actual copy of the memory is made but it is simply reffed.
/// Add @GST_BUFFER_COPY_DEEP to force a real copy.
/// @GST_BUFFER_COPY_MERGE: flag indicating that buffer memory should be
/// merged
/// @GST_BUFFER_COPY_META: flag indicating that buffer meta should be
/// copied
///
/// A set of flags that can be provided to the gst_buffer_copy_into()
/// function to specify which items should be copied.
abstract class GstBufferCopyFlags {
  static const int GST_BUFFER_COPY_NONE = 0;
  static const int GST_BUFFER_COPY_FLAGS = 1;
  static const int GST_BUFFER_COPY_TIMESTAMPS = 2;
  static const int GST_BUFFER_COPY_META = 4;
  static const int GST_BUFFER_COPY_MEMORY = 8;
  static const int GST_BUFFER_COPY_MERGE = 16;

  /// GST_BUFFER_COPY_DEEP:
  ///
  /// flag indicating that memory should always be copied instead of reffed
  ///
  /// Since: 1.2
  static const int GST_BUFFER_COPY_DEEP = 32;
}

/// GstBufferForeachMetaFunc:
/// @buffer: a #GstBuffer
/// @meta: (out) (nullable): a pointer to a #GstMeta
/// @user_data: user data passed to gst_buffer_foreach_meta()
///
/// A function that will be called from gst_buffer_foreach_meta(). The @meta
/// field will point to a the reference of the meta.
///
/// @buffer should not be modified from this callback.
///
/// When this function returns %TRUE, the next meta will be
/// returned. When %FALSE is returned, gst_buffer_foreach_meta() will return.
///
/// When @meta is set to %NULL, the item will be removed from the buffer.
///
/// Returns: %FALSE when gst_buffer_foreach_meta() should stop
typedef GstBufferForeachMetaFunc
    = ffi.Pointer<ffi.NativeFunction<GstBufferForeachMetaFuncFunction>>;
typedef GstBufferForeachMetaFuncFunction = gboolean Function(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<ffi.Pointer<GstMeta>> meta,
    ffi.Pointer user_data);
typedef DartGstBufferForeachMetaFuncFunction = Dartgint Function(
    ffi.Pointer<GstBuffer> buffer,
    ffi.Pointer<ffi.Pointer<GstMeta>> meta,
    ffi.Pointer user_data);

/// GstParentBufferMeta:
/// @parent: the parent #GstMeta structure
/// @buffer: the #GstBuffer on which a reference is being held.
///
/// The #GstParentBufferMeta is a #GstMeta which can be attached to a #GstBuffer
/// to hold a reference to another buffer that is only released when the child
/// #GstBuffer is released.
///
/// Typically, #GstParentBufferMeta is used when the child buffer is directly
/// using the #GstMemory of the parent buffer, and wants to prevent the parent
/// buffer from being returned to a buffer pool until the #GstMemory is available
/// for re-use.
///
/// Since: 1.6
final class _GstParentBufferMeta extends ffi.Struct {
  external GstMeta parent;

  external ffi.Pointer<GstBuffer> buffer;
}

typedef GstParentBufferMeta = _GstParentBufferMeta;

/// GstReferenceTimestampMeta:
/// @parent: the parent #GstMeta structure
/// @reference: identifier for the timestamp reference.
/// @timestamp: timestamp
/// @duration: duration, or %GST_CLOCK_TIME_NONE
///
/// #GstReferenceTimestampMeta can be used to attach alternative timestamps and
/// possibly durations to a #GstBuffer. These are generally not according to
/// the pipeline clock and could be e.g. the NTP timestamp when the media was
/// captured.
///
/// The reference is stored as a #GstCaps in @reference. Examples of valid
/// references would be
///
/// * `timestamp/x-drivername-stream`: for timestamps that are locally
/// generated by some driver named `drivername` when generating the stream,
/// e.g. based on a frame counter
/// * `timestamp/x-ntp, host=pool.ntp.org, port=123`: for timestamps based on a
/// specific NTP server. Note that the host/port parameters might not always
/// be given.
/// * `timestamp/x-ptp, version=IEEE1588-2008, domain=1`: for timestamps based
/// on a given PTP clock.
/// * `timestamp/x-unix`: for timestamps based on the UNIX epoch according to
/// the local clock.
///
/// Since 1.24 it can be serialized using gst_meta_serialize() and
/// gst_meta_deserialize().
///
/// Since: 1.14
final class _GstReferenceTimestampMeta extends ffi.Struct {
  external GstMeta parent;

  external ffi.Pointer<GstCaps> reference;

  @GstClockTime()
  external int timestamp;

  @GstClockTime()
  external int duration;
}

typedef GstReferenceTimestampMeta = _GstReferenceTimestampMeta;

final class _GstBufferList extends ffi.Opaque {}

typedef GstBufferList = _GstBufferList;

/// GstBufferListFunc:
/// @buffer: (out) (nullable): pointer to the buffer
/// @idx: the index of @buffer
/// @user_data: user data passed to gst_buffer_list_foreach()
///
/// A function that will be called from gst_buffer_list_foreach(). The @buffer
/// field will point to a the reference of the buffer at @idx.
///
/// When this function returns %TRUE, the next buffer will be
/// returned. When %FALSE is returned, gst_buffer_list_foreach() will return.
///
/// When @buffer is set to %NULL, the item will be removed from the bufferlist.
/// When @buffer has been made writable, the new buffer reference can be assigned
/// to @buffer. This function is responsible for unreffing the old buffer when
/// removing or modifying.
///
/// Returns: %FALSE when gst_buffer_list_foreach() should stop
typedef GstBufferListFunc
    = ffi.Pointer<ffi.NativeFunction<GstBufferListFuncFunction>>;
typedef GstBufferListFuncFunction = gboolean Function(
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
    guint idx,
    ffi.Pointer user_data);
typedef DartGstBufferListFuncFunction = Dartgint Function(
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
    Dartguint idx,
    ffi.Pointer user_data);

final class _GstPadTemplateClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstPadTemplate> templ, ffi.Pointer<GstPad> pad)>>
      pad_created;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstStaticPadTemplate:
/// @name_template: the name of the template
/// @direction: the direction of the template
/// @presence: the presence of the template
/// @static_caps: the caps of the template.
///
/// Structure describing the #GstStaticPadTemplate.
final class _GstStaticPadTemplate extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name_template;

  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int presence;

  external GstStaticCaps static_caps;
}

/// GstEventTypeFlags:
/// @GST_EVENT_TYPE_UPSTREAM:     Set if the event can travel upstream.
/// @GST_EVENT_TYPE_DOWNSTREAM:   Set if the event can travel downstream.
/// @GST_EVENT_TYPE_SERIALIZED:   Set if the event should be serialized with data
/// flow.
/// @GST_EVENT_TYPE_STICKY:       Set if the event is sticky on the pads.
/// @GST_EVENT_TYPE_STICKY_MULTI: Multiple sticky events can be on a pad, each
/// identified by the event name.
///
/// #GstEventTypeFlags indicate the aspects of the different #GstEventType
/// values. You can get the type flags of a #GstEventType with the
/// gst_event_type_get_flags() function.
abstract class GstEventTypeFlags {
  static const int GST_EVENT_TYPE_UPSTREAM = 1;
  static const int GST_EVENT_TYPE_DOWNSTREAM = 2;
  static const int GST_EVENT_TYPE_SERIALIZED = 4;
  static const int GST_EVENT_TYPE_STICKY = 8;
  static const int GST_EVENT_TYPE_STICKY_MULTI = 16;
}

/// GstStreamFlags:
/// @GST_STREAM_FLAG_NONE: This stream has no special attributes
/// @GST_STREAM_FLAG_SPARSE: This stream is a sparse stream (e.g. a subtitle
/// stream), data may flow only in irregular intervals with large gaps in
/// between.
/// @GST_STREAM_FLAG_SELECT: This stream should be selected by default. This
/// flag may be used by demuxers to signal that a stream should be selected
/// by default in a playback scenario.
/// @GST_STREAM_FLAG_UNSELECT: This stream should not be selected by default.
/// This flag may be used by demuxers to signal that a stream should not
/// be selected by default in a playback scenario, but only if explicitly
/// selected by the user (e.g. an audio track for the hard of hearing or
/// a director's commentary track).
///
/// Since: 1.2
abstract class GstStreamFlags {
  static const int GST_STREAM_FLAG_NONE = 0;
  static const int GST_STREAM_FLAG_SPARSE = 1;
  static const int GST_STREAM_FLAG_SELECT = 2;
  static const int GST_STREAM_FLAG_UNSELECT = 4;
}

/// GstIteratorResult:
/// @GST_ITERATOR_DONE:   No more items in the iterator
/// @GST_ITERATOR_OK:     An item was retrieved
/// @GST_ITERATOR_RESYNC: Datastructure changed while iterating
/// @GST_ITERATOR_ERROR:  An error happened
///
/// The result of gst_iterator_next().
abstract class GstIteratorResult {
  static const int GST_ITERATOR_DONE = 0;
  static const int GST_ITERATOR_OK = 1;
  static const int GST_ITERATOR_RESYNC = 2;
  static const int GST_ITERATOR_ERROR = 3;
}

/// GstIterator:
/// @copy: The function to copy the iterator
/// @next: The function to get the next item in the iterator
/// @item: The function to be called for each item retrieved
/// @resync: The function to call when a resync is needed.
/// @free: The function to call when the iterator is freed
/// @pushed: The iterator that is currently pushed with gst_iterator_push()
/// @type: The type of the object that this iterator will return
/// @lock: The lock protecting the data structure and the cookie.
/// @cookie: The cookie; the value of the master_cookie when this iterator was
/// created.
/// @master_cookie: A pointer to the master cookie.
/// @size: the size of the iterator
///
/// #GstIterator base structure. The values of this structure are
/// protected for subclasses, use the methods to use the #GstIterator.
final class _GstIterator extends ffi.Struct {
  external GstIteratorCopyFunction copy;

  external GstIteratorNextFunction next;

  external GstIteratorItemFunction item;

  external GstIteratorResyncFunction resync;

  external GstIteratorFreeFunction free;

  external ffi.Pointer<GstIterator> pushed;

  @GType()
  external int type;

  external ffi.Pointer<GMutex> lock;

  @guint32()
  external int cookie;

  external ffi.Pointer<guint32> master_cookie;

  @guint()
  external int size;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstIteratorCopyFunction:
/// @it: The original iterator
/// @copy: The copied iterator
///
/// This function will be called when creating a copy of @it and should
/// create a copy of all custom iterator fields or increase their
/// reference counts.
typedef GstIteratorCopyFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorCopyFunctionFunction>>;
typedef GstIteratorCopyFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstIterator> it, ffi.Pointer<GstIterator> copy);
typedef DartGstIteratorCopyFunctionFunction = void Function(
    ffi.Pointer<GstIterator> it, ffi.Pointer<GstIterator> copy);
typedef GstIterator = _GstIterator;

/// GstIteratorNextFunction:
/// @it: the iterator
/// @result: a pointer to hold the next item
///
/// The function that will be called when the next element of the iterator
/// should be retrieved.
///
/// Implementors of a #GstIterator should implement this
/// function and pass it to the constructor of the custom iterator.
/// The function will be called with the iterator lock held.
///
/// Returns: the result of the operation.
typedef GstIteratorNextFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorNextFunctionFunction>>;
typedef GstIteratorNextFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstIterator> it, ffi.Pointer<GValue> result);
typedef DartGstIteratorNextFunctionFunction = int Function(
    ffi.Pointer<GstIterator> it, ffi.Pointer<GValue> result);

/// GstIteratorItemFunction:
/// @it: the iterator
/// @item: the item being retrieved.
///
/// The function that will be called after the next item of the iterator
/// has been retrieved. This function can be used to skip items or stop
/// the iterator.
///
/// The function will be called with the iterator lock held.
///
/// Returns: the result of the operation.
typedef GstIteratorItemFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorItemFunctionFunction>>;
typedef GstIteratorItemFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstIterator> it, ffi.Pointer<GValue> item);
typedef DartGstIteratorItemFunctionFunction = int Function(
    ffi.Pointer<GstIterator> it, ffi.Pointer<GValue> item);

/// GstIteratorItem:
/// @GST_ITERATOR_ITEM_SKIP:  Skip this item
/// @GST_ITERATOR_ITEM_PASS:  Return item
/// @GST_ITERATOR_ITEM_END:   Stop after this item.
///
/// The result of a #GstIteratorItemFunction.
abstract class GstIteratorItem {
  static const int GST_ITERATOR_ITEM_SKIP = 0;
  static const int GST_ITERATOR_ITEM_PASS = 1;
  static const int GST_ITERATOR_ITEM_END = 2;
}

/// GstIteratorResyncFunction:
/// @it: the iterator
///
/// This function will be called whenever a concurrent update happened
/// to the iterated datastructure. The implementor of the iterator should
/// restart the iterator from the beginning and clean up any state it might
/// have.
///
/// Implementors of a #GstIterator should implement this
/// function and pass it to the constructor of the custom iterator.
/// The function will be called with the iterator lock held.
typedef GstIteratorResyncFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorResyncFunctionFunction>>;
typedef GstIteratorResyncFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstIterator> it);
typedef DartGstIteratorResyncFunctionFunction = void Function(
    ffi.Pointer<GstIterator> it);

/// GstIteratorFreeFunction:
/// @it: the iterator
///
/// This function will be called when the iterator is freed.
///
/// Implementors of a #GstIterator should implement this
/// function and pass it to the constructor of the custom iterator.
/// The function will be called with the iterator lock held.
typedef GstIteratorFreeFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorFreeFunctionFunction>>;
typedef GstIteratorFreeFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstIterator> it);
typedef DartGstIteratorFreeFunctionFunction = void Function(
    ffi.Pointer<GstIterator> it);
typedef GstIterator1 = _GstIterator;

/// GstIteratorFoldFunction:
/// @item: the item to fold
/// @ret: a #GValue collecting the result
/// @user_data: data passed to gst_iterator_fold()
///
/// A function to be passed to gst_iterator_fold().
///
/// Returns: %TRUE if the fold should continue, %FALSE if it should stop.
typedef GstIteratorFoldFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorFoldFunctionFunction>>;
typedef GstIteratorFoldFunctionFunction = gboolean Function(
    ffi.Pointer<GValue> item, ffi.Pointer<GValue> ret, ffi.Pointer user_data);
typedef DartGstIteratorFoldFunctionFunction = Dartgint Function(
    ffi.Pointer<GValue> item, ffi.Pointer<GValue> ret, ffi.Pointer user_data);

/// GstIteratorForeachFunction:
/// @item: The item
/// @user_data: User data
///
/// A function that is called by gst_iterator_foreach() for every element.
typedef GstIteratorForeachFunction
    = ffi.Pointer<ffi.NativeFunction<GstIteratorForeachFunctionFunction>>;
typedef GstIteratorForeachFunctionFunction = ffi.Void Function(
    ffi.Pointer<GValue> item, ffi.Pointer user_data);
typedef DartGstIteratorForeachFunctionFunction = void Function(
    ffi.Pointer<GValue> item, ffi.Pointer user_data);

/// GstFormat:
/// @GST_FORMAT_UNDEFINED: undefined format
/// @GST_FORMAT_DEFAULT: the default format of the pad/element. This can be
/// samples for raw audio, frames/fields for raw video (some, but not all,
/// elements support this; use @GST_FORMAT_TIME if you don't have a good
/// reason to query for samples/frames)
/// @GST_FORMAT_BYTES: bytes
/// @GST_FORMAT_TIME: time in nanoseconds
/// @GST_FORMAT_BUFFERS: buffers (few, if any, elements implement this as of
/// May 2009)
/// @GST_FORMAT_PERCENT: percentage of stream (few, if any, elements implement
/// this as of May 2009)
///
/// Standard predefined formats
abstract class GstFormat {
  static const int GST_FORMAT_UNDEFINED = 0;
  static const int GST_FORMAT_DEFAULT = 1;
  static const int GST_FORMAT_BYTES = 2;
  static const int GST_FORMAT_TIME = 3;
  static const int GST_FORMAT_BUFFERS = 4;
  static const int GST_FORMAT_PERCENT = 5;
}

/// GstFormatDefinition:
/// @value: The unique id of this format
/// @nick: A short nick of the format
/// @description: A longer description of the format
/// @quark: A quark for the nick
///
/// A format definition
final class _GstFormatDefinition extends ffi.Struct {
  @ffi.Int32()
  external int value;

  external ffi.Pointer<ffi.Char> nick;

  external ffi.Pointer<ffi.Char> description;

  @GQuark()
  external int quark;
}

typedef GstFormatDefinition = _GstFormatDefinition;

/// GstSegment:
/// @flags:        flags for this segment
/// @rate:         the playback rate of the segment is set in response to a seek
/// event and, without any seek, the value should be `1.0`. This
/// value is used by elements that synchronize buffer [running
/// times](additional/design/synchronisation.md#running-time) on
/// the clock (usually the sink elements), leading to consuming
/// buffers faster (for a value `> 1.0`) or slower (for `0.0 <
/// value < 1.0`) than normal playback speed. The rate also
/// defines the playback direction, meaning that when the value is
/// lower than `0.0`, the playback happens in reverse, and the
/// [stream-time](additional/design/synchronisation.md#stream-time)
/// is going backward. The `rate` value should never be `0.0`.
/// @applied_rate: The applied rate is the rate that has been applied to the stream.
/// The effective/resulting playback rate of a stream is
/// `rate * applied_rate`.
/// The applied rate can be set by source elements when a server is
/// sending the stream with an already modified playback speed
/// rate. Filter elements that modify the stream in a way that
/// modifies the playback speed should also modify the applied
/// rate. For example the #videorate element when its
/// #videorate:rate property is set will set the applied rate of
/// the segment it pushed downstream. Also #scaletempo applies the
/// input segment rate to the stream and outputs a segment with
/// rate=1.0 and applied_rate=<inputsegment.rate>.
/// @format:       the unit used for all of the segment's values.
/// @base:         the running time (plus elapsed time, see offset) of the
/// segment [start](GstSegment.start) ([stop](GstSegment.stop) if
/// rate < 0.0).
/// @offset:       the offset expresses the elapsed time (in buffer timestamps)
/// before a seek with its start (stop if rate < 0.0) seek type
/// set to #GST_SEEK_TYPE_NONE, the value is set to the position
/// of the segment at the time of the seek.
/// @start:        the start time of the segment (in buffer timestamps)
/// [(PTS)](GstBuffer.pts), that is the timestamp of the first
/// buffer to output inside the segment (last one during
/// reverse playback). For example decoders will
/// [clip](gst_segment_clip) out the buffers before the start
/// time.
/// @stop:         the stop time of the segment (in buffer timestamps)
/// [(PTS)](GstBuffer.pts), that is the timestamp of the last
/// buffer to output inside the segment (first one during
/// reverse playback). For example decoders will
/// [clip](gst_segment_clip) out buffers after the stop time.
/// @time:         the stream time of the segment [start](GstSegment.start)
/// ([stop](GstSegment.stop) if rate < 0.0).
/// @position:     the buffer timestamp position in the segment is supposed to be
/// updated by elements such as sources, demuxers or parsers to
/// track progress by setting it to the last pushed buffer' end time
/// ([timestamp](GstBuffer.pts) + #GstBuffer.duration) for that
/// specific segment. The position is used when reconfiguring the
/// segment with #gst_segment_do_seek when the seek is only
/// updating the segment (see [offset](GstSegment.offset)).
/// @duration:     the duration of the segment is the maximum absolute difference
/// between #GstSegment.start and #GstSegment.stop if stop is not
/// set, otherwise it should be the difference between those
/// two values. This should be set by elements that know the
/// overall stream duration (like demuxers) and will be used when
/// seeking with #GST_SEEK_TYPE_END.
///
/// The structure that holds the configured region of interest in a media file.
final class _GstSegment extends ffi.Struct {
  @ffi.Int32()
  external int flags;

  @gdouble()
  external double rate;

  @gdouble()
  external double applied_rate;

  @ffi.Int32()
  external int format;

  @guint64()
  external int base;

  @guint64()
  external int offset;

  @guint64()
  external int start;

  @guint64()
  external int stop;

  @guint64()
  external int time;

  @guint64()
  external int position;

  @guint64()
  external int duration;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstSegmentFlags:
/// @GST_SEGMENT_FLAG_NONE: no flags
/// @GST_SEGMENT_FLAG_RESET: reset the pipeline running_time to the segment
/// running_time
/// @GST_SEGMENT_FLAG_TRICKMODE: perform skip playback (Since: 1.6)
/// @GST_SEGMENT_FLAG_SEGMENT: send SEGMENT_DONE instead of EOS
/// @GST_SEGMENT_FLAG_TRICKMODE_KEY_UNITS: Decode only keyframes, where
/// possible (Since: 1.6)
/// @GST_SEGMENT_FLAG_TRICKMODE_FORWARD_PREDICTED: Decode only keyframes or forward
/// predicted frames, where possible (Since: 1.18)
/// @GST_SEGMENT_FLAG_TRICKMODE_NO_AUDIO: Do not decode any audio, where
/// possible (Since: 1.6)
/// @GST_SEGMENT_FLAG_SKIP: Deprecated backward compatibility flag, replaced
/// by @GST_SEGMENT_FLAG_TRICKMODE
///
/// Flags for the GstSegment structure. Currently mapped to the corresponding
/// values of the seek flags.
abstract class GstSegmentFlags {
  static const int GST_SEGMENT_FLAG_NONE = 0;
  static const int GST_SEGMENT_FLAG_RESET = 1;
  static const int GST_SEGMENT_FLAG_TRICKMODE = 16;
  static const int GST_SEGMENT_FLAG_SKIP = 16;
  static const int GST_SEGMENT_FLAG_SEGMENT = 8;
  static const int GST_SEGMENT_FLAG_TRICKMODE_KEY_UNITS = 128;
  static const int GST_SEGMENT_FLAG_TRICKMODE_FORWARD_PREDICTED = 512;
  static const int GST_SEGMENT_FLAG_TRICKMODE_NO_AUDIO = 256;
}

/// GstSeekType:
/// @GST_SEEK_TYPE_NONE: no change in position is required
/// @GST_SEEK_TYPE_SET: absolute position is requested
/// @GST_SEEK_TYPE_END: relative position to duration is requested
///
/// The different types of seek events. When constructing a seek event with
/// gst_event_new_seek() or when doing gst_segment_do_seek ().
abstract class GstSeekType {
  static const int GST_SEEK_TYPE_NONE = 0;
  static const int GST_SEEK_TYPE_SET = 1;
  static const int GST_SEEK_TYPE_END = 2;
}

/// GstSeekFlags:
/// @GST_SEEK_FLAG_NONE: no flag
/// @GST_SEEK_FLAG_FLUSH: flush pipeline
/// @GST_SEEK_FLAG_ACCURATE: accurate position is requested, this might
/// be considerably slower for some formats.
/// @GST_SEEK_FLAG_KEY_UNIT: seek to the nearest keyframe. This might be
/// faster but less accurate.
/// @GST_SEEK_FLAG_SEGMENT: perform a segment seek.
/// @GST_SEEK_FLAG_TRICKMODE: when doing fast forward or fast reverse playback, allow
/// elements to skip frames instead of generating all
/// frames. (Since: 1.6)
/// @GST_SEEK_FLAG_SNAP_BEFORE: go to a location before the requested position,
/// if %GST_SEEK_FLAG_KEY_UNIT this means the keyframe at or before
/// the requested position the one at or before the seek target.
/// @GST_SEEK_FLAG_SNAP_AFTER: go to a location after the requested position,
/// if %GST_SEEK_FLAG_KEY_UNIT this means the keyframe at of after the
/// requested position.
/// @GST_SEEK_FLAG_SNAP_NEAREST: go to a position near the requested position,
/// if %GST_SEEK_FLAG_KEY_UNIT this means the keyframe closest
/// to the requested position, if both keyframes are at an equal
/// distance, behaves like %GST_SEEK_FLAG_SNAP_BEFORE.
/// @GST_SEEK_FLAG_TRICKMODE_KEY_UNITS: when doing fast forward or fast reverse
/// playback, request that elements only decode keyframes
/// and skip all other content, for formats that have
/// keyframes. (Since: 1.6)
/// @GST_SEEK_FLAG_TRICKMODE_FORWARD_PREDICTED: When doing fast forward or fast reverse
/// playback, request that elements only decode keyframes and
/// forward predicted frames and skip all other content (for example
/// B-Frames), for formats that have keyframes and forward predicted
/// frames. (Since: 1.18)
/// @GST_SEEK_FLAG_TRICKMODE_NO_AUDIO: when doing fast forward or fast reverse
/// playback, request that audio decoder elements skip
/// decoding and output only gap events or silence. (Since: 1.6)
/// @GST_SEEK_FLAG_INSTANT_RATE_CHANGE: Signals that a rate change should be
/// applied immediately. Only valid if start/stop position
/// are GST_CLOCK_TIME_NONE, the playback direction does not change
/// and the seek is not flushing. (Since: 1.18)
/// @GST_SEEK_FLAG_SKIP: Deprecated backward compatibility flag, replaced
/// by %GST_SEEK_FLAG_TRICKMODE
///
/// Flags to be used with gst_element_seek() or gst_event_new_seek(). All flags
/// can be used together.
///
/// A non flushing seek might take some time to perform as the currently
/// playing data in the pipeline will not be cleared.
///
/// An accurate seek might be slower for formats that don't have any indexes
/// or timestamp markers in the stream. Specifying this flag might require a
/// complete scan of the file in those cases.
///
/// When performing a segment seek: after the playback of the segment completes,
/// no EOS will be emitted by the element that performed the seek, but a
/// %GST_MESSAGE_SEGMENT_DONE message will be posted on the bus by the element.
/// When this message is posted, it is possible to send a new seek event to
/// continue playback. With this seek method it is possible to perform seamless
/// looping or simple linear editing.
///
/// When only changing the playback rate and not the direction, the
/// %GST_SEEK_FLAG_INSTANT_RATE_CHANGE flag can be used for a non-flushing seek
/// to signal that the rate change should be applied immediately. This requires
/// special support in the seek handlers (e.g. demuxers) and any elements
/// synchronizing to the clock, and in general can't work in all cases (for example
/// UDP streaming where the delivery rate is controlled by a remote server). The
/// instant-rate-change mode supports changing the trickmode-related GST_SEEK_ flags,
/// but can't be used in conjunction with other seek flags that affect the new
/// playback position - as the playback position will not be changing.
///
/// When doing fast forward (rate > 1.0) or fast reverse (rate < -1.0) trickmode
/// playback, the %GST_SEEK_FLAG_TRICKMODE flag can be used to instruct decoders
/// and demuxers to adjust the playback rate by skipping frames. This can improve
/// performance and decrease CPU usage because not all frames need to be decoded.
///
/// Beyond that, the %GST_SEEK_FLAG_TRICKMODE_KEY_UNITS flag can be used to
/// request that decoders skip all frames except key units, and
/// %GST_SEEK_FLAG_TRICKMODE_NO_AUDIO flags can be used to request that audio
/// decoders do no decoding at all, and simple output silence.
///
/// The %GST_SEEK_FLAG_SNAP_BEFORE flag can be used to snap to the previous
/// relevant location, and the %GST_SEEK_FLAG_SNAP_AFTER flag can be used to
/// select the next relevant location. If %GST_SEEK_FLAG_KEY_UNIT is specified,
/// the relevant location is a keyframe. If both flags are specified, the nearest
/// of these locations will be selected. If none are specified, the implementation is
/// free to select whichever it wants.
///
/// The before and after here are in running time, so when playing backwards,
/// the next location refers to the one that will played in next, and not the
/// one that is located after in the actual source stream.
///
/// Also see part-seeking.txt in the GStreamer design documentation for more
/// details on the meaning of these flags and the behaviour expected of
/// elements that handle them.
abstract class GstSeekFlags {
  static const int GST_SEEK_FLAG_NONE = 0;
  static const int GST_SEEK_FLAG_FLUSH = 1;
  static const int GST_SEEK_FLAG_ACCURATE = 2;
  static const int GST_SEEK_FLAG_KEY_UNIT = 4;
  static const int GST_SEEK_FLAG_SEGMENT = 8;
  static const int GST_SEEK_FLAG_TRICKMODE = 16;
  static const int GST_SEEK_FLAG_SKIP = 16;
  static const int GST_SEEK_FLAG_SNAP_BEFORE = 32;
  static const int GST_SEEK_FLAG_SNAP_AFTER = 64;
  static const int GST_SEEK_FLAG_SNAP_NEAREST = 96;
  static const int GST_SEEK_FLAG_TRICKMODE_KEY_UNITS = 128;
  static const int GST_SEEK_FLAG_TRICKMODE_NO_AUDIO = 256;
  static const int GST_SEEK_FLAG_TRICKMODE_FORWARD_PREDICTED = 512;
  static const int GST_SEEK_FLAG_INSTANT_RATE_CHANGE = 1024;
}

typedef GstSegment = _GstSegment;

final class _GstSample extends ffi.Opaque {}

/// GstSample:
///
/// The opaque structure of a #GstSample. A sample contains a typed memory
/// block and the associated timing information. It is mainly used to
/// exchange buffers with an application.
typedef GstSample = _GstSample;

/// GstTagMergeMode:
/// @GST_TAG_MERGE_UNDEFINED: undefined merge mode
/// @GST_TAG_MERGE_REPLACE_ALL: replace all tags (clear list and append)
/// @GST_TAG_MERGE_REPLACE: replace tags
/// @GST_TAG_MERGE_APPEND: append tags
/// @GST_TAG_MERGE_PREPEND: prepend tags
/// @GST_TAG_MERGE_KEEP: keep existing tags
/// @GST_TAG_MERGE_KEEP_ALL: keep all existing tags
/// @GST_TAG_MERGE_COUNT: the number of merge modes
///
/// The different tag merging modes are basically replace, overwrite and append,
/// but they can be seen from two directions. Given two taglists: (A) the tags
/// already in the element and (B) the ones that are supplied to the element (
/// e.g. via gst_tag_setter_merge_tags() / gst_tag_setter_add_tags() or a
/// %GST_EVENT_TAG), how are these tags merged?
/// In the table below this is shown for the cases that a tag exists in the list
/// (A) or does not exists (!A) and combinations thereof.
///
/// | merge mode  | A + B | A + !B | !A + B | !A + !B |
/// | ----------- | ----- | ------ | ------ | ------- |
/// | REPLACE_ALL | B     | ø      | B      | ø       |
/// | REPLACE     | B     | A      | B      | ø       |
/// | APPEND      | A, B  | A      | B      | ø       |
/// | PREPEND     | B, A  | A      | B      | ø       |
/// | KEEP        | A     | A      | B      | ø       |
/// | KEEP_ALL    | A     | A      | ø      | ø       |
abstract class GstTagMergeMode {
  static const int GST_TAG_MERGE_UNDEFINED = 0;
  static const int GST_TAG_MERGE_REPLACE_ALL = 1;
  static const int GST_TAG_MERGE_REPLACE = 2;
  static const int GST_TAG_MERGE_APPEND = 3;
  static const int GST_TAG_MERGE_PREPEND = 4;
  static const int GST_TAG_MERGE_KEEP = 5;
  static const int GST_TAG_MERGE_KEEP_ALL = 6;
  static const int GST_TAG_MERGE_COUNT = 7;
}

/// GstTagFlag:
/// @GST_TAG_FLAG_UNDEFINED: undefined flag
/// @GST_TAG_FLAG_META: tag is meta data
/// @GST_TAG_FLAG_ENCODED: tag is encoded
/// @GST_TAG_FLAG_DECODED: tag is decoded
/// @GST_TAG_FLAG_COUNT: number of tag flags
///
/// Extra tag flags used when registering tags.
abstract class GstTagFlag {
  static const int GST_TAG_FLAG_UNDEFINED = 0;
  static const int GST_TAG_FLAG_META = 1;
  static const int GST_TAG_FLAG_ENCODED = 2;
  static const int GST_TAG_FLAG_DECODED = 3;
  static const int GST_TAG_FLAG_COUNT = 4;
}

final class _GstTagList extends ffi.Struct {
  external GstMiniObject mini_object;
}

/// GstTagMergeFunc:
/// @dest: the destination #GValue
/// @src: the source #GValue
///
/// A function for merging multiple values of a tag used when registering
/// tags.
typedef GstTagMergeFunc
    = ffi.Pointer<ffi.NativeFunction<GstTagMergeFuncFunction>>;
typedef GstTagMergeFuncFunction = ffi.Void Function(
    ffi.Pointer<GValue> dest, ffi.Pointer<GValue> src);
typedef DartGstTagMergeFuncFunction = void Function(
    ffi.Pointer<GValue> dest, ffi.Pointer<GValue> src);

/// GstTagScope:
/// @GST_TAG_SCOPE_STREAM: tags specific to this single stream
/// @GST_TAG_SCOPE_GLOBAL: global tags for the complete medium
///
/// GstTagScope specifies if a taglist applies to the complete
/// medium or only to one single stream.
abstract class GstTagScope {
  static const int GST_TAG_SCOPE_STREAM = 0;
  static const int GST_TAG_SCOPE_GLOBAL = 1;
}

/// GstTagList:
/// @mini_object: the parent type
///
/// Object describing tags / metadata.
typedef GstTagList = _GstTagList;

/// GstTagForeachFunc:
/// @list: the #GstTagList
/// @tag: a name of a tag in @list
/// @user_data: user data
///
/// A function that will be called in gst_tag_list_foreach(). The function may
/// not modify the tag list.
typedef GstTagForeachFunc
    = ffi.Pointer<ffi.NativeFunction<GstTagForeachFuncFunction>>;
typedef GstTagForeachFuncFunction = ffi.Void Function(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer user_data);
typedef DartGstTagForeachFuncFunction = void Function(
    ffi.Pointer<GstTagList> list,
    ffi.Pointer<ffi.Char> tag,
    ffi.Pointer user_data);

/// GstQueryTypeFlags:
/// @GST_QUERY_TYPE_UPSTREAM:     Set if the query can travel upstream.
/// @GST_QUERY_TYPE_DOWNSTREAM:   Set if the query can travel downstream.
/// @GST_QUERY_TYPE_SERIALIZED:   Set if the query should be serialized with data
/// flow.
///
/// #GstQueryTypeFlags indicate the aspects of the different #GstQueryType
/// values. You can get the type flags of a #GstQueryType with the
/// gst_query_type_get_flags() function.
abstract class GstQueryTypeFlags {
  static const int GST_QUERY_TYPE_UPSTREAM = 1;
  static const int GST_QUERY_TYPE_DOWNSTREAM = 2;
  static const int GST_QUERY_TYPE_SERIALIZED = 4;
}

/// GstBufferingMode:
/// @GST_BUFFERING_STREAM: a small amount of data is buffered
/// @GST_BUFFERING_DOWNLOAD: the stream is being downloaded
/// @GST_BUFFERING_TIMESHIFT: the stream is being downloaded in a ringbuffer
/// @GST_BUFFERING_LIVE: the stream is a live stream
///
/// The different types of buffering methods.
abstract class GstBufferingMode {
  static const int GST_BUFFERING_STREAM = 0;
  static const int GST_BUFFERING_DOWNLOAD = 1;
  static const int GST_BUFFERING_TIMESHIFT = 2;
  static const int GST_BUFFERING_LIVE = 3;
}

final class _GstTocEntry extends ffi.Opaque {}

final class _GstToc extends ffi.Opaque {}

/// GstTocScope:
/// @GST_TOC_SCOPE_GLOBAL: global TOC representing all selectable options
/// (this is what applications are usually interested in)
/// @GST_TOC_SCOPE_CURRENT: TOC for the currently active/selected stream
/// (this is a TOC representing the current stream from start to EOS,
/// and is what a TOC writer / muxer is usually interested in; it will
/// usually be a subset of the global TOC, e.g. just the chapters of
/// the current title, or the chapters selected for playback from the
/// current title)
///
/// The scope of a TOC.
abstract class GstTocScope {
  static const int GST_TOC_SCOPE_GLOBAL = 1;
  static const int GST_TOC_SCOPE_CURRENT = 2;
}

/// GstTocEntryType:
/// @GST_TOC_ENTRY_TYPE_ANGLE: entry is an angle (i.e. an alternative)
/// @GST_TOC_ENTRY_TYPE_VERSION: entry is a version (i.e. alternative)
/// @GST_TOC_ENTRY_TYPE_EDITION: entry is an edition (i.e. alternative)
/// @GST_TOC_ENTRY_TYPE_INVALID: invalid entry type value
/// @GST_TOC_ENTRY_TYPE_TITLE: entry is a title (i.e. a part of a sequence)
/// @GST_TOC_ENTRY_TYPE_TRACK: entry is a track (i.e. a part of a sequence)
/// @GST_TOC_ENTRY_TYPE_CHAPTER: entry is a chapter (i.e. a part of a sequence)
///
/// The different types of TOC entries (see #GstTocEntry).
///
/// There are two types of TOC entries: alternatives or parts in a sequence.
abstract class GstTocEntryType {
  static const int GST_TOC_ENTRY_TYPE_ANGLE = -3;
  static const int GST_TOC_ENTRY_TYPE_VERSION = -2;
  static const int GST_TOC_ENTRY_TYPE_EDITION = -1;
  static const int GST_TOC_ENTRY_TYPE_INVALID = 0;
  static const int GST_TOC_ENTRY_TYPE_TITLE = 1;
  static const int GST_TOC_ENTRY_TYPE_TRACK = 2;
  static const int GST_TOC_ENTRY_TYPE_CHAPTER = 3;
}

/// GstTocLoopType:
/// @GST_TOC_LOOP_NONE: single forward playback
/// @GST_TOC_LOOP_FORWARD: repeat forward
/// @GST_TOC_LOOP_REVERSE: repeat backward
/// @GST_TOC_LOOP_PING_PONG: repeat forward and backward
///
/// How a #GstTocEntry should be repeated. By default, entries are played a
/// single time.
///
/// Since: 1.4
abstract class GstTocLoopType {
  static const int GST_TOC_LOOP_NONE = 0;
  static const int GST_TOC_LOOP_FORWARD = 1;
  static const int GST_TOC_LOOP_REVERSE = 2;
  static const int GST_TOC_LOOP_PING_PONG = 3;
}

typedef GstToc = _GstToc;
typedef GstTocEntry = _GstTocEntry;

/// GstSchedulingFlags:
/// @GST_SCHEDULING_FLAG_SEEKABLE: if seeking is possible
/// @GST_SCHEDULING_FLAG_SEQUENTIAL: if sequential access is recommended
/// @GST_SCHEDULING_FLAG_BANDWIDTH_LIMITED: if bandwidth is limited and buffering possible (since 1.2)
///
/// The different scheduling flags.
abstract class GstSchedulingFlags {
  static const int GST_SCHEDULING_FLAG_SEEKABLE = 1;
  static const int GST_SCHEDULING_FLAG_SEQUENTIAL = 2;
  static const int GST_SCHEDULING_FLAG_BANDWIDTH_LIMITED = 4;
}

/// GstDevice:
/// @parent: The parent #GstObject structure.
///
/// A device object.
///
/// Since: 1.4
final class _GstDevice extends ffi.Struct {
  external GstObject parent;

  external ffi.Pointer<GstDevicePrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstDevicePrivate = _GstDevicePrivate;

final class _GstDevicePrivate extends ffi.Opaque {}

/// GstDeviceClass:
/// @parent_class: The parent #GstObjectClass structure.
/// @create_element: Creates the fully configured element to access this device.
/// Subclasses need to override this and return a new element.
/// @reconfigure_element: This only needs to be implemented by subclasses if the
/// element can be reconfigured to use a different device. See the documentation
/// for gst_device_reconfigure_element().
///
/// The class structure for a #GstDevice object.
///
/// Since: 1.4
final class _GstDeviceClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GstElement> Function(
                  ffi.Pointer<GstDevice> device, ffi.Pointer<ffi.Char> name)>>
      create_element;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstDevice> device,
              ffi.Pointer<GstElement> element)>> reconfigure_element;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstDevice = _GstDevice;

/// GstStreamType:
/// @GST_STREAM_TYPE_UNKNOWN: The stream is of unknown (unclassified) type.
/// @GST_STREAM_TYPE_AUDIO: The stream is of audio data
/// @GST_STREAM_TYPE_VIDEO: The stream carries video data
/// @GST_STREAM_TYPE_CONTAINER: The stream is a muxed container type
/// @GST_STREAM_TYPE_TEXT: The stream contains subtitle / subpicture data.
///
/// #GstStreamType describes a high level classification set for
/// flows of data in #GstStream objects.
///
/// Note that this is a flag, and therefore users should not assume it
/// will be a single value. Do not use the equality operator for checking
/// whether a stream is of a certain type.
///
/// Since: 1.10
abstract class GstStreamType {
  static const int GST_STREAM_TYPE_UNKNOWN = 1;
  static const int GST_STREAM_TYPE_AUDIO = 2;
  static const int GST_STREAM_TYPE_VIDEO = 4;
  static const int GST_STREAM_TYPE_CONTAINER = 8;
  static const int GST_STREAM_TYPE_TEXT = 16;
}

/// GstStream:
/// @stream_id: The Stream Identifier for this #GstStream
///
/// A high-level object representing a single stream. It might be backed, or
/// not, by an actual flow of data in a pipeline (#GstPad).
///
/// A #GstStream does not care about data changes (such as decoding, encoding,
/// parsing,...) as long as the underlying data flow corresponds to the same
/// high-level flow (ex: a certain audio track).
///
/// A #GstStream contains all the information pertinent to a stream, such as
/// stream-id, tags, caps, type, ...
///
/// Elements can subclass a #GstStream for internal usage (to contain information
/// pertinent to streams of data).
///
/// Since: 1.10
final class _GstStream extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<ffi.Char> stream_id;

  external ffi.Pointer<GstStreamPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstStreamPrivate = _GstStreamPrivate;

final class _GstStreamPrivate extends ffi.Opaque {}

/// GstStreamClass:
/// @parent_class: the parent class structure
///
/// GstStream class structure
final class _GstStreamClass extends ffi.Struct {
  external GstObjectClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstStream = _GstStream;

/// GstStreamCollection:
///
/// A collection of #GstStream that are available.
///
/// A #GstStreamCollection will be provided by elements that can make those
/// streams available. Applications can use the collection to show the user
/// what streams are available by using %gst_stream_collection_get_stream()
///
/// Once posted, a #GstStreamCollection is immutable. Updates are made by sending
/// a new #GstStreamCollection message, which may or may not share some of
/// the #GstStream objects from the collection it replaces. The receiver can check
/// the sender of a stream collection message to know which collection is
/// obsoleted.
///
/// Several elements in a pipeline can provide #GstStreamCollection.
///
/// Applications can activate streams from a collection by using the
/// #GST_EVENT_SELECT_STREAMS event on a pipeline, bin or element.
///
/// Since: 1.10
final class _GstStreamCollection extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<ffi.Char> upstream_id;

  external ffi.Pointer<GstStreamCollectionPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstStreamCollectionPrivate = _GstStreamCollectionPrivate;

final class _GstStreamCollectionPrivate extends ffi.Opaque {}

/// GstStreamCollectionClass:
/// @parent_class: the parent class structure
/// @stream_notify: default signal handler for the stream-notify signal
///
/// GstStreamCollection class structure
final class _GstStreamCollectionClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstStreamCollection> collection,
              ffi.Pointer<GstStream> stream,
              ffi.Pointer<GParamSpec> pspec)>> stream_notify;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstStreamCollection = _GstStreamCollection;

/// GstStructureChangeType:
/// @GST_STRUCTURE_CHANGE_TYPE_PAD_LINK: Pad linking is starting or done.
/// @GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK: Pad unlinking is starting or done.
///
/// The type of a %GST_MESSAGE_STRUCTURE_CHANGE.
abstract class GstStructureChangeType {
  static const int GST_STRUCTURE_CHANGE_TYPE_PAD_LINK = 0;
  static const int GST_STRUCTURE_CHANGE_TYPE_PAD_UNLINK = 1;
}

/// GstStreamStatusType:
/// @GST_STREAM_STATUS_TYPE_CREATE: A new thread need to be created.
/// @GST_STREAM_STATUS_TYPE_ENTER: a thread entered its loop function
/// @GST_STREAM_STATUS_TYPE_LEAVE: a thread left its loop function
/// @GST_STREAM_STATUS_TYPE_DESTROY: a thread is destroyed
/// @GST_STREAM_STATUS_TYPE_START: a thread is started
/// @GST_STREAM_STATUS_TYPE_PAUSE: a thread is paused
/// @GST_STREAM_STATUS_TYPE_STOP: a thread is stopped
///
/// The type of a %GST_MESSAGE_STREAM_STATUS. The stream status messages inform the
/// application of new streaming threads and their status.
abstract class GstStreamStatusType {
  static const int GST_STREAM_STATUS_TYPE_CREATE = 0;
  static const int GST_STREAM_STATUS_TYPE_ENTER = 1;
  static const int GST_STREAM_STATUS_TYPE_LEAVE = 2;
  static const int GST_STREAM_STATUS_TYPE_DESTROY = 3;
  static const int GST_STREAM_STATUS_TYPE_START = 8;
  static const int GST_STREAM_STATUS_TYPE_PAUSE = 9;
  static const int GST_STREAM_STATUS_TYPE_STOP = 10;
}

/// GstProgressType:
/// @GST_PROGRESS_TYPE_START: A new task started.
/// @GST_PROGRESS_TYPE_CONTINUE: A task completed and a new one continues.
/// @GST_PROGRESS_TYPE_COMPLETE: A task completed.
/// @GST_PROGRESS_TYPE_CANCELED: A task was canceled.
/// @GST_PROGRESS_TYPE_ERROR: A task caused an error. An error message is also
/// posted on the bus.
///
/// The type of a %GST_MESSAGE_PROGRESS. The progress messages inform the
/// application of the status of asynchronous tasks.
abstract class GstProgressType {
  static const int GST_PROGRESS_TYPE_START = 0;
  static const int GST_PROGRESS_TYPE_CONTINUE = 1;
  static const int GST_PROGRESS_TYPE_COMPLETE = 2;
  static const int GST_PROGRESS_TYPE_CANCELED = 3;
  static const int GST_PROGRESS_TYPE_ERROR = 4;
}

/// GstQOSType:
/// @GST_QOS_TYPE_OVERFLOW: The QoS event type that is produced when upstream
/// elements are producing data too quickly and the element can't keep up
/// processing the data. Upstream should reduce their production rate. This
/// type is also used when buffers arrive early or in time.
/// @GST_QOS_TYPE_UNDERFLOW: The QoS event type that is produced when upstream
/// elements are producing data too slowly and need to speed up their
/// production rate.
/// @GST_QOS_TYPE_THROTTLE: The QoS event type that is produced when the
/// application enabled throttling to limit the data rate.
///
/// The different types of QoS events that can be given to the
/// gst_event_new_qos() method.
abstract class GstQOSType {
  static const int GST_QOS_TYPE_OVERFLOW = 0;
  static const int GST_QOS_TYPE_UNDERFLOW = 1;
  static const int GST_QOS_TYPE_THROTTLE = 2;
}

/// GstGapFlags:
/// @GST_GAP_FLAG_MISSING_DATA: The #GST_EVENT_GAP signals missing data,
/// for example because of packet loss.
///
/// The different flags that can be set on #GST_EVENT_GAP events. See
/// gst_event_set_gap_flags() for details.
///
/// Since: 1.20
abstract class GstGapFlags {
  static const int GST_GAP_FLAG_MISSING_DATA = 1;
}

/// GstTaskPool:
///
/// The #GstTaskPool object.
final class _GstTaskPool extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<GThreadPool> pool;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstTaskPoolClass:
/// @parent_class: the parent class structure
/// @prepare: prepare the threadpool
/// @cleanup: make sure all threads are stopped
/// @push: start a new thread
/// @join: join a thread
///
/// The #GstTaskPoolClass object.
final class _GstTaskPoolClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstTaskPool> pool,
              ffi.Pointer<ffi.Pointer<GError>> error)>> prepare;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GstTaskPool> pool)>>
      cleanup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer Function(
              ffi.Pointer<GstTaskPool> pool,
              GstTaskPoolFunction func,
              ffi.Pointer user_data,
              ffi.Pointer<ffi.Pointer<GError>> error)>> push;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstTaskPool> pool, ffi.Pointer id)>>
      join;

  /// GstTaskPoolClass::dispose_handle:
  /// @pool: a #GstTaskPool
  /// @id: (transfer full): the handle to dispose of
  ///
  /// free / unref the handle returned in GstTaskPoolClass::push.
  ///
  /// Since: 1.20
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GstTaskPool> pool, ffi.Pointer id)>>
      dispose_handle;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstTaskPool = _GstTaskPool;

/// GstTaskPoolFunction:
/// @user_data: user data for the task function
///
/// Task function, see gst_task_pool_push().
typedef GstTaskPoolFunction
    = ffi.Pointer<ffi.NativeFunction<GstTaskPoolFunctionFunction>>;
typedef GstTaskPoolFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> user_data);
typedef DartGstTaskPoolFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> user_data);

/// GstSharedTaskPool:
///
/// The #GstSharedTaskPool object.
///
/// since: 1.20
final class _GstSharedTaskPool extends ffi.Struct {
  external GstTaskPool parent;

  external ffi.Pointer<GstSharedTaskPoolPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstSharedTaskPoolPrivate = _GstSharedTaskPoolPrivate;

final class _GstSharedTaskPoolPrivate extends ffi.Opaque {}

/// GstSharedTaskPoolClass:
///
/// The #GstSharedTaskPoolClass object.
///
/// Since: 1.20
final class _GstSharedTaskPoolClass extends ffi.Struct {
  external GstTaskPoolClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstTaskPoolClass = _GstTaskPoolClass;
typedef GstSharedTaskPool = _GstSharedTaskPool;

/// GstTask:
/// @state: the state of the task
/// @cond: used to pause/resume the task
/// @lock: The lock taken when iterating the task function
/// @func: the function executed by this task
/// @user_data: user_data passed to the task function
/// @notify: GDestroyNotify for @user_data
/// @running: a flag indicating that the task is running
///
/// The #GstTask object.
final class _GstTask extends ffi.Struct {
  external GstObject object;

  @ffi.Int32()
  external int state;

  external GCond cond;

  external ffi.Pointer<GRecMutex> lock;

  external GstTaskFunction func;

  external ffi.Pointer user_data;

  external GDestroyNotify notify;

  @gboolean()
  external int running;

  external ffi.Pointer<GThread> thread;

  external ffi.Pointer<GstTaskPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstTaskState:
/// @GST_TASK_STARTED: the task is started and running
/// @GST_TASK_STOPPED: the task is stopped
/// @GST_TASK_PAUSED: the task is paused
///
/// The different states a task can be in
abstract class GstTaskState {
  static const int GST_TASK_STARTED = 0;
  static const int GST_TASK_STOPPED = 1;
  static const int GST_TASK_PAUSED = 2;
}

/// GstTaskFunction:
/// @user_data: user data passed to the function
///
/// A function that will repeatedly be called in the thread created by
/// a #GstTask.
typedef GstTaskFunction
    = ffi.Pointer<ffi.NativeFunction<GstTaskFunctionFunction>>;
typedef GstTaskFunctionFunction = ffi.Void Function(ffi.Pointer user_data);
typedef DartGstTaskFunctionFunction = void Function(ffi.Pointer user_data);
typedef GstTaskPrivate = _GstTaskPrivate;

final class _GstTaskPrivate extends ffi.Opaque {}

final class _GstTaskClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<GstTaskPool> pool;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstTask = _GstTask;

/// GstTaskThreadFunc:
/// @task: The #GstTask
/// @thread: The #GThread
/// @user_data: user data
///
/// Custom GstTask thread callback functions that can be installed.
typedef GstTaskThreadFunc
    = ffi.Pointer<ffi.NativeFunction<GstTaskThreadFuncFunction>>;
typedef GstTaskThreadFuncFunction = ffi.Void Function(ffi.Pointer<GstTask> task,
    ffi.Pointer<GThread> thread, ffi.Pointer user_data);
typedef DartGstTaskThreadFuncFunction = void Function(ffi.Pointer<GstTask> task,
    ffi.Pointer<GThread> thread, ffi.Pointer user_data);

/// GstPadTemplateFlags:
/// @GST_PAD_TEMPLATE_FLAG_LAST: first flag that can be used by subclasses.
///
/// Flags for the padtemplate
abstract class GstPadTemplateFlags {
  static const int GST_PAD_TEMPLATE_FLAG_LAST = 256;
}

typedef GstStaticPadTemplate = _GstStaticPadTemplate;

/// GstPadLinkReturn:
/// @GST_PAD_LINK_OK		: link succeeded
/// @GST_PAD_LINK_WRONG_HIERARCHY: pads have no common grandparent
/// @GST_PAD_LINK_WAS_LINKED	: pad was already linked
/// @GST_PAD_LINK_WRONG_DIRECTION: pads have wrong direction
/// @GST_PAD_LINK_NOFORMAT	: pads do not have common format
/// @GST_PAD_LINK_NOSCHED	: pads cannot cooperate in scheduling
/// @GST_PAD_LINK_REFUSED	: refused for some reason
///
/// Result values from gst_pad_link and friends.
abstract class GstPadLinkReturn {
  static const int GST_PAD_LINK_OK = 0;
  static const int GST_PAD_LINK_WRONG_HIERARCHY = -1;
  static const int GST_PAD_LINK_WAS_LINKED = -2;
  static const int GST_PAD_LINK_WRONG_DIRECTION = -3;
  static const int GST_PAD_LINK_NOFORMAT = -4;
  static const int GST_PAD_LINK_NOSCHED = -5;
  static const int GST_PAD_LINK_REFUSED = -6;
}

/// GstPadLinkCheck:
/// @GST_PAD_LINK_CHECK_NOTHING: Don't check hierarchy or caps compatibility.
/// @GST_PAD_LINK_CHECK_HIERARCHY: Check the pads have same parents/grandparents.
/// Could be omitted if it is already known that the two elements that own the
/// pads are in the same bin.
/// @GST_PAD_LINK_CHECK_TEMPLATE_CAPS: Check if the pads are compatible by using
/// their template caps. This is much faster than @GST_PAD_LINK_CHECK_CAPS, but
/// would be unsafe e.g. if one pad has %GST_CAPS_ANY.
/// @GST_PAD_LINK_CHECK_CAPS: Check if the pads are compatible by comparing the
/// caps returned by gst_pad_query_caps().
/// @GST_PAD_LINK_CHECK_NO_RECONFIGURE: Disables pushing a reconfigure event when pads are
/// linked.
/// @GST_PAD_LINK_CHECK_DEFAULT: The default checks done when linking
/// pads (i.e. the ones used by gst_pad_link()).
///
/// The amount of checking to be done when linking pads. @GST_PAD_LINK_CHECK_CAPS
/// and @GST_PAD_LINK_CHECK_TEMPLATE_CAPS are mutually exclusive. If both are
/// specified, expensive but safe @GST_PAD_LINK_CHECK_CAPS are performed.
///
/// > Only disable some of the checks if you are 100% certain you know the link
/// > will not fail because of hierarchy/caps compatibility failures. If uncertain,
/// > use the default checks (%GST_PAD_LINK_CHECK_DEFAULT) or the regular methods
/// > for linking the pads.
abstract class GstPadLinkCheck {
  static const int GST_PAD_LINK_CHECK_NOTHING = 0;
  static const int GST_PAD_LINK_CHECK_HIERARCHY = 1;
  static const int GST_PAD_LINK_CHECK_TEMPLATE_CAPS = 2;
  static const int GST_PAD_LINK_CHECK_CAPS = 4;
  static const int GST_PAD_LINK_CHECK_NO_RECONFIGURE = 8;
  static const int GST_PAD_LINK_CHECK_DEFAULT = 5;
}

/// GstPadProbeReturn:
/// @GST_PAD_PROBE_OK: normal probe return value. This leaves the probe in
/// place, and defers decisions about dropping or passing data to other
/// probes, if any. If there are no other probes, the default behaviour
/// for the probe type applies ('block' for blocking probes,
/// and 'pass' for non-blocking probes).
/// @GST_PAD_PROBE_DROP: drop data in data probes. For push mode this means that
/// the data item is not sent downstream. For pull mode, it means that
/// the data item is not passed upstream. In both cases, no other probes
/// are called for this item and %GST_FLOW_OK or %TRUE is returned to the
/// caller.
/// @GST_PAD_PROBE_REMOVE: remove this probe, passing the data. For blocking probes
/// this will cause data flow to unblock, unless there are also other
/// blocking probes installed.
/// @GST_PAD_PROBE_PASS: pass the data item in the block probe and block on the
/// next item. Note, that if there are multiple pad probes installed and
/// any probe returns PASS, the data will be passed.
/// @GST_PAD_PROBE_HANDLED: Data has been handled in the probe and will not be
/// forwarded further. For events and buffers this is the same behaviour as
/// %GST_PAD_PROBE_DROP (except that in this case you need to unref the buffer
/// or event yourself). For queries it will also return %TRUE to the caller.
/// The probe can also modify the #GstFlowReturn value by using the
/// #GST_PAD_PROBE_INFO_FLOW_RETURN() accessor.
/// Note that the resulting query must contain valid entries.
/// Since: 1.6
///
/// Different return values for the #GstPadProbeCallback.
abstract class GstPadProbeReturn {
  static const int GST_PAD_PROBE_DROP = 0;
  static const int GST_PAD_PROBE_OK = 1;
  static const int GST_PAD_PROBE_REMOVE = 2;
  static const int GST_PAD_PROBE_PASS = 3;
  static const int GST_PAD_PROBE_HANDLED = 4;
}

typedef GstPadProbeInfo = _GstPadProbeInfo;

/// GstPadFlags:
/// @GST_PAD_FLAG_BLOCKED: is dataflow on a pad blocked
/// @GST_PAD_FLAG_FLUSHING: is pad flushing
/// @GST_PAD_FLAG_EOS: is pad in EOS state
/// @GST_PAD_FLAG_BLOCKING: is pad currently blocking on a buffer or event
/// @GST_PAD_FLAG_NEED_PARENT: ensure that there is a parent object before calling
/// into the pad callbacks.
/// @GST_PAD_FLAG_NEED_RECONFIGURE: the pad should be reconfigured/renegotiated.
/// The flag has to be unset manually after
/// reconfiguration happened.
/// @GST_PAD_FLAG_PENDING_EVENTS: the pad has pending events
/// @GST_PAD_FLAG_FIXED_CAPS: the pad is using fixed caps. This means that
/// once the caps are set on the pad, the default caps query function
/// will only return those caps.
/// @GST_PAD_FLAG_PROXY_CAPS: the default event and query handler will forward
/// all events and queries to the internally linked pads
/// instead of discarding them.
/// @GST_PAD_FLAG_PROXY_ALLOCATION: the default query handler will forward
/// allocation queries to the internally linked pads
/// instead of discarding them.
/// @GST_PAD_FLAG_PROXY_SCHEDULING: the default query handler will forward
/// scheduling queries to the internally linked pads
/// instead of discarding them.
/// @GST_PAD_FLAG_ACCEPT_INTERSECT: the default accept-caps handler will check
/// it the caps intersect the query-caps result instead
/// of checking for a subset. This is interesting for
/// parsers that can accept incompletely specified caps.
/// @GST_PAD_FLAG_ACCEPT_TEMPLATE: the default accept-caps handler will use
/// the template pad caps instead of query caps to
/// compare with the accept caps. Use this in combination
/// with %GST_PAD_FLAG_ACCEPT_INTERSECT. (Since: 1.6)
/// @GST_PAD_FLAG_LAST: offset to define more flags
///
/// Pad state flags
abstract class GstPadFlags {
  static const int GST_PAD_FLAG_BLOCKED = 16;
  static const int GST_PAD_FLAG_FLUSHING = 32;
  static const int GST_PAD_FLAG_EOS = 64;
  static const int GST_PAD_FLAG_BLOCKING = 128;
  static const int GST_PAD_FLAG_NEED_PARENT = 256;
  static const int GST_PAD_FLAG_NEED_RECONFIGURE = 512;
  static const int GST_PAD_FLAG_PENDING_EVENTS = 1024;
  static const int GST_PAD_FLAG_FIXED_CAPS = 2048;
  static const int GST_PAD_FLAG_PROXY_CAPS = 4096;
  static const int GST_PAD_FLAG_PROXY_ALLOCATION = 8192;
  static const int GST_PAD_FLAG_PROXY_SCHEDULING = 16384;
  static const int GST_PAD_FLAG_ACCEPT_INTERSECT = 32768;
  static const int GST_PAD_FLAG_ACCEPT_TEMPLATE = 65536;
  static const int GST_PAD_FLAG_LAST = 1048576;
}

/// GstPadProbeCallback:
/// @pad: the #GstPad that is blocked
/// @info: #GstPadProbeInfo
/// @user_data: the gpointer to optional user data.
///
/// Callback used by gst_pad_add_probe(). Gets called to notify about the current
/// blocking type.
///
/// The callback is allowed to modify the data pointer in @info.
///
/// Returns: a #GstPadProbeReturn
typedef GstPadProbeCallback
    = ffi.Pointer<ffi.NativeFunction<GstPadProbeCallbackFunction>>;
typedef GstPadProbeCallbackFunction = ffi.Int32 Function(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstPadProbeInfo> info,
    ffi.Pointer user_data);
typedef DartGstPadProbeCallbackFunction = int Function(ffi.Pointer<GstPad> pad,
    ffi.Pointer<GstPadProbeInfo> info, ffi.Pointer user_data);

/// GstPadStickyEventsForeachFunction:
/// @pad: the #GstPad.
/// @event: (allow-none): a sticky #GstEvent.
/// @user_data: the #gpointer to optional user data.
///
/// Callback used by gst_pad_sticky_events_foreach().
///
/// When this function returns %TRUE, the next event will be
/// returned. When %FALSE is returned, gst_pad_sticky_events_foreach() will return.
///
/// When @event is set to %NULL, the item will be removed from the list of sticky events.
/// @event can be replaced by assigning a new reference to it.
/// This function is responsible for unreffing the old event when
/// removing or modifying.
///
/// Returns: %TRUE if the iteration should continue
typedef GstPadStickyEventsForeachFunction = ffi
    .Pointer<ffi.NativeFunction<GstPadStickyEventsForeachFunctionFunction>>;
typedef GstPadStickyEventsForeachFunctionFunction = gboolean Function(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<ffi.Pointer<GstEvent>> event,
    ffi.Pointer user_data);
typedef DartGstPadStickyEventsForeachFunctionFunction = Dartgint Function(
    ffi.Pointer<GstPad> pad,
    ffi.Pointer<ffi.Pointer<GstEvent>> event,
    ffi.Pointer user_data);

/// GstPadActivateFunction:
/// @pad: a #GstPad
/// @parent: the parent of @pad
///
/// This function is called when the pad is activated during the element
/// READY to PAUSED state change. By default this function will call the
/// activate function that puts the pad in push mode but elements can
/// override this function to activate the pad in pull mode if they wish.
///
/// Returns: %TRUE if the pad could be activated.
typedef GstPadActivateFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadActivateFunctionFunction>>;
typedef GstPadActivateFunctionFunction = gboolean Function(
    ffi.Pointer<GstPad1> pad, ffi.Pointer<GstObject> parent);
typedef DartGstPadActivateFunctionFunction = Dartgint Function(
    ffi.Pointer<GstPad1> pad, ffi.Pointer<GstObject> parent);
typedef GstPad1 = _GstPad;

/// GstPadActivateModeFunction:
/// @pad: a #GstPad
/// @parent: the parent of @pad
/// @mode: the requested activation mode of @pad
/// @active: activate or deactivate the pad.
///
/// The prototype of the push and pull activate functions.
///
/// Returns: %TRUE if the pad could be activated or deactivated.
typedef GstPadActivateModeFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadActivateModeFunctionFunction>>;
typedef GstPadActivateModeFunctionFunction = gboolean Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Int32 mode,
    gboolean active);
typedef DartGstPadActivateModeFunctionFunction = Dartgint Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    int mode,
    Dartgint active);

/// GstPadChainFunction:
/// @pad: the sink #GstPad that performed the chain.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @buffer: (transfer full): the #GstBuffer that is chained, not %NULL.
///
/// A function that will be called on sinkpads when chaining buffers.
/// The function typically processes the data contained in the buffer and
/// either consumes the data or passes it on to the internally linked pad(s).
///
/// The implementer of this function receives a refcount to @buffer and should
/// gst_buffer_unref() when the buffer is no longer needed.
///
/// When a chain function detects an error in the data stream, it must post an
/// error on the bus and return an appropriate #GstFlowReturn value.
///
/// Returns: #GST_FLOW_OK for success
typedef GstPadChainFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadChainFunctionFunction>>;
typedef GstPadChainFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstBuffer> buffer);
typedef DartGstPadChainFunctionFunction = int Function(ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent, ffi.Pointer<GstBuffer> buffer);

/// GstPadChainListFunction:
/// @pad: the sink #GstPad that performed the chain.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @list: (transfer full): the #GstBufferList that is chained, not %NULL.
///
/// A function that will be called on sinkpads when chaining buffer lists.
/// The function typically processes the data contained in the buffer list and
/// either consumes the data or passes it on to the internally linked pad(s).
///
/// The implementer of this function receives a refcount to @list and
/// should gst_buffer_list_unref() when the list is no longer needed.
///
/// When a chainlist function detects an error in the data stream, it must
/// post an error on the bus and return an appropriate #GstFlowReturn value.
///
/// Returns: #GST_FLOW_OK for success
typedef GstPadChainListFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadChainListFunctionFunction>>;
typedef GstPadChainListFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstBufferList> list);
typedef DartGstPadChainListFunctionFunction = int Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstBufferList> list);

/// GstPadGetRangeFunction:
/// @pad: the src #GstPad to perform the getrange on.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @offset: the offset of the range
/// @length: the length of the range
/// @buffer: a memory location to hold the result buffer, cannot be %NULL.
///
/// This function will be called on source pads when a peer element
/// request a buffer at the specified @offset and @length. If this function
/// returns #GST_FLOW_OK, the result buffer will be stored in @buffer. The
/// contents of @buffer is invalid for any other return value.
///
/// This function is installed on a source pad with
/// gst_pad_set_getrange_function() and can only be called on source pads after
/// they are successfully activated with gst_pad_activate_mode() with the
/// #GST_PAD_MODE_PULL.
///
/// @offset and @length are always given in byte units. @offset must normally be a value
/// between 0 and the length in bytes of the data available on @pad. The
/// length (duration in bytes) can be retrieved with a #GST_QUERY_DURATION or with a
/// #GST_QUERY_SEEKING.
///
/// Any @offset larger or equal than the length will make the function return
/// #GST_FLOW_EOS, which corresponds to EOS. In this case @buffer does not
/// contain a valid buffer.
///
/// The buffer size of @buffer will only be smaller than @length when @offset is
/// near the end of the stream. In all other cases, the size of @buffer must be
/// exactly the requested size.
///
/// It is allowed to call this function with a 0 @length and valid @offset, in
/// which case @buffer will contain a 0-sized buffer and the function returns
/// #GST_FLOW_OK.
///
/// When this function is called with a -1 @offset, the sequentially next buffer
/// of length @length in the stream is returned.
///
/// When this function is called with a -1 @length, a buffer with a default
/// optimal length is returned in @buffer. The length might depend on the value
/// of @offset.
///
/// Returns: #GST_FLOW_OK for success and a valid buffer in @buffer. Any other
/// return value leaves @buffer undefined.
typedef GstPadGetRangeFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadGetRangeFunctionFunction>>;
typedef GstPadGetRangeFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    guint64 offset,
    guint length,
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer);
typedef DartGstPadGetRangeFunctionFunction = int Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    Dartguint64 offset,
    Dartguint length,
    ffi.Pointer<ffi.Pointer<GstBuffer>> buffer);

/// GstPadEventFunction:
/// @pad: the #GstPad to handle the event.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @event: (transfer full): the #GstEvent to handle.
///
/// Function signature to handle an event for the pad.
///
/// Returns: %TRUE if the pad could handle the event.
typedef GstPadEventFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadEventFunctionFunction>>;
typedef GstPadEventFunctionFunction = gboolean Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstEvent> event);
typedef DartGstPadEventFunctionFunction = Dartgint Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstEvent> event);

/// GstPadEventFullFunction:
/// @pad: the #GstPad to handle the event.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @event: (transfer full): the #GstEvent to handle.
///
/// Function signature to handle an event for the pad.
///
/// This variant is for specific elements that will take into account the
/// last downstream flow return (from a pad push), in which case they can
/// return it.
///
/// Returns: %GST_FLOW_OK if the event was handled properly, or any other
/// #GstFlowReturn dependent on downstream state.
///
/// Since: 1.8
typedef GstPadEventFullFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadEventFullFunctionFunction>>;
typedef GstPadEventFullFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstEvent> event);
typedef DartGstPadEventFullFunctionFunction = int Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstEvent> event);

/// GstPadLinkFunction:
/// @pad: the #GstPad that is linked.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @peer: the peer #GstPad of the link
///
/// Function signature to handle a new link on the pad.
///
/// Returns: the result of the link with the specified peer.
typedef GstPadLinkFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadLinkFunctionFunction>>;
typedef GstPadLinkFunctionFunction = ffi.Int32 Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstPad1> peer);
typedef DartGstPadLinkFunctionFunction = int Function(ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent, ffi.Pointer<GstPad1> peer);

/// GstPadUnlinkFunction:
/// @pad: the #GstPad that is linked.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
///
/// Function signature to handle a unlinking the pad prom its peer.
///
/// The pad's lock is already held when the unlink function is called, so most
/// pad functions cannot be called from within the callback.
typedef GstPadUnlinkFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadUnlinkFunctionFunction>>;
typedef GstPadUnlinkFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstPad1> pad, ffi.Pointer<GstObject> parent);
typedef DartGstPadUnlinkFunctionFunction = void Function(
    ffi.Pointer<GstPad1> pad, ffi.Pointer<GstObject> parent);

/// GstPadIterIntLinkFunction:
/// @pad: The #GstPad to query.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
///
/// The signature of the internal pad link iterator function.
///
/// Returns: a new #GstIterator that will iterate over all pads that are
/// linked to the given pad on the inside of the parent element.
///
/// the caller must call gst_iterator_free() after usage.
typedef GstPadIterIntLinkFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadIterIntLinkFunctionFunction>>;
typedef GstPadIterIntLinkFunctionFunction = ffi.Pointer<GstIterator1> Function(
    ffi.Pointer<GstPad1> pad, ffi.Pointer<GstObject> parent);

/// GstPadQueryFunction:
/// @pad: the #GstPad to query.
/// @parent: (allow-none): the parent of @pad. If the #GST_PAD_FLAG_NEED_PARENT
/// flag is set, @parent is guaranteed to be not-%NULL and remain valid
/// during the execution of this function.
/// @query: the #GstQuery object to execute
///
/// The signature of the query function.
///
/// Returns: %TRUE if the query could be performed.
typedef GstPadQueryFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadQueryFunctionFunction>>;
typedef GstPadQueryFunctionFunction = gboolean Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstQuery> query);
typedef DartGstPadQueryFunctionFunction = Dartgint Function(
    ffi.Pointer<GstPad1> pad,
    ffi.Pointer<GstObject> parent,
    ffi.Pointer<GstQuery> query);

/// GstPadForwardFunction:
/// @pad: the #GstPad that is forwarded.
/// @user_data: the gpointer to optional user data.
///
/// A forward function is called for all internally linked pads, see
/// gst_pad_forward().
///
/// Returns: %TRUE if the dispatching procedure has to be stopped.
typedef GstPadForwardFunction
    = ffi.Pointer<ffi.NativeFunction<GstPadForwardFunctionFunction>>;
typedef GstPadForwardFunctionFunction = gboolean Function(
    ffi.Pointer<GstPad> pad, ffi.Pointer user_data);
typedef DartGstPadForwardFunctionFunction = Dartgint Function(
    ffi.Pointer<GstPad> pad, ffi.Pointer user_data);

/// GstBusClass:
/// @parent_class: the parent class structure
///
/// GStreamer bus class.
final class _GstBusClass extends ffi.Struct {
  external GstObjectClass parent_class;

  /// GstBusClass::message:
  /// @bus: the #GstBus
  /// @message: the message that has been posted asynchronously
  ///
  /// A message has been posted on the bus.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstBus> bus, ffi.Pointer<GstMessage> message)>>
      message;

  /// GstBusClass::sync_message:
  /// @bus: the #GstBus
  /// @message: the message that has been posted synchronously
  ///
  /// A message has been posted on the bus.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstBus> bus, ffi.Pointer<GstMessage> message)>>
      sync_message;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstBusFlags:
/// @GST_BUS_FLUSHING: The bus is currently dropping all messages
/// @GST_BUS_FLAG_LAST: offset to define more flags
///
/// The standard flags that a bus may have.
abstract class GstBusFlags {
  static const int GST_BUS_FLUSHING = 16;
  static const int GST_BUS_FLAG_LAST = 32;
}

/// GstBusSyncReply:
/// @GST_BUS_DROP: drop the message
/// @GST_BUS_PASS: pass the message to the async queue
/// @GST_BUS_ASYNC: pass message to async queue, continue if message is handled
///
/// The result values for a GstBusSyncHandler.
abstract class GstBusSyncReply {
  static const int GST_BUS_DROP = 0;
  static const int GST_BUS_PASS = 1;
  static const int GST_BUS_ASYNC = 2;
}

/// GstBusSyncHandler:
/// @bus: the #GstBus that sent the message
/// @message: the #GstMessage
/// @user_data: user data that has been given, when registering the handler
///
/// Handler will be invoked synchronously, when a new message has been injected
/// into the bus. This function is mostly used internally. Only one sync handler
/// can be attached to a given bus.
///
/// If the handler returns %GST_BUS_DROP, it should unref the message, else the
/// message should not be unreffed by the sync handler.
///
/// Returns: #GstBusSyncReply stating what to do with the message
typedef GstBusSyncHandler
    = ffi.Pointer<ffi.NativeFunction<GstBusSyncHandlerFunction>>;
typedef GstBusSyncHandlerFunction = ffi.Int32 Function(ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message, ffi.Pointer user_data);
typedef DartGstBusSyncHandlerFunction = int Function(ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message, ffi.Pointer user_data);

/// GstBusFunc:
/// @bus: the #GstBus that sent the message
/// @message: the #GstMessage
/// @user_data: user data that has been given, when registering the handler
///
/// Specifies the type of function passed to gst_bus_add_watch() or
/// gst_bus_add_watch_full(), which is called from the mainloop when a message
/// is available on the bus.
///
/// The message passed to the function will be unreffed after execution of this
/// function so it should not be freed in the function.
///
/// Note that this function is used as a #GSourceFunc which means that returning
/// %FALSE will remove the #GSource from the mainloop.
///
/// Returns: %FALSE if the event source should be removed.
typedef GstBusFunc = ffi.Pointer<ffi.NativeFunction<GstBusFuncFunction>>;
typedef GstBusFuncFunction = gboolean Function(ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message, ffi.Pointer user_data);
typedef DartGstBusFuncFunction = Dartgint Function(ffi.Pointer<GstBus> bus,
    ffi.Pointer<GstMessage> message, ffi.Pointer user_data);

final class _GstElementFactoryClass extends ffi.Opaque {}

final class _GstPlugin extends ffi.Opaque {}

final class _GstPluginClass extends ffi.Opaque {}

/// GstPluginDesc:
/// @major_version: the major version number of core that plugin was compiled for
/// @minor_version: the minor version number of core that plugin was compiled for
/// @name: a unique name of the plugin
/// @description: description of plugin
/// @plugin_init: pointer to the init function of this plugin.
/// @version: version of the plugin
/// @license: effective license of plugin
/// @source: source module plugin belongs to
/// @package: shipped package plugin belongs to
/// @origin: URL to provider of plugin
/// @release_datetime: (allow-none): date time string in ISO 8601
/// format (or rather, a subset thereof), or %NULL. Allowed are the
/// following formats: "YYYY-MM-DD" and "YYY-MM-DDTHH:MMZ" (with
/// 'T' a separator and 'Z' indicating UTC/Zulu time). This field
/// should be set via the GST_PACKAGE_RELEASE_DATETIME
/// preprocessor macro.
///
/// A plugin should export a variable of this type called plugin_desc. The plugin
/// loader will use the data provided there to initialize the plugin.
///
/// The @licence parameter must be one of: LGPL, GPL, QPL, GPL/QPL, MPL,
/// BSD, MIT/X11, Proprietary, unknown.
final class _GstPluginDesc extends ffi.Struct {
  @gint()
  external int major_version;

  @gint()
  external int minor_version;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  external GstPluginInitFunc plugin_init;

  external ffi.Pointer<ffi.Char> version;

  external ffi.Pointer<ffi.Char> license;

  external ffi.Pointer<ffi.Char> source;

  external ffi.Pointer<ffi.Char> package;

  external ffi.Pointer<ffi.Char> origin;

  external ffi.Pointer<ffi.Char> release_datetime;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstPluginInitFunc:
/// @plugin: The plugin object
///
/// A plugin should provide a pointer to a function of this type in the
/// plugin_desc struct.
/// This function will be called by the loader at startup. One would then
/// register each #GstPluginFeature.
///
/// Returns: %TRUE if plugin initialised successfully
typedef GstPluginInitFunc
    = ffi.Pointer<ffi.NativeFunction<GstPluginInitFuncFunction>>;
typedef GstPluginInitFuncFunction = gboolean Function(
    ffi.Pointer<GstPlugin> plugin);
typedef DartGstPluginInitFuncFunction = Dartgint Function(
    ffi.Pointer<GstPlugin> plugin);

/// GstPlugin:
///
/// The opaque plugin object
typedef GstPlugin = _GstPlugin;

/// GstPluginError:
/// @GST_PLUGIN_ERROR_MODULE: The plugin could not be loaded
/// @GST_PLUGIN_ERROR_DEPENDENCIES: The plugin has unresolved dependencies
/// @GST_PLUGIN_ERROR_NAME_MISMATCH: The plugin has already be loaded from a different file
///
/// The plugin loading errors
abstract class GstPluginError {
  static const int GST_PLUGIN_ERROR_MODULE = 0;
  static const int GST_PLUGIN_ERROR_DEPENDENCIES = 1;
  static const int GST_PLUGIN_ERROR_NAME_MISMATCH = 2;
}

/// GstPluginFlags:
/// @GST_PLUGIN_FLAG_CACHED: Temporarily loaded plugins
/// @GST_PLUGIN_FLAG_BLACKLISTED: The plugin won't be scanned (again)
///
/// The plugin loading state
abstract class GstPluginFlags {
  static const int GST_PLUGIN_FLAG_CACHED = 16;
  static const int GST_PLUGIN_FLAG_BLACKLISTED = 32;
}

/// GstPluginDependencyFlags:
/// @GST_PLUGIN_DEPENDENCY_FLAG_NONE : no special flags
/// @GST_PLUGIN_DEPENDENCY_FLAG_RECURSE : recurse into subdirectories
/// @GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY : use paths
/// argument only if none of the environment variables is set
/// @GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX : interpret
/// filename argument as filter suffix and check all matching files in
/// the directory
/// @GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_PREFIX : interpret
/// filename argument as filter prefix and check all matching files in
/// the directory. Since: 1.8.
/// @GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_RELATIVE_TO_EXE : interpret
/// non-absolute paths as relative to the main executable directory. Since
/// 1.14.
///
/// Flags used in connection with gst_plugin_add_dependency().
abstract class GstPluginDependencyFlags {
  static const int GST_PLUGIN_DEPENDENCY_FLAG_NONE = 0;
  static const int GST_PLUGIN_DEPENDENCY_FLAG_RECURSE = 1;
  static const int GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_DEFAULT_ONLY = 2;
  static const int GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_SUFFIX = 4;
  static const int GST_PLUGIN_DEPENDENCY_FLAG_FILE_NAME_IS_PREFIX = 8;
  static const int GST_PLUGIN_DEPENDENCY_FLAG_PATHS_ARE_RELATIVE_TO_EXE = 16;
}

/// GstPluginInitFullFunc:
/// @plugin: The plugin object
/// @user_data: extra data
///
/// A plugin should provide a pointer to a function of either #GstPluginInitFunc
/// or this type in the plugin_desc struct.
/// The function will be called by the loader at startup. One would then
/// register each #GstPluginFeature. This version allows
/// user data to be passed to init function (useful for bindings).
///
/// Returns: %TRUE if plugin initialised successfully
typedef GstPluginInitFullFunc
    = ffi.Pointer<ffi.NativeFunction<GstPluginInitFullFuncFunction>>;
typedef GstPluginInitFullFuncFunction = gboolean Function(
    ffi.Pointer<GstPlugin> plugin, ffi.Pointer user_data);
typedef DartGstPluginInitFullFuncFunction = Dartgint Function(
    ffi.Pointer<GstPlugin> plugin, ffi.Pointer user_data);

final class _GstPluginFeature extends ffi.Opaque {}

final class _GstPluginFeatureClass extends ffi.Opaque {}

/// GstRank:
/// @GST_RANK_NONE: will be chosen last or not at all
/// @GST_RANK_MARGINAL: unlikely to be chosen
/// @GST_RANK_SECONDARY: likely to be chosen
/// @GST_RANK_PRIMARY: will be chosen first
///
/// Element priority ranks. Defines the order in which the autoplugger (or
/// similar rank-picking mechanisms, such as e.g. gst_element_make_from_uri())
/// will choose this element over an alternative one with the same function.
///
/// These constants serve as a rough guidance for defining the rank of a
/// #GstPluginFeature. Any value is valid, including values bigger than
/// @GST_RANK_PRIMARY.
abstract class GstRank {
  static const int GST_RANK_NONE = 0;
  static const int GST_RANK_MARGINAL = 64;
  static const int GST_RANK_SECONDARY = 128;
  static const int GST_RANK_PRIMARY = 256;
}

/// GstPluginFeature:
///
/// Opaque #GstPluginFeature structure.
typedef GstPluginFeature = _GstPluginFeature;

/// GstURIError:
/// @GST_URI_ERROR_UNSUPPORTED_PROTOCOL: The protocol is not supported
/// @GST_URI_ERROR_BAD_URI: There was a problem with the URI
/// @GST_URI_ERROR_BAD_STATE: Could not set or change the URI because the
/// URI handler was in a state where that is not possible or not permitted
/// @GST_URI_ERROR_BAD_REFERENCE: There was a problem with the entity that
/// the URI references
///
/// Different URI-related errors that can occur.
abstract class GstURIError {
  static const int GST_URI_ERROR_UNSUPPORTED_PROTOCOL = 0;
  static const int GST_URI_ERROR_BAD_URI = 1;
  static const int GST_URI_ERROR_BAD_STATE = 2;
  static const int GST_URI_ERROR_BAD_REFERENCE = 3;
}

/// GstURIType:
/// @GST_URI_UNKNOWN: The URI direction is unknown
/// @GST_URI_SINK: The URI is a consumer.
/// @GST_URI_SRC: The URI is a producer.
///
/// The different types of URI direction.
abstract class GstURIType {
  static const int GST_URI_UNKNOWN = 0;
  static const int GST_URI_SINK = 1;
  static const int GST_URI_SRC = 2;
}

final class _GstURIHandler extends ffi.Opaque {}

/// GstURIHandlerInterface:
/// @parent: The parent interface type
/// @get_type: Method to tell whether the element handles source or sink URI.
/// @get_protocols: Method to return the list of protocols handled by the element.
/// @get_uri: Method to return the URI currently handled by the element.
/// @set_uri: Method to set a new URI.
///
/// Any #GstElement using this interface should implement these methods.
final class _GstURIHandlerInterface extends ffi.Struct {
  external GTypeInterface parent;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(GType type)>>
      get_type;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(GType type)>>
      get_protocols;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<GstURIHandler> handler)>> get_uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstURIHandler> handler,
              ffi.Pointer<ffi.Char> uri,
              ffi.Pointer<ffi.Pointer<GError>> error)>> set_uri;
}

/// GstURIHandler:
///
/// Opaque #GstURIHandler structure.
typedef GstURIHandler = _GstURIHandler;

/// GstUri:
///
/// This is a private structure that holds the various parts of a parsed URI.
final class _GstUri extends ffi.Opaque {}

typedef GstUri = _GstUri;

/// GstElementFactoryListType:
///
/// A type defining the type of an element factory.
typedef GstElementFactoryListType = guint64;

/// GstElementFlags:
/// @GST_ELEMENT_FLAG_LOCKED_STATE: ignore state changes from parent
/// @GST_ELEMENT_FLAG_SINK: the element is a sink
/// @GST_ELEMENT_FLAG_SOURCE: the element is a source.
/// @GST_ELEMENT_FLAG_PROVIDE_CLOCK: the element can provide a clock
/// @GST_ELEMENT_FLAG_REQUIRE_CLOCK: the element requires a clock
/// @GST_ELEMENT_FLAG_INDEXABLE: the element can use an index
/// @GST_ELEMENT_FLAG_LAST: offset to define more flags
///
/// The standard flags that an element may have.
abstract class GstElementFlags {
  static const int GST_ELEMENT_FLAG_LOCKED_STATE = 16;
  static const int GST_ELEMENT_FLAG_SINK = 32;
  static const int GST_ELEMENT_FLAG_SOURCE = 64;
  static const int GST_ELEMENT_FLAG_PROVIDE_CLOCK = 128;
  static const int GST_ELEMENT_FLAG_REQUIRE_CLOCK = 256;
  static const int GST_ELEMENT_FLAG_INDEXABLE = 512;
  static const int GST_ELEMENT_FLAG_LAST = 16384;
}

typedef GstElementClass = _GstElementClass;

/// GstElementForeachPadFunc:
/// @element: the #GstElement
/// @pad: a #GstPad
/// @user_data: user data passed to the foreach function
///
/// Function called for each pad when using gst_element_foreach_sink_pad(),
/// gst_element_foreach_src_pad(), or gst_element_foreach_pad().
///
/// Returns: %FALSE to stop iterating pads, %TRUE to continue
///
/// Since: 1.14
typedef GstElementForeachPadFunc
    = ffi.Pointer<ffi.NativeFunction<GstElementForeachPadFuncFunction>>;
typedef GstElementForeachPadFuncFunction = gboolean Function(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPad> pad,
    ffi.Pointer user_data);
typedef DartGstElementForeachPadFuncFunction = Dartgint Function(
    ffi.Pointer<GstElement> element,
    ffi.Pointer<GstPad> pad,
    ffi.Pointer user_data);

/// GstElementCallAsyncFunc:
/// @element: The #GstElement this function has been called against
/// @user_data: Data passed in the function where that callback has been passed
///
/// Callback prototype used in #gst_element_call_async
typedef GstElementCallAsyncFunc
    = ffi.Pointer<ffi.NativeFunction<GstElementCallAsyncFuncFunction>>;
typedef GstElementCallAsyncFuncFunction = ffi.Void Function(
    ffi.Pointer<GstElement> element, ffi.Pointer user_data);
typedef DartGstElementCallAsyncFuncFunction = void Function(
    ffi.Pointer<GstElement> element, ffi.Pointer user_data);

/// GstBinFlags:
/// @GST_BIN_FLAG_LAST: the last enum in the series of flags for bins.
/// Derived classes can use this as first value in a list of flags.
///
/// GstBinFlags are a set of flags specific to bins. Most are set/used
/// internally. They can be checked using the GST_OBJECT_FLAG_IS_SET() macro,
/// and (un)set using GST_OBJECT_FLAG_SET() and GST_OBJECT_FLAG_UNSET().
abstract class GstBinFlags {
  /// GST_BIN_FLAG_NO_RESYNC:
  ///
  /// Don't resync a state change when elements are added or linked in the bin
  ///
  /// Since: 1.0.5
  static const int GST_BIN_FLAG_NO_RESYNC = 16384;

  /// GST_BIN_FLAG_STREAMS_AWARE:
  ///
  /// Indicates whether the bin can handle elements that add/remove source pads
  /// at any point in time without first posting a no-more-pads signal.
  ///
  /// Since: 1.10
  static const int GST_BIN_FLAG_STREAMS_AWARE = 32768;

  /// GST_BIN_FLAG_LAST:
  ///
  /// The last enum in the series of flags for bins. Derived classes can use this
  /// as first value in a list of flags.
  static const int GST_BIN_FLAG_LAST = 524288;
}

/// GstBin:
/// @numchildren: the number of children in this bin
/// @children: (element-type Gst.Element): the list of children in this bin
/// @children_cookie: updated whenever @children changes
/// @child_bus: internal bus for handling child messages
/// @messages: (element-type Gst.Message): queued and cached messages
/// @polling: the bin is currently calculating its state
/// @state_dirty: the bin needs to recalculate its state (deprecated)
/// @clock_dirty: the bin needs to select a new clock
/// @provided_clock: the last clock selected
/// @clock_provider: the element that provided @provided_clock
///
/// The GstBin base class. Subclasses can access these fields provided
/// the LOCK is taken.
final class _GstBin extends ffi.Struct {
  external GstElement element;

  @gint()
  external int numchildren;

  external ffi.Pointer<GList> children;

  @guint32()
  external int children_cookie;

  external ffi.Pointer<GstBus> child_bus;

  external ffi.Pointer<GList> messages;

  @gboolean()
  external int polling;

  @gboolean()
  external int state_dirty;

  @gboolean()
  external int clock_dirty;

  external ffi.Pointer<GstClock> provided_clock;

  external ffi.Pointer<GstElement> clock_provider;

  external ffi.Pointer<GstBinPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstBinPrivate = _GstBinPrivate;

final class _GstBinPrivate extends ffi.Opaque {}

/// GstBinClass:
/// @parent_class: bin parent class
///
/// Subclasses can override #GstBinClass::add_element and #GstBinClass::remove_element
/// to update the list of children in the bin.
///
/// The #GstBinClass::handle_message method can be overridden to implement custom
/// message handling.
///
/// #GstBinClass::deep_element_added will be called when a new element has been
/// added to any bin inside this bin, so it will also be called if a new child
/// was added to a sub-bin of this bin. #GstBin implementations that override
/// this message should chain up to the parent class implementation so the
/// #GstBin::deep-element-added signal is emitted on all parents.
final class _GstBinClass extends ffi.Struct {
  external GstElementClass parent_class;

  external ffi.Pointer<GThreadPool> pool;

  /// GstBinClass::element_added:
  /// @bin: the #GstBin
  /// @child: the element that was added
  ///
  /// Method called when an element was added to the bin.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstBin> bin, ffi.Pointer<GstElement> child)>>
      element_added;

  /// GstBinClass::element_removed:
  /// @bin: the #GstBin
  /// @child: the element that was removed
  ///
  /// Method called when an element was removed from the bin.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstBin> bin, ffi.Pointer<GstElement> child)>>
      element_removed;

  /// GstBinClass::add_element:
  /// @bin: the #GstBin
  /// @element: the element to be added
  ///
  /// Method to add an element to the bin.
  ///
  /// Returns: %TRUE if the @element was added
  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstBin> bin, ffi.Pointer<GstElement> element)>>
      add_element;

  /// GstBinClass::remove_element:
  /// @bin: the #GstBin
  /// @element: the element to be removed
  ///
  /// Method to remove an element from the bin.
  ///
  /// Returns: %TRUE if the @element was removed
  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstBin> bin, ffi.Pointer<GstElement> element)>>
      remove_element;

  /// GstBinClass::handle_message:
  /// @bin: the #GstBin
  /// @message: (transfer full): the message to be handled
  ///
  /// Method to handle a message from the children.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GstBin> bin, ffi.Pointer<GstMessage> message)>>
      handle_message;

  external ffi
      .Pointer<ffi.NativeFunction<gboolean Function(ffi.Pointer<GstBin> bin)>>
      do_latency;

  /// GstBinClass::deep_element_added:
  /// @bin: the top level #GstBin
  /// @sub_bin: the #GstBin to which the element was added
  /// @child: the element that was added
  ///
  /// Method called when an element was added somewhere in the bin hierarchy.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstBin> bin,
              ffi.Pointer<GstBin> sub_bin,
              ffi.Pointer<GstElement> child)>> deep_element_added;

  /// GstBinClass::deep_element_removed:
  /// @bin: the top level #GstBin
  /// @sub_bin: the #GstBin from which the element was removed
  /// @child: the element that was removed
  ///
  /// Method called when an element was removed somewhere in the bin hierarchy.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstBin> bin,
              ffi.Pointer<GstBin> sub_bin,
              ffi.Pointer<GstElement> child)>> deep_element_removed;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstBin = _GstBin;

/// GstBufferPoolClass:
/// @object_class:  Object parent class
///
/// The #GstBufferPool class.
final class _GstBufferPoolClass extends ffi.Struct {
  external GstObjectClass object_class;

  /// GstBufferPoolClass::get_options:
  /// @pool: the #GstBufferPool
  ///
  /// Get a list of options supported by this pool
  ///
  /// Returns: (array zero-terminated=1) (transfer none): a %NULL terminated array
  /// of strings.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstBufferPool> pool)>> get_options;

  /// GstBufferPoolClass::set_config:
  /// @pool: the #GstBufferPool
  /// @config: the required configuration
  ///
  /// Apply the bufferpool configuration. The default configuration will parse
  /// the default config parameters.
  ///
  /// Returns: whether the configuration could be set.
  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstBufferPool> pool,
              ffi.Pointer<GstStructure> config)>> set_config;

  /// GstBufferPoolClass::start:
  /// @pool: the #GstBufferPool
  ///
  /// Start the bufferpool. The default implementation will preallocate
  /// min-buffers buffers and put them in the queue.
  ///
  /// Returns: whether the pool could be started.
  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<GstBufferPool> pool)>>
      start;

  /// GstBufferPoolClass::stop:
  /// @pool: the #GstBufferPool
  ///
  /// Stop the bufferpool. the default implementation will free the
  /// preallocated buffers. This function is called when all the buffers are
  /// returned to the pool.
  ///
  /// Returns: whether the pool could be stopped.
  external ffi.Pointer<
      ffi
      .NativeFunction<gboolean Function(ffi.Pointer<GstBufferPool> pool)>> stop;

  /// GstBufferPoolClass::acquire_buffer:
  /// @pool: the #GstBufferPool
  /// @buffer: (out) (transfer full) (nullable): a location for a #GstBuffer
  /// @params: (transfer none) (nullable): parameters.
  ///
  /// Get a new buffer from the pool. The default implementation
  /// will take a buffer from the queue and optionally wait for a buffer to
  /// be released when there are no buffers available.
  ///
  /// Returns: a #GstFlowReturn such as %GST_FLOW_FLUSHING when the pool is
  /// inactive.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstBufferPool> pool,
              ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
              ffi.Pointer<GstBufferPoolAcquireParams> params)>> acquire_buffer;

  /// GstBufferPoolClass::alloc_buffer:
  /// @pool: the #GstBufferPool
  /// @buffer: (out) (transfer full) (nullable): a location for a #GstBuffer
  /// @params: (transfer none) (nullable): parameters.
  ///
  /// Allocate a buffer. the default implementation allocates
  /// buffers from the configured memory allocator and with the configured
  /// parameters. All metadata that is present on the allocated buffer will
  /// be marked as #GST_META_FLAG_POOLED and #GST_META_FLAG_LOCKED and will
  /// not be removed from the buffer in #GstBufferPoolClass::reset_buffer.
  /// The buffer should have the #GST_BUFFER_FLAG_TAG_MEMORY cleared.
  ///
  /// Returns: a #GstFlowReturn to indicate whether the allocation was
  /// successful.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<GstBufferPool> pool,
              ffi.Pointer<ffi.Pointer<GstBuffer>> buffer,
              ffi.Pointer<GstBufferPoolAcquireParams> params)>> alloc_buffer;

  /// GstBufferPoolClass::reset_buffer:
  /// @pool: the #GstBufferPool
  /// @buffer: the #GstBuffer to reset
  ///
  /// Reset the buffer to its state when it was freshly allocated.
  /// The default implementation will clear the flags, timestamps and
  /// will remove the metadata without the #GST_META_FLAG_POOLED flag (even
  /// the metadata with #GST_META_FLAG_LOCKED). If the
  /// #GST_BUFFER_FLAG_TAG_MEMORY was set, this function can also try to
  /// restore the memory and clear the #GST_BUFFER_FLAG_TAG_MEMORY again.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferPool> pool,
              ffi.Pointer<GstBuffer> buffer)>> reset_buffer;

  /// GstBufferPoolClass::release_buffer:
  /// @pool: the #GstBufferPool
  /// @buffer: the #GstBuffer to release
  ///
  /// Release a buffer back in the pool. The default implementation
  /// will put the buffer back in the queue and notify any
  /// blocking #GstBufferPoolClass::acquire_buffer calls when the
  /// #GST_BUFFER_FLAG_TAG_MEMORY is not set on the buffer.
  /// If #GST_BUFFER_FLAG_TAG_MEMORY is set, the buffer will be freed with
  /// #GstBufferPoolClass::free_buffer.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferPool> pool,
              ffi.Pointer<GstBuffer> buffer)>> release_buffer;

  /// GstBufferPoolClass::free_buffer:
  /// @pool: the #GstBufferPool
  /// @buffer: the #GstBuffer to free
  ///
  /// Free a buffer. The default implementation unrefs the buffer.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstBufferPool> pool,
              ffi.Pointer<GstBuffer> buffer)>> free_buffer;

  /// GstBufferPoolClass::flush_start:
  /// @pool: the #GstBufferPool
  ///
  /// Enter the flushing state.
  ///
  /// Since: 1.4
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstBufferPool> pool)>>
      flush_start;

  /// GstBufferPoolClass::flush_stop:
  /// @pool: the #GstBufferPool
  ///
  /// Leave the flushing state.
  ///
  /// Since: 1.4
  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GstBufferPool> pool)>>
      flush_stop;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstBufferPoolAcquireParams = _GstBufferPoolAcquireParams;

/// GstBufferPoolAcquireParams:
/// @format: the format of @start and @stop
/// @start: the start position
/// @stop: the stop position
/// @flags: additional flags
///
/// Parameters passed to the gst_buffer_pool_acquire_buffer() function to control the
/// allocation of the buffer.
///
/// The default implementation ignores the @start and @stop members but other
/// implementations can use this extra information to decide what buffer to
/// return.
final class _GstBufferPoolAcquireParams extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @gint64()
  external int start;

  @gint64()
  external int stop;

  @ffi.Int32()
  external int flags;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstBufferPoolAcquireFlags:
/// @GST_BUFFER_POOL_ACQUIRE_FLAG_NONE: no flags
/// @GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT: buffer is keyframe
/// @GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT: when the bufferpool is empty, acquire_buffer
/// will by default block until a buffer is released into the pool again. Setting
/// this flag makes acquire_buffer return #GST_FLOW_EOS instead of blocking.
/// @GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT: buffer is discont
/// @GST_BUFFER_POOL_ACQUIRE_FLAG_LAST: last flag, subclasses can use private flags
/// starting from this value.
///
/// Additional flags to control the allocation of a buffer
abstract class GstBufferPoolAcquireFlags {
  static const int GST_BUFFER_POOL_ACQUIRE_FLAG_NONE = 0;
  static const int GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT = 1;
  static const int GST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT = 2;
  static const int GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT = 4;
  static const int GST_BUFFER_POOL_ACQUIRE_FLAG_LAST = 65536;
}

final class _GstChildProxy extends ffi.Opaque {}

/// GstChildProxyInterface:
/// @parent: parent interface type.
///
/// #GstChildProxy interface.
final class _GstChildProxyInterface extends ffi.Struct {
  external GTypeInterface parent;

  /// GstChildProxyInterface.get_child_by_name:
  /// @parent: the #GstChildProxy
  /// @name: the name of the child to fetch
  ///
  /// Fetch a child object by name
  ///
  /// Returns: (transfer full) (nullable): the child object
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GObject> Function(ffi.Pointer<GstChildProxy> parent,
              ffi.Pointer<ffi.Char> name)>> get_child_by_name;

  /// GstChildProxyInterface.get_child_by_index:
  /// @parent: the #GstChildProxy
  /// @index: the index of the child to fetch
  ///
  /// Fetch a child object by index
  ///
  /// Returns: (transfer full) (nullable): the child object
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(
                  ffi.Pointer<GstChildProxy> parent, guint index)>>
      get_child_by_index;

  /// GstChildProxyInterface.get_children_count:
  /// @parent: the #GstChildProxy
  ///
  /// Get the number of children in @parent
  ///
  /// Returns: the number of children
  external ffi.Pointer<
          ffi.NativeFunction<guint Function(ffi.Pointer<GstChildProxy> parent)>>
      get_children_count;

  /// GstChildProxyInterface.child_added:
  /// @parent: the #GstChildProxy
  /// @child: the child object
  /// @name: the name of the child object
  ///
  /// Called when @child is added to @parent
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstChildProxy> parent,
              ffi.Pointer<GObject> child,
              ffi.Pointer<ffi.Char> name)>> child_added;

  /// GstChildProxyInterface.child_removed:
  /// @parent: the #GstChildProxy
  /// @child: the child object
  /// @name: the name of the child object
  ///
  /// Called when @child is removed from @parent
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GstChildProxy> parent,
              ffi.Pointer<GObject> child,
              ffi.Pointer<ffi.Char> name)>> child_removed;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstChildProxy:
///
/// Opaque #GstChildProxy data structure.
typedef GstChildProxy = _GstChildProxy;

/// GstDebugGraphDetails:
/// @GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE: show caps-name on edges
/// @GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS: show caps-details on edges
/// @GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS: show modified parameters on
/// elements
/// @GST_DEBUG_GRAPH_SHOW_STATES: show element states
/// @GST_DEBUG_GRAPH_SHOW_FULL_PARAMS: show full element parameter values even
/// if they are very long
/// @GST_DEBUG_GRAPH_SHOW_ALL: show all the typical details that one might want
/// @GST_DEBUG_GRAPH_SHOW_VERBOSE: show all details regardless of how large or
/// verbose they make the resulting output
///
/// Available details for pipeline graphs produced by GST_DEBUG_BIN_TO_DOT_FILE()
/// and GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS().
abstract class GstDebugGraphDetails {
  static const int GST_DEBUG_GRAPH_SHOW_MEDIA_TYPE = 1;
  static const int GST_DEBUG_GRAPH_SHOW_CAPS_DETAILS = 2;
  static const int GST_DEBUG_GRAPH_SHOW_NON_DEFAULT_PARAMS = 4;
  static const int GST_DEBUG_GRAPH_SHOW_STATES = 8;
  static const int GST_DEBUG_GRAPH_SHOW_FULL_PARAMS = 16;
  static const int GST_DEBUG_GRAPH_SHOW_ALL = 15;
  static const int GST_DEBUG_GRAPH_SHOW_VERBOSE = -1;
}

/// GstDeviceProvider:
/// @parent: The parent #GstObject
/// @devices: a #GList of the #GstDevice objects
///
/// The structure of the base #GstDeviceProvider
///
/// Since: 1.4
final class _GstDeviceProvider extends ffi.Struct {
  external GstObject parent;

  external ffi.Pointer<GList> devices;

  external ffi.Pointer<GstDeviceProviderPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstDeviceProviderPrivate = _GstDeviceProviderPrivate;

final class _GstDeviceProviderPrivate extends ffi.Opaque {}

/// GstDeviceProviderClass:
/// @parent_class: the parent #GstObjectClass structure
/// @factory: a pointer to the #GstDeviceProviderFactory that creates this
/// provider
/// @probe: Returns a list of devices that are currently available.
/// This should never block. The devices should not have a parent and should
/// be floating.
/// @start: Starts monitoring for new devices. Only subclasses that can know
/// that devices have been added or remove need to implement this method.
/// @stop: Stops monitoring for new devices. Only subclasses that implement
/// the start() method need to implement this method.
///
/// The structure of the base #GstDeviceProviderClass
///
/// Since: 1.4
final class _GstDeviceProviderClass extends ffi.Struct {
  external GstObjectClass parent_class;

  external ffi.Pointer<GstDeviceProviderFactory> factory1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<GList> Function(
              ffi.Pointer<GstDeviceProvider> provider)>> probe;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GstDeviceProvider> provider)>> start;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GstDeviceProvider> provider)>> stop;

  external ffi.Pointer metadata;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstDeviceProviderFactoryClass:
///
/// The opaque #GstDeviceProviderFactoryClass data structure.
///
/// Since: 1.4
typedef GstDeviceProviderFactory = _GstDeviceProviderFactory;

final class _GstDeviceProviderFactory extends ffi.Opaque {}

typedef GstDeviceProvider = _GstDeviceProvider;

final class _GstDeviceProviderFactoryClass extends ffi.Opaque {}

typedef GstDeviceProviderClass = _GstDeviceProviderClass;

/// GstDeviceMonitor:
/// @parent: the parent #GstObject structure
///
/// Opaque device monitor object structure.
///
/// Since: 1.4
final class _GstDeviceMonitor extends ffi.Struct {
  external GstObject parent;

  external ffi.Pointer<GstDeviceMonitorPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstDeviceMonitorPrivate = _GstDeviceMonitorPrivate;

final class _GstDeviceMonitorPrivate extends ffi.Opaque {}

/// GstDeviceMonitorClass:
/// @parent_class: the parent #GstObjectClass structure
///
/// Opaque device monitor class structure.
///
/// Since: 1.4
final class _GstDeviceMonitorClass extends ffi.Struct {
  external GstObjectClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstDeviceMonitor = _GstDeviceMonitor;

final class _GstDynamicTypeFactory extends ffi.Opaque {}

final class _GstDynamicTypeFactoryClass extends ffi.Opaque {}

/// GstCoreError:
/// @GST_CORE_ERROR_FAILED: a general error which doesn't fit in any other
/// category.  Make sure you add a custom message to the error call.
/// @GST_CORE_ERROR_TOO_LAZY: do not use this except as a placeholder for
/// deciding where to go while developing code.
/// @GST_CORE_ERROR_NOT_IMPLEMENTED: use this when you do not want to implement
/// this functionality yet.
/// @GST_CORE_ERROR_STATE_CHANGE: used for state change errors.
/// @GST_CORE_ERROR_PAD: used for pad-related errors.
/// @GST_CORE_ERROR_THREAD: used for thread-related errors.
/// @GST_CORE_ERROR_NEGOTIATION: used for negotiation-related errors.
/// @GST_CORE_ERROR_EVENT: used for event-related errors.
/// @GST_CORE_ERROR_SEEK: used for seek-related errors.
/// @GST_CORE_ERROR_CAPS: used for caps-related errors.
/// @GST_CORE_ERROR_TAG: used for negotiation-related errors.
/// @GST_CORE_ERROR_MISSING_PLUGIN: used if a plugin is missing.
/// @GST_CORE_ERROR_CLOCK: used for clock related errors.
/// @GST_CORE_ERROR_DISABLED: used if functionality has been disabled at
/// compile time.
/// @GST_CORE_ERROR_NUM_ERRORS: the number of core error types.
///
/// Core errors are errors inside the core GStreamer library.
abstract class GstCoreError {
  static const int GST_CORE_ERROR_FAILED = 1;
  static const int GST_CORE_ERROR_TOO_LAZY = 2;
  static const int GST_CORE_ERROR_NOT_IMPLEMENTED = 3;
  static const int GST_CORE_ERROR_STATE_CHANGE = 4;
  static const int GST_CORE_ERROR_PAD = 5;
  static const int GST_CORE_ERROR_THREAD = 6;
  static const int GST_CORE_ERROR_NEGOTIATION = 7;
  static const int GST_CORE_ERROR_EVENT = 8;
  static const int GST_CORE_ERROR_SEEK = 9;
  static const int GST_CORE_ERROR_CAPS = 10;
  static const int GST_CORE_ERROR_TAG = 11;
  static const int GST_CORE_ERROR_MISSING_PLUGIN = 12;
  static const int GST_CORE_ERROR_CLOCK = 13;
  static const int GST_CORE_ERROR_DISABLED = 14;
  static const int GST_CORE_ERROR_NUM_ERRORS = 15;
}

/// GstLibraryError:
/// @GST_LIBRARY_ERROR_FAILED: a general error which doesn't fit in any other
/// category.  Make sure you add a custom message to the error call.
/// @GST_LIBRARY_ERROR_TOO_LAZY: do not use this except as a placeholder for
/// deciding where to go while developing code.
/// @GST_LIBRARY_ERROR_INIT: used when the library could not be opened.
/// @GST_LIBRARY_ERROR_SHUTDOWN: used when the library could not be closed.
/// @GST_LIBRARY_ERROR_SETTINGS: used when the library doesn't accept settings.
/// @GST_LIBRARY_ERROR_ENCODE: used when the library generated an encoding error.
/// @GST_LIBRARY_ERROR_NUM_ERRORS: the number of library error types.
///
/// Library errors are for errors from the library being used by elements
/// (initializing, finalizing, settings, ...)
abstract class GstLibraryError {
  static const int GST_LIBRARY_ERROR_FAILED = 1;
  static const int GST_LIBRARY_ERROR_TOO_LAZY = 2;
  static const int GST_LIBRARY_ERROR_INIT = 3;
  static const int GST_LIBRARY_ERROR_SHUTDOWN = 4;
  static const int GST_LIBRARY_ERROR_SETTINGS = 5;
  static const int GST_LIBRARY_ERROR_ENCODE = 6;
  static const int GST_LIBRARY_ERROR_NUM_ERRORS = 7;
}

/// GstResourceError:
/// @GST_RESOURCE_ERROR_FAILED: a general error which doesn't fit in any other
/// category.  Make sure you add a custom message to the error call.
/// @GST_RESOURCE_ERROR_TOO_LAZY: do not use this except as a placeholder for
/// deciding where to go while developing code.
/// @GST_RESOURCE_ERROR_NOT_FOUND: used when the resource could not be found.
/// @GST_RESOURCE_ERROR_BUSY: used when resource is busy.
/// @GST_RESOURCE_ERROR_OPEN_READ: used when resource fails to open for reading.
/// @GST_RESOURCE_ERROR_OPEN_WRITE: used when resource fails to open for writing.
/// @GST_RESOURCE_ERROR_OPEN_READ_WRITE: used when resource cannot be opened for
/// both reading and writing, or either (but unspecified which).
/// @GST_RESOURCE_ERROR_CLOSE: used when the resource can't be closed.
/// @GST_RESOURCE_ERROR_READ: used when the resource can't be read from.
/// @GST_RESOURCE_ERROR_WRITE: used when the resource can't be written to.
/// @GST_RESOURCE_ERROR_SEEK: used when a seek on the resource fails.
/// @GST_RESOURCE_ERROR_SYNC: used when a synchronize on the resource fails.
/// @GST_RESOURCE_ERROR_SETTINGS: used when settings can't be manipulated on.
/// @GST_RESOURCE_ERROR_NO_SPACE_LEFT: used when the resource has no space left.
/// @GST_RESOURCE_ERROR_NOT_AUTHORIZED: used when the resource can't be opened
/// due to missing authorization.
/// (Since: 1.2.4)
/// @GST_RESOURCE_ERROR_NUM_ERRORS: the number of resource error types.
///
/// Resource errors are for any resource used by an element:
/// memory, files, network connections, process space, ...
/// They're typically used by source and sink elements.
abstract class GstResourceError {
  static const int GST_RESOURCE_ERROR_FAILED = 1;
  static const int GST_RESOURCE_ERROR_TOO_LAZY = 2;
  static const int GST_RESOURCE_ERROR_NOT_FOUND = 3;
  static const int GST_RESOURCE_ERROR_BUSY = 4;
  static const int GST_RESOURCE_ERROR_OPEN_READ = 5;
  static const int GST_RESOURCE_ERROR_OPEN_WRITE = 6;
  static const int GST_RESOURCE_ERROR_OPEN_READ_WRITE = 7;
  static const int GST_RESOURCE_ERROR_CLOSE = 8;
  static const int GST_RESOURCE_ERROR_READ = 9;
  static const int GST_RESOURCE_ERROR_WRITE = 10;
  static const int GST_RESOURCE_ERROR_SEEK = 11;
  static const int GST_RESOURCE_ERROR_SYNC = 12;
  static const int GST_RESOURCE_ERROR_SETTINGS = 13;
  static const int GST_RESOURCE_ERROR_NO_SPACE_LEFT = 14;
  static const int GST_RESOURCE_ERROR_NOT_AUTHORIZED = 15;
  static const int GST_RESOURCE_ERROR_NUM_ERRORS = 16;
}

/// GstStreamError:
/// @GST_STREAM_ERROR_FAILED: a general error which doesn't fit in any other
/// category.  Make sure you add a custom message to the error call.
/// @GST_STREAM_ERROR_TOO_LAZY: do not use this except as a placeholder for
/// deciding where to go while developing code.
/// @GST_STREAM_ERROR_NOT_IMPLEMENTED: use this when you do not want to implement
/// this functionality yet.
/// @GST_STREAM_ERROR_TYPE_NOT_FOUND: used when the element doesn't know the
/// stream's type.
/// @GST_STREAM_ERROR_WRONG_TYPE: used when the element doesn't handle this type
/// of stream.
/// @GST_STREAM_ERROR_CODEC_NOT_FOUND: used when there's no codec to handle the
/// stream's type.
/// @GST_STREAM_ERROR_DECODE: used when decoding fails.
/// @GST_STREAM_ERROR_ENCODE: used when encoding fails.
/// @GST_STREAM_ERROR_DEMUX: used when demuxing fails.
/// @GST_STREAM_ERROR_MUX: used when muxing fails.
/// @GST_STREAM_ERROR_FORMAT: used when the stream is of the wrong format
/// (for example, wrong caps).
/// @GST_STREAM_ERROR_DECRYPT: used when the stream is encrypted and can't be
/// decrypted because this is not supported by the element.
/// @GST_STREAM_ERROR_DECRYPT_NOKEY: used when the stream is encrypted and
/// can't be decrypted because no suitable key is available.
/// @GST_STREAM_ERROR_NUM_ERRORS: the number of stream error types.
///
/// Stream errors are for anything related to the stream being processed:
/// format errors, media type errors, ...
/// They're typically used by decoders, demuxers, converters, ...
abstract class GstStreamError {
  static const int GST_STREAM_ERROR_FAILED = 1;
  static const int GST_STREAM_ERROR_TOO_LAZY = 2;
  static const int GST_STREAM_ERROR_NOT_IMPLEMENTED = 3;
  static const int GST_STREAM_ERROR_TYPE_NOT_FOUND = 4;
  static const int GST_STREAM_ERROR_WRONG_TYPE = 5;
  static const int GST_STREAM_ERROR_CODEC_NOT_FOUND = 6;
  static const int GST_STREAM_ERROR_DECODE = 7;
  static const int GST_STREAM_ERROR_ENCODE = 8;
  static const int GST_STREAM_ERROR_DEMUX = 9;
  static const int GST_STREAM_ERROR_MUX = 10;
  static const int GST_STREAM_ERROR_FORMAT = 11;
  static const int GST_STREAM_ERROR_DECRYPT = 12;
  static const int GST_STREAM_ERROR_DECRYPT_NOKEY = 13;
  static const int GST_STREAM_ERROR_NUM_ERRORS = 14;
}

final class _GstProxyPad extends ffi.Opaque {}

final class _GstProxyPadPrivate extends ffi.Opaque {}

final class _GstProxyPadClass extends ffi.Struct {
  external GstPadClass parent_class;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstPadClass = _GstPadClass;
typedef GstProxyPad = _GstProxyPad;

final class _GstGhostPad extends ffi.Opaque {}

final class _GstGhostPadPrivate extends ffi.Opaque {}

final class _GstGhostPadClass extends ffi.Struct {
  external GstProxyPadClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstProxyPadClass = _GstProxyPadClass;

/// GstGhostPad:
///
/// Opaque #GstGhostPad structure.
typedef GstGhostPad = _GstGhostPad;

/// GstDebugLevel:
/// @GST_LEVEL_NONE: No debugging level specified or desired. Used to deactivate
/// debugging output.
/// @GST_LEVEL_ERROR: Error messages are to be used only when an error occurred
/// that stops the application from keeping working correctly.
/// An examples is gst_element_error, which outputs a message with this priority.
/// It does not mean that the application is terminating as with g_error.
/// @GST_LEVEL_WARNING: Warning messages are to inform about abnormal behaviour
/// that could lead to problems or weird behaviour later on. An example of this
/// would be clocking issues ("your computer is pretty slow") or broken input
/// data ("Can't synchronize to stream.")
/// @GST_LEVEL_FIXME: Fixme messages are messages that indicate that something
/// in the executed code path is not fully implemented or handled yet. Note
/// that this does not replace proper error handling in any way, the purpose
/// of this message is to make it easier to spot incomplete/unfinished pieces
/// of code when reading the debug log.
/// @GST_LEVEL_INFO: Informational messages should be used to keep the developer
/// updated about what is happening.
/// Examples where this should be used are when a typefind function has
/// successfully determined the type of the stream or when an mp3 plugin detects
/// the format to be used. ("This file has mono sound.")
/// @GST_LEVEL_DEBUG: Debugging messages should be used when something common
/// happens that is not the expected default behavior, or something that's
/// useful to know but doesn't happen all the time (ie. per loop iteration or
/// buffer processed or event handled).
/// An example would be notifications about state changes or receiving/sending
/// of events.
/// @GST_LEVEL_LOG: Log messages are messages that are very common but might be
/// useful to know. As a rule of thumb a pipeline that is running as expected
/// should never output anything else but LOG messages whilst processing data.
/// Use this log level to log recurring information in chain functions and
/// loop functions, for example.
/// @GST_LEVEL_TRACE: Tracing-related messages.
/// Examples for this are referencing/dereferencing of objects.
/// @GST_LEVEL_MEMDUMP: memory dump messages are used to log (small) chunks of
/// data as memory dumps in the log. They will be displayed as hexdump with
/// ASCII characters.
/// @GST_LEVEL_COUNT: The number of defined debugging levels.
///
/// The level defines the importance of a debugging message. The more important a
/// message is, the greater the probability that the debugging system outputs it.
abstract class GstDebugLevel {
  static const int GST_LEVEL_NONE = 0;
  static const int GST_LEVEL_ERROR = 1;
  static const int GST_LEVEL_WARNING = 2;
  static const int GST_LEVEL_FIXME = 3;
  static const int GST_LEVEL_INFO = 4;
  static const int GST_LEVEL_DEBUG = 5;
  static const int GST_LEVEL_LOG = 6;
  static const int GST_LEVEL_TRACE = 7;
  static const int GST_LEVEL_MEMDUMP = 9;
  static const int GST_LEVEL_COUNT = 10;
}

/// GstDebugColorFlags:
/// @GST_DEBUG_FG_BLACK: Use black as foreground color.
/// @GST_DEBUG_FG_RED: Use red as foreground color.
/// @GST_DEBUG_FG_GREEN: Use green as foreground color.
/// @GST_DEBUG_FG_YELLOW: Use yellow as foreground color.
/// @GST_DEBUG_FG_BLUE: Use blue as foreground color.
/// @GST_DEBUG_FG_MAGENTA: Use magenta as foreground color.
/// @GST_DEBUG_FG_CYAN: Use cyan as foreground color.
/// @GST_DEBUG_FG_WHITE: Use white as foreground color.
/// @GST_DEBUG_BG_BLACK: Use black as background color.
/// @GST_DEBUG_BG_RED: Use red as background color.
/// @GST_DEBUG_BG_GREEN: Use green as background color.
/// @GST_DEBUG_BG_YELLOW: Use yellow as background color.
/// @GST_DEBUG_BG_BLUE: Use blue as background color.
/// @GST_DEBUG_BG_MAGENTA: Use magenta as background color.
/// @GST_DEBUG_BG_CYAN: Use cyan as background color.
/// @GST_DEBUG_BG_WHITE: Use white as background color.
/// @GST_DEBUG_BOLD: Make the output bold.
/// @GST_DEBUG_UNDERLINE: Underline the output.
///
/// These are some terminal style flags you can use when creating your
/// debugging categories to make them stand out in debugging output.
abstract class GstDebugColorFlags {
  static const int GST_DEBUG_FG_BLACK = 0;
  static const int GST_DEBUG_FG_RED = 1;
  static const int GST_DEBUG_FG_GREEN = 2;
  static const int GST_DEBUG_FG_YELLOW = 3;
  static const int GST_DEBUG_FG_BLUE = 4;
  static const int GST_DEBUG_FG_MAGENTA = 5;
  static const int GST_DEBUG_FG_CYAN = 6;
  static const int GST_DEBUG_FG_WHITE = 7;
  static const int GST_DEBUG_BG_BLACK = 0;
  static const int GST_DEBUG_BG_RED = 16;
  static const int GST_DEBUG_BG_GREEN = 32;
  static const int GST_DEBUG_BG_YELLOW = 48;
  static const int GST_DEBUG_BG_BLUE = 64;
  static const int GST_DEBUG_BG_MAGENTA = 80;
  static const int GST_DEBUG_BG_CYAN = 96;
  static const int GST_DEBUG_BG_WHITE = 112;
  static const int GST_DEBUG_BOLD = 256;
  static const int GST_DEBUG_UNDERLINE = 512;
}

/// GstStackTraceFlags:
/// @GST_STACK_TRACE_SHOW_NONE: Try to retrieve the minimum information
/// available, which may be none on some platforms
/// (Since: 1.18)
/// @GST_STACK_TRACE_SHOW_FULL: Try to retrieve as much information as possible,
/// including source information when getting the
/// stack trace
///
/// Since: 1.12
abstract class GstStackTraceFlags {
  static const int GST_STACK_TRACE_SHOW_NONE = 0;
  static const int GST_STACK_TRACE_SHOW_FULL = 1;
}

/// GstDebugColorMode:
/// @GST_DEBUG_COLOR_MODE_OFF: Do not use colors in logs.
/// @GST_DEBUG_COLOR_MODE_ON: Paint logs in a platform-specific way.
/// @GST_DEBUG_COLOR_MODE_UNIX: Paint logs with UNIX terminal color codes
/// no matter what platform GStreamer is running on.
abstract class GstDebugColorMode {
  static const int GST_DEBUG_COLOR_MODE_OFF = 0;
  static const int GST_DEBUG_COLOR_MODE_ON = 1;
  static const int GST_DEBUG_COLOR_MODE_UNIX = 2;
}

/// GstDebugCategory:
///
/// This is the struct that describes the categories. Once initialized with
/// #GST_DEBUG_CATEGORY_INIT, its values can't be changed anymore.
final class _GstDebugCategory extends ffi.Struct {
  @gint()
  external int threshold;

  @guint()
  external int color;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;
}

final class _GstDebugMessage extends ffi.Opaque {}

typedef GstDebugCategory = _GstDebugCategory;

/// GstDebugFuncPtr: (attributes doc.skip=true)
/// we define this to avoid a compiler warning regarding a cast from a function
/// pointer to a void pointer
/// (see https://bugzilla.gnome.org/show_bug.cgi?id=309253)
typedef GstDebugFuncPtr
    = ffi.Pointer<ffi.NativeFunction<GstDebugFuncPtrFunction>>;
typedef GstDebugFuncPtrFunction = ffi.Void Function();
typedef DartGstDebugFuncPtrFunction = void Function();
typedef GstDebugMessage = _GstDebugMessage;

/// GstLogFunction:
/// @category: a #GstDebugCategory
/// @level: a #GstDebugLevel
/// @file: file name
/// @function: function name
/// @line: line number
/// @object: a #GObject
/// @message: the message
/// @user_data: user data for the log function
///
/// Function prototype for a logging function that can be registered with
/// gst_debug_add_log_function().
/// Use G_GNUC_NO_INSTRUMENT on that function.
typedef GstLogFunction
    = ffi.Pointer<ffi.NativeFunction<GstLogFunctionFunction>>;
typedef GstLogFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstDebugCategory> category,
    ffi.Int32 level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    gint line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<GstDebugMessage> message,
    ffi.Pointer user_data);
typedef DartGstLogFunctionFunction = void Function(
    ffi.Pointer<GstDebugCategory> category,
    int level,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> function,
    Dartgint line,
    ffi.Pointer<GObject> object,
    ffi.Pointer<GstDebugMessage> message,
    ffi.Pointer user_data);

/// GstValueTable:
/// @type: a #GType
/// @compare: a #GstValueCompareFunc
/// @serialize: a #GstValueSerializeFunc
/// @deserialize: a #GstValueDeserializeFunc
/// @deserialize_with_pspec: a #GstValueDeserializeWithPSpecFunc
///
/// VTable for the #GValue @type.
final class _GstValueTable extends ffi.Struct {
  @GType()
  external int type;

  external GstValueCompareFunc compare;

  external GstValueSerializeFunc serialize;

  external GstValueDeserializeFunc deserialize;

  /// GstValueTable.deserialize_with_pspec:
  ///
  /// a #GstValueDeserializeWithPSpecFunc
  ///
  /// Since: 1.20
  external GstValueDeserializeWithPSpecFunc deserialize_with_pspec;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstValueCompareFunc:
/// @value1: first value for comparison
/// @value2: second value for comparison
///
/// Used together with gst_value_compare() to compare #GValue items.
///
/// Returns: one of GST_VALUE_LESS_THAN, GST_VALUE_EQUAL, GST_VALUE_GREATER_THAN
/// or GST_VALUE_UNORDERED
typedef GstValueCompareFunc
    = ffi.Pointer<ffi.NativeFunction<GstValueCompareFuncFunction>>;
typedef GstValueCompareFuncFunction = gint Function(
    ffi.Pointer<GValue> value1, ffi.Pointer<GValue> value2);
typedef DartGstValueCompareFuncFunction = Dartgint Function(
    ffi.Pointer<GValue> value1, ffi.Pointer<GValue> value2);

/// GstValueSerializeFunc:
/// @value1: a #GValue
///
/// Used by gst_value_serialize() to obtain a non-binary form of the #GValue.
///
/// Free-function: g_free
///
/// Returns: (transfer full): the string representation of the value
typedef GstValueSerializeFunc
    = ffi.Pointer<ffi.NativeFunction<GstValueSerializeFuncFunction>>;
typedef GstValueSerializeFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<GValue> value1);

/// GstValueDeserializeFunc:
/// @dest: a #GValue
/// @s: a string
///
/// Used by gst_value_deserialize() to parse a non-binary form into the #GValue.
///
/// Returns: %TRUE for success
typedef GstValueDeserializeFunc
    = ffi.Pointer<ffi.NativeFunction<GstValueDeserializeFuncFunction>>;
typedef GstValueDeserializeFuncFunction = gboolean Function(
    ffi.Pointer<GValue> dest, ffi.Pointer<ffi.Char> s);
typedef DartGstValueDeserializeFuncFunction = Dartgint Function(
    ffi.Pointer<GValue> dest, ffi.Pointer<ffi.Char> s);

/// GstValueDeserializeWithPSpecFunc:
/// @dest: a #GValue
/// @s: a string
/// @pspec: a #GParamSpec describing the expected value
///
/// Used by gst_value_deserialize_with_pspec() to parse a non-binary form into the #GValue.
///
/// Returns: %TRUE for success
/// Since: 1.20
typedef GstValueDeserializeWithPSpecFunc
    = ffi.Pointer<ffi.NativeFunction<GstValueDeserializeWithPSpecFuncFunction>>;
typedef GstValueDeserializeWithPSpecFuncFunction = gboolean Function(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<GParamSpec> pspec);
typedef DartGstValueDeserializeWithPSpecFuncFunction = Dartgint Function(
    ffi.Pointer<GValue> dest,
    ffi.Pointer<ffi.Char> s,
    ffi.Pointer<GParamSpec> pspec);
typedef GstValueTable = _GstValueTable;

/// GstParamSpecFraction:
/// @parent_instance: super class
/// @min_num: minimal numerator
/// @min_den: minimal denominator
/// @max_num: maximal numerator
/// @max_den: maximal denominator
/// @def_num: default numerator
/// @def_den: default denominator
///
/// A GParamSpec derived structure that contains the meta data for fractional
/// properties.
final class _GstParamSpecFraction extends ffi.Struct {
  external GParamSpec parent_instance;

  @gint()
  external int min_num;

  @gint()
  external int min_den;

  @gint()
  external int max_num;

  @gint()
  external int max_den;

  @gint()
  external int def_num;

  @gint()
  external int def_den;
}

/// GstParamSpecArray:
/// @parent_instance: super class
/// @element_spec: the #GParamSpec of the type of values in the array
///
/// A GParamSpec derived structure for arrays of values.
final class _GstParamSpecArray extends ffi.Struct {
  external GParamSpec parent_instance;

  external ffi.Pointer<GParamSpec> element_spec;
}

/// GstPipeline:
/// @fixed_clock: The fixed clock of the pipeline, used when
/// GST_PIPELINE_FLAG_FIXED_CLOCK is set.
/// @stream_time: The stream time of the pipeline. A better name for this
/// property would be the running_time, the total time spent in the
/// PLAYING state without being flushed. (deprecated, use the start_time
/// on GstElement).
/// @delay: Extra delay added to base_time to compensate for computing delays
/// when setting elements to PLAYING.
///
/// The #GstPipeline structure.
final class _GstPipeline extends ffi.Struct {
  external GstBin bin;

  external ffi.Pointer<GstClock> fixed_clock;

  @GstClockTime()
  external int stream_time;

  @GstClockTime()
  external int delay;

  external ffi.Pointer<GstPipelinePrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstPipelinePrivate = _GstPipelinePrivate;

final class _GstPipelinePrivate extends ffi.Opaque {}

final class _GstPipelineClass extends ffi.Struct {
  external GstBinClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstBinClass = _GstBinClass;

/// GstPipelineFlags:
/// @GST_PIPELINE_FLAG_FIXED_CLOCK: this pipeline works with a fixed clock
/// @GST_PIPELINE_FLAG_LAST: offset to define more flags
///
/// Pipeline flags
abstract class GstPipelineFlags {
  static const int GST_PIPELINE_FLAG_FIXED_CLOCK = 524288;
  static const int GST_PIPELINE_FLAG_LAST = 8388608;
}

typedef GstPipeline = _GstPipeline;

final class _GstPoll extends ffi.Opaque {}

/// GstPollFD:
/// @fd: a file descriptor
///
/// A file descriptor object.
final class GstPollFD extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @gint()
  external int idx;
}

/// GstPoll:
///
/// A set of file/network descriptors.
typedef GstPoll = _GstPoll;

final class _GstPreset extends ffi.Opaque {}

/// GstPresetInterface:
/// @parent: parent interface type.
/// @get_preset_names: virtual method to get list of presets
/// @get_property_names: virtual methods to get properties that are persistent
/// @load_preset: virtual methods to load a preset into properties
/// @save_preset: virtual methods to save properties into a preset
/// @rename_preset: virtual methods to rename a preset
/// @delete_preset: virtual methods to remove a preset
/// @set_meta: virtual methods to set textual meta data to a preset
/// @get_meta: virtual methods to get textual meta data from a preset
///
/// #GstPreset interface.
final class _GstPresetInterface extends ffi.Struct {
  external GTypeInterface parent;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPreset> preset)>> get_preset_names;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<GstPreset> preset)>> get_property_names;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstPreset> preset, ffi.Pointer<ffi.Char> name)>>
      load_preset;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstPreset> preset, ffi.Pointer<ffi.Char> name)>>
      save_preset;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPreset> preset,
              ffi.Pointer<ffi.Char> old_name,
              ffi.Pointer<ffi.Char> new_name)>> rename_preset;

  external ffi.Pointer<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<GstPreset> preset, ffi.Pointer<ffi.Char> name)>>
      delete_preset;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPreset> preset,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Char> tag,
              ffi.Pointer<ffi.Char> value)>> set_meta;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<GstPreset> preset,
              ffi.Pointer<ffi.Char> name,
              ffi.Pointer<ffi.Char> tag,
              ffi.Pointer<ffi.Pointer<ffi.Char>> value)>> get_meta;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstPreset:
///
/// Opaque #GstPreset data structure.
typedef GstPreset = _GstPreset;

/// GstProtectionMeta:
/// @meta: the parent #GstMeta.
/// @info: the cryptographic information needed to decrypt the sample.
///
/// Metadata type that holds information about a sample from a protection-protected
/// track, including the information needed to decrypt it (if it is encrypted).
///
/// Since: 1.6
final class _GstProtectionMeta extends ffi.Struct {
  external GstMeta meta;

  external ffi.Pointer<GstStructure> info;
}

typedef GstProtectionMeta = _GstProtectionMeta;

/// GstRegistry:
///
/// Opaque #GstRegistry structure.
final class _GstRegistry extends ffi.Struct {
  external GstObject object;

  external ffi.Pointer<GstRegistryPrivate> priv;
}

typedef GstRegistryPrivate = _GstRegistryPrivate;

final class _GstRegistryPrivate extends ffi.Opaque {}

final class _GstRegistryClass extends ffi.Struct {
  external GstObjectClass parent_class;
}

typedef GstRegistry = _GstRegistry;

/// GstPluginFilter:
/// @plugin: the plugin to check
/// @user_data: the user_data that has been passed on e.g. gst_registry_plugin_filter()
///
/// A function that can be used with e.g. gst_registry_plugin_filter()
/// to get a list of plugins that match certain criteria.
///
/// Returns: %TRUE for a positive match, %FALSE otherwise
typedef GstPluginFilter
    = ffi.Pointer<ffi.NativeFunction<GstPluginFilterFunction>>;
typedef GstPluginFilterFunction = gboolean Function(
    ffi.Pointer<GstPlugin> plugin, ffi.Pointer user_data);
typedef DartGstPluginFilterFunction = Dartgint Function(
    ffi.Pointer<GstPlugin> plugin, ffi.Pointer user_data);

/// GstPluginFeatureFilter:
/// @feature: the pluginfeature to check
/// @user_data: the user_data that has been passed on e.g.
/// gst_registry_feature_filter()
///
/// A function that can be used with e.g. gst_registry_feature_filter()
/// to get a list of pluginfeature that match certain criteria.
///
/// Returns: %TRUE for a positive match, %FALSE otherwise
typedef GstPluginFeatureFilter
    = ffi.Pointer<ffi.NativeFunction<GstPluginFeatureFilterFunction>>;
typedef GstPluginFeatureFilterFunction = gboolean Function(
    ffi.Pointer<GstPluginFeature> feature, ffi.Pointer user_data);
typedef DartGstPluginFeatureFilterFunction = Dartgint Function(
    ffi.Pointer<GstPluginFeature> feature, ffi.Pointer user_data);

/// GstPromise:
/// @parent: parent #GstMiniObject
///
/// Since: 1.14
final class _GstPromise extends ffi.Struct {
  external GstMiniObject parent;
}

/// GstPromiseResult:
/// @GST_PROMISE_RESULT_PENDING: Initial state. Waiting for transition to any
/// other state.
/// @GST_PROMISE_RESULT_INTERRUPTED: Interrupted by the consumer as it doesn't
/// want the value anymore.
/// @GST_PROMISE_RESULT_REPLIED: A producer marked a reply
/// @GST_PROMISE_RESULT_EXPIRED: The promise expired (the carrying object
/// lost all refs) and the promise will never be fulfilled.
///
/// The result of a #GstPromise
///
/// Since: 1.14
abstract class GstPromiseResult {
  static const int GST_PROMISE_RESULT_PENDING = 0;
  static const int GST_PROMISE_RESULT_INTERRUPTED = 1;
  static const int GST_PROMISE_RESULT_REPLIED = 2;
  static const int GST_PROMISE_RESULT_EXPIRED = 3;
}

typedef GstPromise = _GstPromise;

/// GstPromiseChangeFunc:
/// @promise: a #GstPromise
/// @user_data: (closure): user data
///
/// Since: 1.14
typedef GstPromiseChangeFunc
    = ffi.Pointer<ffi.NativeFunction<GstPromiseChangeFuncFunction>>;
typedef GstPromiseChangeFuncFunction = ffi.Void Function(
    ffi.Pointer<GstPromise> promise, ffi.Pointer user_data);
typedef DartGstPromiseChangeFuncFunction = void Function(
    ffi.Pointer<GstPromise> promise, ffi.Pointer user_data);

/// GstSystemClock:
///
/// The default implementation of a #GstClock that uses the system time.
final class _GstSystemClock extends ffi.Struct {
  external GstClock clock;

  external ffi.Pointer<GstSystemClockPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstSystemClockPrivate = _GstSystemClockPrivate;

final class _GstSystemClockPrivate extends ffi.Opaque {}

final class _GstSystemClockClass extends ffi.Struct {
  external GstClockClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstClockClass = _GstClockClass;

/// GstClockType:
/// @GST_CLOCK_TYPE_REALTIME: time since Epoch
/// @GST_CLOCK_TYPE_MONOTONIC: monotonic time since some unspecified starting
/// point
/// @GST_CLOCK_TYPE_OTHER: some other time source is used (Since: 1.0.5)
/// @GST_CLOCK_TYPE_TAI: time since Epoch, but using International Atomic Time
/// as reference (Since: 1.18)
///
/// The different kind of clocks.
abstract class GstClockType {
  static const int GST_CLOCK_TYPE_REALTIME = 0;
  static const int GST_CLOCK_TYPE_MONOTONIC = 1;
  static const int GST_CLOCK_TYPE_OTHER = 2;
  static const int GST_CLOCK_TYPE_TAI = 3;
}

final class _GstTagSetter extends ffi.Opaque {}

/// GstTagSetterInterface:
/// @g_iface: parent interface type.
///
/// #GstTagSetterInterface interface.
final class _GstTagSetterInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

/// GstTagSetter:
///
/// Opaque #GstTagSetter data structure.
typedef GstTagSetter = _GstTagSetter;

final class _GstTocSetter extends ffi.Opaque {}

/// GstTocSetterInterface:
/// @g_iface: parent interface type.
///
/// #GstTocSetterInterface interface.
final class _GstTocSetterInterface extends ffi.Struct {
  external GTypeInterface g_iface;
}

/// GstTocSetter:
///
/// Opaque #GstTocSetter data structure.
typedef GstTocSetter = _GstTocSetter;

/// GstTracer:
///
/// The opaque GstTracer instance structure
final class _GstTracer extends ffi.Struct {
  external GstObject parent;

  external ffi.Pointer<GstTracerPrivate> priv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstTracerPrivate = _GstTracerPrivate;

final class _GstTracerPrivate extends ffi.Opaque {}

final class _GstTracerClass extends ffi.Struct {
  external GstObjectClass parent_class;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

typedef GstTracer = _GstTracer;

final class _GstTracerFactory extends ffi.Opaque {}

final class _GstTracerFactoryClass extends ffi.Opaque {}

/// GstTracerFactory:
///
/// Opaque object that stores information about a tracer function.
///
/// Since: 1.8
typedef GstTracerFactory = _GstTracerFactory;

final class _GstTracerRecord extends ffi.Opaque {}

final class _GstTracerRecordClass extends ffi.Opaque {}

/// GstTracerValueScope:
/// @GST_TRACER_VALUE_SCOPE_PROCESS: the value is related to the process
/// @GST_TRACER_VALUE_SCOPE_THREAD: the value is related to a thread
/// @GST_TRACER_VALUE_SCOPE_ELEMENT: the value is related to an #GstElement
/// @GST_TRACER_VALUE_SCOPE_PAD: the value is related to a #GstPad
///
/// Tracing record will contain fields that contain a measured value or extra
/// meta-data. One such meta data are values that tell where a measurement was
/// taken. This enumerating declares to which scope such a meta data field
/// relates to. If it is e.g. %GST_TRACER_VALUE_SCOPE_PAD, then each of the log
/// events may contain values for different #GstPads.
///
/// Since: 1.8
abstract class GstTracerValueScope {
  static const int GST_TRACER_VALUE_SCOPE_PROCESS = 0;
  static const int GST_TRACER_VALUE_SCOPE_THREAD = 1;
  static const int GST_TRACER_VALUE_SCOPE_ELEMENT = 2;
  static const int GST_TRACER_VALUE_SCOPE_PAD = 3;
}

/// GstTracerValueFlags:
/// @GST_TRACER_VALUE_FLAGS_NONE: no flags
/// @GST_TRACER_VALUE_FLAGS_OPTIONAL: the value is optional. When using this flag
/// one need to have an additional boolean arg before this value in the
/// var-args list passed to  gst_tracer_record_log().
/// @GST_TRACER_VALUE_FLAGS_AGGREGATED: the value is a combined figure, since the
/// start of tracing. Examples are averages or timestamps.
///
/// Flag that describe the value. These flags help applications processing the
/// logs to understand the values.
abstract class GstTracerValueFlags {
  static const int GST_TRACER_VALUE_FLAGS_NONE = 0;
  static const int GST_TRACER_VALUE_FLAGS_OPTIONAL = 1;
  static const int GST_TRACER_VALUE_FLAGS_AGGREGATED = 2;
}

/// GstTracerRecord:
///
/// The opaque GstTracerRecord instance structure
///
/// Since: 1.8
typedef GstTracerRecord = _GstTracerRecord;

/// GstTypeFind:
/// @peek: Method to peek data.
/// @suggest: Method to suggest #GstCaps with a given probability.
/// @data: The data used by the caller of the typefinding function.
/// @get_length: Returns the length of current data.
///
/// Object that stores typefind callbacks. To use with #GstTypeFindFactory.
final class _GstTypeFind extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<guint8> Function(
              ffi.Pointer data, gint64 offset, guint size)>> peek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer data, guint probability,
              ffi.Pointer<GstCaps> caps)>> suggest;

  external ffi.Pointer data;

  external ffi.Pointer<ffi.NativeFunction<guint64 Function(ffi.Pointer data)>>
      get_length;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer> _gst_reserved;
}

/// GstTypeFindProbability:
/// @GST_TYPE_FIND_NONE: type undetected.
/// @GST_TYPE_FIND_MINIMUM: unlikely typefind.
/// @GST_TYPE_FIND_POSSIBLE: possible type detected.
/// @GST_TYPE_FIND_LIKELY: likely a type was detected.
/// @GST_TYPE_FIND_NEARLY_CERTAIN: nearly certain that a type was detected.
/// @GST_TYPE_FIND_MAXIMUM: very certain a type was detected.
///
/// The probability of the typefind function. Higher values have more certainty
/// in doing a reliable typefind.
abstract class GstTypeFindProbability {
  static const int GST_TYPE_FIND_NONE = 0;
  static const int GST_TYPE_FIND_MINIMUM = 1;
  static const int GST_TYPE_FIND_POSSIBLE = 50;
  static const int GST_TYPE_FIND_LIKELY = 80;
  static const int GST_TYPE_FIND_NEARLY_CERTAIN = 99;
  static const int GST_TYPE_FIND_MAXIMUM = 100;
}

typedef GstTypeFind = _GstTypeFind;

/// GstTypeFindFunction:
/// @find: A #GstTypeFind structure
/// @user_data: optional data to pass to the function
///
/// A function that will be called by typefinding.
typedef GstTypeFindFunction
    = ffi.Pointer<ffi.NativeFunction<GstTypeFindFunctionFunction>>;
typedef GstTypeFindFunctionFunction = ffi.Void Function(
    ffi.Pointer<GstTypeFind> find, ffi.Pointer user_data);
typedef DartGstTypeFindFunctionFunction = void Function(
    ffi.Pointer<GstTypeFind> find, ffi.Pointer user_data);

final class _GstTypeFindFactory extends ffi.Opaque {}

final class _GstTypeFindFactoryClass extends ffi.Opaque {}

/// GstTypeFindFactory:
///
/// Opaque object that stores information about a typefind function.
typedef GstTypeFindFactory = _GstTypeFindFactory;

/// GstParseError:
/// @GST_PARSE_ERROR_SYNTAX: A syntax error occurred.
/// @GST_PARSE_ERROR_NO_SUCH_ELEMENT: The description contained an unknown element
/// @GST_PARSE_ERROR_NO_SUCH_PROPERTY: An element did not have a specified property
/// @GST_PARSE_ERROR_LINK: There was an error linking two pads.
/// @GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY: There was an error setting a property
/// @GST_PARSE_ERROR_EMPTY_BIN: An empty bin was specified.
/// @GST_PARSE_ERROR_EMPTY: An empty description was specified
/// @GST_PARSE_ERROR_DELAYED_LINK: A delayed link did not get resolved.
///
/// The different parsing errors that can occur.
abstract class GstParseError {
  static const int GST_PARSE_ERROR_SYNTAX = 0;
  static const int GST_PARSE_ERROR_NO_SUCH_ELEMENT = 1;
  static const int GST_PARSE_ERROR_NO_SUCH_PROPERTY = 2;
  static const int GST_PARSE_ERROR_LINK = 3;
  static const int GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY = 4;
  static const int GST_PARSE_ERROR_EMPTY_BIN = 5;
  static const int GST_PARSE_ERROR_EMPTY = 6;
  static const int GST_PARSE_ERROR_DELAYED_LINK = 7;
}

/// GstParseFlags:
/// @GST_PARSE_FLAG_NONE: Do not use any special parsing options.
/// @GST_PARSE_FLAG_FATAL_ERRORS: Always return %NULL when an error occurs
/// (default behaviour is to return partially constructed bins or elements
/// in some cases)
/// @GST_PARSE_FLAG_NO_SINGLE_ELEMENT_BINS: If a bin only has a single element,
/// just return the element.
/// @GST_PARSE_FLAG_PLACE_IN_BIN: If more than one toplevel element is described
/// by the pipeline description string, put them in a #GstBin instead of a
/// #GstPipeline. (Since: 1.10)
///
/// Parsing options.
abstract class GstParseFlags {
  static const int GST_PARSE_FLAG_NONE = 0;
  static const int GST_PARSE_FLAG_FATAL_ERRORS = 1;
  static const int GST_PARSE_FLAG_NO_SINGLE_ELEMENT_BINS = 2;
  static const int GST_PARSE_FLAG_PLACE_IN_BIN = 4;
}

final class _GstParseContext extends ffi.Opaque {}

/// GstParseContext:
///
/// Opaque structure.
typedef GstParseContext = _GstParseContext;

/// GstSearchMode:
/// @GST_SEARCH_MODE_EXACT : Only search for exact matches.
/// @GST_SEARCH_MODE_BEFORE: Search for an exact match or the element just before.
/// @GST_SEARCH_MODE_AFTER : Search for an exact match or the element just after.
///
/// The different search modes.
abstract class GstSearchMode {
  static const int GST_SEARCH_MODE_EXACT = 0;
  static const int GST_SEARCH_MODE_BEFORE = 1;
  static const int GST_SEARCH_MODE_AFTER = 2;
}

/// GstPluginAPIFlags:
/// @GST_PLUGIN_API_FLAG_IGNORE_ENUM_MEMBERS: Ignore enum members when generating
/// the plugins cache. This is useful if the members of the enum are generated
/// dynamically, in order not to expose incorrect documentation to the end user.
///
/// Since: 1.18
abstract class GstPluginAPIFlags {
  static const int GST_PLUGIN_API_FLAG_IGNORE_ENUM_MEMBERS = 1;
}

const int SI_ASYNCNL = -60;

const int SI_DETHREAD = -7;

const int SI_TKILL = -6;

const int SI_SIGIO = -5;

const int SI_ASYNCIO = -4;

const int SI_MESGQ = -3;

const int SI_TIMER = -2;

const int SI_QUEUE = -1;

const int SI_USER = 0;

const int SI_KERNEL = 128;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLADR = 3;

const int ILL_ILLTRP = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int ILL_BADIADDR = 9;

const int FPE_INTDIV = 1;

const int FPE_INTOVF = 2;

const int FPE_FLTDIV = 3;

const int FPE_FLTOVF = 4;

const int FPE_FLTUND = 5;

const int FPE_FLTRES = 6;

const int FPE_FLTINV = 7;

const int FPE_FLTSUB = 8;

const int FPE_FLTUNK = 14;

const int FPE_CONDTRAP = 15;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int SEGV_BNDERR = 3;

const int SEGV_PKUERR = 4;

const int SEGV_ACCADI = 5;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIPERR = 7;

const int SEGV_MTEAERR = 8;

const int SEGV_MTESERR = 9;

const int SEGV_CPERR = 10;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AO = 5;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SIGEV_SIGNAL = 0;

const int SIGEV_NONE = 1;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD_ID = 4;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 2;

const int DT_UNKNOWN = 0;

const int DT_FIFO = 1;

const int DT_CHR = 2;

const int DT_DIR = 4;

const int DT_BLK = 6;

const int DT_REG = 8;

const int DT_LNK = 10;

const int DT_SOCK = 12;

const int DT_WHT = 14;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int NULL = 0;

const int g_macro__has_attribute = 0;

const int g_macro__has_feature = 0;

const int g_macro__has_builtin = 0;

const int g_macro__has_extension = 0;

const String G_GNUC_FUNCTION = '';

const String G_GNUC_PRETTY_FUNCTION = '';

const int G_ANALYZER_ANALYZING = 0;

const String G_STRLOC = '/tmp/YXQSOM/temp_for_macros.hpp:46';

const int FALSE = 0;

const int TRUE = 1;

const int G_HAVE_GNUC_VISIBILITY = 1;

const int _LIBC_LIMITS_H_ = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 64;

const int DECIMAL_DIG = 21;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 18;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -16381;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -4931;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 16384;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 4932;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = double.infinity;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 1.0842021724855044e-19;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 0.0;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 0.0;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 21;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const double G_MINFLOAT = 1.1754943508222875e-38;

const double G_MAXFLOAT = 3.4028234663852886e+38;

const double G_MINDOUBLE = 2.2250738585072014e-308;

const double G_MAXDOUBLE = 1.7976931348623157e+308;

const int G_MINSHORT = -32768;

const int G_MAXSHORT = 32767;

const int G_MAXUSHORT = 65535;

const int G_MININT = -2147483648;

const int G_MAXINT = 2147483647;

const int G_MAXUINT = 4294967295;

const int G_MINLONG = -9223372036854775808;

const int G_MAXLONG = 9223372036854775807;

const int G_MAXULONG = -1;

const String G_GINT16_MODIFIER = 'h';

const String G_GINT16_FORMAT = 'hi';

const String G_GUINT16_FORMAT = 'hu';

const String G_GINT32_MODIFIER = '';

const String G_GINT32_FORMAT = 'i';

const String G_GUINT32_FORMAT = 'u';

const int G_HAVE_GINT64 = 1;

const String G_GINT64_MODIFIER = 'l';

const String G_GINT64_FORMAT = 'li';

const String G_GUINT64_FORMAT = 'lu';

const int GLIB_SIZEOF_VOID_P = 8;

const int GLIB_SIZEOF_LONG = 8;

const int GLIB_SIZEOF_SIZE_T = 8;

const int GLIB_SIZEOF_SSIZE_T = 8;

const String G_GSIZE_MODIFIER = 'l';

const String G_GSSIZE_MODIFIER = 'l';

const String G_GSIZE_FORMAT = 'lu';

const String G_GSSIZE_FORMAT = 'li';

const int G_MAXSIZE = -1;

const int G_MINSSIZE = -9223372036854775808;

const int G_MAXSSIZE = 9223372036854775807;

const int G_MINOFFSET = -9223372036854775808;

const int G_MAXOFFSET = 9223372036854775807;

const String G_GOFFSET_MODIFIER = 'l';

const String G_GOFFSET_FORMAT = 'li';

const String G_POLLFD_FORMAT = '%d';

const String G_GINTPTR_MODIFIER = 'l';

const String G_GINTPTR_FORMAT = 'li';

const String G_GUINTPTR_FORMAT = 'lu';

const int GLIB_MAJOR_VERSION = 2;

const int GLIB_MINOR_VERSION = 80;

const int GLIB_MICRO_VERSION = 3;

const int G_VA_COPY_AS_ARRAY = 1;

const int G_HAVE_ISO_VARARGS = 1;

const int G_HAVE_GROWING_STACK = 0;

const int G_HAVE_GNUC_VARARGS = 1;

const int G_BYTE_ORDER = 1234;

const String G_MODULE_SUFFIX = 'so';

const String G_PID_FORMAT = 'i';

const int GLIB_SYSDEF_AF_UNIX = 1;

const int GLIB_SYSDEF_AF_INET = 2;

const int GLIB_SYSDEF_AF_INET6 = 10;

const int GLIB_SYSDEF_MSG_OOB = 1;

const int GLIB_SYSDEF_MSG_PEEK = 2;

const int GLIB_SYSDEF_MSG_DONTROUTE = 4;

const int G_DIR_SEPARATOR = 47;

const String G_DIR_SEPARATOR_S = '/';

const int G_SEARCHPATH_SEPARATOR = 58;

const String G_SEARCHPATH_SEPARATOR_S = ':';

const int GLIB_VERSION_2_2 = 131584;

const int GLIB_VERSION_2_4 = 132096;

const int GLIB_VERSION_2_6 = 132608;

const int GLIB_VERSION_2_8 = 133120;

const int GLIB_VERSION_2_10 = 133632;

const int GLIB_VERSION_2_12 = 134144;

const int GLIB_VERSION_2_14 = 134656;

const int GLIB_VERSION_2_16 = 135168;

const int GLIB_VERSION_2_18 = 135680;

const int GLIB_VERSION_2_20 = 136192;

const int GLIB_VERSION_2_22 = 136704;

const int GLIB_VERSION_2_24 = 137216;

const int GLIB_VERSION_2_26 = 137728;

const int GLIB_VERSION_2_28 = 138240;

const int GLIB_VERSION_2_30 = 138752;

const int GLIB_VERSION_2_32 = 139264;

const int GLIB_VERSION_2_34 = 139776;

const int GLIB_VERSION_2_36 = 140288;

const int GLIB_VERSION_2_38 = 140800;

const int GLIB_VERSION_2_40 = 141312;

const int GLIB_VERSION_2_42 = 141824;

const int GLIB_VERSION_2_44 = 142336;

const int GLIB_VERSION_2_46 = 142848;

const int GLIB_VERSION_2_48 = 143360;

const int GLIB_VERSION_2_50 = 143872;

const int GLIB_VERSION_2_52 = 144384;

const int GLIB_VERSION_2_54 = 144896;

const int GLIB_VERSION_2_56 = 145408;

const int GLIB_VERSION_2_58 = 145920;

const int GLIB_VERSION_2_60 = 146432;

const int GLIB_VERSION_2_62 = 146944;

const int GLIB_VERSION_2_64 = 147456;

const int GLIB_VERSION_2_66 = 147968;

const int GLIB_VERSION_2_68 = 148480;

const int GLIB_VERSION_2_70 = 148992;

const int GLIB_VERSION_2_72 = 149504;

const int GLIB_VERSION_2_74 = 150016;

const int GLIB_VERSION_2_76 = 150528;

const int GLIB_VERSION_2_78 = 151040;

const int GLIB_VERSION_2_80 = 151552;

const int GLIB_VERSION_CUR_STABLE = 151552;

const int GLIB_VERSION_PREV_STABLE = 151040;

const int GLIB_VERSION_MIN_REQUIRED = 151552;

const int GLIB_VERSION_MAX_ALLOWED = 151552;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __clock_t_defined = 1;

const int __time_t_defined = 1;

const int __struct_tm_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int __clockid_t_defined = 1;

const int __timer_t_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int G_MININT8 = -128;

const int G_MAXINT8 = 127;

const int G_MAXUINT8 = 255;

const int G_MININT16 = -32768;

const int G_MAXINT16 = 32767;

const int G_MAXUINT16 = 65535;

const int G_MININT32 = -2147483648;

const int G_MAXINT32 = 2147483647;

const int G_MAXUINT32 = 4294967295;

const int G_MININT64 = -9223372036854775808;

const int G_MAXINT64 = 9223372036854775807;

const int G_MAXUINT64 = -1;

const double G_E = 2.718281828459045;

const double G_LN2 = 0.6931471805599453;

const double G_LN10 = 2.302585092994046;

const double G_PI = 3.141592653589793;

const double G_PI_2 = 1.5707963267948966;

const double G_PI_4 = 0.7853981633974483;

const double G_SQRT2 = 1.4142135623730951;

const int G_LITTLE_ENDIAN = 1234;

const int G_BIG_ENDIAN = 4321;

const int G_PDP_ENDIAN = 3412;

const int G_IEEE754_FLOAT_BIAS = 127;

const int G_IEEE754_DOUBLE_BIAS = 1023;

const double G_LOG_2_BASE_10 = 0.3010299956639812;

const int _STRING_H = 1;

const int _STRINGS_H = 1;

const String G_OS_INFO_KEY_NAME = 'NAME';

const String G_OS_INFO_KEY_PRETTY_NAME = 'PRETTY_NAME';

const String G_OS_INFO_KEY_VERSION = 'VERSION';

const String G_OS_INFO_KEY_VERSION_CODENAME = 'VERSION_CODENAME';

const String G_OS_INFO_KEY_VERSION_ID = 'VERSION_ID';

const String G_OS_INFO_KEY_ID = 'ID';

const String G_OS_INFO_KEY_HOME_URL = 'HOME_URL';

const String G_OS_INFO_KEY_DOCUMENTATION_URL = 'DOCUMENTATION_URL';

const String G_OS_INFO_KEY_SUPPORT_URL = 'SUPPORT_URL';

const String G_OS_INFO_KEY_BUG_REPORT_URL = 'BUG_REPORT_URL';

const String G_OS_INFO_KEY_PRIVACY_POLICY_URL = 'PRIVACY_POLICY_URL';

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _BITS_SIGNUM_GENERIC_H = 1;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGABRT = 6;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGHUP = 1;

const int SIGQUIT = 3;

const int SIGTRAP = 5;

const int SIGKILL = 9;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGCLD = 17;

const int _BITS_SIGNUM_ARCH_H = 1;

const int SIGSTKFLT = 16;

const int SIGPWR = 30;

const int SIGBUS = 7;

const int SIGSYS = 31;

const int SIGURG = 23;

const int SIGSTOP = 19;

const int SIGTSTP = 20;

const int SIGCONT = 18;

const int SIGCHLD = 17;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGPOLL = 29;

const int SIGXFSZ = 25;

const int SIGXCPU = 24;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGWINCH = 28;

const int __SIGRTMIN = 32;

const int __SIGRTMAX = 64;

const int _NSIG = 65;

const int __sig_atomic_t_defined = 1;

const int __siginfo_t_defined = 1;

const int __SI_MAX_SIZE = 128;

const int __SI_PAD_SIZE = 28;

const int _BITS_SIGINFO_ARCH_H = 1;

const int __SI_ERRNO_THEN_CODE = 1;

const int __SI_HAVE_SIGSYS = 1;

const int _BITS_SIGINFO_CONSTS_H = 1;

const int __SI_ASYNCIO_AFTER_SIGIO = 1;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD1 = -7;

const int SI_TKILL1 = -6;

const int SI_SIGIO1 = -5;

const int SI_ASYNCIO1 = -4;

const int SI_MESGQ1 = -3;

const int SI_TIMER1 = -2;

const int SI_QUEUE1 = -1;

const int SI_USER1 = 0;

const int SI_KERNEL1 = 128;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLADR1 = 3;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG1 = 6;

const int ILL_COPROC1 = 7;

const int ILL_BADSTK1 = 8;

const int ILL_BADIADDR1 = 9;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF1 = 2;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTUND1 = 5;

const int FPE_FLTRES1 = 6;

const int FPE_FLTINV1 = 7;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUNK1 = 14;

const int FPE_CONDTRAP1 = 15;

const int SEGV_MAPERR1 = 1;

const int SEGV_ACCERR1 = 2;

const int SEGV_BNDERR1 = 3;

const int SEGV_PKUERR1 = 4;

const int SEGV_ACCADI1 = 5;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR1 = 7;

const int SEGV_MTEAERR1 = 8;

const int SEGV_MTESERR1 = 9;

const int SEGV_CPERR1 = 10;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR1 = 2;

const int BUS_OBJERR1 = 3;

const int BUS_MCEERR_AR1 = 4;

const int BUS_MCEERR_AO1 = 5;

const int CLD_EXITED1 = 1;

const int CLD_KILLED1 = 2;

const int CLD_DUMPED1 = 3;

const int CLD_TRAPPED1 = 4;

const int CLD_STOPPED1 = 5;

const int CLD_CONTINUED1 = 6;

const int POLL_IN1 = 1;

const int POLL_OUT1 = 2;

const int POLL_MSG1 = 3;

const int POLL_ERR1 = 4;

const int POLL_PRI1 = 5;

const int POLL_HUP1 = 6;

const int __sigevent_t_defined = 1;

const int __SIGEV_MAX_SIZE = 64;

const int __SIGEV_PAD_SIZE = 12;

const int _BITS_SIGEVENT_CONSTS_H = 1;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_NONE1 = 1;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID1 = 4;

const int NSIG = 65;

const int _BITS_SIGACTION_H = 1;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_SIGINFO = 4;

const int SA_ONSTACK = 134217728;

const int SA_RESTART = 268435456;

const int SA_NODEFER = 1073741824;

const int SA_RESETHAND = 2147483648;

const int SA_INTERRUPT = 536870912;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_STACK = 134217728;

const int SIG_BLOCK = 0;

const int SIG_UNBLOCK = 1;

const int SIG_SETMASK = 2;

const int _BITS_SIGCONTEXT_H = 1;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int __stack_t_defined = 1;

const int _SYS_UCONTEXT_H = 1;

const int __NGREG = 23;

const int NGREG = 23;

const int _BITS_SIGSTACK_H = 1;

const int _BITS_SS_FLAGS_H = 1;

const int SS_ONSTACK1 = 1;

const int SS_DISABLE1 = 2;

const int __sigstack_defined = 1;

const int _BITS_SIGTHREAD_H = 1;

const int G_TIME_SPAN_DAY = 86400000000;

const int G_TIME_SPAN_HOUR = 3600000000;

const int G_TIME_SPAN_MINUTE = 60000000;

const int G_TIME_SPAN_SECOND = 1000000;

const int G_TIME_SPAN_MILLISECOND = 1000;

const int G_DATALIST_FLAGS_MASK = 3;

const int G_DATE_BAD_JULIAN = 0;

const int G_DATE_BAD_DAY = 0;

const int G_DATE_BAD_YEAR = 0;

const int _DIRENT_H = 1;

const int _DIRENT_MATCHES_DIRENT64 = 1;

const int DT_UNKNOWN1 = 0;

const int DT_FIFO1 = 1;

const int DT_CHR1 = 2;

const int DT_DIR1 = 4;

const int DT_BLK1 = 6;

const int DT_REG1 = 8;

const int DT_LNK1 = 10;

const int DT_SOCK1 = 12;

const int DT_WHT1 = 14;

const int MAXNAMLEN = 255;

const int G_MEM_ALIGN = 8;

const int G_HOOK_FLAG_USER_SHIFT = 4;

const int G_PRIORITY_HIGH = -100;

const int G_PRIORITY_DEFAULT = 0;

const int G_PRIORITY_HIGH_IDLE = 100;

const int G_PRIORITY_DEFAULT_IDLE = 200;

const int G_PRIORITY_LOW = 300;

const int G_SOURCE_REMOVE = 0;

const int G_SOURCE_CONTINUE = 1;

const int G_UNICODE_COMBINING_MARK = 10;

const int G_UNICHAR_MAX_DECOMPOSITION_LENGTH = 18;

const String G_STR_DELIMITERS = '_-|> <.';

const int G_ASCII_DTOSTR_BUF_SIZE = 39;

const String G_KEY_FILE_DESKTOP_GROUP = 'Desktop Entry';

const String G_KEY_FILE_DESKTOP_KEY_TYPE = 'Type';

const String G_KEY_FILE_DESKTOP_KEY_VERSION = 'Version';

const String G_KEY_FILE_DESKTOP_KEY_NAME = 'Name';

const String G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME = 'GenericName';

const String G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY = 'NoDisplay';

const String G_KEY_FILE_DESKTOP_KEY_COMMENT = 'Comment';

const String G_KEY_FILE_DESKTOP_KEY_ICON = 'Icon';

const String G_KEY_FILE_DESKTOP_KEY_HIDDEN = 'Hidden';

const String G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = 'OnlyShowIn';

const String G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = 'NotShowIn';

const String G_KEY_FILE_DESKTOP_KEY_TRY_EXEC = 'TryExec';

const String G_KEY_FILE_DESKTOP_KEY_EXEC = 'Exec';

const String G_KEY_FILE_DESKTOP_KEY_PATH = 'Path';

const String G_KEY_FILE_DESKTOP_KEY_TERMINAL = 'Terminal';

const String G_KEY_FILE_DESKTOP_KEY_MIME_TYPE = 'MimeType';

const String G_KEY_FILE_DESKTOP_KEY_CATEGORIES = 'Categories';

const String G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = 'StartupNotify';

const String G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = 'StartupWMClass';

const String G_KEY_FILE_DESKTOP_KEY_URL = 'URL';

const String G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE = 'DBusActivatable';

const String G_KEY_FILE_DESKTOP_KEY_ACTIONS = 'Actions';

const String G_KEY_FILE_DESKTOP_TYPE_APPLICATION = 'Application';

const String G_KEY_FILE_DESKTOP_TYPE_LINK = 'Link';

const String G_KEY_FILE_DESKTOP_TYPE_DIRECTORY = 'Directory';

const int G_LOG_LEVEL_USER_SHIFT = 8;

const int G_LOG_FATAL_MASK = 5;

const String G_OPTION_REMAINING = '';

const int G_REF_COUNT_INIT = -1;

const int G_ATOMIC_REF_COUNT_INIT = 1;

const String G_CSET_A_2_Z = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

const String G_CSET_a_2_z = 'abcdefghijklmnopqrstuvwxyz';

const String G_CSET_DIGITS = '0123456789';

const String G_CSET_LATINC =
    '\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE';

const String G_CSET_LATINS =
    '\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF';

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const String G_TEST_OPTION_ISOLATE_DIRS = 'isolate_dirs';

const int G_USEC_PER_SEC = 1000000;

const String G_URI_RESERVED_CHARS_GENERIC_DELIMITERS = ':/?#[]@';

const String G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = '!\$&\'()*+,;=';

const String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT = '!\$&\'()*+,;=:@';

const String G_URI_RESERVED_CHARS_ALLOWED_IN_PATH = '!\$&\'()*+,;=:@/';

const String G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO = '!\$&\'()*+,;=:';

const int G_ALLOC_ONLY = 1;

const int G_ALLOC_AND_FREE = 2;

const int G_ALLOCATOR_LIST = 1;

const int G_ALLOCATOR_SLIST = 2;

const int G_ALLOCATOR_NODE = 3;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _BITS_SETJMP_H = 1;

const int __jmp_buf_tag_defined = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int G_TYPE_FUNDAMENTAL_SHIFT = 2;

const int G_TYPE_FUNDAMENTAL_MAX = 1020;

const int G_TYPE_INVALID = 0;

const int G_TYPE_NONE = 4;

const int G_TYPE_INTERFACE = 8;

const int G_TYPE_CHAR = 12;

const int G_TYPE_UCHAR = 16;

const int G_TYPE_BOOLEAN = 20;

const int G_TYPE_INT = 24;

const int G_TYPE_UINT = 28;

const int G_TYPE_LONG = 32;

const int G_TYPE_ULONG = 36;

const int G_TYPE_INT64 = 40;

const int G_TYPE_UINT64 = 44;

const int G_TYPE_ENUM = 48;

const int G_TYPE_FLAGS = 52;

const int G_TYPE_FLOAT = 56;

const int G_TYPE_DOUBLE = 60;

const int G_TYPE_STRING = 64;

const int G_TYPE_POINTER = 68;

const int G_TYPE_BOXED = 72;

const int G_TYPE_PARAM = 76;

const int G_TYPE_OBJECT = 80;

const int G_TYPE_VARIANT = 84;

const int G_TYPE_RESERVED_GLIB_FIRST = 22;

const int G_TYPE_RESERVED_GLIB_LAST = 31;

const int G_TYPE_RESERVED_BSE_FIRST = 32;

const int G_TYPE_RESERVED_BSE_LAST = 48;

const int G_TYPE_RESERVED_USER_FIRST = 49;

const int G_TYPE_FLAG_RESERVED_ID_BIT = 1;

const int G_VALUE_NOCOPY_CONTENTS = 134217728;

const int G_VALUE_INTERNED_STRING = 268435456;

const int G_PARAM_STATIC_STRINGS = 224;

const int G_PARAM_MASK = 255;

const int G_PARAM_USER_SHIFT = 8;

const int G_SIGNAL_FLAGS_MASK = 511;

const int G_SIGNAL_MATCH_MASK = 63;

const int G_SIGNAL_TYPE_STATIC_SCOPE = 1;

const int GST_PADDING = 4;

const int GST_PADDING_LARGE = 20;

const int GST_DISABLE_CAST_CHECKS = 1;

const int GST_DISABLE_GLIB_ASSERTS = 0;

const int GST_DISABLE_GLIB_CHECKS = 0;

const int GST_HAVE_UNALIGNED_ACCESS = 1;

const int GST_VERSION_MAJOR = 1;

const int GST_VERSION_MINOR = 24;

const int GST_VERSION_MICRO = 5;

const int GST_VERSION_NANO = 0;

const int GST_TYPE_CLOCK_TIME = 44;

const int GST_CLOCK_TIME_NONE = -1;

const int GST_CLOCK_STIME_NONE = -9223372036854775808;

const int GST_SECOND = 1000000000;

const int GST_MSECOND = 1000000;

const int GST_USECOND = 1000;

const int GST_NSECOND = 1;

const String GST_TIME_FORMAT = 'u:%02u:%02u.%09u';

const String GST_STIME_FORMAT = 'c%u:%02u:%02u.%09u';

const int GST_LOCK_FLAG_READWRITE = 3;

const int GST_MAP_READWRITE = 3;

const String GST_ALLOCATOR_SYSMEM = 'SystemMemory';

const String GST_CAPS_FEATURE_MEMORY_SYSTEM_MEMORY = 'memory:SystemMemory';

const String GST_META_TAG_MEMORY_STR = 'memory';

const String GST_META_TAG_MEMORY_REFERENCE_STR = 'memory-reference';

const int GST_BUFFER_OFFSET_NONE = -1;

const int GST_BUFFER_COPY_METADATA = 7;

const int GST_BUFFER_COPY_ALL = 15;

const int GST_EVENT_TYPE_BOTH = 3;

const int GST_EVENT_NUM_SHIFT = 8;

const int GST_FORMAT_PERCENT_MAX = 1000000;

const int GST_FORMAT_PERCENT_SCALE = 10000;

const int GST_SEGMENT_INSTANT_FLAGS = 912;

const String GST_TAG_TITLE = 'title';

const String GST_TAG_TITLE_SORTNAME = 'title-sortname';

const String GST_TAG_ARTIST = 'artist';

const String GST_TAG_ARTIST_SORTNAME = 'artist-sortname';

const String GST_TAG_ALBUM = 'album';

const String GST_TAG_ALBUM_SORTNAME = 'album-sortname';

const String GST_TAG_ALBUM_ARTIST = 'album-artist';

const String GST_TAG_ALBUM_ARTIST_SORTNAME = 'album-artist-sortname';

const String GST_TAG_COMPOSER = 'composer';

const String GST_TAG_CONDUCTOR = 'conductor';

const String GST_TAG_DATE = 'date';

const String GST_TAG_DATE_TIME = 'datetime';

const String GST_TAG_GENRE = 'genre';

const String GST_TAG_COMMENT = 'comment';

const String GST_TAG_EXTENDED_COMMENT = 'extended-comment';

const String GST_TAG_TRACK_NUMBER = 'track-number';

const String GST_TAG_TRACK_COUNT = 'track-count';

const String GST_TAG_ALBUM_VOLUME_NUMBER = 'album-disc-number';

const String GST_TAG_ALBUM_VOLUME_COUNT = 'album-disc-count';

const String GST_TAG_LOCATION = 'location';

const String GST_TAG_HOMEPAGE = 'homepage';

const String GST_TAG_DESCRIPTION = 'description';

const String GST_TAG_VERSION = 'version';

const String GST_TAG_ISRC = 'isrc';

const String GST_TAG_ORGANIZATION = 'organization';

const String GST_TAG_COPYRIGHT = 'copyright';

const String GST_TAG_COPYRIGHT_URI = 'copyright-uri';

const String GST_TAG_ENCODED_BY = 'encoded-by';

const String GST_TAG_CONTACT = 'contact';

const String GST_TAG_LICENSE = 'license';

const String GST_TAG_LICENSE_URI = 'license-uri';

const String GST_TAG_PERFORMER = 'performer';

const String GST_TAG_DURATION = 'duration';

const String GST_TAG_CODEC = 'codec';

const String GST_TAG_VIDEO_CODEC = 'video-codec';

const String GST_TAG_AUDIO_CODEC = 'audio-codec';

const String GST_TAG_SUBTITLE_CODEC = 'subtitle-codec';

const String GST_TAG_CONTAINER_FORMAT = 'container-format';

const String GST_TAG_BITRATE = 'bitrate';

const String GST_TAG_NOMINAL_BITRATE = 'nominal-bitrate';

const String GST_TAG_MINIMUM_BITRATE = 'minimum-bitrate';

const String GST_TAG_MAXIMUM_BITRATE = 'maximum-bitrate';

const String GST_TAG_SERIAL = 'serial';

const String GST_TAG_ENCODER = 'encoder';

const String GST_TAG_ENCODER_VERSION = 'encoder-version';

const String GST_TAG_TRACK_GAIN = 'replaygain-track-gain';

const String GST_TAG_TRACK_PEAK = 'replaygain-track-peak';

const String GST_TAG_ALBUM_GAIN = 'replaygain-album-gain';

const String GST_TAG_ALBUM_PEAK = 'replaygain-album-peak';

const String GST_TAG_REFERENCE_LEVEL = 'replaygain-reference-level';

const String GST_TAG_LANGUAGE_CODE = 'language-code';

const String GST_TAG_LANGUAGE_NAME = 'language-name';

const String GST_TAG_IMAGE = 'image';

const String GST_TAG_PREVIEW_IMAGE = 'preview-image';

const String GST_TAG_ATTACHMENT = 'attachment';

const String GST_TAG_BEATS_PER_MINUTE = 'beats-per-minute';

const String GST_TAG_KEYWORDS = 'keywords';

const String GST_TAG_GEO_LOCATION_NAME = 'geo-location-name';

const String GST_TAG_GEO_LOCATION_LATITUDE = 'geo-location-latitude';

const String GST_TAG_GEO_LOCATION_LONGITUDE = 'geo-location-longitude';

const String GST_TAG_GEO_LOCATION_ELEVATION = 'geo-location-elevation';

const String GST_TAG_GEO_LOCATION_COUNTRY = 'geo-location-country';

const String GST_TAG_GEO_LOCATION_CITY = 'geo-location-city';

const String GST_TAG_GEO_LOCATION_SUBLOCATION = 'geo-location-sublocation';

const String GST_TAG_GEO_LOCATION_HORIZONTAL_ERROR =
    'geo-location-horizontal-error';

const String GST_TAG_GEO_LOCATION_MOVEMENT_SPEED =
    'geo-location-movement-speed';

const String GST_TAG_GEO_LOCATION_MOVEMENT_DIRECTION =
    'geo-location-movement-direction';

const String GST_TAG_GEO_LOCATION_CAPTURE_DIRECTION =
    'geo-location-capture-direction';

const String GST_TAG_SHOW_NAME = 'show-name';

const String GST_TAG_SHOW_SORTNAME = 'show-sortname';

const String GST_TAG_SHOW_EPISODE_NUMBER = 'show-episode-number';

const String GST_TAG_SHOW_SEASON_NUMBER = 'show-season-number';

const String GST_TAG_LYRICS = 'lyrics';

const String GST_TAG_COMPOSER_SORTNAME = 'composer-sortname';

const String GST_TAG_GROUPING = 'grouping';

const String GST_TAG_USER_RATING = 'user-rating';

const String GST_TAG_DEVICE_MANUFACTURER = 'device-manufacturer';

const String GST_TAG_DEVICE_MODEL = 'device-model';

const String GST_TAG_APPLICATION_NAME = 'application-name';

const String GST_TAG_APPLICATION_DATA = 'application-data';

const String GST_TAG_IMAGE_ORIENTATION = 'image-orientation';

const String GST_TAG_PUBLISHER = 'publisher';

const String GST_TAG_INTERPRETED_BY = 'interpreted-by';

const String GST_TAG_MIDI_BASE_NOTE = 'midi-base-note';

const String GST_TAG_PRIVATE_DATA = 'private-data';

const String GST_TAG_CONTAINER_SPECIFIC_TRACK_ID =
    'container-specific-track-id';

const int GST_QUERY_TYPE_BOTH = 3;

const int GST_QUERY_NUM_SHIFT = 8;

const int GST_TOC_REPEAT_COUNT_INFINITE = -1;

const int GST_CAN_INLINE = 1;

const int __GST_PACKAGE_RELEASE_DATETIME = 0;

const String GST_LICENSE_UNKNOWN = 'unknown';

const int GST_URI_NO_PORT = 0;

const int GST_ELEMENT_FACTORY_TYPE_DECODER = 1;

const int GST_ELEMENT_FACTORY_TYPE_ENCODER = 2;

const int GST_ELEMENT_FACTORY_TYPE_SINK = 4;

const int GST_ELEMENT_FACTORY_TYPE_SRC = 8;

const int GST_ELEMENT_FACTORY_TYPE_MUXER = 16;

const int GST_ELEMENT_FACTORY_TYPE_DEMUXER = 32;

const int GST_ELEMENT_FACTORY_TYPE_PARSER = 64;

const int GST_ELEMENT_FACTORY_TYPE_PAYLOADER = 128;

const int GST_ELEMENT_FACTORY_TYPE_DEPAYLOADER = 256;

const int GST_ELEMENT_FACTORY_TYPE_FORMATTER = 512;

const int GST_ELEMENT_FACTORY_TYPE_DECRYPTOR = 1024;

const int GST_ELEMENT_FACTORY_TYPE_ENCRYPTOR = 2048;

const int GST_ELEMENT_FACTORY_TYPE_HARDWARE = 4096;

const int GST_ELEMENT_FACTORY_TYPE_TIMESTAMPER = 8192;

const int GST_ELEMENT_FACTORY_TYPE_MAX_ELEMENTS = 281474976710656;

const int GST_ELEMENT_FACTORY_TYPE_MEDIA_VIDEO = 562949953421312;

const int GST_ELEMENT_FACTORY_TYPE_MEDIA_AUDIO = 1125899906842624;

const int GST_ELEMENT_FACTORY_TYPE_MEDIA_IMAGE = 2251799813685248;

const int GST_ELEMENT_FACTORY_TYPE_MEDIA_SUBTITLE = 4503599627370496;

const int GST_ELEMENT_FACTORY_TYPE_MEDIA_METADATA = 9007199254740992;

const int GST_ELEMENT_FACTORY_TYPE_ANY = 562949953421311;

const int GST_ELEMENT_FACTORY_TYPE_MEDIA_ANY = -281474976710656;

const int GST_ELEMENT_FACTORY_TYPE_VIDEO_ENCODER = 2814749767106562;

const int GST_ELEMENT_FACTORY_TYPE_AUDIO_ENCODER = 1125899906842626;

const int GST_ELEMENT_FACTORY_TYPE_AUDIOVIDEO_SINKS = 3940649673949188;

const int GST_ELEMENT_FACTORY_TYPE_DECODABLE = 1377;

const String GST_ELEMENT_FACTORY_KLASS_DECODER = 'Decoder';

const String GST_ELEMENT_FACTORY_KLASS_ENCODER = 'Encoder';

const String GST_ELEMENT_FACTORY_KLASS_SINK = 'Sink';

const String GST_ELEMENT_FACTORY_KLASS_SRC = 'Source';

const String GST_ELEMENT_FACTORY_KLASS_MUXER = 'Muxer';

const String GST_ELEMENT_FACTORY_KLASS_DEMUXER = 'Demuxer';

const String GST_ELEMENT_FACTORY_KLASS_PARSER = 'Parser';

const String GST_ELEMENT_FACTORY_KLASS_PAYLOADER = 'Payloader';

const String GST_ELEMENT_FACTORY_KLASS_DEPAYLOADER = 'Depayloader';

const String GST_ELEMENT_FACTORY_KLASS_FORMATTER = 'Formatter';

const String GST_ELEMENT_FACTORY_KLASS_DECRYPTOR = 'Decryptor';

const String GST_ELEMENT_FACTORY_KLASS_ENCRYPTOR = 'Encryptor';

const String GST_ELEMENT_FACTORY_KLASS_MEDIA_VIDEO = 'Video';

const String GST_ELEMENT_FACTORY_KLASS_MEDIA_AUDIO = 'Audio';

const String GST_ELEMENT_FACTORY_KLASS_MEDIA_IMAGE = 'Image';

const String GST_ELEMENT_FACTORY_KLASS_MEDIA_SUBTITLE = 'Subtitle';

const String GST_ELEMENT_FACTORY_KLASS_MEDIA_METADATA = 'Metadata';

const String GST_ELEMENT_FACTORY_KLASS_HARDWARE = 'Hardware';

const String GST_ELEMENT_METADATA_LONGNAME = 'long-name';

const String GST_ELEMENT_METADATA_KLASS = 'klass';

const String GST_ELEMENT_METADATA_DESCRIPTION = 'description';

const String GST_ELEMENT_METADATA_AUTHOR = 'author';

const String GST_ELEMENT_METADATA_DOC_URI = 'doc-uri';

const String GST_ELEMENT_METADATA_ICON_NAME = 'icon-name';

const int GST_LEVEL_DEFAULT = 0;

const int GST_LEVEL_MAX = 10;

const int GST_DEBUG_FG_MASK = 15;

const int GST_DEBUG_BG_MASK = 240;

const int GST_DEBUG_FORMAT_MASK = 65280;

const String GST_PTR_FORMAT = 'p\x07A';

const String GST_SEGMENT_FORMAT = 'p\x07B';

const String GST_TIMEP_FORMAT = 'p\x07T';

const String GST_STIMEP_FORMAT = 'p\x07S';

const String GST_FOURCC_FORMAT = 'c%c%c%c';

const int GST_FLAG_SET_MASK_EXACT = 4294967295;

const int GST_VALUE_LESS_THAN = -1;

const int GST_VALUE_EQUAL = 0;

const int GST_VALUE_GREATER_THAN = 1;

const int GST_VALUE_UNORDERED = 2;

const int GST_PARAM_CONTROLLABLE = 512;

const int GST_PARAM_MUTABLE_READY = 1024;

const int GST_PARAM_MUTABLE_PAUSED = 2048;

const int GST_PARAM_MUTABLE_PLAYING = 4096;

const int GST_PARAM_DOC_SHOW_DEFAULT = 8192;

const int GST_PARAM_CONDITIONALLY_AVAILABLE = 16384;

const int GST_PARAM_USER_SHIFT = 65536;

const String GST_PROTECTION_SYSTEM_ID_CAPS_FIELD = 'protection-system';

const String GST_PROTECTION_UNSPECIFIED_SYSTEM_ID = 'unspecified-system-id';

const int GST_SEQNUM_INVALID = 0;

const int GST_GROUP_ID_INVALID = 0;

const int GST_MESSAGE_DURATION = 262144;
